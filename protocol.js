var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p)) d[p] = b[p];

    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
const ByteArray = require('bytearray-node');
var Protocol;
(function(Protocol) {
    var Binary64 = (function() {
        function Binary64(low, high) {
            if (low === void 0) {
                low = 0;
            }
            if (high === void 0) {
                high = 0;
            }
            this.high = high;
            this.low = low;
        }
        Binary64.prototype.div = function(n) {
            var modHigh = 0;
            modHigh = (this.high % n);
            var mod = (((this.low % n) + (modHigh * 6)) % n);
            this.high = (this.high / n);
            var newLow = (((modHigh * 4294967296) + this.low) / n);
            this.high = (this.high + Number((newLow / 4294967296)));
            this.low = newLow;
            return mod;
        };
        Binary64.prototype.mul = function(n) {
            var newLow = (Number(this.low) * n);
            this.high = (this.high * n);
            this.high = (this.high + Number((newLow / 4294967296)));
            this.low = (this.low * n);
        };
        Binary64.prototype.add = function(n) {
            var newLow = (Number(this.low) + n);
            this.high = (this.high + Number((newLow / 4294967296)));
            this.low = newLow;
        };
        Binary64.prototype.bitwiseNot = function() {
            this.low = ~(this.low);
            this.high = ~(this.high);
        };
        Binary64.CHAR_CODE_0 = '0'.charCodeAt(0);
        Binary64.CHAR_CODE_9 = '9'.charCodeAt(0);
        Binary64.CHAR_CODE_A = 'a'.charCodeAt(0);
        Binary64.CHAR_CODE_Z = 'z'.charCodeAt(0);
        return Binary64;
    })();
    Protocol.Binary64 = Binary64;
    var BooleanByteWrapper = (function() {
        function BooleanByteWrapper() {}
        BooleanByteWrapper.setFlag = function(param1, param2, param3) {
            switch (param2) {
                case 0:
                    if (param3) {
                        param1 = param1 | 1;
                    } else {
                        param1 = param1 & 255 - 1;
                    }
                    break;
                case 1:
                    if (param3) {
                        param1 = param1 | 2;
                    } else {
                        param1 = param1 & 255 - 2;
                    }
                    break;
                case 2:
                    if (param3) {
                        param1 = param1 | 4;
                    } else {
                        param1 = param1 & 255 - 4;
                    }
                    break;
                case 3:
                    if (param3) {
                        param1 = param1 | 8;
                    } else {
                        param1 = param1 & 255 - 8;
                    }
                    break;
                case 4:
                    if (param3) {
                        param1 = param1 | 16;
                    } else {
                        param1 = param1 & 255 - 16;
                    }
                    break;
                case 5:
                    if (param3) {
                        param1 = param1 | 32;
                    } else {
                        param1 = param1 & 255 - 32;
                    }
                    break;
                case 6:
                    if (param3) {
                        param1 = param1 | 64;
                    } else {
                        param1 = param1 & 255 - 64;
                    }
                    break;
                case 7:
                    if (param3) {
                        param1 = param1 | 128;
                    } else {
                        param1 = param1 & 255 - 128;
                    }
                    break;
                default:
                    throw new Error('Bytebox overflow.');
            }
            return param1;
        };
        BooleanByteWrapper.getFlag = function(param1, param2) {
            switch (param2) {
                case 0:
                    return !((param1 & 1) === 0);
                case 1:
                    return !((param1 & 2) === 0);
                case 2:
                    return !((param1 & 4) === 0);
                case 3:
                    return !((param1 & 8) === 0);
                case 4:
                    return !((param1 & 16) === 0);
                case 5:
                    return !((param1 & 32) === 0);
                case 6:
                    return !((param1 & 64) === 0);
                case 7:
                    return !((param1 & 128) === 0);
                default:
                    throw new Error('Bytebox overflow.');
            }
        };
        return BooleanByteWrapper;
    })();
    Protocol.BooleanByteWrapper = BooleanByteWrapper;
    var BooleanByteWrapper = (function() {
        function BooleanByteWrapper() {}
        BooleanByteWrapper.setFlag = function(param1, param2, param3) {
            switch (param2) {
                case 0:
                    if (param3) {
                        param1 = param1 | 1;
                    } else {
                        param1 = param1 & 255 - 1;
                    }
                    break;
                case 1:
                    if (param3) {
                        param1 = param1 | 2;
                    } else {
                        param1 = param1 & 255 - 2;
                    }
                    break;
                case 2:
                    if (param3) {
                        param1 = param1 | 4;
                    } else {
                        param1 = param1 & 255 - 4;
                    }
                    break;
                case 3:
                    if (param3) {
                        param1 = param1 | 8;
                    } else {
                        param1 = param1 & 255 - 8;
                    }
                    break;
                case 4:
                    if (param3) {
                        param1 = param1 | 16;
                    } else {
                        param1 = param1 & 255 - 16;
                    }
                    break;
                case 5:
                    if (param3) {
                        param1 = param1 | 32;
                    } else {
                        param1 = param1 & 255 - 32;
                    }
                    break;
                case 6:
                    if (param3) {
                        param1 = param1 | 64;
                    } else {
                        param1 = param1 & 255 - 64;
                    }
                    break;
                case 7:
                    if (param3) {
                        param1 = param1 | 128;
                    } else {
                        param1 = param1 & 255 - 128;
                    }
                    break;
                default:
                    throw new Error('Bytebox overflow.');
            }
            return param1;
        };
        BooleanByteWrapper.getFlag = function(param1, param2) {
            switch (param2) {
                case 0:
                    return !((param1 & 1) === 0);
                case 1:
                    return !((param1 & 2) === 0);
                case 2:
                    return !((param1 & 4) === 0);
                case 3:
                    return !((param1 & 8) === 0);
                case 4:
                    return !((param1 & 16) === 0);
                case 5:
                    return !((param1 & 32) === 0);
                case 6:
                    return !((param1 & 64) === 0);
                case 7:
                    return !((param1 & 128) === 0);
                default:
                    throw new Error('Bytebox overflow.');
            }
        };
        return BooleanByteWrapper;
    })();
    Protocol.BooleanByteWrapper = BooleanByteWrapper;
    var CustomDataWrapper = (function() {
        function CustomDataWrapper(data) {
            if (data instanceof ByteArray) {
                this._data = data;
            } else {
                this._data = new ByteArray(data);
            }
        }
        Object.defineProperty(CustomDataWrapper.prototype, "position", {
            get: function() {
                return this._data.position;
            },
            set: function(param1) {
                this._data.position = param1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomDataWrapper.prototype, "data", {
            get: function() {
                return this._data;
            },
            enumerable: true,
            configurable: true
        });
        CustomDataWrapper.prototype.readVarInt = function() {
            var _loc4_ = 0;
            var _loc1_ = 0;
            var _loc2_ = 0;
            var _loc3_ = false;
            while (_loc2_ < CustomDataWrapper.INT_SIZE) {
                _loc4_ = this._data.readByte();
                _loc3_ = (_loc4_ & CustomDataWrapper.MASK_10000000) === CustomDataWrapper.MASK_10000000;
                if (_loc2_ > 0) {
                    _loc1_ = _loc1_ + ((_loc4_ & CustomDataWrapper.MASK_01111111) << _loc2_);
                } else {
                    _loc1_ = _loc1_ + (_loc4_ & CustomDataWrapper.MASK_01111111);
                }
                _loc2_ = _loc2_ + CustomDataWrapper.CHUNCK_BIT_SIZE;
                if (!_loc3_) {
                    return _loc1_;
                }
            }
            throw new Error('Too much data');
        };
        CustomDataWrapper.prototype.readVarUhInt = function() {
            return this.readVarInt();
        };
        CustomDataWrapper.prototype.readVarShort = function() {
            var _loc4_ = 0;
            var _loc1_ = 0;
            var _loc2_ = 0;
            var _loc3_ = false;
            while (_loc2_ < CustomDataWrapper.SHORT_SIZE) {
                _loc4_ = this._data.readByte();
                _loc3_ = (_loc4_ & CustomDataWrapper.MASK_10000000) === CustomDataWrapper.MASK_10000000;
                if (_loc2_ > 0) {
                    _loc1_ = _loc1_ + ((_loc4_ & CustomDataWrapper.MASK_01111111) << _loc2_);
                } else {
                    _loc1_ = _loc1_ + (_loc4_ & CustomDataWrapper.MASK_01111111);
                }
                _loc2_ = _loc2_ + CustomDataWrapper.CHUNCK_BIT_SIZE;
                if (!_loc3_) {
                    if (_loc1_ > CustomDataWrapper.SHORT_MAX_VALUE) {
                        _loc1_ = _loc1_ - CustomDataWrapper.UNSIGNED_SHORT_MAX_VALUE;
                    }
                    return _loc1_;
                }
            }
            throw new Error('Too much data');
        };
        CustomDataWrapper.prototype.readVarUhShort = function() {
            return this.readVarShort();
        };
        CustomDataWrapper.prototype.readVarLong = function() {
            return this.readInt64(this._data).toNumber();
        };
        CustomDataWrapper.prototype.readVarUhLong = function() {
            return this.readUInt64(this._data).toNumber();
        };
        CustomDataWrapper.prototype.readBytes = function(param1, param2, param3) {
            if (param2 === void 0) {
                param2 = 0;
            }
            if (param3 === void 0) {
                param3 = 0;
            }
            this._data.readBytes(param1, param2, param3);
        };
        CustomDataWrapper.prototype.readBoolean = function() {
            return this._data.readBoolean();
        };
        CustomDataWrapper.prototype.readByte = function() {
            return this._data.readByte();
        };
        CustomDataWrapper.prototype.readUnsignedByte = function() {
            return this._data.readUnsignedByte();
        };
        CustomDataWrapper.prototype.readShort = function() {
            return this._data.readShort();
        };
        CustomDataWrapper.prototype.readUnsignedShort = function() {
            return this._data.readUnsignedShort();
        };
        CustomDataWrapper.prototype.readInt = function() {
            return this._data.readInt();
        };
        CustomDataWrapper.prototype.readUnsignedInt = function() {
            return this._data.readUnsignedInt();
        };
        CustomDataWrapper.prototype.readFloat = function() {
            return this._data.readFloat();
        };
        CustomDataWrapper.prototype.readDouble = function() {
            return this._data.readDouble();
        };
        CustomDataWrapper.prototype.readMultiByte = function(param1, param2) {
            return this._data.readMultiByte(param1, param2);
        };
        CustomDataWrapper.prototype.readUTF = function() {
            return this._data.readUTF();
        };
        CustomDataWrapper.prototype.readUTFBytes = function(param1) {
            return this._data.readUTFBytes(param1);
        };
        Object.defineProperty(CustomDataWrapper.prototype, "bytesAvailable", {
            get: function() {
                return this._data.bytesAvailable;
            },
            enumerable: true,
            configurable: true
        });
        CustomDataWrapper.prototype.readObject = function() {
            return this._data.readObject();
        };
        Object.defineProperty(CustomDataWrapper.prototype, "objectEncoding", {
            get: function() {
                return this._data.objectEncoding;
            },
            set: function(param1) {
                this._data.objectEncoding = param1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomDataWrapper.prototype, "endian", {
            get: function() {
                return this._data.endian;
            },
            set: function(param1) {
                this._data.endian = param1;
            },
            enumerable: true,
            configurable: true
        });
        CustomDataWrapper.prototype.writeVarInt = function(param1) {
            var _loc5_ = 0;
            var _loc2_ = new ByteArray();
            if (param1 >= 0 && param1 <= CustomDataWrapper.MASK_01111111) {
                _loc2_.writeByte(param1);
                this._data.writeBytes(_loc2_);
                return;
            }
            var _loc3_ = param1;
            var _loc4_ = new ByteArray();
            while (_loc3_ !== 0) {
                _loc4_.writeByte(_loc3_ & CustomDataWrapper.MASK_01111111);
                _loc4_.position = _loc4_.length - 1;
                _loc5_ = _loc4_.readByte();
                _loc3_ = _loc3_ >>> CustomDataWrapper.CHUNCK_BIT_SIZE;
                if (_loc3_ > 0) {
                    _loc5_ = _loc5_ | CustomDataWrapper.MASK_10000000;
                }
                _loc2_.writeByte(_loc5_);
            }
            this._data.writeBytes(_loc2_);
        };
        CustomDataWrapper.prototype.writeVarShort = function(param1) {
            var _loc5_ = 0;
            if (param1 > CustomDataWrapper.SHORT_MAX_VALUE || param1 < CustomDataWrapper.SHORT_MIN_VALUE) {
                throw new Error('Forbidden value');
            }
            var _loc2_ = new ByteArray();
            if (param1 >= 0 && param1 <= CustomDataWrapper.MASK_01111111) {
                _loc2_.writeByte(param1);
                this._data.writeBytes(_loc2_);
                return;
            }
            var _loc3_ = param1 & 65535;
            var _loc4_ = new ByteArray();
            while (_loc3_ !== 0) {
                _loc4_.writeByte(_loc3_ & CustomDataWrapper.MASK_01111111);
                _loc4_.position = _loc4_.length - 1;
                _loc5_ = _loc4_.readByte();
                _loc3_ = _loc3_ >>> CustomDataWrapper.CHUNCK_BIT_SIZE;
                if (_loc3_ > 0) {
                    _loc5_ = _loc5_ | CustomDataWrapper.MASK_10000000;
                }
                _loc2_.writeByte(_loc5_);
            }
            this._data.writeBytes(_loc2_);
        };
        CustomDataWrapper.prototype.writeVarLong = function(param1) {
            var _loc3_ = 0;
            var _loc2_ = Int64.fromNumber(param1);
            if (_loc2_.high === 0) {
                this.writeint32(this._data, _loc2_.low);
            } else {
                _loc3_ = 0;
                while (_loc3_ < 4) {
                    this._data.writeByte(_loc2_.low & 127 | 128);
                    _loc2_.low = _loc2_.low >>> 7;
                    _loc3_++;
                }
                if ((_loc2_.high & 268435455 << 3) === 0) {
                    this._data.writeByte(_loc2_.high << 4 | _loc2_.low);
                } else {
                    this._data.writeByte((_loc2_.high << 4 | _loc2_.low) & 127 | 128);
                    this.writeint32(this._data, _loc2_.high >>> 3);
                }
            }
        };
        CustomDataWrapper.prototype.writeBytes = function(param1, param2, param3) {
            if (param2 === void 0) {
                param2 = 0;
            }
            if (param3 === void 0) {
                param3 = 0;
            }
            this._data.writeBytes(param1, param2, param3);
        };
        CustomDataWrapper.prototype.writeBoolean = function(param1) {
            this._data.writeBoolean(param1);
        };
        CustomDataWrapper.prototype.writeByte = function(param1) {
            this._data.writeByte(param1);
        };
        CustomDataWrapper.prototype.writeShort = function(param1) {
            this._data.writeShort(param1);
        };
        CustomDataWrapper.prototype.writeInt = function(param1) {
            this._data.writeInt(param1);
        };
        CustomDataWrapper.prototype.writeUnsignedInt = function(param1) {
            this._data.writeUnsignedInt(param1);
        };
        CustomDataWrapper.prototype.writeFloat = function(param1) {
            this._data.writeFloat(param1);
        };
        CustomDataWrapper.prototype.writeDouble = function(param1) {
            this._data.writeDouble(param1);
        };
        CustomDataWrapper.prototype.writeMultiByte = function(param1, param2) {
            this._data.writeMultiByte(param1, param2);
        };
        CustomDataWrapper.prototype.writeUTF = function(param1) {
            this._data.writeUTF(param1);
        };
        CustomDataWrapper.prototype.writeUTFBytes = function(param1) {
            this._data.writeUTFBytes(param1);
        };
        CustomDataWrapper.prototype.writeObject = function(param1) {
            this._data.writeObject(param1);
        };
        CustomDataWrapper.prototype.readInt64 = function(param1) {
            var _loc3_ = 0;
            var _loc2_ = new Int64();
            var _loc4_ = 0;
            while (true) {
                _loc3_ = param1.readUnsignedByte();
                if (_loc4_ === 28) {
                    break;
                }
                if (_loc3_ >= 128) {
                    _loc2_.low = _loc2_.low | (_loc3_ & 127) << _loc4_;
                    _loc4_ = _loc4_ + 7;
                    continue;
                }
                _loc2_.low = _loc2_.low | _loc3_ << _loc4_;
                return _loc2_;
            }
            if (_loc3_ >= 128) {
                _loc3_ = _loc3_ & 127;
                _loc2_.low = _loc2_.low | _loc3_ << _loc4_;
                _loc2_.high = _loc3_ >>> 4;
                _loc4_ = 3;
                while (true) {
                    _loc3_ = param1.readUnsignedByte();
                    if (_loc4_ < 32) {
                        if (_loc3_ >= 128) {
                            _loc2_.high = _loc2_.high | (_loc3_ & 127) << _loc4_;
                        } else {
                            break;
                        }
                    }
                    _loc4_ = _loc4_ + 7;
                }
                _loc2_.high = _loc2_.high | _loc3_ << _loc4_;
                return _loc2_;
            }
            _loc2_.low = _loc2_.low | _loc3_ << _loc4_;
            _loc2_.high = _loc3_ >>> 4;
            return _loc2_;
        };
        CustomDataWrapper.prototype.readUInt64 = function(param1) {
            var _loc3_ = 0;
            var _loc2_ = new UInt64();
            var _loc4_ = 0;
            while (true) {
                _loc3_ = param1.readUnsignedByte();
                if (_loc4_ === 28) {
                    break;
                }
                if (_loc3_ >= 128) {
                    _loc2_.low = _loc2_.low | (_loc3_ & 127) << _loc4_;
                    _loc4_ = _loc4_ + 7;
                    continue;
                }
                _loc2_.low = _loc2_.low | _loc3_ << _loc4_;
                return _loc2_;
            }
            if (_loc3_ >= 128) {
                _loc3_ = _loc3_ & 127;
                _loc2_.low = _loc2_.low | _loc3_ << _loc4_;
                _loc2_.high = _loc3_ >>> 4;
                _loc4_ = 3;
                while (true) {
                    _loc3_ = param1.readUnsignedByte();
                    if (_loc4_ < 32) {
                        if (_loc3_ >= 128) {
                            _loc2_.high = _loc2_.high | (_loc3_ & 127) << _loc4_;
                        } else {
                            break;
                        }
                    }
                    _loc4_ = _loc4_ + 7;
                }
                _loc2_.high = _loc2_.high | _loc3_ << _loc4_;
                return _loc2_;
            }
            _loc2_.low = _loc2_.low | _loc3_ << _loc4_;
            _loc2_.high = _loc3_ >>> 4;
            return _loc2_;
        };
        CustomDataWrapper.prototype.writeint32 = function(param1, param2) {
            while (param2 >= 128) {
                param1.writeByte(param2 & 127 | 128);
                param2 = param2 >>> 7;
            }
            param1.writeByte(param2);
        };
        CustomDataWrapper.INT_SIZE = 32;
        CustomDataWrapper.SHORT_SIZE = 16;
        CustomDataWrapper.SHORT_MIN_VALUE = -32768;
        CustomDataWrapper.SHORT_MAX_VALUE = 32767;
        CustomDataWrapper.UNSIGNED_SHORT_MAX_VALUE = 65536;
        CustomDataWrapper.CHUNCK_BIT_SIZE = 7;
        CustomDataWrapper.MAX_ENCODING_LENGTH = Math.ceil(CustomDataWrapper.INT_SIZE / CustomDataWrapper.CHUNCK_BIT_SIZE);
        CustomDataWrapper.MASK_10000000 = 128;
        CustomDataWrapper.MASK_01111111 = 127;
        return CustomDataWrapper;
    })();
    Protocol.CustomDataWrapper = CustomDataWrapper;
    var Int64 = (function(_super) {
        __extends(Int64, _super);

        function Int64(low, high) {
            if (low === void 0) {
                low = 0;
            }
            if (high === void 0) {
                high = 0;
            }
            _super.call(this, low, high);
        }
        Int64.fromNumber = function(n) {
            return new Int64(n, Math.floor((n / 4294967296)));
        };
        Int64.prototype.parseInt64 = function(str, radix) {
            radix = radix || 0;
            var digit = 0;
            var negative = (str.search(/^\-/) === 0);
            var i = ((negative) ? 1 : 0);
            if (radix === 0) {
                if (str.search(/^\-?0x/) === 0) {
                    radix = 16;
                    i = (i + 2);
                } else {
                    radix = 10;
                };
            };
            if ((((radix < 2)) || ((radix > 36)))) {
                throw new Error('ArgumentError');
            };
            str = str.toLowerCase();
            var result = new Int64();
            while (i < str.length) {
                digit = str.charCodeAt(i);
                if ((((digit >= Binary64.CHAR_CODE_0)) && ((digit <= Binary64.CHAR_CODE_9)))) {
                    digit = (digit - Binary64.CHAR_CODE_0);
                } else {
                    if ((((digit >= Binary64.CHAR_CODE_A)) && ((digit <= Binary64.CHAR_CODE_Z)))) {
                        digit = (digit - Binary64.CHAR_CODE_A);
                        digit = (digit + 10);
                    } else {
                        throw new Error('ArgumentError');
                    };
                };
                if (digit >= radix) {
                    throw new Error('ArgumentError');
                };
                result.mul(radix);
                result.add(digit);
                i++;
            };
            if (negative) {
                result.bitwiseNot();
                result.add(1);
            };
            return (result);
        };;
        Int64.prototype.toNumber = function() {
            return (((this.high * 4294967296) + this.low));
        };;
        Int64.prototype.toString = function(radix) {
            radix = radix || 10;
            var _local_4 = 0;
            if ((((radix < 2)) || ((radix > 36)))) {
                throw new Error('ArgumentError');
            };
            switch (this.high) {
                case 0:
                    return (this.low.toString(radix));
                case -1:
                    if ((this.low & 0x80000000) === 0) {
                        return ((Number((this.low | 0x80000000)) - 0x80000000).toString(radix));
                    };
                    return (Number(this.low).toString(radix));
            };
            if ((((this.low === 0)) && ((this.high === 0)))) {
                return ('0');
            };
            var digitChars = [];
            var copyOfThis = new Int64(this.low, this.high);
            if (this.high < 0) {
                copyOfThis.bitwiseNot();
                copyOfThis.add(1);
            };
            do {
                _local_4 = copyOfThis.div(radix);
                if (_local_4 < 10) {
                    digitChars.push((_local_4 + Binary64.CHAR_CODE_0));
                } else {
                    digitChars.push(((_local_4 - 10) + Binary64.CHAR_CODE_A));
                }
            } while (copyOfThis.high !== 0);
            if (this.high < 0) {
                return ((('-' + copyOfThis.low.toString(radix)) + String.fromCharCode.apply(String, digitChars.reverse())));
            };
            return ((copyOfThis.low.toString(radix) + String.fromCharCode.apply(String, digitChars.reverse())));
        };;
        return Int64;
    })(Binary64);
    Protocol.Int64 = Int64;
    var MessageReceiver = (function() {
        function MessageReceiver() {

        }
        MessageReceiver.parse = function(input, messageId, messageLength) {
            if (!messageId) {
                return this.parseHeader(input);
            }
            var _loc4_ = MessageReceiver._list[messageId];
            if (!_loc4_) {
                console.log('Unknown packet received (ID ' + messageId + ', length ' + messageLength + ')');
                return null;
            }
            var _loc5_ = _loc4_();
            _loc5_.unpack(input, messageLength);
            return _loc5_;
        };
        MessageReceiver.parseHeader = function(src, splitted, id, length, staticHeader) {
            if (splitted) {
                return this.parse(src, id, length);
            }
            if (src.bytesAvailable < 2) {
                throw new Error('Not enought data to read the header, byte available : ' + src.bytesAvailable + ' (needed : 2)');
            }
            staticHeader = staticHeader || src.readUnsignedShort();
            id = id || this.getMessageId(staticHeader);
            if (src.bytesAvailable < (staticHeader & NetworkMessage.BIT_MASK)) {
                throw new Error('Not enought data to read the message length, byte available : ' + src.bytesAvailable + ' (needed : ' + (staticHeader & NetworkMessage.BIT_MASK) + ')');
            }
            length = this.readMessageLength(staticHeader, src);
            return this.parseHeader(src, true, id, length);
        };
        MessageReceiver.getMessageId = function(firstOctet) {
            return ((firstOctet >> NetworkMessage.BIT_RIGHT_SHIFT_LEN_PACKET_ID));
        };
        MessageReceiver.readMessageLength = function(staticHeader, src) {
            var byteLenDynamicHeader = (staticHeader & NetworkMessage.BIT_MASK);
            var messageLength;

            switch (byteLenDynamicHeader) {
                case 0:
                    break;
                case 1:
                    messageLength = src.readUnsignedByte();
                    break;
                case 2:
                    messageLength = src.readUnsignedShort();
                    break;
                case 3:
                    messageLength = ((((src.readByte() & 0xFF) << 16) + ((src.readByte() & 0xFF) << 8)) + (src.readByte() & 0xFF));
                    break;
            }

            return (messageLength);
        };
        MessageReceiver._list = {
            2983: function() {
                return new AdminCommandMessage();
            },
            5819: function() {
                return new AdminQuietCommandMessage();
            },
            7414: function() {
                return new ConsoleCommandsListMessage();
            },
            2223: function() {
                return new ConsoleMessage();
            },
            9070: function() {
                return new BasicPingMessage();
            },
            8820: function() {
                return new BasicPongMessage();
            },
            7506: function() {
                return new BasicStatMessage();
            },
            6736: function() {
                return new BasicStatWithDataMessage();
            },
            2: function() {
                return new NetworkDataContainerMessage();
            },
            1409: function() {
                return new CredentialsAcknowledgementMessage();
            },
            1251: function() {
                return new HelloConnectMessage();
            },
            4574: function() {
                return new IdentificationAccountForceMessage();
            },
            5027: function() {
                return new IdentificationFailedBannedMessage();
            },
            8907: function() {
                return new IdentificationFailedForBadVersionMessage();
            },
            1345: function() {
                return new IdentificationFailedMessage();
            },
            8050: function() {
                return new IdentificationMessage();
            },
            149: function() {
                return new IdentificationSuccessMessage();
            },
            6160: function() {
                return new IdentificationSuccessWithLoginTokenMessage();
            },
            9270: function() {
                return new MigratedServerListMessage();
            },
            7982: function() {
                return new AccountLinkRequiredMessage();
            },
            7967: function() {
                return new NicknameAcceptedMessage();
            },
            4237: function() {
                return new NicknameChoiceRequestMessage();
            },
            8144: function() {
                return new NicknameRefusedMessage();
            },
            6627: function() {
                return new NicknameRegistrationMessage();
            },
            2175: function() {
                return new AcquaintanceSearchErrorMessage();
            },
            4981: function() {
                return new AcquaintanceSearchMessage();
            },
            1800: function() {
                return new AcquaintanceServerListMessage();
            },
            7321: function() {
                return new SelectedServerDataExtendedMessage();
            },
            9610: function() {
                return new SelectedServerDataMessage();
            },
            95: function() {
                return new SelectedServerRefusedMessage();
            },
            7721: function() {
                return new ServerSelectionMessage();
            },
            7603: function() {
                return new ServersListMessage();
            },
            2105: function() {
                return new ServerStatusUpdateMessage();
            },
            2501: function() {
                return new DebugClearHighlightCellsMessage();
            },
            7861: function() {
                return new DebugHighlightCellsMessage();
            },
            2283: function() {
                return new DebugInClientMessage();
            },
            4019: function() {
                return new AchievementDetailedListMessage();
            },
            8701: function() {
                return new AchievementDetailedListRequestMessage();
            },
            535: function() {
                return new AchievementDetailsMessage();
            },
            2811: function() {
                return new AchievementDetailsRequestMessage();
            },
            1659: function() {
                return new AchievementFinishedInformationMessage();
            },
            518: function() {
                return new AchievementFinishedMessage();
            },
            3313: function() {
                return new AchievementListMessage();
            },
            5517: function() {
                return new AchievementRewardErrorMessage();
            },
            4816: function() {
                return new AchievementRewardRequestMessage();
            },
            5062: function() {
                return new AchievementRewardSuccessMessage();
            },
            5495: function() {
                return new FriendGuildSetWarnOnAchievementCompleteMessage();
            },
            2035: function() {
                return new FriendGuildWarnOnAchievementCompleteStateMessage();
            },
            8791: function() {
                return new AbstractGameActionMessage();
            },
            7030: function() {
                return new AbstractGameActionWithAckMessage();
            },
            7655: function() {
                return new AbstractGameActionFightTargetedAbilityMessage();
            },
            449: function() {
                return new GameActionFightActivateGlyphTrapMessage();
            },
            3652: function() {
                return new GameActionFightCarryCharacterMessage();
            },
            5055: function() {
                return new GameActionFightCastOnTargetRequestMessage();
            },
            1470: function() {
                return new GameActionFightCastRequestMessage();
            },
            5574: function() {
                return new GameActionFightChangeLookMessage();
            },
            2232: function() {
                return new GameActionFightCloseCombatMessage();
            },
            3225: function() {
                return new GameActionFightDeathMessage();
            },
            5910: function() {
                return new GameActionFightDispellableEffectMessage();
            },
            7947: function() {
                return new GameActionFightDispellEffectMessage();
            },
            1408: function() {
                return new GameActionFightDispellMessage();
            },
            9184: function() {
                return new GameActionFightDispellSpellMessage();
            },
            7952: function() {
                return new GameActionFightDodgePointLossMessage();
            },
            8910: function() {
                return new GameActionFightDropCharacterMessage();
            },
            640: function() {
                return new GameActionFightExchangePositionsMessage();
            },
            1575: function() {
                return new GameActionFightInvisibilityMessage();
            },
            4737: function() {
                return new GameActionFightInvisibleDetectedMessage();
            },
            8275: function() {
                return new GameActionFightKillMessage();
            },
            423: function() {
                return new GameActionFightLifeAndShieldPointsLostMessage();
            },
            1531: function() {
                return new GameActionFightLifePointsGainMessage();
            },
            8747: function() {
                return new GameActionFightLifePointsLostMessage();
            },
            1538: function() {
                return new GameActionFightMarkCellsMessage();
            },
            6413: function() {
                return new GameActionFightModifyEffectsDurationMessage();
            },
            5036: function() {
                return new GameActionFightMultipleSummonMessage();
            },
            2159: function() {
                return new GameActionFightNoSpellCastMessage();
            },
            5415: function() {
                return new GameActionFightPointsVariationMessage();
            },
            6074: function() {
                return new GameActionFightReduceDamagesMessage();
            },
            7605: function() {
                return new GameActionFightReflectDamagesMessage();
            },
            1453: function() {
                return new GameActionFightReflectSpellMessage();
            },
            1549: function() {
                return new GameActionFightSlideMessage();
            },
            5026: function() {
                return new GameActionFightSpellCastMessage();
            },
            772: function() {
                return new GameActionFightSpellCooldownVariationMessage();
            },
            1076: function() {
                return new GameActionFightSpellImmunityMessage();
            },
            6663: function() {
                return new GameActionFightStealKamaMessage();
            },
            8796: function() {
                return new GameActionFightSummonMessage();
            },
            3775: function() {
                return new GameActionFightTackledMessage();
            },
            9063: function() {
                return new GameActionFightTeleportOnSameMapMessage();
            },
            9016: function() {
                return new GameActionFightThrowCharacterMessage();
            },
            9562: function() {
                return new GameActionFightTriggerEffectMessage();
            },
            8084: function() {
                return new GameActionFightTriggerGlyphTrapMessage();
            },
            4963: function() {
                return new GameActionFightUnmarkCellsMessage();
            },
            622: function() {
                return new GameActionFightVanishMessage();
            },
            2534: function() {
                return new GameActionUpdateEffectTriggerCountMessage();
            },
            3790: function() {
                return new GameActionAcknowledgementMessage();
            },
            3464: function() {
                return new GameActionNoopMessage();
            },
            5912: function() {
                return new GameActionSpamMessage();
            },
            7632: function() {
                return new SequenceEndMessage();
            },
            5293: function() {
                return new SequenceStartMessage();
            },
            5460: function() {
                return new AllianceBulletinMessage();
            },
            3716: function() {
                return new AllianceBulletinSetErrorMessage();
            },
            7301: function() {
                return new AllianceBulletinSetRequestMessage();
            },
            8973: function() {
                return new AllianceChangeGuildRightsMessage();
            },
            1594: function() {
                return new AllianceCreationResultMessage();
            },
            4020: function() {
                return new AllianceCreationStartedMessage();
            },
            813: function() {
                return new AllianceCreationValidMessage();
            },
            9299: function() {
                return new AllianceFactsErrorMessage();
            },
            6638: function() {
                return new AllianceFactsMessage();
            },
            4229: function() {
                return new AllianceFactsRequestMessage();
            },
            2353: function() {
                return new AllianceGuildLeavingMessage();
            },
            7582: function() {
                return new AllianceInsiderInfoMessage();
            },
            1729: function() {
                return new AllianceInsiderInfoRequestMessage();
            },
            4464: function() {
                return new AllianceInvitationAnswerMessage();
            },
            9978: function() {
                return new AllianceInvitationMessage();
            },
            7315: function() {
                return new AllianceInvitationStateRecrutedMessage();
            },
            3584: function() {
                return new AllianceInvitationStateRecruterMessage();
            },
            3392: function() {
                return new AllianceInvitedMessage();
            },
            1115: function() {
                return new AllianceJoinedMessage();
            },
            4475: function() {
                return new AllianceKickRequestMessage();
            },
            9560: function() {
                return new AllianceLeftMessage();
            },
            5865: function() {
                return new AllianceListMessage();
            },
            1682: function() {
                return new AllianceMembershipMessage();
            },
            1433: function() {
                return new AllianceModificationEmblemValidMessage();
            },
            5789: function() {
                return new AllianceModificationNameAndTagValidMessage();
            },
            6628: function() {
                return new AllianceModificationStartedMessage();
            },
            8124: function() {
                return new AllianceModificationValidMessage();
            },
            6551: function() {
                return new AllianceMotdMessage();
            },
            2111: function() {
                return new AllianceMotdSetErrorMessage();
            },
            9138: function() {
                return new AllianceMotdSetRequestMessage();
            },
            4368: function() {
                return new AlliancePartialListMessage();
            },
            815: function() {
                return new AllianceVersatileInfoListMessage();
            },
            5197: function() {
                return new KohUpdateMessage();
            },
            5290: function() {
                return new AlmanachCalendarDateMessage();
            },
            6779: function() {
                return new AccountCapabilitiesMessage();
            },
            2150: function() {
                return new AccountLoggingKickedMessage();
            },
            13: function() {
                return new AlreadyConnectedMessage();
            },
            9026: function() {
                return new AuthenticationTicketAcceptedMessage();
            },
            1864: function() {
                return new AuthenticationTicketMessage();
            },
            9238: function() {
                return new AuthenticationTicketRefusedMessage();
            },
            4519: function() {
                return new HelloGameMessage();
            },
            2386: function() {
                return new ReloginTokenRequestMessage();
            },
            6343: function() {
                return new ReloginTokenStatusMessage();
            },
            2599: function() {
                return new ServerOptionalFeaturesMessage();
            },
            713: function() {
                return new ServerSessionConstantsMessage();
            },
            6216: function() {
                return new ServerSettingsMessage();
            },
            2529: function() {
                return new AtlasPointInformationsMessage();
            },
            5095: function() {
                return new CompassResetMessage();
            },
            476: function() {
                return new CompassUpdateMessage();
            },
            5594: function() {
                return new CompassUpdatePartyMemberMessage();
            },
            4417: function() {
                return new CompassUpdatePvpSeekMessage();
            },
            8259: function() {
                return new BasicAckMessage();
            },
            7123: function() {
                return new BasicDateMessage();
            },
            9646: function() {
                return new BasicLatencyStatsMessage();
            },
            2340: function() {
                return new BasicLatencyStatsRequestMessage();
            },
            8108: function() {
                return new BasicNoOperationMessage();
            },
            9776: function() {
                return new BasicTimeMessage();
            },
            4792: function() {
                return new BasicWhoAmIRequestMessage();
            },
            4158: function() {
                return new BasicWhoIsMessage();
            },
            9329: function() {
                return new BasicWhoIsNoMatchMessage();
            },
            6558: function() {
                return new BasicWhoIsRequestMessage();
            },
            1218: function() {
                return new CurrentServerStatusUpdateMessage();
            },
            5521: function() {
                return new NumericWhoIsMessage();
            },
            1244: function() {
                return new NumericWhoIsRequestMessage();
            },
            5131: function() {
                return new SequenceNumberMessage();
            },
            5238: function() {
                return new SequenceNumberRequestMessage();
            },
            8868: function() {
                return new TextInformationMessage();
            },
            8421: function() {
                return new AlignmentWarEffortDonatePreviewMessage();
            },
            8514: function() {
                return new AlignmentWarEffortDonateRequestMessage();
            },
            3258: function() {
                return new AlignmentWarEffortDonationResultMessage();
            },
            4989: function() {
                return new CharacterAlignmentWarEffortProgressionMessage();
            },
            6202: function() {
                return new CharacterAlignmentWarEffortProgressionRequestMessage();
            },
            7584: function() {
                return new BasicCharactersListMessage();
            },
            7120: function() {
                return new CharacterFirstSelectionMessage();
            },
            8678: function() {
                return new CharacterReplayWithRemodelRequestMessage();
            },
            8844: function() {
                return new CharacterSelectedErrorMessage();
            },
            2068: function() {
                return new CharacterSelectedForceMessage();
            },
            5754: function() {
                return new CharacterSelectedForceReadyMessage();
            },
            8424: function() {
                return new CharacterSelectedSuccessMessage();
            },
            6200: function() {
                return new CharacterSelectionMessage();
            },
            3592: function() {
                return new CharacterSelectionWithRemodelMessage();
            },
            6801: function() {
                return new CharactersListErrorMessage();
            },
            434: function() {
                return new CharactersListMessage();
            },
            2566: function() {
                return new CharactersListRequestMessage();
            },
            1171: function() {
                return new CharactersListWithRemodelingMessage();
            },
            709: function() {
                return new CharacterCanBeCreatedRequestMessage();
            },
            9261: function() {
                return new CharacterCanBeCreatedResultMessage();
            },
            1738: function() {
                return new CharacterCreationRequestMessage();
            },
            1146: function() {
                return new CharacterCreationResultMessage();
            },
            5079: function() {
                return new CharacterNameSuggestionFailureMessage();
            },
            2144: function() {
                return new CharacterNameSuggestionRequestMessage();
            },
            3457: function() {
                return new CharacterNameSuggestionSuccessMessage();
            },
            5452: function() {
                return new DebtsDeleteMessage();
            },
            9975: function() {
                return new DebtsUpdateMessage();
            },
            9769: function() {
                return new CharacterDeletionErrorMessage();
            },
            3569: function() {
                return new CharacterDeletionRequestMessage();
            },
            9005: function() {
                return new CharacterReplayRequestMessage();
            },
            8669: function() {
                return new ForgettableSpellClientActionMessage();
            },
            1920: function() {
                return new ForgettableSpellDeleteMessage();
            },
            1271: function() {
                return new ForgettableSpellEquipmentSlotsMessage();
            },
            3230: function() {
                return new ForgettableSpellListUpdateMessage();
            },
            3122: function() {
                return new CharacterExperienceGainMessage();
            },
            4037: function() {
                return new CharacterLevelUpInformationMessage();
            },
            4759: function() {
                return new CharacterLevelUpMessage();
            },
            4663: function() {
                return new CharacterStatsListMessage();
            },
            7728: function() {
                return new FighterStatsListMessage();
            },
            7338: function() {
                return new LifePointsRegenBeginMessage();
            },
            1338: function() {
                return new LifePointsRegenEndMessage();
            },
            7828: function() {
                return new ResetCharacterStatsRequestMessage();
            },
            2752: function() {
                return new UpdateLifePointsMessage();
            },
            9276: function() {
                return new PlayerStatusUpdateErrorMessage();
            },
            9099: function() {
                return new PlayerStatusUpdateMessage();
            },
            5133: function() {
                return new PlayerStatusUpdateRequestMessage();
            },
            1455: function() {
                return new ChannelEnablingChangeMessage();
            },
            1902: function() {
                return new ChannelEnablingMessage();
            },
            1211: function() {
                return new EnabledChannelsMessage();
            },
            7045: function() {
                return new ChatAbstractClientMessage();
            },
            6850: function() {
                return new ChatAbstractServerMessage();
            },
            5240: function() {
                return new ChatAdminServerMessage();
            },
            3674: function() {
                return new ChatClientMultiMessage();
            },
            5275: function() {
                return new ChatClientMultiWithObjectMessage();
            },
            6307: function() {
                return new ChatClientPrivateMessage();
            },
            5903: function() {
                return new ChatClientPrivateWithObjectMessage();
            },
            1161: function() {
                return new ChatErrorMessage();
            },
            9502: function() {
                return new ChatServerCopyMessage();
            },
            7669: function() {
                return new ChatServerCopyWithObjectMessage();
            },
            5509: function() {
                return new ChatServerMessage();
            },
            1344: function() {
                return new ChatServerWithObjectMessage();
            },
            5438: function() {
                return new ChatCommunityChannelCommunityMessage();
            },
            43: function() {
                return new ChatCommunityChannelSetCommunityRequestMessage();
            },
            6: function() {
                return new ChatSmileyExtraPackListMessage();
            },
            2736: function() {
                return new ChatSmileyMessage();
            },
            5172: function() {
                return new ChatSmileyRequestMessage();
            },
            7234: function() {
                return new LocalizedChatSmileyMessage();
            },
            670: function() {
                return new MoodSmileyRequestMessage();
            },
            2233: function() {
                return new MoodSmileyResultMessage();
            },
            4794: function() {
                return new MoodSmileyUpdateMessage();
            },
            5004: function() {
                return new DisplayNumericalValuePaddockMessage();
            },
            4148: function() {
                return new DungeonKeyRingMessage();
            },
            4979: function() {
                return new DungeonKeyRingUpdateMessage();
            },
            2158: function() {
                return new ArenaFighterLeaveMessage();
            },
            6696: function() {
                return new BreachGameFightEndMessage();
            },
            9675: function() {
                return new ChallengeInfoMessage();
            },
            2089: function() {
                return new ChallengeResultMessage();
            },
            2009: function() {
                return new ChallengeTargetsListMessage();
            },
            2250: function() {
                return new ChallengeTargetsListRequestMessage();
            },
            4069: function() {
                return new ChallengeTargetUpdateMessage();
            },
            986: function() {
                return new GameFightRefreshFighterMessage();
            },
            3884: function() {
                return new GameFightShowFighterMessage();
            },
            6588: function() {
                return new GameFightShowFighterRandomStaticPoseMessage();
            },
            6612: function() {
                return new GameFightEndMessage();
            },
            5755: function() {
                return new GameFightHumanReadyStateMessage();
            },
            685: function() {
                return new GameFightJoinMessage();
            },
            6133: function() {
                return new GameFightJoinRequestMessage();
            },
            4491: function() {
                return new GameFightLeaveMessage();
            },
            4660: function() {
                return new GameFightNewRoundMessage();
            },
            6575: function() {
                return new GameFightNewWaveMessage();
            },
            3750: function() {
                return new GameFightOptionStateUpdateMessage();
            },
            5444: function() {
                return new GameFightOptionToggleMessage();
            },
            6427: function() {
                return new GameFightPauseMessage();
            },
            8878: function() {
                return new GameFightPlacementPositionRequestMessage();
            },
            4098: function() {
                return new GameFightPlacementPossiblePositionsMessage();
            },
            3893: function() {
                return new GameFightPlacementSwapPositionsAcceptMessage();
            },
            5500: function() {
                return new GameFightPlacementSwapPositionsCancelledMessage();
            },
            9929: function() {
                return new GameFightPlacementSwapPositionsCancelMessage();
            },
            139: function() {
                return new GameFightPlacementSwapPositionsErrorMessage();
            },
            866: function() {
                return new GameFightPlacementSwapPositionsMessage();
            },
            725: function() {
                return new GameFightPlacementSwapPositionsOfferMessage();
            },
            1380: function() {
                return new GameFightPlacementSwapPositionsRequestMessage();
            },
            266: function() {
                return new GameFightReadyMessage();
            },
            8993: function() {
                return new GameFightRemoveTeamMemberMessage();
            },
            8007: function() {
                return new GameFightResumeMessage();
            },
            3940: function() {
                return new GameFightResumeWithSlavesMessage();
            },
            9624: function() {
                return new GameFightSpectateMessage();
            },
            5035: function() {
                return new GameFightSpectatePlayerRequestMessage();
            },
            6930: function() {
                return new GameFightSpectatorJoinMessage();
            },
            3960: function() {
                return new GameFightStartingMessage();
            },
            7439: function() {
                return new GameFightStartMessage();
            },
            4824: function() {
                return new GameFightSynchronizeMessage();
            },
            8856: function() {
                return new GameFightTurnEndMessage();
            },
            1536: function() {
                return new GameFightTurnFinishMessage();
            },
            9365: function() {
                return new GameFightTurnListMessage();
            },
            765: function() {
                return new GameFightTurnReadyMessage();
            },
            6293: function() {
                return new GameFightTurnReadyRequestMessage();
            },
            2330: function() {
                return new GameFightTurnResumeMessage();
            },
            7110: function() {
                return new GameFightTurnStartMessage();
            },
            5330: function() {
                return new GameFightTurnStartPlayingMessage();
            },
            9746: function() {
                return new GameFightUpdateTeamMessage();
            },
            1497: function() {
                return new RefreshCharacterStatsMessage();
            },
            6112: function() {
                return new SlaveNoLongerControledMessage();
            },
            5295: function() {
                return new SlaveSwitchContextMessage();
            },
            3954: function() {
                return new GameCautiousMapMovementMessage();
            },
            5883: function() {
                return new GameCautiousMapMovementRequestMessage();
            },
            6223: function() {
                return new GameContextCreateErrorMessage();
            },
            8097: function() {
                return new GameContextCreateMessage();
            },
            8305: function() {
                return new GameContextCreateRequestMessage();
            },
            1226: function() {
                return new GameContextDestroyMessage();
            },
            4471: function() {
                return new GameContextKickMessage();
            },
            7867: function() {
                return new GameContextMoveElementMessage();
            },
            721: function() {
                return new GameContextMoveMultipleElementsMessage();
            },
            927: function() {
                return new GameContextQuitMessage();
            },
            5960: function() {
                return new GameContextReadyMessage();
            },
            2017: function() {
                return new GameContextRefreshEntityLookMessage();
            },
            6344: function() {
                return new GameContextRemoveElementMessage();
            },
            6005: function() {
                return new GameContextRemoveElementWithEventMessage();
            },
            849: function() {
                return new GameContextRemoveMultipleElementsMessage();
            },
            9998: function() {
                return new GameContextRemoveMultipleElementsWithEventsMessage();
            },
            5646: function() {
                return new GameEntitiesDispositionMessage();
            },
            7003: function() {
                return new GameEntityDispositionErrorMessage();
            },
            3636: function() {
                return new GameEntityDispositionMessage();
            },
            5147: function() {
                return new GameMapChangeOrientationMessage();
            },
            5569: function() {
                return new GameMapChangeOrientationRequestMessage();
            },
            9422: function() {
                return new GameMapChangeOrientationsMessage();
            },
            5266: function() {
                return new GameMapMovementCancelMessage();
            },
            1882: function() {
                return new GameMapMovementConfirmMessage();
            },
            5538: function() {
                return new GameMapMovementMessage();
            },
            3376: function() {
                return new GameMapMovementRequestMessage();
            },
            5382: function() {
                return new GameMapNoMovementMessage();
            },
            979: function() {
                return new GameRefreshMonsterBoostsMessage();
            },
            5993: function() {
                return new GameDataPaddockObjectAddMessage();
            },
            8033: function() {
                return new GameDataPaddockObjectListAddMessage();
            },
            5650: function() {
                return new GameDataPaddockObjectRemoveMessage();
            },
            5783: function() {
                return new MountDataErrorMessage();
            },
            7426: function() {
                return new MountDataMessage();
            },
            2786: function() {
                return new MountEmoteIconUsedOkMessage();
            },
            9127: function() {
                return new MountEquipedErrorMessage();
            },
            9525: function() {
                return new MountFeedRequestMessage();
            },
            1532: function() {
                return new MountHarnessColorsUpdateRequestMessage();
            },
            3596: function() {
                return new MountHarnessDissociateRequestMessage();
            },
            6271: function() {
                return new MountInformationInPaddockRequestMessage();
            },
            8339: function() {
                return new MountInformationRequestMessage();
            },
            6105: function() {
                return new MountReleasedMessage();
            },
            460: function() {
                return new MountReleaseRequestMessage();
            },
            2798: function() {
                return new MountRenamedMessage();
            },
            9033: function() {
                return new MountRenameRequestMessage();
            },
            7744: function() {
                return new MountRidingMessage();
            },
            7836: function() {
                return new MountSetMessage();
            },
            4796: function() {
                return new MountSetXpRatioRequestMessage();
            },
            1248: function() {
                return new MountSterilizedMessage();
            },
            5528: function() {
                return new MountSterilizeRequestMessage();
            },
            581: function() {
                return new MountToggleRidingRequestMessage();
            },
            1968: function() {
                return new MountUnSetMessage();
            },
            5404: function() {
                return new MountXpRatioMessage();
            },
            9656: function() {
                return new PaddockBuyRequestMessage();
            },
            6312: function() {
                return new PaddockBuyResultMessage();
            },
            5652: function() {
                return new PaddockMoveItemRequestMessage();
            },
            7954: function() {
                return new PaddockRemoveItemRequestMessage();
            },
            663: function() {
                return new PaddockSellRequestMessage();
            },
            1287: function() {
                return new NotificationByServerMessage();
            },
            4711: function() {
                return new NotificationListMessage();
            },
            9352: function() {
                return new NotificationResetMessage();
            },
            534: function() {
                return new NotificationUpdateFlagMessage();
            },
            1424: function() {
                return new AlignmentWarEffortProgressionMessage();
            },
            8769: function() {
                return new AlignmentWarEffortProgressionRequestMessage();
            },
            5822: function() {
                return new AnomalyStateMessage();
            },
            8604: function() {
                return new MapComplementaryInformationsAnomalyMessage();
            },
            5450: function() {
                return new AnomalySubareaInformationRequestMessage();
            },
            9391: function() {
                return new AnomalySubareaInformationResponseMessage();
            },
            913: function() {
                return new BreachBranchesMessage();
            },
            3478: function() {
                return new BreachBonusMessage();
            },
            2375: function() {
                return new BreachBudgetMessage();
            },
            6961: function() {
                return new BreachCharactersMessage();
            },
            9979: function() {
                return new BreachEnterMessage();
            },
            9437: function() {
                return new BreachExitRequestMessage();
            },
            3311: function() {
                return new BreachExitResponseMessage();
            },
            335: function() {
                return new BreachRoomLockedMessage();
            },
            6725: function() {
                return new BreachRoomUnlockRequestMessage();
            },
            884: function() {
                return new BreachRoomUnlockResultMessage();
            },
            8176: function() {
                return new BreachSavedMessage();
            },
            1220: function() {
                return new BreachStateMessage();
            },
            6772: function() {
                return new BreachTeleportRequestMessage();
            },
            1936: function() {
                return new BreachTeleportResponseMessage();
            },
            3106: function() {
                return new MapComplementaryInformationsBreachMessage();
            },
            7999: function() {
                return new BreachInvitationAnswerMessage();
            },
            8376: function() {
                return new BreachInvitationCloseMessage();
            },
            3906: function() {
                return new BreachInvitationOfferMessage();
            },
            4246: function() {
                return new BreachInvitationRequestMessage();
            },
            6740: function() {
                return new BreachInvitationResponseMessage();
            },
            1305: function() {
                return new BreachKickRequestMessage();
            },
            5951: function() {
                return new BreachKickResponseMessage();
            },
            1374: function() {
                return new BreachRewardBoughtMessage();
            },
            836: function() {
                return new BreachRewardBuyMessage();
            },
            5563: function() {
                return new BreachRewardsMessage();
            },
            3266: function() {
                return new ChangeMapMessage();
            },
            3125: function() {
                return new CurrentMapInstanceMessage();
            },
            7796: function() {
                return new CurrentMapMessage();
            },
            6865: function() {
                return new GameRolePlayFreeSoulRequestMessage();
            },
            7625: function() {
                return new GameRolePlayGameOverMessage();
            },
            528: function() {
                return new GameRolePlayPlayerLifeStatusMessage();
            },
            8483: function() {
                return new WarnOnPermaDeathMessage();
            },
            2289: function() {
                return new GameRolePlayDelayedActionFinishedMessage();
            },
            1671: function() {
                return new GameRolePlayDelayedActionMessage();
            },
            748: function() {
                return new GameRolePlayDelayedObjectUseMessage();
            },
            6648: function() {
                return new DocumentReadingBeginMessage();
            },
            8673: function() {
                return new EmoteAddMessage();
            },
            6335: function() {
                return new EmoteListMessage();
            },
            918: function() {
                return new EmotePlayAbstractMessage();
            },
            790: function() {
                return new EmotePlayErrorMessage();
            },
            2881: function() {
                return new EmotePlayMassiveMessage();
            },
            6496: function() {
                return new EmotePlayMessage();
            },
            4945: function() {
                return new EmotePlayRequestMessage();
            },
            3309: function() {
                return new EmoteRemoveMessage();
            },
            6086: function() {
                return new ErrorMapNotFoundMessage();
            },
            2536: function() {
                return new GameRolePlayArenaFightAnswerMessage();
            },
            4175: function() {
                return new GameRolePlayArenaFighterStatusMessage();
            },
            3669: function() {
                return new GameRolePlayArenaFightPropositionMessage();
            },
            6871: function() {
                return new GameRolePlayArenaInvitationCandidatesAnswer();
            },
            8309: function() {
                return new GameRolePlayArenaLeagueRewardsMessage();
            },
            4371: function() {
                return new GameRolePlayArenaRegisterMessage();
            },
            9995: function() {
                return new GameRolePlayArenaRegistrationStatusMessage();
            },
            9126: function() {
                return new GameRolePlayArenaSwitchToFightServerMessage();
            },
            6943: function() {
                return new GameRolePlayArenaSwitchToGameServerMessage();
            },
            6661: function() {
                return new GameRolePlayArenaUnregisterMessage();
            },
            451: function() {
                return new GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage();
            },
            2247: function() {
                return new GameRolePlayArenaUpdatePlayerInfosMessage();
            },
            5626: function() {
                return new GameRolePlayAggressionMessage();
            },
            9947: function() {
                return new GameRolePlayAttackMonsterRequestMessage();
            },
            5454: function() {
                return new GameRolePlayFightRequestCanceledMessage();
            },
            4325: function() {
                return new GameRolePlayMonsterAngryAtPlayerMessage();
            },
            4276: function() {
                return new GameRolePlayMonsterNotAngryAtPlayerMessage();
            },
            2891: function() {
                return new GameRolePlayPlayerFightFriendlyAnsweredMessage();
            },
            3588: function() {
                return new GameRolePlayPlayerFightFriendlyAnswerMessage();
            },
            8153: function() {
                return new GameRolePlayPlayerFightFriendlyRequestedMessage();
            },
            8087: function() {
                return new GameRolePlayPlayerFightRequestMessage();
            },
            9279: function() {
                return new GameRolePlayRemoveChallengeMessage();
            },
            6006: function() {
                return new GameRolePlayShowChallengeMessage();
            },
            3267: function() {
                return new GameRolePlayShowActorMessage();
            },
            6726: function() {
                return new GameRolePlayShowActorWithEventMessage();
            },
            224: function() {
                return new GameRolePlayShowMultipleActorsMessage();
            },
            5326: function() {
                return new ChangeHavenBagRoomRequestMessage();
            },
            4026: function() {
                return new ChangeThemeRequestMessage();
            },
            6985: function() {
                return new CloseHavenBagFurnitureSequenceRequestMessage();
            },
            9787: function() {
                return new EditHavenBagCancelRequestMessage();
            },
            9636: function() {
                return new EditHavenBagFinishedMessage();
            },
            2826: function() {
                return new EditHavenBagRequestMessage();
            },
            6189: function() {
                return new EditHavenBagStartMessage();
            },
            6025: function() {
                return new EnterHavenBagRequestMessage();
            },
            9801: function() {
                return new ExitHavenBagRequestMessage();
            },
            7129: function() {
                return new HavenBagDailyLoteryMessage();
            },
            162: function() {
                return new HavenBagFurnituresMessage();
            },
            5848: function() {
                return new HavenBagFurnituresRequestMessage();
            },
            7074: function() {
                return new HavenBagPackListMessage();
            },
            1486: function() {
                return new HavenBagRoomUpdateMessage();
            },
            9331: function() {
                return new KickHavenBagRequestMessage();
            },
            1466: function() {
                return new HavenBagPermissionsUpdateMessage();
            },
            4397: function() {
                return new HavenBagPermissionsUpdateRequestMessage();
            },
            5649: function() {
                return new InviteInHavenBagClosedMessage();
            },
            5627: function() {
                return new InviteInHavenBagMessage();
            },
            2889: function() {
                return new InviteInHavenBagOfferMessage();
            },
            205: function() {
                return new TeleportHavenBagAnswerMessage();
            },
            5508: function() {
                return new TeleportHavenBagRequestMessage();
            },
            2398: function() {
                return new OpenHavenBagFurnitureSequenceRequestMessage();
            },
            6480: function() {
                return new AccountHouseMessage();
            },
            9517: function() {
                return new HouseGuildNoneMessage();
            },
            8301: function() {
                return new HouseGuildRightsMessage();
            },
            1431: function() {
                return new HouseGuildRightsViewMessage();
            },
            5396: function() {
                return new HouseGuildShareRequestMessage();
            },
            3504: function() {
                return new HouseBuyRequestMessage();
            },
            7313: function() {
                return new HouseBuyResultMessage();
            },
            3696: function() {
                return new HouseKickIndoorMerchantRequestMessage();
            },
            3694: function() {
                return new HouseKickRequestMessage();
            },
            780: function() {
                return new HouseLockFromInsideRequestMessage();
            },
            3052: function() {
                return new HousePropertiesMessage();
            },
            6173: function() {
                return new HouseSellFromInsideRequestMessage();
            },
            8778: function() {
                return new HouseSellingUpdateMessage();
            },
            1525: function() {
                return new HouseSellRequestMessage();
            },
            7868: function() {
                return new HouseToSellFilterMessage();
            },
            7851: function() {
                return new HouseToSellListMessage();
            },
            5809: function() {
                return new HouseToSellListRequestMessage();
            },
            6296: function() {
                return new JobAllowMultiCraftRequestMessage();
            },
            7522: function() {
                return new JobBookSubscriptionMessage();
            },
            1484: function() {
                return new JobCrafterDirectoryAddMessage();
            },
            3428: function() {
                return new JobCrafterDirectoryDefineSettingsMessage();
            },
            3830: function() {
                return new JobCrafterDirectoryEntryMessage();
            },
            9607: function() {
                return new JobCrafterDirectoryEntryRequestMessage();
            },
            9887: function() {
                return new JobCrafterDirectoryListMessage();
            },
            9508: function() {
                return new JobCrafterDirectoryListRequestMessage();
            },
            7514: function() {
                return new JobCrafterDirectoryRemoveMessage();
            },
            799: function() {
                return new JobCrafterDirectorySettingsMessage();
            },
            3919: function() {
                return new JobDescriptionMessage();
            },
            8538: function() {
                return new JobExperienceMultiUpdateMessage();
            },
            6469: function() {
                return new JobExperienceOtherPlayerUpdateMessage();
            },
            1501: function() {
                return new JobExperienceUpdateMessage();
            },
            8052: function() {
                return new JobLevelUpMessage();
            },
            5801: function() {
                return new JobMultiCraftAvailableSkillsMessage();
            },
            2066: function() {
                return new LockableChangeCodeMessage();
            },
            7160: function() {
                return new LockableCodeResultMessage();
            },
            2846: function() {
                return new LockableShowCodeDialogMessage();
            },
            4109: function() {
                return new LockableStateUpdateAbstractMessage();
            },
            2112: function() {
                return new LockableStateUpdateHouseDoorMessage();
            },
            6717: function() {
                return new LockableStateUpdateStorageMessage();
            },
            3545: function() {
                return new LockableUseCodeMessage();
            },
            4332: function() {
                return new MapComplementaryInformationsDataInHavenBagMessage();
            },
            9214: function() {
                return new MapComplementaryInformationsDataInHouseMessage();
            },
            5176: function() {
                return new MapComplementaryInformationsDataMessage();
            },
            5308: function() {
                return new MapComplementaryInformationsWithCoordsMessage();
            },
            3684: function() {
                return new MapFightCountMessage();
            },
            7089: function() {
                return new MapFightStartPositionsUpdateMessage();
            },
            9780: function() {
                return new MapInformationsRequestMessage();
            },
            6903: function() {
                return new MapObstacleUpdateMessage();
            },
            2130: function() {
                return new MapRewardRateMessage();
            },
            3172: function() {
                return new MapRunningFightDetailsExtendedMessage();
            },
            8222: function() {
                return new MapRunningFightDetailsMessage();
            },
            8879: function() {
                return new MapRunningFightDetailsRequestMessage();
            },
            2666: function() {
                return new MapRunningFightListMessage();
            },
            4556: function() {
                return new MapRunningFightListRequestMessage();
            },
            7636: function() {
                return new AlliancePrismDialogQuestionMessage();
            },
            1736: function() {
                return new AllianceTaxCollectorDialogQuestionExtendedMessage();
            },
            6863: function() {
                return new EntityTalkMessage();
            },
            8038: function() {
                return new MapNpcsQuestStatusUpdateMessage();
            },
            3416: function() {
                return new NpcDialogCreationMessage();
            },
            7921: function() {
                return new NpcDialogQuestionMessage();
            },
            6305: function() {
                return new NpcDialogReplyMessage();
            },
            1685: function() {
                return new NpcGenericActionFailureMessage();
            },
            6002: function() {
                return new NpcGenericActionRequestMessage();
            },
            9795: function() {
                return new PortalDialogCreationMessage();
            },
            6664: function() {
                return new TaxCollectorDialogQuestionBasicMessage();
            },
            9199: function() {
                return new TaxCollectorDialogQuestionExtendedMessage();
            },
            3539: function() {
                return new ObjectGroundAddedMessage();
            },
            2797: function() {
                return new ObjectGroundListAddedMessage();
            },
            5737: function() {
                return new ObjectGroundRemovedMessage();
            },
            420: function() {
                return new ObjectGroundRemovedMultipleMessage();
            },
            8442: function() {
                return new GameDataPlayFarmObjectAnimationMessage();
            },
            2259: function() {
                return new PaddockPropertiesMessage();
            },
            8137: function() {
                return new PaddockSellBuyDialogMessage();
            },
            1885: function() {
                return new PaddockToSellFilterMessage();
            },
            2971: function() {
                return new PaddockToSellListMessage();
            },
            6059: function() {
                return new PaddockToSellListRequestMessage();
            },
            2338: function() {
                return new AbstractPartyEventMessage();
            },
            5489: function() {
                return new AbstractPartyMemberInFightMessage();
            },
            995: function() {
                return new AbstractPartyMessage();
            },
            3413: function() {
                return new PartyMemberInBreachFightMessage();
            },
            5177: function() {
                return new DungeonPartyFinderAvailableDungeonsMessage();
            },
            8721: function() {
                return new DungeonPartyFinderAvailableDungeonsRequestMessage();
            },
            8025: function() {
                return new DungeonPartyFinderListenErrorMessage();
            },
            5213: function() {
                return new DungeonPartyFinderListenRequestMessage();
            },
            8304: function() {
                return new DungeonPartyFinderRegisterErrorMessage();
            },
            5219: function() {
                return new DungeonPartyFinderRegisterRequestMessage();
            },
            971: function() {
                return new DungeonPartyFinderRegisterSuccessMessage();
            },
            3771: function() {
                return new DungeonPartyFinderRoomContentMessage();
            },
            9690: function() {
                return new DungeonPartyFinderRoomContentUpdateMessage();
            },
            3389: function() {
                return new PartyEntityUpdateLightMessage();
            },
            2850: function() {
                return new PartyAbdicateThroneMessage();
            },
            6538: function() {
                return new PartyAcceptInvitationMessage();
            },
            1048: function() {
                return new PartyCancelInvitationMessage();
            },
            1837: function() {
                return new PartyCancelInvitationNotificationMessage();
            },
            842: function() {
                return new PartyCannotJoinErrorMessage();
            },
            360: function() {
                return new PartyDeletedMessage();
            },
            7104: function() {
                return new PartyFollowMemberRequestMessage();
            },
            8395: function() {
                return new PartyFollowStatusUpdateMessage();
            },
            8893: function() {
                return new PartyFollowThisMemberRequestMessage();
            },
            4310: function() {
                return new PartyInvitationArenaRequestMessage();
            },
            2521: function() {
                return new PartyInvitationCancelledForGuestMessage();
            },
            3818: function() {
                return new PartyInvitationDetailsMessage();
            },
            2173: function() {
                return new PartyInvitationDetailsRequestMessage();
            },
            1024: function() {
                return new PartyInvitationDungeonDetailsMessage();
            },
            744: function() {
                return new PartyInvitationDungeonMessage();
            },
            931: function() {
                return new PartyInvitationDungeonRequestMessage();
            },
            1605: function() {
                return new PartyInvitationMessage();
            },
            1084: function() {
                return new PartyInvitationRequestMessage();
            },
            5273: function() {
                return new PartyJoinMessage();
            },
            9472: function() {
                return new PartyKickedByMessage();
            },
            7424: function() {
                return new PartyKickRequestMessage();
            },
            3269: function() {
                return new PartyLeaderUpdateMessage();
            },
            8726: function() {
                return new PartyLeaveMessage();
            },
            6141: function() {
                return new PartyLeaveRequestMessage();
            },
            7607: function() {
                return new PartyLocateMembersMessage();
            },
            7609: function() {
                return new PartyLocateMembersRequestMessage();
            },
            7075: function() {
                return new PartyLoyaltyStatusMessage();
            },
            7887: function() {
                return new PartyMemberEjectedMessage();
            },
            3432: function() {
                return new PartyMemberInStandardFightMessage();
            },
            5580: function() {
                return new PartyMemberRemoveMessage();
            },
            6887: function() {
                return new PartyModifiableStatusMessage();
            },
            4806: function() {
                return new PartyNameSetErrorMessage();
            },
            5482: function() {
                return new PartyNameSetRequestMessage();
            },
            9548: function() {
                return new PartyNameUpdateMessage();
            },
            1186: function() {
                return new PartyNewGuestMessage();
            },
            2422: function() {
                return new PartyNewMemberMessage();
            },
            8938: function() {
                return new PartyPledgeLoyaltyRequestMessage();
            },
            8642: function() {
                return new PartyRefuseInvitationMessage();
            },
            4578: function() {
                return new PartyRefuseInvitationNotificationMessage();
            },
            5979: function() {
                return new PartyRestrictedMessage();
            },
            4679: function() {
                return new PartyStopFollowRequestMessage();
            },
            3044: function() {
                return new PartyUpdateLightMessage();
            },
            5568: function() {
                return new PartyUpdateMessage();
            },
            3240: function() {
                return new PurchasableDialogMessage();
            },
            3134: function() {
                return new FollowedQuestsMessage();
            },
            2378: function() {
                return new FollowQuestObjectiveRequestMessage();
            },
            5740: function() {
                return new GuidedModeQuitRequestMessage();
            },
            1205: function() {
                return new GuidedModeReturnRequestMessage();
            },
            7788: function() {
                return new QuestListMessage();
            },
            3293: function() {
                return new QuestListRequestMessage();
            },
            8139: function() {
                return new QuestObjectiveValidatedMessage();
            },
            6610: function() {
                return new QuestObjectiveValidationMessage();
            },
            5795: function() {
                return new QuestStartedMessage();
            },
            6179: function() {
                return new QuestStartRequestMessage();
            },
            2660: function() {
                return new QuestStepInfoMessage();
            },
            2214: function() {
                return new QuestStepInfoRequestMessage();
            },
            2692: function() {
                return new QuestStepStartedMessage();
            },
            5890: function() {
                return new QuestStepValidatedMessage();
            },
            7778: function() {
                return new QuestValidatedMessage();
            },
            1822: function() {
                return new RefreshFollowedQuestsOrderRequestMessage();
            },
            2332: function() {
                return new UnfollowQuestObjectiveRequestMessage();
            },
            2623: function() {
                return new SpellVariantActivationMessage();
            },
            7240: function() {
                return new SpellVariantActivationRequestMessage();
            },
            9735: function() {
                return new StatsUpgradeRequestMessage();
            },
            929: function() {
                return new StatsUpgradeResultMessage();
            },
            7557: function() {
                return new StopToListenRunningFightRequestMessage();
            },
            8234: function() {
                return new TeleportOnSameMapMessage();
            },
            6789: function() {
                return new PortalUseRequestMessage();
            },
            1216: function() {
                return new TreasureHuntAvailableRetryCountUpdateMessage();
            },
            9892: function() {
                return new TreasureHuntDigRequestAnswerFailedMessage();
            },
            1475: function() {
                return new TreasureHuntDigRequestAnswerMessage();
            },
            2632: function() {
                return new TreasureHuntDigRequestMessage();
            },
            2759: function() {
                return new TreasureHuntFinishedMessage();
            },
            7565: function() {
                return new TreasureHuntFlagRemoveRequestMessage();
            },
            4075: function() {
                return new TreasureHuntFlagRequestAnswerMessage();
            },
            692: function() {
                return new TreasureHuntFlagRequestMessage();
            },
            1622: function() {
                return new TreasureHuntGiveUpRequestMessage();
            },
            7662: function() {
                return new TreasureHuntLegendaryRequestMessage();
            },
            7742: function() {
                return new TreasureHuntMessage();
            },
            5673: function() {
                return new TreasureHuntRequestAnswerMessage();
            },
            9952: function() {
                return new TreasureHuntShowLegendaryUIMessage();
            },
            3713: function() {
                return new GameRolePlaySpellAnimMessage();
            },
            6430: function() {
                return new ShowCellMessage();
            },
            3535: function() {
                return new ShowCellRequestMessage();
            },
            9734: function() {
                return new ShowCellSpectatorMessage();
            },
            5720: function() {
                return new LeaveDialogMessage();
            },
            1095: function() {
                return new LeaveDialogRequestMessage();
            },
            6445: function() {
                return new PauseDialogMessage();
            },
            9744: function() {
                return new EntitiesInformationMessage();
            },
            325: function() {
                return new EntityInformationMessage();
            },
            8089: function() {
                return new ObjectFeedMessage();
            },
            2694: function() {
                return new FinishMoveListMessage();
            },
            6091: function() {
                return new FinishMoveListRequestMessage();
            },
            8686: function() {
                return new FinishMoveSetRequestMessage();
            },
            1543: function() {
                return new AcquaintanceAddedMessage();
            },
            6257: function() {
                return new AcquaintancesGetListMessage();
            },
            1119: function() {
                return new AcquaintancesListMessage();
            },
            3991: function() {
                return new ContactAddFailureMessage();
            },
            2999: function() {
                return new FriendAddedMessage();
            },
            9558: function() {
                return new FriendAddFailureMessage();
            },
            1663: function() {
                return new FriendAddRequestMessage();
            },
            5614: function() {
                return new FriendDeleteRequestMessage();
            },
            5776: function() {
                return new FriendDeleteResultMessage();
            },
            800: function() {
                return new FriendJoinRequestMessage();
            },
            6299: function() {
                return new FriendSetStatusShareMessage();
            },
            2659: function() {
                return new FriendSetWarnOnConnectionMessage();
            },
            429: function() {
                return new FriendSetWarnOnLevelGainMessage();
            },
            7455: function() {
                return new FriendsGetListMessage();
            },
            5813: function() {
                return new FriendsListMessage();
            },
            9603: function() {
                return new FriendSpouseFollowWithCompassRequestMessage();
            },
            3828: function() {
                return new FriendSpouseJoinRequestMessage();
            },
            9162: function() {
                return new FriendStatusShareStateMessage();
            },
            3021: function() {
                return new FriendUpdateMessage();
            },
            6364: function() {
                return new FriendWarnOnConnectionStateMessage();
            },
            7752: function() {
                return new FriendWarnOnLevelGainStateMessage();
            },
            3898: function() {
                return new GuildMemberSetWarnOnConnectionMessage();
            },
            4763: function() {
                return new GuildMemberWarnOnConnectionStateMessage();
            },
            1152: function() {
                return new IgnoredAddedMessage();
            },
            3617: function() {
                return new IgnoredAddFailureMessage();
            },
            5690: function() {
                return new IgnoredAddRequestMessage();
            },
            9881: function() {
                return new IgnoredDeleteRequestMessage();
            },
            4091: function() {
                return new IgnoredDeleteResultMessage();
            },
            4315: function() {
                return new IgnoredGetListMessage();
            },
            4244: function() {
                return new IgnoredListMessage();
            },
            4243: function() {
                return new SpouseGetInformationsMessage();
            },
            3802: function() {
                return new SpouseInformationsMessage();
            },
            8129: function() {
                return new SpouseStatusMessage();
            },
            9296: function() {
                return new WarnOnPermaDeathStateMessage();
            },
            5232: function() {
                return new GuestLimitationMessage();
            },
            6071: function() {
                return new GuestModeMessage();
            },
            3637: function() {
                return new ChallengeFightJoinRefusedMessage();
            },
            7441: function() {
                return new GuildBulletinMessage();
            },
            7608: function() {
                return new GuildBulletinSetErrorMessage();
            },
            9793: function() {
                return new GuildBulletinSetRequestMessage();
            },
            2729: function() {
                return new GuildChangeMemberParametersMessage();
            },
            1666: function() {
                return new GuildCharacsUpgradeRequestMessage();
            },
            563: function() {
                return new GuildCreationResultMessage();
            },
            2404: function() {
                return new GuildCreationStartedMessage();
            },
            1275: function() {
                return new GuildCreationValidMessage();
            },
            4710: function() {
                return new GuildFactsErrorMessage();
            },
            6491: function() {
                return new GuildFactsMessage();
            },
            3153: function() {
                return new GuildFactsRequestMessage();
            },
            8887: function() {
                return new GuildGetInformationsMessage();
            },
            8731: function() {
                return new GuildHouseRemoveMessage();
            },
            1180: function() {
                return new GuildHousesInformationMessage();
            },
            7382: function() {
                return new GuildHouseUpdateInformationMessage();
            },
            6401: function() {
                return new GuildInAllianceFactsMessage();
            },
            4532: function() {
                return new GuildInformationsGeneralMessage();
            },
            7251: function() {
                return new GuildInformationsMembersMessage();
            },
            7131: function() {
                return new GuildInformationsMemberUpdateMessage();
            },
            8683: function() {
                return new GuildInformationsPaddocksMessage();
            },
            2425: function() {
                return new GuildInfosUpgradeMessage();
            },
            2671: function() {
                return new GuildInvitationAnswerMessage();
            },
            5265: function() {
                return new GuildInvitationByNameMessage();
            },
            8404: function() {
                return new GuildInvitationMessage();
            },
            6703: function() {
                return new GuildInvitationStateRecrutedMessage();
            },
            7258: function() {
                return new GuildInvitationStateRecruterMessage();
            },
            3343: function() {
                return new GuildInvitedMessage();
            },
            8729: function() {
                return new GuildJoinedMessage();
            },
            5473: function() {
                return new GuildKickRequestMessage();
            },
            105: function() {
                return new GuildLeftMessage();
            },
            963: function() {
                return new GuildLevelUpMessage();
            },
            7453: function() {
                return new GuildListMessage();
            },
            7590: function() {
                return new GuildMemberLeavingMessage();
            },
            2910: function() {
                return new GuildMemberOnlineStatusMessage();
            },
            2509: function() {
                return new GuildMembershipMessage();
            },
            8864: function() {
                return new GuildModificationEmblemValidMessage();
            },
            4598: function() {
                return new GuildModificationNameValidMessage();
            },
            8188: function() {
                return new GuildModificationStartedMessage();
            },
            9265: function() {
                return new GuildModificationValidMessage();
            },
            3362: function() {
                return new GuildMotdMessage();
            },
            338: function() {
                return new GuildMotdSetErrorMessage();
            },
            9563: function() {
                return new GuildMotdSetRequestMessage();
            },
            9221: function() {
                return new GuildPaddockBoughtMessage();
            },
            369: function() {
                return new GuildPaddockRemovedMessage();
            },
            6284: function() {
                return new GuildPaddockTeleportRequestMessage();
            },
            7668: function() {
                return new GuildSpellUpgradeRequestMessage();
            },
            7241: function() {
                return new GuildVersatileInfoListMessage();
            },
            1653: function() {
                return new AbstractTaxCollectorListMessage();
            },
            7175: function() {
                return new GameRolePlayTaxCollectorFightRequestMessage();
            },
            7195: function() {
                return new GuildFightJoinRequestMessage();
            },
            1328: function() {
                return new GuildFightLeaveRequestMessage();
            },
            2079: function() {
                return new GuildFightPlayersEnemiesListMessage();
            },
            9096: function() {
                return new GuildFightPlayersEnemyRemoveMessage();
            },
            5722: function() {
                return new GuildFightPlayersHelpersJoinMessage();
            },
            6675: function() {
                return new GuildFightPlayersHelpersLeaveMessage();
            },
            2027: function() {
                return new GuildFightTakePlaceRequestMessage();
            },
            5749: function() {
                return new TaxCollectorAttackedMessage();
            },
            1261: function() {
                return new TaxCollectorAttackedResultMessage();
            },
            8117: function() {
                return new TaxCollectorErrorMessage();
            },
            6709: function() {
                return new TaxCollectorListMessage();
            },
            3252: function() {
                return new TaxCollectorMovementAddMessage();
            },
            5525: function() {
                return new TaxCollectorMovementMessage();
            },
            9648: function() {
                return new TaxCollectorMovementRemoveMessage();
            },
            3995: function() {
                return new TaxCollectorMovementsOfflineMessage();
            },
            8589: function() {
                return new TaxCollectorStateUpdateMessage();
            },
            1779: function() {
                return new TopTaxCollectorListMessage();
            },
            2580: function() {
                return new HouseTeleportRequestMessage();
            },
            4921: function() {
                return new IdolFightPreparationUpdateMessage();
            },
            6079: function() {
                return new IdolListMessage();
            },
            9953: function() {
                return new IdolPartyLostMessage();
            },
            5851: function() {
                return new IdolPartyRefreshMessage();
            },
            7898: function() {
                return new IdolPartyRegisterRequestMessage();
            },
            2458: function() {
                return new IdolSelectedMessage();
            },
            1593: function() {
                return new IdolSelectErrorMessage();
            },
            9165: function() {
                return new IdolSelectRequestMessage();
            },
            9322: function() {
                return new CharacterCapabilitiesMessage();
            },
            7087: function() {
                return new CharacterLoadingCompleteMessage();
            },
            4557: function() {
                return new OnConnectionEventMessage();
            },
            4222: function() {
                return new ServerExperienceModificatorMessage();
            },
            8111: function() {
                return new SetCharacterRestrictionsMessage();
            },
            9817: function() {
                return new InteractiveElementUpdatedMessage();
            },
            2058: function() {
                return new InteractiveMapUpdateMessage();
            },
            9111: function() {
                return new InteractiveUsedMessage();
            },
            2904: function() {
                return new InteractiveUseEndedMessage();
            },
            1013: function() {
                return new InteractiveUseErrorMessage();
            },
            3068: function() {
                return new InteractiveUseRequestMessage();
            },
            396: function() {
                return new TeleportBuddiesAnswerMessage();
            },
            8443: function() {
                return new TeleportBuddiesMessage();
            },
            2270: function() {
                return new TeleportBuddiesRequestedMessage();
            },
            4262: function() {
                return new TeleportToBuddyAnswerMessage();
            },
            2919: function() {
                return new TeleportToBuddyCloseMessage();
            },
            5505: function() {
                return new TeleportToBuddyOfferMessage();
            },
            2661: function() {
                return new InteractiveUseWithParamRequestMessage();
            },
            5472: function() {
                return new StatedElementUpdatedMessage();
            },
            9971: function() {
                return new StatedMapUpdateMessage();
            },
            5005: function() {
                return new TeleportDestinationsMessage();
            },
            657: function() {
                return new TeleportRequestMessage();
            },
            8975: function() {
                return new ZaapDestinationsMessage();
            },
            8078: function() {
                return new ZaapRespawnSaveRequestMessage();
            },
            7539: function() {
                return new ZaapRespawnUpdatedMessage();
            },
            9469: function() {
                return new DecraftResultMessage();
            },
            8622: function() {
                return new EvolutiveObjectRecycleResultMessage();
            },
            9042: function() {
                return new ExchangeAcceptMessage();
            },
            6676: function() {
                return new ExchangeBidHouseBuyMessage();
            },
            9696: function() {
                return new ExchangeBidHouseBuyResultMessage();
            },
            9722: function() {
                return new ExchangeBidHouseGenericItemAddedMessage();
            },
            636: function() {
                return new ExchangeBidHouseGenericItemRemovedMessage();
            },
            1407: function() {
                return new ExchangeBidHouseInListAddedMessage();
            },
            1444: function() {
                return new ExchangeBidHouseInListRemovedMessage();
            },
            2741: function() {
                return new ExchangeBidHouseInListUpdatedMessage();
            },
            806: function() {
                return new ExchangeBidHouseItemAddOkMessage();
            },
            8459: function() {
                return new ExchangeBidHouseItemRemoveOkMessage();
            },
            1285: function() {
                return new ExchangeBidHouseListMessage();
            },
            3234: function() {
                return new ExchangeBidHousePriceMessage();
            },
            3308: function() {
                return new ExchangeBidHouseSearchMessage();
            },
            270: function() {
                return new ExchangeBidHouseTypeMessage();
            },
            4688: function() {
                return new ExchangeBidHouseUnsoldItemsMessage();
            },
            4716: function() {
                return new ExchangeBidPriceForSellerMessage();
            },
            3774: function() {
                return new ExchangeBidPriceMessage();
            },
            8600: function() {
                return new ExchangeBidSearchOkMessage();
            },
            8531: function() {
                return new ExchangeBuyMessage();
            },
            35: function() {
                return new ExchangeBuyOkMessage();
            },
            3137: function() {
                return new ExchangeCraftCountModifiedMessage();
            },
            1855: function() {
                return new ExchangeCraftCountRequestMessage();
            },
            6788: function() {
                return new ExchangeCrafterJobLevelupMessage();
            },
            819: function() {
                return new ExchangeCraftInformationObjectMessage();
            },
            9081: function() {
                return new ExchangeCraftPaymentModificationRequestMessage();
            },
            8994: function() {
                return new ExchangeCraftPaymentModifiedMessage();
            },
            4882: function() {
                return new ExchangeCraftResultMagicWithObjectDescMessage();
            },
            1845: function() {
                return new ExchangeCraftResultMessage();
            },
            5780: function() {
                return new ExchangeCraftResultWithObjectDescMessage();
            },
            1951: function() {
                return new ExchangeCraftResultWithObjectIdMessage();
            },
            9003: function() {
                return new ExchangeErrorMessage();
            },
            2268: function() {
                return new ExchangeGuildTaxCollectorGetMessage();
            },
            173: function() {
                return new ExchangeHandleMountsMessage();
            },
            8789: function() {
                return new ExchangeIsReadyMessage();
            },
            526: function() {
                return new ExchangeItemAutoCraftStopedMessage();
            },
            9053: function() {
                return new ExchangeLeaveMessage();
            },
            4402: function() {
                return new ExchangeMoneyMovementInformationMessage();
            },
            8720: function() {
                return new ExchangeMountFreeFromPaddockMessage();
            },
            7611: function() {
                return new ExchangeMountsPaddockAddMessage();
            },
            4871: function() {
                return new ExchangeMountsPaddockRemoveMessage();
            },
            1752: function() {
                return new ExchangeMountsStableAddMessage();
            },
            839: function() {
                return new ExchangeMountsStableBornAddMessage();
            },
            2552: function() {
                return new ExchangeMountsStableRemoveMessage();
            },
            2208: function() {
                return new ExchangeMountStableErrorMessage();
            },
            2583: function() {
                return new ExchangeMountsTakenFromPaddockMessage();
            },
            4993: function() {
                return new ExchangeMountSterilizeFromPaddockMessage();
            },
            8187: function() {
                return new ExchangeObjectAddedMessage();
            },
            3691: function() {
                return new ExchangeObjectMessage();
            },
            7465: function() {
                return new ExchangeObjectModifyPricedMessage();
            },
            1621: function() {
                return new ExchangeObjectMoveKamaMessage();
            },
            7963: function() {
                return new ExchangeObjectMoveMessage();
            },
            3594: function() {
                return new ExchangeObjectMovePricedMessage();
            },
            1507: function() {
                return new ExchangeObjectsAddedMessage();
            },
            1221: function() {
                return new ExchangeObjectTransfertAllFromInvMessage();
            },
            6225: function() {
                return new ExchangeObjectTransfertAllToInvMessage();
            },
            5796: function() {
                return new ExchangeObjectTransfertExistingFromInvMessage();
            },
            6444: function() {
                return new ExchangeObjectTransfertExistingToInvMessage();
            },
            9384: function() {
                return new ExchangeObjectTransfertListFromInvMessage();
            },
            8258: function() {
                return new ExchangeObjectTransfertListToInvMessage();
            },
            8847: function() {
                return new ExchangeObjectTransfertListWithQuantityToInvMessage();
            },
            3123: function() {
                return new ExchangeObjectUseInWorkshopMessage();
            },
            9786: function() {
                return new ExchangeOfflineSoldItemsMessage();
            },
            5183: function() {
                return new ExchangeOkMultiCraftMessage();
            },
            5687: function() {
                return new ExchangeOnHumanVendorRequestMessage();
            },
            8527: function() {
                return new ExchangePlayerMultiCraftRequestMessage();
            },
            4040: function() {
                return new ExchangePlayerRequestMessage();
            },
            118: function() {
                return new ExchangeReadyMessage();
            },
            4712: function() {
                return new ExchangeReplayStopMessage();
            },
            2545: function() {
                return new ExchangeReplyTaxVendorMessage();
            },
            2157: function() {
                return new ExchangeRequestedMessage();
            },
            4929: function() {
                return new ExchangeRequestedTradeMessage();
            },
            2334: function() {
                return new ExchangeRequestMessage();
            },
            1967: function() {
                return new ExchangeRequestOnMountStockMessage();
            },
            1872: function() {
                return new ExchangeRequestOnShopStockMessage();
            },
            69: function() {
                return new ExchangeRequestOnTaxCollectorMessage();
            },
            6306: function() {
                return new ExchangeSellMessage();
            },
            678: function() {
                return new ExchangeSellOkMessage();
            },
            9959: function() {
                return new ExchangeSetCraftRecipeMessage();
            },
            418: function() {
                return new ExchangeShopStockMovementRemovedMessage();
            },
            5713: function() {
                return new ExchangeShopStockMovementUpdatedMessage();
            },
            1264: function() {
                return new ExchangeShopStockMultiMovementRemovedMessage();
            },
            230: function() {
                return new ExchangeShopStockMultiMovementUpdatedMessage();
            },
            9089: function() {
                return new ExchangeShopStockStartedMessage();
            },
            2113: function() {
                return new ExchangeShowVendorTaxMessage();
            },
            3439: function() {
                return new ExchangeStartAsVendorMessage();
            },
            6940: function() {
                return new ExchangeStartedBidBuyerMessage();
            },
            1385: function() {
                return new ExchangeStartedBidSellerMessage();
            },
            6165: function() {
                return new ExchangeStartedMessage();
            },
            8074: function() {
                return new ExchangeStartedMountStockMessage();
            },
            2431: function() {
                return new ExchangeStartedTaxCollectorShopMessage();
            },
            1554: function() {
                return new ExchangeStartedWithPodsMessage();
            },
            4230: function() {
                return new ExchangeStartedWithStorageMessage();
            },
            7527: function() {
                return new ExchangeStartOkCraftMessage();
            },
            7801: function() {
                return new ExchangeStartOkCraftWithInformationMessage();
            },
            9997: function() {
                return new ExchangeStartOkEvolutiveObjectRecycleTradeMessage();
            },
            5814: function() {
                return new ExchangeStartOkHumanVendorMessage();
            },
            9846: function() {
                return new ExchangeStartOkJobIndexMessage();
            },
            1843: function() {
                return new ExchangeStartOkMountMessage();
            },
            2914: function() {
                return new ExchangeStartOkMountWithOutPaddockMessage();
            },
            6701: function() {
                return new ExchangeStartOkMulticraftCrafterMessage();
            },
            5660: function() {
                return new ExchangeStartOkMulticraftCustomerMessage();
            },
            6110: function() {
                return new ExchangeStartOkNpcShopMessage();
            },
            6872: function() {
                return new ExchangeStartOkNpcTradeMessage();
            },
            255: function() {
                return new ExchangeStartOkRecycleTradeMessage();
            },
            4206: function() {
                return new ExchangeStartOkRunesTradeMessage();
            },
            5468: function() {
                return new ExchangeStoppedMessage();
            },
            2868: function() {
                return new ExchangeTypesExchangerDescriptionForUserMessage();
            },
            7377: function() {
                return new ExchangeTypesItemsExchangerDescriptionForUserMessage();
            },
            5909: function() {
                return new ExchangeWaitingResultMessage();
            },
            989: function() {
                return new ExchangeWeightMessage();
            },
            1260: function() {
                return new FocusedExchangeReadyMessage();
            },
            8962: function() {
                return new ItemNoMoreAvailableMessage();
            },
            4754: function() {
                return new JobBookSubscribeRequestMessage();
            },
            2403: function() {
                return new RecycleResultMessage();
            },
            7079: function() {
                return new UpdateMountCharacteristicsMessage();
            },
            4917: function() {
                return new ExchangeKamaModifiedMessage();
            },
            7247: function() {
                return new ExchangeMultiCraftCrafterCanUseHisRessourcesMessage();
            },
            2252: function() {
                return new ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage();
            },
            1372: function() {
                return new ExchangeObjectModifiedInBagMessage();
            },
            4126: function() {
                return new ExchangeObjectModifiedMessage();
            },
            8650: function() {
                return new ExchangeObjectPutInBagMessage();
            },
            5956: function() {
                return new ExchangeObjectRemovedFromBagMessage();
            },
            7088: function() {
                return new ExchangeObjectRemovedMessage();
            },
            9650: function() {
                return new ExchangeObjectsModifiedMessage();
            },
            2876: function() {
                return new ExchangeObjectsRemovedMessage();
            },
            8494: function() {
                return new ExchangePodsModifiedMessage();
            },
            1255: function() {
                return new GoldAddedMessage();
            },
            7685: function() {
                return new InventoryContentMessage();
            },
            8104: function() {
                return new InventoryWeightMessage();
            },
            5753: function() {
                return new LivingObjectChangeSkinRequestMessage();
            },
            9684: function() {
                return new LivingObjectDissociateMessage();
            },
            7628: function() {
                return new LivingObjectMessageMessage();
            },
            6521: function() {
                return new LivingObjectMessageRequestMessage();
            },
            288: function() {
                return new MimicryObjectAssociatedMessage();
            },
            195: function() {
                return new MimicryObjectEraseRequestMessage();
            },
            6833: function() {
                return new MimicryObjectErrorMessage();
            },
            1925: function() {
                return new MimicryObjectFeedAndAssociateRequestMessage();
            },
            907: function() {
                return new MimicryObjectPreviewMessage();
            },
            2523: function() {
                return new ObjectAddedMessage();
            },
            8730: function() {
                return new ObjectDeletedMessage();
            },
            8482: function() {
                return new ObjectDeleteMessage();
            },
            5921: function() {
                return new ObjectDropMessage();
            },
            2965: function() {
                return new ObjectErrorMessage();
            },
            5863: function() {
                return new ObjectJobAddedMessage();
            },
            9694: function() {
                return new ObjectModifiedMessage();
            },
            8953: function() {
                return new ObjectMovementMessage();
            },
            9153: function() {
                return new ObjectQuantityMessage();
            },
            1391: function() {
                return new ObjectsAddedMessage();
            },
            2210: function() {
                return new ObjectsDeletedMessage();
            },
            7839: function() {
                return new ObjectSetPositionMessage();
            },
            9021: function() {
                return new ObjectsQuantityMessage();
            },
            8030: function() {
                return new ObjectUseMessage();
            },
            1737: function() {
                return new ObjectUseMultipleMessage();
            },
            2641: function() {
                return new ObjectUseOnCellMessage();
            },
            9511: function() {
                return new ObjectUseOnCharacterMessage();
            },
            198: function() {
                return new ObtainedItemMessage();
            },
            5610: function() {
                return new ObtainedItemWithBonusMessage();
            },
            9473: function() {
                return new SetUpdateMessage();
            },
            377: function() {
                return new SymbioticObjectAssociatedMessage();
            },
            5881: function() {
                return new SymbioticObjectAssociateRequestMessage();
            },
            5316: function() {
                return new SymbioticObjectErrorMessage();
            },
            1656: function() {
                return new WatchInventoryContentMessage();
            },
            134: function() {
                return new WrapperObjectAssociatedMessage();
            },
            8316: function() {
                return new WrapperObjectDissociateRequestMessage();
            },
            6972: function() {
                return new WrapperObjectErrorMessage();
            },
            7707: function() {
                return new KamasUpdateMessage();
            },
            4399: function() {
                return new ObjectAveragePricesErrorMessage();
            },
            809: function() {
                return new ObjectAveragePricesGetMessage();
            },
            3534: function() {
                return new ObjectAveragePricesMessage();
            },
            3553: function() {
                return new SpellListMessage();
            },
            8231: function() {
                return new StorageInventoryContentMessage();
            },
            9471: function() {
                return new StorageKamasUpdateMessage();
            },
            7419: function() {
                return new StorageObjectRemoveMessage();
            },
            3869: function() {
                return new StorageObjectsRemoveMessage();
            },
            7292: function() {
                return new StorageObjectsUpdateMessage();
            },
            7486: function() {
                return new StorageObjectUpdateMessage();
            },
            8715: function() {
                return new AccessoryPreviewErrorMessage();
            },
            1972: function() {
                return new AccessoryPreviewMessage();
            },
            4736: function() {
                return new AccessoryPreviewRequestMessage();
            },
            4006: function() {
                return new PopupWarningMessage();
            },
            4867: function() {
                return new AreaFightModificatorUpdateMessage();
            },
            9163: function() {
                return new IconNamedPresetSaveRequestMessage();
            },
            5015: function() {
                return new IconPresetSaveRequestMessage();
            },
            5636: function() {
                return new IdolsPresetSaveRequestMessage();
            },
            4221: function() {
                return new InvalidPresetsMessage();
            },
            6150: function() {
                return new ItemForPresetUpdateMessage();
            },
            8718: function() {
                return new PresetDeleteRequestMessage();
            },
            2952: function() {
                return new PresetDeleteResultMessage();
            },
            2420: function() {
                return new PresetSavedMessage();
            },
            810: function() {
                return new PresetSaveErrorMessage();
            },
            3014: function() {
                return new PresetsMessage();
            },
            6757: function() {
                return new PresetUseRequestMessage();
            },
            2621: function() {
                return new PresetUseResultMessage();
            },
            2959: function() {
                return new PresetUseResultWithMissingIdsMessage();
            },
            972: function() {
                return new PrismAttackRequestMessage();
            },
            5640: function() {
                return new PrismFightAddedMessage();
            },
            1719: function() {
                return new PrismFightAttackerAddMessage();
            },
            1307: function() {
                return new PrismFightAttackerRemoveMessage();
            },
            873: function() {
                return new PrismFightDefenderAddMessage();
            },
            3077: function() {
                return new PrismFightDefenderLeaveMessage();
            },
            6578: function() {
                return new PrismFightJoinLeaveRequestMessage();
            },
            6447: function() {
                return new PrismFightRemovedMessage();
            },
            2395: function() {
                return new PrismFightStateUpdateMessage();
            },
            7833: function() {
                return new PrismFightSwapRequestMessage();
            },
            6760: function() {
                return new PrismInfoCloseMessage();
            },
            2678: function() {
                return new PrismInfoInValidMessage();
            },
            9455: function() {
                return new PrismInfoJoinLeaveRequestMessage();
            },
            4413: function() {
                return new PrismModuleExchangeRequestMessage();
            },
            2267: function() {
                return new PrismSetSabotagedRefusedMessage();
            },
            1806: function() {
                return new PrismSetSabotagedRequestMessage();
            },
            6258: function() {
                return new PrismSettingsErrorMessage();
            },
            5624: function() {
                return new PrismSettingsRequestMessage();
            },
            4624: function() {
                return new PrismsInfoValidMessage();
            },
            4815: function() {
                return new PrismsListMessage();
            },
            5140: function() {
                return new PrismsListRegisterMessage();
            },
            9870: function() {
                return new PrismsListUpdateMessage();
            },
            9551: function() {
                return new PrismUseRequestMessage();
            },
            2029: function() {
                return new AlignmentRankUpdateMessage();
            },
            7829: function() {
                return new SetEnableAVARequestMessage();
            },
            8131: function() {
                return new SetEnablePVPRequestMessage();
            },
            2008: function() {
                return new UpdateMapPlayersAgressableStatusMessage();
            },
            7042: function() {
                return new UpdateSelfAgressableStatusMessage();
            },
            9796: function() {
                return new CinematicMessage();
            },
            6945: function() {
                return new URLOpenMessage();
            },
            6840: function() {
                return new ShortcutBarAddErrorMessage();
            },
            7311: function() {
                return new ShortcutBarAddRequestMessage();
            },
            276: function() {
                return new ShortcutBarContentMessage();
            },
            9659: function() {
                return new ShortcutBarRefreshMessage();
            },
            9619: function() {
                return new ShortcutBarRemovedMessage();
            },
            2776: function() {
                return new ShortcutBarRemoveErrorMessage();
            },
            7396: function() {
                return new ShortcutBarRemoveRequestMessage();
            },
            5098: function() {
                return new ShortcutBarReplacedMessage();
            },
            4478: function() {
                return new ShortcutBarSwapErrorMessage();
            },
            4225: function() {
                return new ShortcutBarSwapRequestMessage();
            },
            6070: function() {
                return new BulletinMessage();
            },
            7031: function() {
                return new ContactLookErrorMessage();
            },
            4440: function() {
                return new ContactLookMessage();
            },
            3633: function() {
                return new ContactLookRequestByIdMessage();
            },
            4430: function() {
                return new ContactLookRequestByNameMessage();
            },
            6653: function() {
                return new ContactLookRequestMessage();
            },
            1883: function() {
                return new SocialNoticeMessage();
            },
            9965: function() {
                return new SocialNoticeSetErrorMessage();
            },
            7244: function() {
                return new SocialNoticeSetRequestMessage();
            },
            1188: function() {
                return new StartupActionAddMessage();
            },
            7923: function() {
                return new StartupActionFinishedMessage();
            },
            6836: function() {
                return new StartupActionsAllAttributionMessage();
            },
            5775: function() {
                return new StartupActionsExecuteMessage();
            },
            9417: function() {
                return new StartupActionsListMessage();
            },
            9830: function() {
                return new StartupActionsObjetAttributionMessage();
            },
            3344: function() {
                return new SubscriptionLimitationMessage();
            },
            5540: function() {
                return new SubscriptionZoneMessage();
            },
            7295: function() {
                return new OrnamentGainedMessage();
            },
            8465: function() {
                return new OrnamentLostMessage();
            },
            8881: function() {
                return new OrnamentSelectedMessage();
            },
            6085: function() {
                return new OrnamentSelectErrorMessage();
            },
            3929: function() {
                return new OrnamentSelectRequestMessage();
            },
            6677: function() {
                return new TitleGainedMessage();
            },
            7521: function() {
                return new TitleLostMessage();
            },
            1979: function() {
                return new TitlesAndOrnamentsListMessage();
            },
            5637: function() {
                return new TitlesAndOrnamentsListRequestMessage();
            },
            9932: function() {
                return new TitleSelectedMessage();
            },
            7106: function() {
                return new TitleSelectErrorMessage();
            },
            8478: function() {
                return new TitleSelectRequestMessage();
            },
            4274: function() {
                return new ClientUIOpenedByObjectMessage();
            },
            4819: function() {
                return new ClientUIOpenedMessage();
            },
            4849: function() {
                return new ProtocolRequired();
            },
            507: function() {
                return new LoginQueueStatusMessage();
            },
            5179: function() {
                return new QueueStatusMessage();
            },
            6289: function() {
                return new TrustStatusMessage();
            },
            2262: function() {
                return new CheckFileMessage();
            },
            3787: function() {
                return new CheckFileRequestMessage();
            },
            8389: function() {
                return new CheckIntegrityMessage();
            },
            992: function() {
                return new ClientKeyMessage();
            },
            6253: function() {
                return new RawDataMessage();
            },
            3816: function() {
                return new SystemMessageDisplayMessage();
            },
            3493: function() {
                return new AccountInformationsUpdateMessage();
            },
            9985: function() {
                return new MailStatusMessage();
            },
            2732: function() {
                return new NewMailMessage();
            },
            6974: function() {
                return new HaapiApiKeyMessage();
            },
            1761: function() {
                return new HaapiApiKeyRequestMessage();
            },
            4210: function() {
                return new HaapiAuthErrorMessage();
            },
            875: function() {
                return new HaapiBufferListMessage();
            },
            8126: function() {
                return new HaapiBufferListRequestMessage();
            },
            8752: function() {
                return new HaapiBuyValidationMessage();
            },
            512: function() {
                return new HaapiCancelBidRequestMessage();
            },
            2667: function() {
                return new HaapiConfirmationMessage();
            },
            7918: function() {
                return new HaapiConfirmationRequestMessage();
            },
            7398: function() {
                return new HaapiConsumeBufferRequestMessage();
            },
            3180: function() {
                return new HaapiSessionMessage();
            },
            2762: function() {
                return new HaapiShopApiKeyMessage();
            },
            6567: function() {
                return new HaapiShopApiKeyRequestMessage();
            },
            3058: function() {
                return new HaapiTokenMessage();
            },
            3174: function() {
                return new HaapiTokenRequestMessage();
            },
            8381: function() {
                return new HaapiValidationMessage();
            },
            3277: function() {
                return new HaapiValidationRequestMessage();
            },
            1921: function() {
                return new ClientYouAreDrunkMessage();
            }
        }
        return MessageReceiver;
    })();
    Protocol.MessageReceiver = MessageReceiver;
    var Metadata = (function() {
        function Metadata() {}
        Metadata.PROTOCOL_BUILD = "1.0.1-ad7c4fd";
        Metadata.PROTOCOL_DATE = "Thu, 27 Aug 2020 15:04:57 +0000";
        return Metadata;
    })
    Protocol.Metadata = Metadata;
    var NetworkMessage = (function() {

        function NetworkMessage() {
            ++NetworkMessage.GLOBAL_INSTANCE_ID;
        }
        NetworkMessage.writePacket = function(param1, param2, param3) {
            var _loc5_ = 0;
            var _loc6_ = 0;

            var _loc4_ = this.computeTypeLen(param3.length);
            param1.writeShort(this.subComputeStaticHeader(param2, _loc4_));
            param1.writeUnsignedInt(this.GLOBAL_INSTANCE_ID)

            switch (_loc4_) {
                case 0:
                    return;
                case 1:
                    param1.writeByte(param3.length);
                    break;
                case 2:
                    param1.writeShort(param3.length);
                    break;
                case 3:
                    _loc5_ = param3.length >> 16 & 255;
                    _loc6_ = param3.length & 65535;
                    param1.writeByte(_loc5_);
                    param1.writeShort(_loc6_);
                    break;
            }

            param1.writeBytes(param3, 0, param3.buffer.length);

        };
        NetworkMessage.computeTypeLen = function(param1) {
            if (param1 > 65535) {
                return 3;
            }
            if (param1 > 255) {
                return 2;
            }
            if (param1 > 0) {
                return 1;
            }
            return 0;
        };
        NetworkMessage.subComputeStaticHeader = function(param1, param2) {
            return param1 << NetworkMessage.BIT_RIGHT_SHIFT_LEN_PACKET_ID | param2;
        };
        NetworkMessage.BIT_RIGHT_SHIFT_LEN_PACKET_ID = 2;
        NetworkMessage.BIT_MASK = 3;
        NetworkMessage.GLOBAL_INSTANCE_ID = 0;
        return NetworkMessage;
    })();
    Protocol.NetworkMessage = NetworkMessage;
    var ProtocolConstantsEnum = (function() {
        function ProtocolConstantsEnum() {}
        ProtocolConstantsEnum.DEFAULT_TOOLTIP_DURATION = 2500;
        ProtocolConstantsEnum.MAP_CELL_COUNT = 560;
        ProtocolConstantsEnum.MAX_LEVEL = 200;
        ProtocolConstantsEnum.MAX_GUILD_LEVEL = 200;
        ProtocolConstantsEnum.MAX_MOUNT_LEVEL = 100;
        ProtocolConstantsEnum.MAX_CMD_LEN = 768;
        ProtocolConstantsEnum.MAX_CHAT_LEN = 512;
        ProtocolConstantsEnum.USER_MAX_CHAT_LEN = 256;
        ProtocolConstantsEnum.MAX_MOTD_LEN = 512;
        ProtocolConstantsEnum.USER_MAX_MOTD_LEN = 256;
        ProtocolConstantsEnum.MAX_BULLETIN_LEN = 5120;
        ProtocolConstantsEnum.USER_MAX_BULLETIN_LEN = 2560;
        ProtocolConstantsEnum.MAX_STAT_LEN = 512;
        ProtocolConstantsEnum.MAX_STAT_BY_MSG = 20;
        ProtocolConstantsEnum.MIN_LOGIN_LEN = 3;
        ProtocolConstantsEnum.MAX_LOGIN_LEN = 50;
        ProtocolConstantsEnum.MIN_PLAYER_NAME_LEN = 2;
        ProtocolConstantsEnum.MAX_PLAYER_NAME_LEN = 26;
        ProtocolConstantsEnum.PLAYER_SERVER_TAG_LEN = 6;
        ProtocolConstantsEnum.MIN_NICK_LEN = 2;
        ProtocolConstantsEnum.MAX_NICK_LEN = 30;
        ProtocolConstantsEnum.MIN_GUILDNAME_LEN = 3;
        ProtocolConstantsEnum.MAX_GUILDNAME_LEN = 30;
        ProtocolConstantsEnum.MIN_ALLIANCENAME_LEN = 3;
        ProtocolConstantsEnum.MAX_ALLIANCENAME_LEN = 30;
        ProtocolConstantsEnum.MIN_ALLIANCETAG_LEN = 3;
        ProtocolConstantsEnum.MAX_ALLIANCETAG_LEN = 7;
        ProtocolConstantsEnum.ALLIANCETAG_NUMBER_LEN = 2;
        ProtocolConstantsEnum.MIN_PARTY_NAME_LEN = 0;
        ProtocolConstantsEnum.MAX_PARTY_NAME_LEN = 25;
        ProtocolConstantsEnum.MAX_PLAYER_COLOR = 5;
        ProtocolConstantsEnum.MAX_ENTITY_COLOR = 10;
        ProtocolConstantsEnum.MAX_PLAYERS_PER_TEAM = 8;
        ProtocolConstantsEnum.MAX_MEMBERS_PER_PARTY = 8;
        ProtocolConstantsEnum.MAX_GUESTS_PER_PARTY = 7;
        ProtocolConstantsEnum.MAX_MEMBERS_PER_ARENA_PARTY = 5;
        ProtocolConstantsEnum.MAX_MONSTERS_IN_GROUP_ON_MAP = 16;
        ProtocolConstantsEnum.MAX_CHAT_OBJECT_REF = 16;
        ProtocolConstantsEnum.NOT_EQUIPED = 63;
        ProtocolConstantsEnum.MAX_EQUIPED = 255;
        ProtocolConstantsEnum.SLOTS_EQUIPABLE_BY_USER = 16;
        ProtocolConstantsEnum.MAX_CRAFT_SLOT = 9;
        ProtocolConstantsEnum.MAX_JOB_LEVEL = 200;
        ProtocolConstantsEnum.MAX_JOB_LEVEL_NONSUBSCRIBER = 60;
        ProtocolConstantsEnum.MAX_HONOR = 20000;
        ProtocolConstantsEnum.MAX_SHORTCUT = 99;
        ProtocolConstantsEnum.MAX_ARENA_RANK = 20000;
        ProtocolConstantsEnum.CHAR_MIN_LEVEL_ARENA = 20;
        ProtocolConstantsEnum.CHAR_MIN_LEVEL_RIDE = 60;
        ProtocolConstantsEnum.MAX_DUNGEON_REGISTER = 10;
        ProtocolConstantsEnum.MIN_RIDE_NAME_LEN = 0;
        ProtocolConstantsEnum.MAX_RIDE_NAME_LEN = 16;
        ProtocolConstantsEnum.MAX_EFFECTS_COUNT = 150;
        ProtocolConstantsEnum.MAX_LOCKABLE_CODE_LEN = 8;
        ProtocolConstantsEnum.MAX_PRESET_COUNT = 18;
        ProtocolConstantsEnum.MAX_IDOLS_PRESET_IDOL_COUNT = 6;
        ProtocolConstantsEnum.MIN_OBJ_COUNT_BY_XFERT = 1;
        ProtocolConstantsEnum.MAX_OBJ_COUNT_BY_XFERT = 800;
        ProtocolConstantsEnum.MAX_FARMS_INSTANCES_PER_MAP = 60;
        ProtocolConstantsEnum.MAX_STABLED_RIDES = 250;
        ProtocolConstantsEnum.MAX_OBJ_COUNT_BY_DECRAFT = 50;
        ProtocolConstantsEnum.MAX_WAVE = 100;
        ProtocolConstantsEnum.MAX_OBJECT_EFFECT_STRING_LEN = 30;
        ProtocolConstantsEnum.MAX_PLAYER_OR_ACCOUNT_NAME_LEN = 31;
        ProtocolConstantsEnum.MAX_MEMBERS_PER_GUILD = 240;
        ProtocolConstantsEnum.MAX_ADDITIONNAL_PER_CARAC = 100;
        ProtocolConstantsEnum.MAX_RECONNECTION_ATTEMPTS = 5;
        ProtocolConstantsEnum.MAX_FURNITURES_PER_PACKET = 40;
        ProtocolConstantsEnum.MIN_LEVEL_HAVENBAG = 10;
        ProtocolConstantsEnum.MIN_PLAYERS_FOR_GROUP_IDOLS = 3;
        ProtocolConstantsEnum.MAX_KAMA = 1000000000000;
        ProtocolConstantsEnum.MAX_FOLLOWED_QUESTS = 5;
        ProtocolConstantsEnum.MIN_LEVEL_BREACH = 50;
        ProtocolConstantsEnum.MIN_EMAIL_LENGTH = 3;
        ProtocolConstantsEnum.MAX_EMAIL_LENGTH = 254;
        ProtocolConstantsEnum.UUID5_LENGTH = 36;
        ProtocolConstantsEnum.MAX_SHORT_VALUE = 32767;
        return ProtocolConstantsEnum;
    })
    Protocol.ProtocolConstantsEnum = ProtocolConstantsEnum;
    var ProtocolTypeManager = (function() {
        function ProtocolTypeManager() {}
        ProtocolTypeManager.getInstance = function(networkType, typeId) {
            var _loc3_ = ProtocolTypeManager._list[typeId];
            if (!_loc3_) {
                throw new Error('Type with id ' + typeId + ' is unknown.');
            }
            return _loc3_();
        };

        ProtocolTypeManager._list = {
            7795: function() {
                return new StatisticData();
            },
            3779: function() {
                return new StatisticDataBoolean();
            },
            3536: function() {
                return new StatisticDataByte();
            },
            4640: function() {
                return new StatisticDataInt();
            },
            4749: function() {
                return new StatisticDataShort();
            },
            9818: function() {
                return new StatisticDataString();
            },
            1852: function() {
                return new GameServerInformations();
            },
            4830: function() {
                return new Achievement();
            },
            9231: function() {
                return new AchievementAchieved();
            },
            2164: function() {
                return new AchievementAchievedRewardable();
            },
            8118: function() {
                return new AchievementObjective();
            },
            3401: function() {
                return new AchievementStartedObjective();
            },
            2740: function() {
                return new FightDispellableEffectExtendedInformations();
            },
            9836: function() {
                return new AbstractFightDispellableEffect();
            },
            2668: function() {
                return new FightTemporaryBoostEffect();
            },
            7115: function() {
                return new FightTemporaryBoostStateEffect();
            },
            4451: function() {
                return new FightTemporaryBoostWeaponDamagesEffect();
            },
            5674: function() {
                return new FightTemporarySpellBoostEffect();
            },
            8464: function() {
                return new FightTemporarySpellImmunityEffect();
            },
            3040: function() {
                return new FightTriggeredEffect();
            },
            8797: function() {
                return new GameActionMark();
            },
            7802: function() {
                return new GameActionMarkedCell();
            },
            9452: function() {
                return new ServerSessionConstant();
            },
            292: function() {
                return new ServerSessionConstantInteger();
            },
            2488: function() {
                return new ServerSessionConstantLong();
            },
            133: function() {
                return new ServerSessionConstantString();
            },
            120: function() {
                return new AbstractCharacterInformation();
            },
            1230: function() {
                return new ActorAlignmentInformations();
            },
            5506: function() {
                return new ActorExtendedAlignmentInformations();
            },
            9273: function() {
                return new CharacterBasicMinimalInformations();
            },
            1767: function() {
                return new CharacterBaseCharacteristic();
            },
            1092: function() {
                return new CharacterCharacteristicsInformations();
            },
            9332: function() {
                return new CharacterSpellModification();
            },
            9412: function() {
                return new CharacterMinimalAllianceInformations();
            },
            6416: function() {
                return new CharacterMinimalGuildInformations();
            },
            2887: function() {
                return new CharacterMinimalGuildPublicInformations();
            },
            8058: function() {
                return new CharacterMinimalInformations();
            },
            651: function() {
                return new CharacterMinimalPlusLookAndGradeInformations();
            },
            8237: function() {
                return new CharacterMinimalPlusLookInformations();
            },
            6238: function() {
                return new CharacterBaseInformations();
            },
            3059: function() {
                return new CharacterHardcoreOrEpicInformations();
            },
            2924: function() {
                return new CharacterRemodelingInformation();
            },
            1292: function() {
                return new CharacterToRemodelInformations();
            },
            6075: function() {
                return new RemodelingInformation();
            },
            9957: function() {
                return new DebtInformation();
            },
            9275: function() {
                return new KamaDebtInformation();
            },
            4964: function() {
                return new ActorRestrictionsInformations();
            },
            6513: function() {
                return new PlayerStatus();
            },
            2943: function() {
                return new PlayerStatusExtended();
            },
            3924: function() {
                return new ActorOrientation();
            },
            7114: function() {
                return new EntityDispositionInformations();
            },
            8915: function() {
                return new EntityMovementInformations();
            },
            5839: function() {
                return new AbstractFightTeamInformations();
            },
            1071: function() {
                return new BaseSpawnMonsterInformation();
            },
            5175: function() {
                return new FightAllianceTeamInformations();
            },
            3668: function() {
                return new FightCommonInformations();
            },
            1397: function() {
                return new FightExternalInformations();
            },
            7757: function() {
                return new FightLoot();
            },
            7650: function() {
                return new FightOptionsInformations();
            },
            5618: function() {
                return new FightResultAdditionalData();
            },
            2135: function() {
                return new FightResultExperienceData();
            },
            7733: function() {
                return new FightResultFighterListEntry();
            },
            5766: function() {
                return new FightResultListEntry();
            },
            6988: function() {
                return new FightResultMutantListEntry();
            },
            6765: function() {
                return new FightResultPlayerListEntry();
            },
            3462: function() {
                return new FightResultPvpData();
            },
            6240: function() {
                return new FightResultTaxCollectorListEntry();
            },
            9262: function() {
                return new FightStartingPositions();
            },
            4426: function() {
                return new FightTeamInformations();
            },
            6266: function() {
                return new FightTeamLightInformations();
            },
            9851: function() {
                return new FightTeamMemberCharacterInformations();
            },
            6288: function() {
                return new FightTeamMemberEntityInformation();
            },
            5931: function() {
                return new FightTeamMemberInformations();
            },
            8081: function() {
                return new FightTeamMemberMonsterInformations();
            },
            431: function() {
                return new FightTeamMemberTaxCollectorInformations();
            },
            8004: function() {
                return new FightTeamMemberWithAllianceCharacterInformations();
            },
            7069: function() {
                return new GameContextBasicSpawnInformation();
            },
            904: function() {
                return new GameContextSummonsInformation();
            },
            950: function() {
                return new GameFightAIInformations();
            },
            7807: function() {
                return new GameFightCharacterInformations();
            },
            7452: function() {
                return new GameFightEffectTriggerCount();
            },
            9631: function() {
                return new GameFightEntityInformation();
            },
            6182: function() {
                return new GameFightFighterEntityLightInformation();
            },
            8400: function() {
                return new GameFightFighterInformations();
            },
            6683: function() {
                return new GameFightFighterLightInformations();
            },
            6947: function() {
                return new GameFightFighterMonsterLightInformations();
            },
            6665: function() {
                return new GameFightFighterNamedInformations();
            },
            8143: function() {
                return new GameFightFighterNamedLightInformations();
            },
            8613: function() {
                return new GameFightFighterTaxCollectorLightInformations();
            },
            8253: function() {
                return new GameFightMinimalStats();
            },
            9464: function() {
                return new GameFightMinimalStatsPreparation();
            },
            6096: function() {
                return new GameFightMonsterInformations();
            },
            1318: function() {
                return new GameFightMonsterWithAlignmentInformations();
            },
            4633: function() {
                return new GameFightMutantInformations();
            },
            8499: function() {
                return new GameFightResumeSlaveInfo();
            },
            9167: function() {
                return new GameFightSpellCooldown();
            },
            6975: function() {
                return new GameFightTaxCollectorInformations();
            },
            1888: function() {
                return new SpawnCharacterInformation();
            },
            7811: function() {
                return new SpawnCompanionInformation();
            },
            2131: function() {
                return new SpawnInformation();
            },
            3264: function() {
                return new SpawnMonsterInformation();
            },
            8617: function() {
                return new SpawnScaledMonsterInformation();
            },
            4954: function() {
                return new FightEntityDispositionInformations();
            },
            424: function() {
                return new GameContextActorInformations();
            },
            9244: function() {
                return new GameContextActorPositionInformations();
            },
            3424: function() {
                return new GameRolePlayTaxCollectorInformations();
            },
            4029: function() {
                return new IdentifiedEntityDispositionInformations();
            },
            2571: function() {
                return new MapCoordinates();
            },
            5358: function() {
                return new MapCoordinatesAndId();
            },
            1591: function() {
                return new MapCoordinatesExtended();
            },
            2771: function() {
                return new AlignmentWarEffortInformation();
            },
            2484: function() {
                return new AllianceInformations();
            },
            1267: function() {
                return new AlternativeMonstersInGroupLightInformations();
            },
            9877: function() {
                return new AnomalySubareaInformation();
            },
            6171: function() {
                return new AtlasPointsInformations();
            },
            3988: function() {
                return new BasicAllianceInformations();
            },
            492: function() {
                return new BasicGuildInformations();
            },
            5935: function() {
                return new BasicNamedAllianceInformations();
            },
            4379: function() {
                return new BreachBranch();
            },
            5533: function() {
                return new BreachReward();
            },
            4962: function() {
                return new ExtendedBreachBranch();
            },
            3547: function() {
                return new ExtendedLockedBreachBranch();
            },
            125: function() {
                return new ArenaLeagueRanking();
            },
            7040: function() {
                return new ArenaRankInfos();
            },
            7102: function() {
                return new ArenaRanking();
            },
            1189: function() {
                return new LeagueFriendInformations();
            },
            2333: function() {
                return new GameRolePlayActorInformations();
            },
            5268: function() {
                return new GameRolePlayCharacterInformations();
            },
            4648: function() {
                return new GameRolePlayGroupMonsterInformations();
            },
            7041: function() {
                return new GameRolePlayGroupMonsterWaveInformations();
            },
            2640: function() {
                return new GameRolePlayHumanoidInformations();
            },
            1204: function() {
                return new GameRolePlayMerchantInformations();
            },
            4944: function() {
                return new GameRolePlayMountInformations();
            },
            8271: function() {
                return new GameRolePlayMutantInformations();
            },
            5940: function() {
                return new GameRolePlayNamedActorInformations();
            },
            8307: function() {
                return new GameRolePlayNpcInformations();
            },
            5968: function() {
                return new GameRolePlayNpcWithQuestInformations();
            },
            6138: function() {
                return new GameRolePlayPortalInformations();
            },
            7: function() {
                return new GameRolePlayPrismInformations();
            },
            5073: function() {
                return new GameRolePlayTreasureHintInformations();
            },
            4311: function() {
                return new GroupMonsterStaticInformations();
            },
            8629: function() {
                return new GroupMonsterStaticInformationsWithAlternatives();
            },
            8268: function() {
                return new GuildInAllianceInformations();
            },
            6928: function() {
                return new GuildInformations();
            },
            5831: function() {
                return new HumanInformations();
            },
            6272: function() {
                return new HumanOption();
            },
            374: function() {
                return new HumanOptionAlliance();
            },
            7370: function() {
                return new HumanOptionEmote();
            },
            2856: function() {
                return new HumanOptionFollowers();
            },
            7229: function() {
                return new HumanOptionGuild();
            },
            2440: function() {
                return new HumanOptionObjectUse();
            },
            5651: function() {
                return new HumanOptionOrnament();
            },
            4888: function() {
                return new HumanOptionSkillUse();
            },
            6451: function() {
                return new HumanOptionTitle();
            },
            3237: function() {
                return new DecraftedItemStackInfo();
            },
            8818: function() {
                return new JobBookSubscription();
            },
            3458: function() {
                return new JobCrafterDirectoryEntryJobInfo();
            },
            8534: function() {
                return new JobCrafterDirectoryEntryPlayerInfo();
            },
            1757: function() {
                return new JobCrafterDirectoryListEntry();
            },
            6554: function() {
                return new JobCrafterDirectorySettings();
            },
            557: function() {
                return new JobDescription();
            },
            1449: function() {
                return new JobExperience();
            },
            4497: function() {
                return new MonsterBoosts();
            },
            3232: function() {
                return new MonsterInGroupInformations();
            },
            7146: function() {
                return new MonsterInGroupLightInformations();
            },
            9311: function() {
                return new ObjectItemInRolePlay();
            },
            8707: function() {
                return new DungeonPartyFinderPlayer();
            },
            4252: function() {
                return new PartyEntityBaseInformation();
            },
            4347: function() {
                return new PartyEntityMemberInformation();
            },
            644: function() {
                return new NamedPartyTeam();
            },
            8513: function() {
                return new NamedPartyTeamWithOutcome();
            },
            9468: function() {
                return new PartyGuestInformations();
            },
            7145: function() {
                return new PartyInvitationMemberInformations();
            },
            1101: function() {
                return new PartyMemberArenaInformations();
            },
            6428: function() {
                return new PartyMemberGeoPosition();
            },
            8246: function() {
                return new PartyMemberInformations();
            },
            9023: function() {
                return new GameRolePlayNpcQuestFlag();
            },
            3438: function() {
                return new QuestActiveDetailedInformations();
            },
            2513: function() {
                return new QuestActiveInformations();
            },
            8695: function() {
                return new QuestObjectiveInformations();
            },
            5778: function() {
                return new QuestObjectiveInformationsWithCompletion();
            },
            1367: function() {
                return new PortalInformation();
            },
            2701: function() {
                return new TreasureHuntFlag();
            },
            5041: function() {
                return new TreasureHuntStep();
            },
            3298: function() {
                return new TreasureHuntStepDig();
            },
            6367: function() {
                return new TreasureHuntStepFight();
            },
            1881: function() {
                return new TreasureHuntStepFollowDirection();
            },
            5721: function() {
                return new TreasureHuntStepFollowDirectionToHint();
            },
            7951: function() {
                return new TreasureHuntStepFollowDirectionToPOI();
            },
            6436: function() {
                return new TaxCollectorStaticExtendedInformations();
            },
            2842: function() {
                return new TaxCollectorStaticInformations();
            },
            9234: function() {
                return new BidExchangerObjectInfo();
            },
            6577: function() {
                return new ObjectEffect();
            },
            9295: function() {
                return new ObjectEffectCreature();
            },
            2036: function() {
                return new ObjectEffectDate();
            },
            9512: function() {
                return new ObjectEffectDice();
            },
            7748: function() {
                return new ObjectEffectDuration();
            },
            9369: function() {
                return new ObjectEffectInteger();
            },
            6916: function() {
                return new ObjectEffectLadder();
            },
            9076: function() {
                return new ObjectEffectMinMax();
            },
            8688: function() {
                return new ObjectEffectMount();
            },
            2216: function() {
                return new ObjectEffectString();
            },
            6454: function() {
                return new ForgettableSpellItem();
            },
            4296: function() {
                return new GoldItem();
            },
            2202: function() {
                return new Item();
            },
            4843: function() {
                return new ObjectEffects();
            },
            5598: function() {
                return new ObjectItem();
            },
            9440: function() {
                return new ObjectItemGenericQuantity();
            },
            6404: function() {
                return new ObjectItemInformationWithQuantity();
            },
            4416: function() {
                return new ObjectItemMinimalInformation();
            },
            2313: function() {
                return new ObjectItemNotInContainer();
            },
            9732: function() {
                return new ObjectItemQuantity();
            },
            6659: function() {
                return new ObjectItemQuantityPriceDateEffects();
            },
            446: function() {
                return new ObjectItemToSell();
            },
            4082: function() {
                return new ObjectItemToSellInBid();
            },
            8040: function() {
                return new ObjectItemToSellInHumanVendorShop();
            },
            2852: function() {
                return new ObjectItemToSellInNpcShop();
            },
            7048: function() {
                return new SellerBuyerDescriptor();
            },
            1759: function() {
                return new SpellItem();
            },
            6556: function() {
                return new EntityInformation();
            },
            6130: function() {
                return new ProtectedEntityWaitingForHelpInfo();
            },
            7837: function() {
                return new FinishMoveInformations();
            },
            5170: function() {
                return new AbstractContactInformations();
            },
            4492: function() {
                return new AcquaintanceInformation();
            },
            5184: function() {
                return new AcquaintanceOnlineInformation();
            },
            3453: function() {
                return new FriendInformations();
            },
            450: function() {
                return new FriendOnlineInformations();
            },
            4533: function() {
                return new FriendSpouseInformations();
            },
            7417: function() {
                return new FriendSpouseOnlineInformations();
            },
            4160: function() {
                return new IgnoredInformations();
            },
            5101: function() {
                return new IgnoredOnlineInformations();
            },
            6377: function() {
                return new GuildEmblem();
            },
            8512: function() {
                return new GuildMember();
            },
            6102: function() {
                return new HavenBagFurnitureInformation();
            },
            9191: function() {
                return new AdditionalTaxCollectorInformations();
            },
            7137: function() {
                return new TaxCollectorBasicInformations();
            },
            1561: function() {
                return new TaxCollectorComplementaryInformations();
            },
            2594: function() {
                return new TaxCollectorFightersInformation();
            },
            343: function() {
                return new TaxCollectorGuildInformations();
            },
            5151: function() {
                return new TaxCollectorInformations();
            },
            4070: function() {
                return new TaxCollectorLootInformations();
            },
            9466: function() {
                return new TaxCollectorMovement();
            },
            3744: function() {
                return new TaxCollectorWaitingForHelpInformations();
            },
            7542: function() {
                return new HavenBagRoomPreviewInformation();
            },
            8916: function() {
                return new AccountHouseInformations();
            },
            2823: function() {
                return new HouseGuildedInformations();
            },
            5826: function() {
                return new HouseInformations();
            },
            6667: function() {
                return new HouseInformationsForGuild();
            },
            8489: function() {
                return new HouseInformationsForSell();
            },
            2751: function() {
                return new HouseInformationsInside();
            },
            9271: function() {
                return new HouseInstanceInformations();
            },
            8830: function() {
                return new HouseOnMapInformations();
            },
            5752: function() {
                return new Idol();
            },
            5714: function() {
                return new PartyIdol();
            },
            2401: function() {
                return new InteractiveElement();
            },
            3347: function() {
                return new InteractiveElementNamedSkill();
            },
            6462: function() {
                return new InteractiveElementSkill();
            },
            1662: function() {
                return new InteractiveElementWithAgeBonus();
            },
            2651: function() {
                return new MapObstacle();
            },
            4405: function() {
                return new SkillActionDescription();
            },
            6581: function() {
                return new SkillActionDescriptionCollect();
            },
            8967: function() {
                return new SkillActionDescriptionCraft();
            },
            263: function() {
                return new SkillActionDescriptionTimed();
            },
            8031: function() {
                return new StatedElement();
            },
            3911: function() {
                return new TeleportDestination();
            },
            3630: function() {
                return new RecycledItem();
            },
            2892: function() {
                return new EntityLook();
            },
            2950: function() {
                return new IndexedEntityLook();
            },
            5174: function() {
                return new SubEntity();
            },
            5623: function() {
                return new ItemDurability();
            },
            3510: function() {
                return new MountClientData();
            },
            4340: function() {
                return new UpdateMountBooleanCharacteristic();
            },
            3205: function() {
                return new UpdateMountCharacteristic();
            },
            4162: function() {
                return new UpdateMountIntegerCharacteristic();
            },
            4454: function() {
                return new MountInformationsForPaddock();
            },
            4662: function() {
                return new PaddockBuyableInformations();
            },
            4735: function() {
                return new PaddockContentInformations();
            },
            5112: function() {
                return new PaddockGuildedInformations();
            },
            1824: function() {
                return new PaddockInformations();
            },
            4946: function() {
                return new PaddockInformationsForSell();
            },
            4322: function() {
                return new PaddockInstancesInformations();
            },
            5602: function() {
                return new PaddockItem();
            },
            7508: function() {
                return new CharacterCharacteristicForPreset();
            },
            4714: function() {
                return new EntitiesPreset();
            },
            7096: function() {
                return new ForgettableSpellsPreset();
            },
            7986: function() {
                return new FullStatsPreset();
            },
            3146: function() {
                return new IconNamedPreset();
            },
            1498: function() {
                return new IdolsPreset();
            },
            6103: function() {
                return new ItemForPreset();
            },
            870: function() {
                return new ItemsPreset();
            },
            2126: function() {
                return new Preset();
            },
            2645: function() {
                return new PresetsContainerPreset();
            },
            1231: function() {
                return new SimpleCharacterCharacteristicForPreset();
            },
            6884: function() {
                return new SpellForPreset();
            },
            3404: function() {
                return new SpellsPreset();
            },
            440: function() {
                return new StatsPreset();
            },
            6982: function() {
                return new AllianceInsiderPrismInformation();
            },
            5996: function() {
                return new AlliancePrismInformation();
            },
            4016: function() {
                return new PrismFightersInformation();
            },
            8192: function() {
                return new PrismGeolocalizedInformation();
            },
            5963: function() {
                return new PrismInformation();
            },
            9305: function() {
                return new PrismSubareaEmptyInfo();
            },
            5811: function() {
                return new Shortcut();
            },
            702: function() {
                return new ShortcutEmote();
            },
            6762: function() {
                return new ShortcutEntitiesPreset();
            },
            5832: function() {
                return new ShortcutObject();
            },
            9809: function() {
                return new ShortcutObjectIdolsPreset();
            },
            2604: function() {
                return new ShortcutObjectItem();
            },
            1783: function() {
                return new ShortcutObjectPreset();
            },
            8182: function() {
                return new ShortcutSmiley();
            },
            8184: function() {
                return new ShortcutSpell();
            },
            781: function() {
                return new AbstractSocialGroupInfos();
            },
            920: function() {
                return new AlliancedGuildFactSheetInformations();
            },
            6853: function() {
                return new AllianceFactSheetInformations();
            },
            3013: function() {
                return new AllianceVersatileInformations();
            },
            5100: function() {
                return new GuildFactSheetInformations();
            },
            5949: function() {
                return new GuildInAllianceVersatileInformations();
            },
            6301: function() {
                return new GuildInsiderFactSheetInformations();
            },
            7908: function() {
                return new GuildVersatileInformations();
            },
            5320: function() {
                return new StartupActionAddObject();
            },
            327: function() {
                return new TrustCertificate();
            },
            6752: function() {
                return new Version();
            },
            7482: function() {
                return new BufferInformation();
            }
        }
        return ProtocolTypeManager;
    })();
    Protocol.ProtocolTypeManager = ProtocolTypeManager;
    var UInt64 = (function(_super) {
        __extends(UInt64, _super);

        function UInt64(low, high) {
            if (low === void 0) {
                low = 0;
            }
            if (high === void 0) {
                high = 0;
            }
            _super.call(this, low, high);
            this.parseInt64 = function(str, radix) {
                radix = radix || 0;
                var digit = 0;
                var i = 0;
                if (radix === 0) {
                    if (str.search(/^0x/) === 0) {
                        radix = 16;
                        i = 2;
                    } else {
                        radix = 10;
                    };
                };
                if ((((radix < 2)) || ((radix > 36)))) {
                    throw new Error('ArgumentError');
                };
                str = str.toLowerCase();
                var result = new UInt64();
                while (i < str.length) {
                    digit = str.charCodeAt(i);
                    if ((((digit >= Binary64.CHAR_CODE_0)) && ((digit <= Binary64.CHAR_CODE_9)))) {
                        digit = (digit - Binary64.CHAR_CODE_0);
                    } else {
                        if ((((digit >= Binary64.CHAR_CODE_A)) && ((digit <= Binary64.CHAR_CODE_Z)))) {
                            digit = (digit - Binary64.CHAR_CODE_A);
                            digit = (digit + 10);
                        } else {
                            throw new Error('ArgumentError');
                        };
                    };
                    if (digit >= radix) {
                        throw new Error('ArgumentError');
                    };
                    result.mul(radix);
                    result.add(digit);
                    i++;
                };
                return (result);
            };
        }
        UInt64.fromNumber = function(n) {
            return new UInt64(n, Math.floor((n / 4294967296)));
        };
        UInt64.prototype.toNumber = function() {
            return (((this.high * 4294967296) + this.low));
        };
        UInt64.prototype.toString = function(radix) {
            radix = radix || 10;
            var _local_4 = 0;
            if ((((radix < 2)) || ((radix > 36)))) {
                throw new Error('ArgumentError');
            };
            if (this.high === 0) {
                return (this.low.toString(radix));
            };
            var digitChars = [];
            var copyOfThis = new UInt64(this.low, this.high);
            do {
                _local_4 = copyOfThis.div(radix);
                if (_local_4 < 10) {
                    digitChars.push((_local_4 + Binary64.CHAR_CODE_0));
                } else {
                    digitChars.push(((_local_4 - 10) + Binary64.CHAR_CODE_A));
                };
            } while (copyOfThis.high !== 0);
            return ((copyOfThis.low.toString(radix) + String.fromCharCode.apply(String, digitChars.reverse())));
        };
        return UInt64;
    })(Binary64);
    Protocol.UInt64 = UInt64;
    var Metadata = (function() {
        function Metadata() {}
        Metadata.PROTOCOL_BUILD = "1.0.1-ad7c4fd";
        Metadata.PROTOCOL_DATE = "Thu, 27 Aug 2020 15:04:57 +0000";
        return Metadata;
    })
    Protocol.Metadata = Metadata;
    var ProtocolConstantsEnum = (function() {
        function ProtocolConstantsEnum() {}
        ProtocolConstantsEnum.DEFAULT_TOOLTIP_DURATION = 2500;
        ProtocolConstantsEnum.MAP_CELL_COUNT = 560;
        ProtocolConstantsEnum.MAX_LEVEL = 200;
        ProtocolConstantsEnum.MAX_GUILD_LEVEL = 200;
        ProtocolConstantsEnum.MAX_MOUNT_LEVEL = 100;
        ProtocolConstantsEnum.MAX_CMD_LEN = 768;
        ProtocolConstantsEnum.MAX_CHAT_LEN = 512;
        ProtocolConstantsEnum.USER_MAX_CHAT_LEN = 256;
        ProtocolConstantsEnum.MAX_MOTD_LEN = 512;
        ProtocolConstantsEnum.USER_MAX_MOTD_LEN = 256;
        ProtocolConstantsEnum.MAX_BULLETIN_LEN = 5120;
        ProtocolConstantsEnum.USER_MAX_BULLETIN_LEN = 2560;
        ProtocolConstantsEnum.MAX_STAT_LEN = 512;
        ProtocolConstantsEnum.MAX_STAT_BY_MSG = 20;
        ProtocolConstantsEnum.MIN_LOGIN_LEN = 3;
        ProtocolConstantsEnum.MAX_LOGIN_LEN = 50;
        ProtocolConstantsEnum.MIN_PLAYER_NAME_LEN = 2;
        ProtocolConstantsEnum.MAX_PLAYER_NAME_LEN = 26;
        ProtocolConstantsEnum.PLAYER_SERVER_TAG_LEN = 6;
        ProtocolConstantsEnum.MIN_NICK_LEN = 2;
        ProtocolConstantsEnum.MAX_NICK_LEN = 30;
        ProtocolConstantsEnum.MIN_GUILDNAME_LEN = 3;
        ProtocolConstantsEnum.MAX_GUILDNAME_LEN = 30;
        ProtocolConstantsEnum.MIN_ALLIANCENAME_LEN = 3;
        ProtocolConstantsEnum.MAX_ALLIANCENAME_LEN = 30;
        ProtocolConstantsEnum.MIN_ALLIANCETAG_LEN = 3;
        ProtocolConstantsEnum.MAX_ALLIANCETAG_LEN = 7;
        ProtocolConstantsEnum.ALLIANCETAG_NUMBER_LEN = 2;
        ProtocolConstantsEnum.MIN_PARTY_NAME_LEN = 0;
        ProtocolConstantsEnum.MAX_PARTY_NAME_LEN = 25;
        ProtocolConstantsEnum.MAX_PLAYER_COLOR = 5;
        ProtocolConstantsEnum.MAX_ENTITY_COLOR = 10;
        ProtocolConstantsEnum.MAX_PLAYERS_PER_TEAM = 8;
        ProtocolConstantsEnum.MAX_MEMBERS_PER_PARTY = 8;
        ProtocolConstantsEnum.MAX_GUESTS_PER_PARTY = 7;
        ProtocolConstantsEnum.MAX_MEMBERS_PER_ARENA_PARTY = 5;
        ProtocolConstantsEnum.MAX_MONSTERS_IN_GROUP_ON_MAP = 16;
        ProtocolConstantsEnum.MAX_CHAT_OBJECT_REF = 16;
        ProtocolConstantsEnum.NOT_EQUIPED = 63;
        ProtocolConstantsEnum.MAX_EQUIPED = 255;
        ProtocolConstantsEnum.SLOTS_EQUIPABLE_BY_USER = 16;
        ProtocolConstantsEnum.MAX_CRAFT_SLOT = 9;
        ProtocolConstantsEnum.MAX_JOB_LEVEL = 200;
        ProtocolConstantsEnum.MAX_JOB_LEVEL_NONSUBSCRIBER = 60;
        ProtocolConstantsEnum.MAX_HONOR = 20000;
        ProtocolConstantsEnum.MAX_SHORTCUT = 99;
        ProtocolConstantsEnum.MAX_ARENA_RANK = 20000;
        ProtocolConstantsEnum.CHAR_MIN_LEVEL_ARENA = 20;
        ProtocolConstantsEnum.CHAR_MIN_LEVEL_RIDE = 60;
        ProtocolConstantsEnum.MAX_DUNGEON_REGISTER = 10;
        ProtocolConstantsEnum.MIN_RIDE_NAME_LEN = 0;
        ProtocolConstantsEnum.MAX_RIDE_NAME_LEN = 16;
        ProtocolConstantsEnum.MAX_EFFECTS_COUNT = 150;
        ProtocolConstantsEnum.MAX_LOCKABLE_CODE_LEN = 8;
        ProtocolConstantsEnum.MAX_PRESET_COUNT = 18;
        ProtocolConstantsEnum.MAX_IDOLS_PRESET_IDOL_COUNT = 6;
        ProtocolConstantsEnum.MIN_OBJ_COUNT_BY_XFERT = 1;
        ProtocolConstantsEnum.MAX_OBJ_COUNT_BY_XFERT = 800;
        ProtocolConstantsEnum.MAX_FARMS_INSTANCES_PER_MAP = 60;
        ProtocolConstantsEnum.MAX_STABLED_RIDES = 250;
        ProtocolConstantsEnum.MAX_OBJ_COUNT_BY_DECRAFT = 50;
        ProtocolConstantsEnum.MAX_WAVE = 100;
        ProtocolConstantsEnum.MAX_OBJECT_EFFECT_STRING_LEN = 30;
        ProtocolConstantsEnum.MAX_PLAYER_OR_ACCOUNT_NAME_LEN = 31;
        ProtocolConstantsEnum.MAX_MEMBERS_PER_GUILD = 240;
        ProtocolConstantsEnum.MAX_ADDITIONNAL_PER_CARAC = 100;
        ProtocolConstantsEnum.MAX_RECONNECTION_ATTEMPTS = 5;
        ProtocolConstantsEnum.MAX_FURNITURES_PER_PACKET = 40;
        ProtocolConstantsEnum.MIN_LEVEL_HAVENBAG = 10;
        ProtocolConstantsEnum.MIN_PLAYERS_FOR_GROUP_IDOLS = 3;
        ProtocolConstantsEnum.MAX_KAMA = 1000000000000;
        ProtocolConstantsEnum.MAX_FOLLOWED_QUESTS = 5;
        ProtocolConstantsEnum.MIN_LEVEL_BREACH = 50;
        ProtocolConstantsEnum.MIN_EMAIL_LENGTH = 3;
        ProtocolConstantsEnum.MAX_EMAIL_LENGTH = 254;
        ProtocolConstantsEnum.UUID5_LENGTH = 36;
        ProtocolConstantsEnum.MAX_SHORT_VALUE = 32767;
        return ProtocolConstantsEnum;
    })
    Protocol.ProtocolConstantsEnum = ProtocolConstantsEnum;
    var AccessoryPreviewErrorEnum = (function() {
        function AccessoryPreviewErrorEnum() {}
        AccessoryPreviewErrorEnum.PREVIEW_ERROR = 0;
        AccessoryPreviewErrorEnum.PREVIEW_COOLDOWN = 1;
        AccessoryPreviewErrorEnum.PREVIEW_BAD_ITEM = 2;
        return AccessoryPreviewErrorEnum;
    })
    Protocol.AccessoryPreviewErrorEnum = AccessoryPreviewErrorEnum;
    var AggressableStatusEnum = (function() {
        function AggressableStatusEnum() {}
        AggressableStatusEnum.NON_AGGRESSABLE = 0;
        AggressableStatusEnum.PvP_ENABLED_AGGRESSABLE = 10;
        AggressableStatusEnum.PvP_ENABLED_NON_AGGRESSABLE = 11;
        AggressableStatusEnum.AvA_ENABLED_AGGRESSABLE = 20;
        AggressableStatusEnum.AvA_ENABLED_NON_AGGRESSABLE = 21;
        AggressableStatusEnum.AvA_DISQUALIFIED = 22;
        AggressableStatusEnum.AvA_PREQUALIFIED_AGGRESSABLE = 23;
        return AggressableStatusEnum;
    })
    Protocol.AggressableStatusEnum = AggressableStatusEnum;
    var AlignmentSideEnum = (function() {
        function AlignmentSideEnum() {}
        AlignmentSideEnum.ALIGNMENT_UNKNOWN = -2;
        AlignmentSideEnum.ALIGNMENT_WITHOUT = -1;
        AlignmentSideEnum.ALIGNMENT_NEUTRAL = 0;
        AlignmentSideEnum.ALIGNMENT_ANGEL = 1;
        AlignmentSideEnum.ALIGNMENT_EVIL = 2;
        return AlignmentSideEnum;
    })
    Protocol.AlignmentSideEnum = AlignmentSideEnum;
    var AlignmentWarEffortDonationResultEnum = (function() {
        function AlignmentWarEffortDonationResultEnum() {}
        AlignmentWarEffortDonationResultEnum.WAR_EFFORT_DONATION_SUCCESS = 0;
        AlignmentWarEffortDonationResultEnum.WAR_EFFORT_DONATION_ERROR_NOT_ENOUGH_KAMAS = 1;
        AlignmentWarEffortDonationResultEnum.WAR_EFFORT_DONATION_ERROR_INVALID_ALIGNMENT = 2;
        AlignmentWarEffortDonationResultEnum.WAR_EFFORT_DONATION_ERROR_KAMAS_LIMIT_REACH = 3;
        AlignmentWarEffortDonationResultEnum.WAR_EFFORT_DONATION_ERROR_UNKNOWN = 4;
        return AlignmentWarEffortDonationResultEnum;
    })
    Protocol.AlignmentWarEffortDonationResultEnum = AlignmentWarEffortDonationResultEnum;
    var AlliancePrismModuleTypeEnum = (function() {
        function AlliancePrismModuleTypeEnum() {}
        AlliancePrismModuleTypeEnum.TELEPORTER = 0;
        AlliancePrismModuleTypeEnum.RECYCLER = 1;
        return AlliancePrismModuleTypeEnum;
    })
    Protocol.AlliancePrismModuleTypeEnum = AlliancePrismModuleTypeEnum;
    var AllianceRightsBitEnum = (function() {
        function AllianceRightsBitEnum() {}
        AllianceRightsBitEnum.ALLIANCE_RIGHT_NONE = 0;
        AllianceRightsBitEnum.ALLIANCE_RIGHT_BOSS = 1;
        AllianceRightsBitEnum.ALLIANCE_RIGHT_MANAGE_PRISMS = 2;
        AllianceRightsBitEnum.ALLIANCE_RIGHT_TALK_IN_CHAN = 4;
        AllianceRightsBitEnum.ALLIANCE_RIGHT_RECRUIT_GUILDS = 8;
        AllianceRightsBitEnum.ALLIANCE_RIGHT_KICK_GUILDS = 16;
        AllianceRightsBitEnum.ALLIANCE_RIGHT_MANAGE_RIGHTS = 32;
        return AllianceRightsBitEnum;
    })
    Protocol.AllianceRightsBitEnum = AllianceRightsBitEnum;
    var BidActionEnum = (function() {
        function BidActionEnum() {}
        BidActionEnum.INVALID_ACTION = 0;
        BidActionEnum.CONSUME_BUFF = 1;
        BidActionEnum.CANCEL = 2;
        BidActionEnum.CREATE_KAMA = 3;
        BidActionEnum.CREATE_OGRINE = 4;
        BidActionEnum.BUY_KAMA = 5;
        BidActionEnum.BUY_OGRINE = 6;
        return BidActionEnum;
    })
    Protocol.BidActionEnum = BidActionEnum;
    var BidCancellationEnum = (function() {
        function BidCancellationEnum() {}
        BidCancellationEnum.UNKNOWN_TYPE = 0;
        BidCancellationEnum.CLASSIC = 1;
        BidCancellationEnum.FRAUD = 2;
        return BidCancellationEnum;
    })
    Protocol.BidCancellationEnum = BidCancellationEnum;
    var BidValidationEnum = (function() {
        function BidValidationEnum() {}
        BidValidationEnum.GENERIC_ERROR = 0;
        BidValidationEnum.BUFFER_OVERLOAD = 1;
        BidValidationEnum.OFFER_DOESNT_EXIST = 2;
        BidValidationEnum.OFFER_ALREADY_EXISTS = 3;
        BidValidationEnum.NOT_ENOUGH_KAMAS = 4;
        BidValidationEnum.NOT_ENOUGH_OGRINES = 5;
        BidValidationEnum.SERVER_MAINTENANCE = 6;
        BidValidationEnum.VALIDATION_SUCCESS = 100;
        return BidValidationEnum;
    })
    Protocol.BidValidationEnum = BidValidationEnum;
    var BoostableCharacteristicEnum = (function() {
        function BoostableCharacteristicEnum() {}
        BoostableCharacteristicEnum.BOOSTABLE_CHARAC_STRENGTH = 10;
        BoostableCharacteristicEnum.BOOSTABLE_CHARAC_VITALITY = 11;
        BoostableCharacteristicEnum.BOOSTABLE_CHARAC_WISDOM = 12;
        BoostableCharacteristicEnum.BOOSTABLE_CHARAC_CHANCE = 13;
        BoostableCharacteristicEnum.BOOSTABLE_CHARAC_AGILITY = 14;
        BoostableCharacteristicEnum.BOOSTABLE_CHARAC_INTELLIGENCE = 15;
        return BoostableCharacteristicEnum;
    })
    Protocol.BoostableCharacteristicEnum = BoostableCharacteristicEnum;
    var BreachRewardLockEnum = (function() {
        function BreachRewardLockEnum() {}
        BreachRewardLockEnum.BREACH_REWARD_LOCK_OWNER = 0;
        BreachRewardLockEnum.BREACH_REWARD_LOCK_FIGHTER = 1;
        BreachRewardLockEnum.BREACH_REWARD_LOCK_RESOURCES = 2;
        BreachRewardLockEnum.BREACH_REWARD_LOCK_CRITERION = 3;
        BreachRewardLockEnum.BREACH_REWARD_LOCK_USELESS = 4;
        BreachRewardLockEnum.BREACH_REWARD_MAX_PURCHASE_REACHED = 5;
        return BreachRewardLockEnum;
    })
    Protocol.BreachRewardLockEnum = BreachRewardLockEnum;
    var BreachRoomUnlockEnum = (function() {
        function BreachRoomUnlockEnum() {}
        BreachRoomUnlockEnum.BREACH_UNLOCK_SUCCESS = 0;
        BreachRoomUnlockEnum.BREACH_UNLOCK_FAIL_NOT_ENOUGH_BUDGET = 1;
        return BreachRoomUnlockEnum;
    })
    Protocol.BreachRoomUnlockEnum = BreachRoomUnlockEnum;
    var BreedEnum = (function() {
        function BreedEnum() {}
        BreedEnum.UNDEFINED = 0;
        BreedEnum.Feca = 1;
        BreedEnum.Osamodas = 2;
        BreedEnum.Enutrof = 3;
        BreedEnum.Sram = 4;
        BreedEnum.Xelor = 5;
        BreedEnum.Ecaflip = 6;
        BreedEnum.Eniripsa = 7;
        BreedEnum.Iop = 8;
        BreedEnum.Cra = 9;
        BreedEnum.Sadida = 10;
        BreedEnum.Sacrieur = 11;
        BreedEnum.Pandawa = 12;
        BreedEnum.Roublard = 13;
        BreedEnum.Zobal = 14;
        BreedEnum.Steamer = 15;
        BreedEnum.Eliotrope = 16;
        BreedEnum.Huppermage = 17;
        BreedEnum.Ouginak = 18;
        BreedEnum.SUMMONED = -1;
        BreedEnum.MONSTER = -2;
        BreedEnum.MONSTER_GROUP = -3;
        BreedEnum.NPC = -4;
        BreedEnum.HUMAN_VENDOR = -5;
        BreedEnum.TAX_COLLECTOR = -6;
        BreedEnum.MUTANT = -7;
        BreedEnum.MUTANT_IN_DUNGEON = -8;
        BreedEnum.MOUNT_OUTSIDE = -9;
        BreedEnum.PRISM = -10;
        BreedEnum.INCARNATION = -11;
        return BreedEnum;
    })
    Protocol.BreedEnum = BreedEnum;
    var BuildTypeEnum = (function() {
        function BuildTypeEnum() {}
        BuildTypeEnum.RELEASE = 0;
        BuildTypeEnum.BETA = 1;
        BuildTypeEnum.ALPHA = 2;
        BuildTypeEnum.TESTING = 3;
        BuildTypeEnum.INTERNAL = 4;
        BuildTypeEnum.DEBUG = 5;
        BuildTypeEnum.DRAFT = 6;
        return BuildTypeEnum;
    })
    Protocol.BuildTypeEnum = BuildTypeEnum;
    var CharacterCreationResultEnum = (function() {
        function CharacterCreationResultEnum() {}
        CharacterCreationResultEnum.OK = 0;
        CharacterCreationResultEnum.ERR_NO_REASON = 1;
        CharacterCreationResultEnum.ERR_INVALID_NAME = 2;
        CharacterCreationResultEnum.ERR_NAME_ALREADY_EXISTS = 3;
        CharacterCreationResultEnum.ERR_TOO_MANY_CHARACTERS = 4;
        CharacterCreationResultEnum.ERR_NOT_ALLOWED = 5;
        CharacterCreationResultEnum.ERR_NEW_PLAYER_NOT_ALLOWED = 6;
        CharacterCreationResultEnum.ERR_RESTRICED_ZONE = 7;
        CharacterCreationResultEnum.ERR_INCONSISTENT_COMMUNITY = 8;
        return CharacterCreationResultEnum;
    })
    Protocol.CharacterCreationResultEnum = CharacterCreationResultEnum;
    var CharacterDeletionErrorEnum = (function() {
        function CharacterDeletionErrorEnum() {}
        CharacterDeletionErrorEnum.DEL_ERR_NO_REASON = 1;
        CharacterDeletionErrorEnum.DEL_ERR_TOO_MANY_CHAR_DELETION = 2;
        CharacterDeletionErrorEnum.DEL_ERR_BAD_SECRET_ANSWER = 3;
        CharacterDeletionErrorEnum.DEL_ERR_RESTRICED_ZONE = 4;
        return CharacterDeletionErrorEnum;
    })
    Protocol.CharacterDeletionErrorEnum = CharacterDeletionErrorEnum;
    var CharacterInventoryPositionEnum = (function() {
        function CharacterInventoryPositionEnum() {}
        CharacterInventoryPositionEnum.ACCESSORY_POSITION_HAT = 6;
        CharacterInventoryPositionEnum.ACCESSORY_POSITION_CAPE = 7;
        CharacterInventoryPositionEnum.ACCESSORY_POSITION_BELT = 3;
        CharacterInventoryPositionEnum.ACCESSORY_POSITION_BOOTS = 5;
        CharacterInventoryPositionEnum.ACCESSORY_POSITION_AMULET = 0;
        CharacterInventoryPositionEnum.ACCESSORY_POSITION_SHIELD = 15;
        CharacterInventoryPositionEnum.ACCESSORY_POSITION_WEAPON = 1;
        CharacterInventoryPositionEnum.ACCESSORY_POSITION_PETS = 8;
        CharacterInventoryPositionEnum.ACCESSORY_POSITION_RIDE_HARNESS = 29;
        CharacterInventoryPositionEnum.INVENTORY_POSITION_RING_LEFT = 2;
        CharacterInventoryPositionEnum.INVENTORY_POSITION_RING_RIGHT = 4;
        CharacterInventoryPositionEnum.INVENTORY_POSITION_DOFUS_1 = 9;
        CharacterInventoryPositionEnum.INVENTORY_POSITION_DOFUS_2 = 10;
        CharacterInventoryPositionEnum.INVENTORY_POSITION_DOFUS_3 = 11;
        CharacterInventoryPositionEnum.INVENTORY_POSITION_DOFUS_4 = 12;
        CharacterInventoryPositionEnum.INVENTORY_POSITION_DOFUS_5 = 13;
        CharacterInventoryPositionEnum.INVENTORY_POSITION_DOFUS_6 = 14;
        CharacterInventoryPositionEnum.INVENTORY_POSITION_MOUNT = 16;
        CharacterInventoryPositionEnum.INVENTORY_POSITION_MUTATION = 20;
        CharacterInventoryPositionEnum.INVENTORY_POSITION_BOOST_FOOD = 21;
        CharacterInventoryPositionEnum.INVENTORY_POSITION_FIRST_BONUS = 22;
        CharacterInventoryPositionEnum.INVENTORY_POSITION_SECOND_BONUS = 23;
        CharacterInventoryPositionEnum.INVENTORY_POSITION_FIRST_MALUS = 24;
        CharacterInventoryPositionEnum.INVENTORY_POSITION_SECOND_MALUS = 25;
        CharacterInventoryPositionEnum.INVENTORY_POSITION_ROLEPLAY_BUFFER = 26;
        CharacterInventoryPositionEnum.INVENTORY_POSITION_FOLLOWER = 27;
        CharacterInventoryPositionEnum.INVENTORY_POSITION_ENTITY = 28;
        CharacterInventoryPositionEnum.INVENTORY_POSITION_COSTUME = 30;
        CharacterInventoryPositionEnum.INVENTORY_POSITION_NOT_EQUIPED = 63;
        return CharacterInventoryPositionEnum;
    })
    Protocol.CharacterInventoryPositionEnum = CharacterInventoryPositionEnum;
    var CharacterRemodelingEnum = (function() {
        function CharacterRemodelingEnum() {}
        CharacterRemodelingEnum.CHARACTER_REMODELING_NOT_APPLICABLE = 0;
        CharacterRemodelingEnum.CHARACTER_REMODELING_NAME = 1;
        CharacterRemodelingEnum.CHARACTER_REMODELING_COLORS = 2;
        CharacterRemodelingEnum.CHARACTER_REMODELING_COSMETIC = 4;
        CharacterRemodelingEnum.CHARACTER_REMODELING_BREED = 8;
        CharacterRemodelingEnum.CHARACTER_REMODELING_GENDER = 16;
        CharacterRemodelingEnum.CHARACTER_OPT_REMODELING_NAME = 32;
        CharacterRemodelingEnum.CHARACTER_OPT_REMODELING_ALL = 64;
        return CharacterRemodelingEnum;
    })
    Protocol.CharacterRemodelingEnum = CharacterRemodelingEnum;
    var CharacterSpellModificationTypeEnum = (function() {
        function CharacterSpellModificationTypeEnum() {}
        CharacterSpellModificationTypeEnum.INVALID_MODIFICATION = 0;
        CharacterSpellModificationTypeEnum.RANGEABLE = 1;
        CharacterSpellModificationTypeEnum.DAMAGE = 2;
        CharacterSpellModificationTypeEnum.BASE_DAMAGE = 3;
        CharacterSpellModificationTypeEnum.HEAL_BONUS = 4;
        CharacterSpellModificationTypeEnum.AP_COST = 5;
        CharacterSpellModificationTypeEnum.CAST_INTERVAL = 6;
        CharacterSpellModificationTypeEnum.CAST_INTERVAL_SET = 7;
        CharacterSpellModificationTypeEnum.CRITICAL_HIT_BONUS = 8;
        CharacterSpellModificationTypeEnum.CAST_LINE = 9;
        CharacterSpellModificationTypeEnum.LOS = 10;
        CharacterSpellModificationTypeEnum.MAX_CAST_PER_TURN = 11;
        CharacterSpellModificationTypeEnum.MAX_CAST_PER_TARGET = 12;
        CharacterSpellModificationTypeEnum.RANGE_MAX = 13;
        CharacterSpellModificationTypeEnum.RANGE_MIN = 14;
        return CharacterSpellModificationTypeEnum;
    })
    Protocol.CharacterSpellModificationTypeEnum = CharacterSpellModificationTypeEnum;
    var ChatActivableChannelsEnum = (function() {
        function ChatActivableChannelsEnum() {}
        ChatActivableChannelsEnum.CHANNEL_GLOBAL = 0;
        ChatActivableChannelsEnum.CHANNEL_TEAM = 1;
        ChatActivableChannelsEnum.CHANNEL_GUILD = 2;
        ChatActivableChannelsEnum.CHANNEL_ALLIANCE = 3;
        ChatActivableChannelsEnum.CHANNEL_PARTY = 4;
        ChatActivableChannelsEnum.CHANNEL_SALES = 5;
        ChatActivableChannelsEnum.CHANNEL_SEEK = 6;
        ChatActivableChannelsEnum.CHANNEL_NOOB = 7;
        ChatActivableChannelsEnum.CHANNEL_ADMIN = 8;
        ChatActivableChannelsEnum.CHANNEL_ADS = 12;
        ChatActivableChannelsEnum.CHANNEL_ARENA = 13;
        ChatActivableChannelsEnum.CHANNEL_COMMUNITY = 14;
        ChatActivableChannelsEnum.PSEUDO_CHANNEL_PRIVATE = 9;
        ChatActivableChannelsEnum.PSEUDO_CHANNEL_INFO = 10;
        ChatActivableChannelsEnum.PSEUDO_CHANNEL_FIGHT_LOG = 11;
        return ChatActivableChannelsEnum;
    })
    Protocol.ChatActivableChannelsEnum = ChatActivableChannelsEnum;
    var ChatChannelsMultiEnum = (function() {
        function ChatChannelsMultiEnum() {}
        ChatChannelsMultiEnum.CHANNEL_GLOBAL = 0;
        ChatChannelsMultiEnum.CHANNEL_TEAM = 1;
        ChatChannelsMultiEnum.CHANNEL_GUILD = 2;
        ChatChannelsMultiEnum.CHANNEL_ALLIANCE = 3;
        ChatChannelsMultiEnum.CHANNEL_PARTY = 4;
        ChatChannelsMultiEnum.CHANNEL_SALES = 5;
        ChatChannelsMultiEnum.CHANNEL_SEEK = 6;
        ChatChannelsMultiEnum.CHANNEL_NOOB = 7;
        ChatChannelsMultiEnum.CHANNEL_ADMIN = 8;
        ChatChannelsMultiEnum.CHANNEL_ADS = 12;
        ChatChannelsMultiEnum.CHANNEL_ARENA = 13;
        ChatChannelsMultiEnum.CHANNEL_COMMUNITY = 14;
        return ChatChannelsMultiEnum;
    })
    Protocol.ChatChannelsMultiEnum = ChatChannelsMultiEnum;
    var ChatErrorEnum = (function() {
        function ChatErrorEnum() {}
        ChatErrorEnum.CHAT_ERROR_UNKNOWN = 0;
        ChatErrorEnum.CHAT_ERROR_RECEIVER_NOT_FOUND = 1;
        ChatErrorEnum.CHAT_ERROR_INTERIOR_MONOLOGUE = 2;
        ChatErrorEnum.CHAT_ERROR_NO_GUILD = 3;
        ChatErrorEnum.CHAT_ERROR_NO_PARTY = 4;
        ChatErrorEnum.CHAT_ERROR_ALLIANCE = 5;
        ChatErrorEnum.CHAT_ERROR_INVALID_MAP = 6;
        ChatErrorEnum.CHAT_ERROR_NO_PARTY_ARENA = 7;
        ChatErrorEnum.CHAT_ERROR_NO_TEAM = 8;
        ChatErrorEnum.CHAT_ERROR_MALFORMED_CONTENT = 9;
        ChatErrorEnum.CHAT_ERROR_NO_CHANNEL_COMMUNITY = 10;
        return ChatErrorEnum;
    })
    Protocol.ChatErrorEnum = ChatErrorEnum;
    var ClientUITypeEnum = (function() {
        function ClientUITypeEnum() {}
        ClientUITypeEnum.CLIENT_UI_UNDEFINED = 0;
        ClientUITypeEnum.CLIENT_UI_TELEPORT_GUILD_HOUSE = 1;
        ClientUITypeEnum.CLIENT_UI_TELEPORT_GUILD_PADDOCK = 2;
        ClientUITypeEnum.CLIENT_UI_OBJECT_MIMICRY = 3;
        ClientUITypeEnum.CLIENT_UI_LEGENDARY_TREASURE_QUEST = 4;
        ClientUITypeEnum.CLIENT_UI_TELEPORT_HOUSE = 5;
        return ClientUITypeEnum;
    })
    Protocol.ClientUITypeEnum = ClientUITypeEnum;
    var CompassTypeEnum = (function() {
        function CompassTypeEnum() {}
        CompassTypeEnum.COMPASS_TYPE_SIMPLE = 0;
        CompassTypeEnum.COMPASS_TYPE_SPOUSE = 1;
        CompassTypeEnum.COMPASS_TYPE_PARTY = 2;
        CompassTypeEnum.COMPASS_TYPE_PVP_SEEK = 3;
        CompassTypeEnum.COMPASS_TYPE_QUEST = 4;
        return CompassTypeEnum;
    })
    Protocol.CompassTypeEnum = CompassTypeEnum;
    var ConsoleMessageTypeEnum = (function() {
        function ConsoleMessageTypeEnum() {}
        ConsoleMessageTypeEnum.CONSOLE_TEXT_MESSAGE = 0;
        ConsoleMessageTypeEnum.CONSOLE_INFO_MESSAGE = 1;
        ConsoleMessageTypeEnum.CONSOLE_ERR_MESSAGE = 2;
        return ConsoleMessageTypeEnum;
    })
    Protocol.ConsoleMessageTypeEnum = ConsoleMessageTypeEnum;
    var CraftResultEnum = (function() {
        function CraftResultEnum() {}
        CraftResultEnum.CRAFT_IMPOSSIBLE = 0;
        CraftResultEnum.CRAFT_FAILED = 1;
        CraftResultEnum.CRAFT_SUCCESS = 2;
        CraftResultEnum.CRAFT_NEUTRAL = 3;
        CraftResultEnum.CRAFT_FORBIDDEN = 4;
        return CraftResultEnum;
    })
    Protocol.CraftResultEnum = CraftResultEnum;
    var DebugLevelEnum = (function() {
        function DebugLevelEnum() {}
        DebugLevelEnum.LEVEL_TRACE = 0;
        DebugLevelEnum.LEVEL_DEBUG = 1;
        DebugLevelEnum.LEVEL_INFO = 2;
        DebugLevelEnum.LEVEL_WARN = 3;
        DebugLevelEnum.LEVEL_ERROR = 4;
        DebugLevelEnum.LEVEL_FATAL = 5;
        return DebugLevelEnum;
    })
    Protocol.DebugLevelEnum = DebugLevelEnum;
    var DelayedActionTypeEnum = (function() {
        function DelayedActionTypeEnum() {}
        DelayedActionTypeEnum.DELAYED_ACTION_DISCONNECT = 0;
        DelayedActionTypeEnum.DELAYED_ACTION_OBJECT_USE = 1;
        DelayedActionTypeEnum.DELAYED_ACTION_JOIN_CHARACTER = 2;
        DelayedActionTypeEnum.DELAYED_ACTION_AGGRESSION_IMMUNE = 3;
        return DelayedActionTypeEnum;
    })
    Protocol.DelayedActionTypeEnum = DelayedActionTypeEnum;
    var DialogTypeEnum = (function() {
        function DialogTypeEnum() {}
        DialogTypeEnum.DIALOG_BOOK = 0;
        DialogTypeEnum.DIALOG_DIALOG = 1;
        DialogTypeEnum.DIALOG_LOCKABLE = 2;
        DialogTypeEnum.DIALOG_PURCHASABLE = 3;
        DialogTypeEnum.DIALOG_GUILD_INVITATION = 4;
        DialogTypeEnum.DIALOG_GUILD_CREATE = 5;
        DialogTypeEnum.DIALOG_GUILD_RENAME = 6;
        DialogTypeEnum.DIALOG_MARRIAGE = 7;
        DialogTypeEnum.DIALOG_DUNGEON_MEETING = 8;
        DialogTypeEnum.DIALOG_SPELL_FORGET = 9;
        DialogTypeEnum.DIALOG_TELEPORTER = 10;
        DialogTypeEnum.DIALOG_EXCHANGE = 11;
        DialogTypeEnum.DIALOG_ALLIANCE_INVITATION = 12;
        DialogTypeEnum.DIALOG_ALLIANCE_CREATE = 13;
        DialogTypeEnum.DIALOG_ALLIANCE_RENAME = 14;
        DialogTypeEnum.DIALOG_HAVENBAG_MEETING = 15;
        return DialogTypeEnum;
    })
    Protocol.DialogTypeEnum = DialogTypeEnum;
    var ExchangeErrorEnum = (function() {
        function ExchangeErrorEnum() {}
        ExchangeErrorEnum.REQUEST_IMPOSSIBLE = 1;
        ExchangeErrorEnum.REQUEST_CHARACTER_OCCUPIED = 2;
        ExchangeErrorEnum.REQUEST_CHARACTER_JOB_NOT_EQUIPED = 3;
        ExchangeErrorEnum.REQUEST_CHARACTER_TOOL_TOO_FAR = 4;
        ExchangeErrorEnum.REQUEST_CHARACTER_OVERLOADED = 5;
        ExchangeErrorEnum.REQUEST_CHARACTER_NOT_SUSCRIBER = 6;
        ExchangeErrorEnum.REQUEST_CHARACTER_RESTRICTED = 7;
        ExchangeErrorEnum.REQUEST_CHARACTER_GUEST = 8;
        ExchangeErrorEnum.SELL_ERROR = 63;
        ExchangeErrorEnum.BUY_ERROR = 64;
        ExchangeErrorEnum.MOUNT_PADDOCK_ERROR = 10;
        ExchangeErrorEnum.BID_SEARCH_ERROR = 11;
        return ExchangeErrorEnum;
    })
    Protocol.ExchangeErrorEnum = ExchangeErrorEnum;
    var ExchangeHandleMountStableTypeEnum = (function() {
        function ExchangeHandleMountStableTypeEnum() {}
        ExchangeHandleMountStableTypeEnum.EXCHANGE_MOUNTSTABLES_PUT = 1;
        ExchangeHandleMountStableTypeEnum.EXCHANGE_MOUNTSTABLES_GET = 2;
        ExchangeHandleMountStableTypeEnum.EXCHANGE_MOUNTSTABLES_FREE = 3;
        ExchangeHandleMountStableTypeEnum.EXCHANGE_MOUNTSTABLES_CERTIF = 4;
        ExchangeHandleMountStableTypeEnum.EXCHANGE_MOUNTSTABLES_UNCERTIF = 5;
        ExchangeHandleMountStableTypeEnum.EXCHANGE_MOUNTPADDOCK_PUT = 6;
        ExchangeHandleMountStableTypeEnum.EXCHANGE_MOUNTPADDOCK_GET = 7;
        ExchangeHandleMountStableTypeEnum.EXCHANGE_MOUNTPADDOCK_FREE = 8;
        ExchangeHandleMountStableTypeEnum.EXCHANGE_EQUIPED_MOUNTPADDOCK_PUT = 9;
        ExchangeHandleMountStableTypeEnum.EXCHANGE_EQUIPED_MOUNTPADDOCK_GET = 10;
        ExchangeHandleMountStableTypeEnum.EXCHANGE_EQUIPED_FREE = 11;
        ExchangeHandleMountStableTypeEnum.EXCHANGE_CERTIFICAT_FREE = 12;
        ExchangeHandleMountStableTypeEnum.EXCHANGE_EQUIPED_CERTIF = 13;
        ExchangeHandleMountStableTypeEnum.EXCHANGE_MOUNTPADDOCK_CERTIF = 14;
        ExchangeHandleMountStableTypeEnum.EXCHANGE_UNCERTIF_TO_EQUIPED = 15;
        ExchangeHandleMountStableTypeEnum.EXCHANGE_UNCERTIF_TO_PADDOCK = 16;
        ExchangeHandleMountStableTypeEnum.EXCHANGE_MOUNTSTABLES_STERILIZE = 17;
        ExchangeHandleMountStableTypeEnum.EXCHANGE_EQUIPED_STERILIZE = 18;
        ExchangeHandleMountStableTypeEnum.EXCHANGE_MOUNTPADDOCK_STERILIZE = 19;
        return ExchangeHandleMountStableTypeEnum;
    })
    Protocol.ExchangeHandleMountStableTypeEnum = ExchangeHandleMountStableTypeEnum;
    var ExchangeReplayStopReasonEnum = (function() {
        function ExchangeReplayStopReasonEnum() {}
        ExchangeReplayStopReasonEnum.STOPPED_REASON_OK = 1;
        ExchangeReplayStopReasonEnum.STOPPED_REASON_USER = 2;
        ExchangeReplayStopReasonEnum.STOPPED_REASON_MISSING_RESSOURCE = 3;
        ExchangeReplayStopReasonEnum.STOPPED_REASON_IMPOSSIBLE_MODIFICATION = 4;
        return ExchangeReplayStopReasonEnum;
    })
    Protocol.ExchangeReplayStopReasonEnum = ExchangeReplayStopReasonEnum;
    var ExchangeTypeEnum = (function() {
        function ExchangeTypeEnum() {}
        ExchangeTypeEnum.UNKNOWN_TRADE_TYPE = -1;
        ExchangeTypeEnum.NPC_SHOP = 0;
        ExchangeTypeEnum.PLAYER_TRADE = 1;
        ExchangeTypeEnum.NPC_TRADE = 2;
        ExchangeTypeEnum.CRAFT = 3;
        ExchangeTypeEnum.DISCONNECTED_VENDOR = 4;
        ExchangeTypeEnum.STORAGE = 5;
        ExchangeTypeEnum.SHOP_STOCK = 6;
        ExchangeTypeEnum.TAXCOLLECTOR = 8;
        ExchangeTypeEnum.NPC_MODIFY_TRADE = 9;
        ExchangeTypeEnum.BIDHOUSE_SELL = 10;
        ExchangeTypeEnum.BIDHOUSE_BUY = 11;
        ExchangeTypeEnum.MULTICRAFT_CRAFTER = 12;
        ExchangeTypeEnum.MULTICRAFT_CUSTOMER = 13;
        ExchangeTypeEnum.JOB_INDEX = 14;
        ExchangeTypeEnum.MOUNT = 15;
        ExchangeTypeEnum.MOUNT_STABLE = 16;
        ExchangeTypeEnum.NPC_RESURECT_PET = 17;
        ExchangeTypeEnum.NPC_TRADE_DRAGOTURKEY = 18;
        ExchangeTypeEnum.REALESTATE_HOUSE = 19;
        ExchangeTypeEnum.REALESTATE_FARM = 20;
        ExchangeTypeEnum.RUNES_TRADE = 21;
        ExchangeTypeEnum.RECYCLE_TRADE = 22;
        ExchangeTypeEnum.BANK = 23;
        ExchangeTypeEnum.TRASHBIN = 24;
        ExchangeTypeEnum.ALLIANCE_PRISM = 25;
        ExchangeTypeEnum.HAVENBAG = 26;
        ExchangeTypeEnum.NPC_TRADE_SEEMYOOL = 27;
        ExchangeTypeEnum.NPC_TRADE_RHINEETLE = 28;
        ExchangeTypeEnum.EVOLUTIVE_OBJECT_ELEMENTARY_RECYCLE = 29;
        ExchangeTypeEnum.NPC_RIDE_CAPABILITY_TRADE = 30;
        return ExchangeTypeEnum;
    })
    Protocol.ExchangeTypeEnum = ExchangeTypeEnum;
    var FightDispellableEnum = (function() {
        function FightDispellableEnum() {}
        FightDispellableEnum.DISPELLABLE = 1;
        FightDispellableEnum.DISPELLABLE_BY_DEATH = 2;
        FightDispellableEnum.DISPELLABLE_BY_STRONG_DISPEL = 3;
        FightDispellableEnum.REALLY_NOT_DISPELLABLE = 4;
        return FightDispellableEnum;
    })
    Protocol.FightDispellableEnum = FightDispellableEnum;
    var FighterRefusedReasonEnum = (function() {
        function FighterRefusedReasonEnum() {}
        FighterRefusedReasonEnum.FIGHTER_REFUSED = -1;
        FighterRefusedReasonEnum.FIGHTER_ACCEPTED = 0;
        FighterRefusedReasonEnum.CHALLENGE_FULL = 1;
        FighterRefusedReasonEnum.TEAM_FULL = 2;
        FighterRefusedReasonEnum.WRONG_ALIGNMENT = 3;
        FighterRefusedReasonEnum.WRONG_GUILD = 4;
        FighterRefusedReasonEnum.TOO_LATE = 5;
        FighterRefusedReasonEnum.MUTANT_REFUSED = 6;
        FighterRefusedReasonEnum.WRONG_MAP = 7;
        FighterRefusedReasonEnum.JUST_RESPAWNED = 8;
        FighterRefusedReasonEnum.IM_OCCUPIED = 9;
        FighterRefusedReasonEnum.OPPONENT_OCCUPIED = 10;
        FighterRefusedReasonEnum.FIGHT_MYSELF = 11;
        FighterRefusedReasonEnum.INSUFFICIENT_RIGHTS = 12;
        FighterRefusedReasonEnum.MEMBER_ACCOUNT_NEEDED = 13;
        FighterRefusedReasonEnum.OPPONENT_NOT_MEMBER = 14;
        FighterRefusedReasonEnum.TEAM_LIMITED_BY_MAINCHARACTER = 15;
        FighterRefusedReasonEnum.MULTIACCOUNT_NOT_ALLOWED = 16;
        FighterRefusedReasonEnum.GHOST_REFUSED = 17;
        FighterRefusedReasonEnum.RESTRICTED_ACCOUNT = 19;
        FighterRefusedReasonEnum.WRONG_ALLIANCE = 20;
        FighterRefusedReasonEnum.AVA_ZONE = 21;
        FighterRefusedReasonEnum.ENTITY_REFUSED = 22;
        FighterRefusedReasonEnum.NOT_ENOUGH_ROOM = 23;
        FighterRefusedReasonEnum.GUEST_ACCOUNT = 24;
        return FighterRefusedReasonEnum;
    })
    Protocol.FighterRefusedReasonEnum = FighterRefusedReasonEnum;
    var FightOptionsEnum = (function() {
        function FightOptionsEnum() {}
        FightOptionsEnum.FIGHT_OPTION_SET_SECRET = 0;
        FightOptionsEnum.FIGHT_OPTION_SET_TO_PARTY_ONLY = 1;
        FightOptionsEnum.FIGHT_OPTION_SET_CLOSED = 2;
        FightOptionsEnum.FIGHT_OPTION_ASK_FOR_HELP = 3;
        return FightOptionsEnum;
    })
    Protocol.FightOptionsEnum = FightOptionsEnum;
    var FightOutcomeEnum = (function() {
        function FightOutcomeEnum() {}
        FightOutcomeEnum.RESULT_LOST = 0;
        FightOutcomeEnum.RESULT_DRAW = 1;
        FightOutcomeEnum.RESULT_VICTORY = 2;
        FightOutcomeEnum.RESULT_TAX = 5;
        FightOutcomeEnum.RESULT_DEFENDER_GROUP = 6;
        return FightOutcomeEnum;
    })
    Protocol.FightOutcomeEnum = FightOutcomeEnum;
    var FightSpellCastCriticalEnum = (function() {
        function FightSpellCastCriticalEnum() {}
        FightSpellCastCriticalEnum.NORMAL = 1;
        FightSpellCastCriticalEnum.CRITICAL_HIT = 2;
        FightSpellCastCriticalEnum.CRITICAL_FAIL = 3;
        return FightSpellCastCriticalEnum;
    })
    Protocol.FightSpellCastCriticalEnum = FightSpellCastCriticalEnum;
    var FightTypeEnum = (function() {
        function FightTypeEnum() {}
        FightTypeEnum.FIGHT_TYPE_CHALLENGE = 0;
        FightTypeEnum.FIGHT_TYPE_AGRESSION = 1;
        FightTypeEnum.FIGHT_TYPE_PvMA = 2;
        FightTypeEnum.FIGHT_TYPE_MXvM = 3;
        FightTypeEnum.FIGHT_TYPE_PvM = 4;
        FightTypeEnum.FIGHT_TYPE_PvT = 5;
        FightTypeEnum.FIGHT_TYPE_PvMU = 6;
        FightTypeEnum.FIGHT_TYPE_PVP_ARENA = 7;
        FightTypeEnum.FIGHT_TYPE_Koh = 8;
        FightTypeEnum.FIGHT_TYPE_PvPr = 9;
        FightTypeEnum.FIGHT_TYPE_BREACH = 10;
        return FightTypeEnum;
    })
    Protocol.FightTypeEnum = FightTypeEnum;
    var ForgettableSpellClientActionEnum = (function() {
        function ForgettableSpellClientActionEnum() {}
        ForgettableSpellClientActionEnum.FORGETTABLE_SPELL_FORGET = 0;
        ForgettableSpellClientActionEnum.FORGETTABLE_SPELL_EQUIP = 1;
        ForgettableSpellClientActionEnum.FORGETTABLE_SPELL_UNEQUIP = 2;
        return ForgettableSpellClientActionEnum;
    })
    Protocol.ForgettableSpellClientActionEnum = ForgettableSpellClientActionEnum;
    var ForgettableSpellListActionEnum = (function() {
        function ForgettableSpellListActionEnum() {}
        ForgettableSpellListActionEnum.FORGETTABLE_SPELL_LIST_DISPATCH = 0;
        ForgettableSpellListActionEnum.FORGETTABLE_SPELL_LIST_UPDATE = 1;
        return ForgettableSpellListActionEnum;
    })
    Protocol.ForgettableSpellListActionEnum = ForgettableSpellListActionEnum;
    var GameActionFightInvisibilityStateEnum = (function() {
        function GameActionFightInvisibilityStateEnum() {}
        GameActionFightInvisibilityStateEnum.INVISIBLE = 1;
        GameActionFightInvisibilityStateEnum.DETECTED = 2;
        GameActionFightInvisibilityStateEnum.VISIBLE = 3;
        return GameActionFightInvisibilityStateEnum;
    })
    Protocol.GameActionFightInvisibilityStateEnum = GameActionFightInvisibilityStateEnum;
    var GameActionMarkCellsTypeEnum = (function() {
        function GameActionMarkCellsTypeEnum() {}
        GameActionMarkCellsTypeEnum.CELLS_CIRCLE = 0;
        GameActionMarkCellsTypeEnum.CELLS_CROSS = 1;
        GameActionMarkCellsTypeEnum.CELLS_SQUARE = 2;
        return GameActionMarkCellsTypeEnum;
    })
    Protocol.GameActionMarkCellsTypeEnum = GameActionMarkCellsTypeEnum;
    var GameContextEnum = (function() {
        function GameContextEnum() {}
        GameContextEnum.ROLE_PLAY = 1;
        GameContextEnum.FIGHT = 2;
        return GameContextEnum;
    })
    Protocol.GameContextEnum = GameContextEnum;
    var GameHierarchyEnum = (function() {
        function GameHierarchyEnum() {}
        GameHierarchyEnum.UNAVAILABLE = -1;
        GameHierarchyEnum.PLAYER = 0;
        GameHierarchyEnum.MODERATOR = 10;
        GameHierarchyEnum.GAMEMASTER_PADAWAN = 20;
        GameHierarchyEnum.GAMEMASTER = 30;
        GameHierarchyEnum.ADMIN = 40;
        GameHierarchyEnum.UNKNOWN_SPECIAL_USER = 50;
        return GameHierarchyEnum;
    })
    Protocol.GameHierarchyEnum = GameHierarchyEnum;
    var GameServerTypeEnum = (function() {
        function GameServerTypeEnum() {}
        GameServerTypeEnum.SERVER_TYPE_UNDEFINED = -1;
        GameServerTypeEnum.SERVER_TYPE_CLASSICAL = 0;
        GameServerTypeEnum.SERVER_TYPE_HARDCORE = 1;
        GameServerTypeEnum.SERVER_TYPE_KOLIZEUM = 2;
        GameServerTypeEnum.SERVER_TYPE_TOURNAMENT = 3;
        GameServerTypeEnum.SERVER_TYPE_EPIC = 4;
        GameServerTypeEnum.SERVER_TYPE_TEMPORIS = 5;
        return GameServerTypeEnum;
    })
    Protocol.GameServerTypeEnum = GameServerTypeEnum;
    var GuildInformationsTypeEnum = (function() {
        function GuildInformationsTypeEnum() {}
        GuildInformationsTypeEnum.INFO_GENERAL = 1;
        GuildInformationsTypeEnum.INFO_MEMBERS = 2;
        GuildInformationsTypeEnum.INFO_BOOSTS = 3;
        GuildInformationsTypeEnum.INFO_PADDOCKS = 4;
        GuildInformationsTypeEnum.INFO_HOUSES = 5;
        GuildInformationsTypeEnum.INFO_TAX_COLLECTOR_GUILD_ONLY = 6;
        GuildInformationsTypeEnum.INFO_TAX_COLLECTOR_ALLIANCE = 7;
        GuildInformationsTypeEnum.INFO_TAX_COLLECTOR_LEAVE = 8;
        return GuildInformationsTypeEnum;
    })
    Protocol.GuildInformationsTypeEnum = GuildInformationsTypeEnum;
    var GuildRightsBitEnum = (function() {
        function GuildRightsBitEnum() {}
        GuildRightsBitEnum.GUILD_RIGHT_NONE = 0;
        GuildRightsBitEnum.GUILD_RIGHT_BOSS = 1;
        GuildRightsBitEnum.GUILD_RIGHT_MANAGE_GUILD_BOOSTS = 2;
        GuildRightsBitEnum.GUILD_RIGHT_MANAGE_RIGHTS = 4;
        GuildRightsBitEnum.GUILD_RIGHT_INVITE_NEW_MEMBERS = 8;
        GuildRightsBitEnum.GUILD_RIGHT_BAN_MEMBERS = 16;
        GuildRightsBitEnum.GUILD_RIGHT_MANAGE_XP_CONTRIBUTION = 32;
        GuildRightsBitEnum.GUILD_RIGHT_MANAGE_RANKS = 64;
        GuildRightsBitEnum.GUILD_RIGHT_HIRE_TAX_COLLECTOR = 128;
        GuildRightsBitEnum.GUILD_RIGHT_MANAGE_MY_XP_CONTRIBUTION = 256;
        GuildRightsBitEnum.GUILD_RIGHT_COLLECT = 512;
        GuildRightsBitEnum.GUILD_RIGHT_USE_PADDOCKS = 4096;
        GuildRightsBitEnum.GUILD_RIGHT_ORGANIZE_PADDOCKS = 8192;
        GuildRightsBitEnum.GUILD_RIGHT_TAKE_OTHERS_MOUNTS_IN_PADDOCKS = 16384;
        GuildRightsBitEnum.GUILD_RIGHT_DEFENSE_PRIORITY = 32768;
        GuildRightsBitEnum.GUILD_RIGHT_COLLECT_MY_TAX_COLLECTOR = 65536;
        GuildRightsBitEnum.GUILD_RIGHT_SET_ALLIANCE_PRISM = 131072;
        GuildRightsBitEnum.GUILD_RIGHT_TALK_IN_ALLIANCE_CHAN = 262144;
        return GuildRightsBitEnum;
    })
    Protocol.GuildRightsBitEnum = GuildRightsBitEnum;
    var HaapiAuthTypeEnum = (function() {
        function HaapiAuthTypeEnum() {}
        HaapiAuthTypeEnum.HAAPI_API_KEY = 0;
        HaapiAuthTypeEnum.HAAPI_TOKEN = 1;
        return HaapiAuthTypeEnum;
    })
    Protocol.HaapiAuthTypeEnum = HaapiAuthTypeEnum;
    var HaapiSessionTypeEnum = (function() {
        function HaapiSessionTypeEnum() {}
        HaapiSessionTypeEnum.HAAPI_ACCOUNT_SESSION = 0;
        HaapiSessionTypeEnum.HAAPI_GAME_SESSION = 1;
        return HaapiSessionTypeEnum;
    })
    Protocol.HaapiSessionTypeEnum = HaapiSessionTypeEnum;
    var HavenBagDailyLoteryErrorEnum = (function() {
        function HavenBagDailyLoteryErrorEnum() {}
        HavenBagDailyLoteryErrorEnum.HAVENBAG_DAILY_LOTERY_OK = 0;
        HavenBagDailyLoteryErrorEnum.HAVENBAG_DAILY_LOTERY_ALREADYUSED = 1;
        HavenBagDailyLoteryErrorEnum.HAVENBAG_DAILY_LOTERY_ERROR = 2;
        return HavenBagDailyLoteryErrorEnum;
    })
    Protocol.HavenBagDailyLoteryErrorEnum = HavenBagDailyLoteryErrorEnum;
    var HavenBagRoomActionEnum = (function() {
        function HavenBagRoomActionEnum() {}
        HavenBagRoomActionEnum.HAVEN_BAG_ROOM_DISPATCH = 0;
        HavenBagRoomActionEnum.HAVEN_BAG_ROOM_UPDATE = 1;
        return HavenBagRoomActionEnum;
    })
    Protocol.HavenBagRoomActionEnum = HavenBagRoomActionEnum;
    var HavenBagShareBitEnum = (function() {
        function HavenBagShareBitEnum() {}
        HavenBagShareBitEnum.HAVEN_BAG_NONE = 0;
        HavenBagShareBitEnum.HAVEN_BAG_FRIENDS = 1;
        HavenBagShareBitEnum.HAVEN_BAG_GUILD = 2;
        return HavenBagShareBitEnum;
    })
    Protocol.HavenBagShareBitEnum = HavenBagShareBitEnum;
    var IdentificationFailureReasonEnum = (function() {
        function IdentificationFailureReasonEnum() {}
        IdentificationFailureReasonEnum.BAD_VERSION = 1;
        IdentificationFailureReasonEnum.WRONG_CREDENTIALS = 2;
        IdentificationFailureReasonEnum.BANNED = 3;
        IdentificationFailureReasonEnum.KICKED = 4;
        IdentificationFailureReasonEnum.IN_MAINTENANCE = 5;
        IdentificationFailureReasonEnum.TOO_MANY_ON_IP = 6;
        IdentificationFailureReasonEnum.TIME_OUT = 7;
        IdentificationFailureReasonEnum.BAD_IPRANGE = 8;
        IdentificationFailureReasonEnum.CREDENTIALS_RESET = 9;
        IdentificationFailureReasonEnum.EMAIL_UNVALIDATED = 10;
        IdentificationFailureReasonEnum.OTP_TIMEOUT = 11;
        IdentificationFailureReasonEnum.LOCKED = 12;
        IdentificationFailureReasonEnum.SERVICE_UNAVAILABLE = 53;
        IdentificationFailureReasonEnum.EXTERNAL_ACCOUNT_LINK_REFUSED = 61;
        IdentificationFailureReasonEnum.EXTERNAL_ACCOUNT_ALREADY_LINKED = 62;
        IdentificationFailureReasonEnum.UNKNOWN_AUTH_ERROR = 99;
        IdentificationFailureReasonEnum.SPARE = 100;
        return IdentificationFailureReasonEnum;
    })
    Protocol.IdentificationFailureReasonEnum = IdentificationFailureReasonEnum;
    var ListAddFailureEnum = (function() {
        function ListAddFailureEnum() {}
        ListAddFailureEnum.LIST_ADD_FAILURE_UNKNOWN = 0;
        ListAddFailureEnum.LIST_ADD_FAILURE_OVER_QUOTA = 1;
        ListAddFailureEnum.LIST_ADD_FAILURE_NOT_FOUND = 2;
        ListAddFailureEnum.LIST_ADD_FAILURE_EGOCENTRIC = 3;
        ListAddFailureEnum.LIST_ADD_FAILURE_IS_DOUBLE = 4;
        ListAddFailureEnum.LIST_ADD_FAILURE_IS_CONFLICTING_DOUBLE = 5;
        return ListAddFailureEnum;
    })
    Protocol.ListAddFailureEnum = ListAddFailureEnum;
    var LockableResultEnum = (function() {
        function LockableResultEnum() {}
        LockableResultEnum.LOCKABLE_UNLOCKED = 0;
        LockableResultEnum.LOCKABLE_CODE_ERROR = 1;
        LockableResultEnum.LOCKABLE_UNLOCK_FORBIDDEN = 2;
        return LockableResultEnum;
    })
    Protocol.LockableResultEnum = LockableResultEnum;
    var MapObstacleStateEnum = (function() {
        function MapObstacleStateEnum() {}
        MapObstacleStateEnum.OBSTACLE_OPENED = 1;
        MapObstacleStateEnum.OBSTACLE_CLOSED = 2;
        return MapObstacleStateEnum;
    })
    Protocol.MapObstacleStateEnum = MapObstacleStateEnum;
    var MountCharacteristicEnum = (function() {
        function MountCharacteristicEnum() {}
        MountCharacteristicEnum.ENERGY = 1;
        MountCharacteristicEnum.SERENITY = 2;
        MountCharacteristicEnum.STAMINA = 3;
        MountCharacteristicEnum.LOVE = 4;
        MountCharacteristicEnum.MATURITY = 5;
        MountCharacteristicEnum.TIREDNESS = 6;
        MountCharacteristicEnum.CARRIER = 7;
        MountCharacteristicEnum.FERTILE = 8;
        MountCharacteristicEnum.PREGNANT = 9;
        return MountCharacteristicEnum;
    })
    Protocol.MountCharacteristicEnum = MountCharacteristicEnum;
    var MountEquipedErrorEnum = (function() {
        function MountEquipedErrorEnum() {}
        MountEquipedErrorEnum.UNSET = 0;
        MountEquipedErrorEnum.SET = 1;
        MountEquipedErrorEnum.RIDING = 2;
        return MountEquipedErrorEnum;
    })
    Protocol.MountEquipedErrorEnum = MountEquipedErrorEnum;
    var NicknameErrorEnum = (function() {
        function NicknameErrorEnum() {}
        NicknameErrorEnum.ALREADY_USED = 1;
        NicknameErrorEnum.SAME_AS_LOGIN = 2;
        NicknameErrorEnum.TOO_SIMILAR_TO_LOGIN = 3;
        NicknameErrorEnum.INVALID_NICK = 4;
        NicknameErrorEnum.UNKNOWN_NICK_ERROR = 99;
        return NicknameErrorEnum;
    })
    Protocol.NicknameErrorEnum = NicknameErrorEnum;
    var ObjectErrorEnum = (function() {
        function ObjectErrorEnum() {}
        ObjectErrorEnum.INVENTORY_FULL = 1;
        ObjectErrorEnum.CANNOT_EQUIP_TWICE = 2;
        ObjectErrorEnum.NOT_TRADABLE = 3;
        ObjectErrorEnum.CANNOT_DROP = 4;
        ObjectErrorEnum.CANNOT_DROP_NO_PLACE = 5;
        ObjectErrorEnum.CANNOT_DESTROY = 6;
        ObjectErrorEnum.LEVEL_TOO_LOW = 7;
        ObjectErrorEnum.LIVING_OBJECT_REFUSED_FOOD = 8;
        ObjectErrorEnum.CANNOT_UNEQUIP = 9;
        ObjectErrorEnum.CANNOT_EQUIP_HERE = 10;
        ObjectErrorEnum.CRITERIONS = 11;
        ObjectErrorEnum.SYMBIOTIC_OBJECT_ERROR = 12;
        ObjectErrorEnum.EVOLUTIVE_OBJECT_REFUSED_FOOD = 13;
        return ObjectErrorEnum;
    })
    Protocol.ObjectErrorEnum = ObjectErrorEnum;
    var PartyJoinErrorEnum = (function() {
        function PartyJoinErrorEnum() {}
        PartyJoinErrorEnum.PARTY_JOIN_ERROR_UNKNOWN = 0;
        PartyJoinErrorEnum.PARTY_JOIN_ERROR_PLAYER_NOT_FOUND = 1;
        PartyJoinErrorEnum.PARTY_JOIN_ERROR_PARTY_NOT_FOUND = 2;
        PartyJoinErrorEnum.PARTY_JOIN_ERROR_PARTY_FULL = 3;
        PartyJoinErrorEnum.PARTY_JOIN_ERROR_PLAYER_BUSY = 4;
        PartyJoinErrorEnum.PARTY_JOIN_ERROR_PLAYER_ALREADY_INVITED = 6;
        PartyJoinErrorEnum.PARTY_JOIN_ERROR_PLAYER_TOO_SOLLICITED = 7;
        PartyJoinErrorEnum.PARTY_JOIN_ERROR_PLAYER_LOYAL = 8;
        PartyJoinErrorEnum.PARTY_JOIN_ERROR_UNMODIFIABLE = 9;
        PartyJoinErrorEnum.PARTY_JOIN_ERROR_UNMET_CRITERION = 10;
        PartyJoinErrorEnum.PARTY_JOIN_ERROR_NOT_ENOUGH_ROOM = 11;
        PartyJoinErrorEnum.PARTY_JOIN_ERROR_COMPOSITION_CHANGED = 12;
        PartyJoinErrorEnum.PARTY_JOIN_ERROR_PLAYER_IN_TUTORIAL = 13;
        return PartyJoinErrorEnum;
    })
    Protocol.PartyJoinErrorEnum = PartyJoinErrorEnum;
    var PartyNameErrorEnum = (function() {
        function PartyNameErrorEnum() {}
        PartyNameErrorEnum.PARTY_NAME_UNDEFINED_ERROR = 0;
        PartyNameErrorEnum.PARTY_NAME_INVALID = 1;
        PartyNameErrorEnum.PARTY_NAME_ALREADY_USED = 2;
        PartyNameErrorEnum.PARTY_NAME_UNALLOWED_RIGHTS = 3;
        PartyNameErrorEnum.PARTY_NAME_UNALLOWED_NOW = 4;
        return PartyNameErrorEnum;
    })
    Protocol.PartyNameErrorEnum = PartyNameErrorEnum;
    var PartyTypeEnum = (function() {
        function PartyTypeEnum() {}
        PartyTypeEnum.PARTY_TYPE_UNDEFINED = 0;
        PartyTypeEnum.PARTY_TYPE_CLASSICAL = 1;
        PartyTypeEnum.PARTY_TYPE_DUNGEON = 2;
        PartyTypeEnum.PARTY_TYPE_ARENA = 3;
        return PartyTypeEnum;
    })
    Protocol.PartyTypeEnum = PartyTypeEnum;
    var PlayableBreedEnum = (function() {
        function PlayableBreedEnum() {}
        PlayableBreedEnum.UNDEFINED = 0;
        PlayableBreedEnum.Feca = 1;
        PlayableBreedEnum.Osamodas = 2;
        PlayableBreedEnum.Enutrof = 3;
        PlayableBreedEnum.Sram = 4;
        PlayableBreedEnum.Xelor = 5;
        PlayableBreedEnum.Ecaflip = 6;
        PlayableBreedEnum.Eniripsa = 7;
        PlayableBreedEnum.Iop = 8;
        PlayableBreedEnum.Cra = 9;
        PlayableBreedEnum.Sadida = 10;
        PlayableBreedEnum.Sacrieur = 11;
        PlayableBreedEnum.Pandawa = 12;
        PlayableBreedEnum.Roublard = 13;
        PlayableBreedEnum.Zobal = 14;
        PlayableBreedEnum.Steamer = 15;
        PlayableBreedEnum.Eliotrope = 16;
        PlayableBreedEnum.Huppermage = 17;
        PlayableBreedEnum.Ouginak = 18;
        return PlayableBreedEnum;
    })
    Protocol.PlayableBreedEnum = PlayableBreedEnum;
    var PlayerLifeStatusEnum = (function() {
        function PlayerLifeStatusEnum() {}
        PlayerLifeStatusEnum.STATUS_ALIVE_AND_KICKING = 0;
        PlayerLifeStatusEnum.STATUS_TOMBSTONE = 1;
        PlayerLifeStatusEnum.STATUS_PHANTOM = 2;
        return PlayerLifeStatusEnum;
    })
    Protocol.PlayerLifeStatusEnum = PlayerLifeStatusEnum;
    var PlayerStateEnum = (function() {
        function PlayerStateEnum() {}
        PlayerStateEnum.NOT_CONNECTED = 0;
        PlayerStateEnum.GAME_TYPE_ROLEPLAY = 1;
        PlayerStateEnum.GAME_TYPE_FIGHT = 2;
        PlayerStateEnum.UNKNOWN_STATE = 99;
        return PlayerStateEnum;
    })
    Protocol.PlayerStateEnum = PlayerStateEnum;
    var PlayerStatusEnum = (function() {
        function PlayerStatusEnum() {}
        PlayerStatusEnum.PLAYER_STATUS_OFFLINE = 0;
        PlayerStatusEnum.PLAYER_STATUS_UNKNOWN = 1;
        PlayerStatusEnum.PLAYER_STATUS_AVAILABLE = 10;
        PlayerStatusEnum.PLAYER_STATUS_IDLE = 20;
        PlayerStatusEnum.PLAYER_STATUS_AFK = 21;
        PlayerStatusEnum.PLAYER_STATUS_PRIVATE = 30;
        PlayerStatusEnum.PLAYER_STATUS_SOLO = 40;
        return PlayerStatusEnum;
    })
    Protocol.PlayerStatusEnum = PlayerStatusEnum;
    var PresetDeleteResultEnum = (function() {
        function PresetDeleteResultEnum() {}
        PresetDeleteResultEnum.PRESET_DEL_OK = 1;
        PresetDeleteResultEnum.PRESET_DEL_ERR_UNKNOWN = 2;
        PresetDeleteResultEnum.PRESET_DEL_ERR_BAD_PRESET_ID = 3;
        PresetDeleteResultEnum.PRESET_DEL_ERR_SYSTEM_INACTIVE = 4;
        return PresetDeleteResultEnum;
    })
    Protocol.PresetDeleteResultEnum = PresetDeleteResultEnum;
    var PresetSaveResultEnum = (function() {
        function PresetSaveResultEnum() {}
        PresetSaveResultEnum.PRESET_SAVE_OK = 1;
        PresetSaveResultEnum.PRESET_SAVE_ERR_UNKNOWN = 2;
        PresetSaveResultEnum.PRESET_SAVE_ERR_TOO_MANY = 3;
        PresetSaveResultEnum.PRESET_SAVE_ERR_INVALID_PLAYER_STATE = 4;
        PresetSaveResultEnum.PRESET_SAVE_ERR_SYSTEM_INACTIVE = 5;
        PresetSaveResultEnum.PRESET_SAVE_ERR_INVALID_ID = 6;
        return PresetSaveResultEnum;
    })
    Protocol.PresetSaveResultEnum = PresetSaveResultEnum;
    var PresetUseResultEnum = (function() {
        function PresetUseResultEnum() {}
        PresetUseResultEnum.PRESET_USE_OK = 1;
        PresetUseResultEnum.PRESET_USE_OK_PARTIAL = 2;
        PresetUseResultEnum.PRESET_USE_ERR_STATS_FIGHT_PREPARATION = 3;
        PresetUseResultEnum.PRESET_USE_ERR_COOLDOWN = 4;
        PresetUseResultEnum.PRESET_USE_ERR_BAD_PRESET_ID = 5;
        PresetUseResultEnum.PRESET_USE_ERR_INVALID_STATE = 6;
        PresetUseResultEnum.PRESET_USE_ERR_STATS = 7;
        PresetUseResultEnum.PRESET_USE_ERR_CRITERION = 8;
        PresetUseResultEnum.PRESET_USE_ERR_UNKNOWN = 9;
        PresetUseResultEnum.PRESET_USE_ERR_INVALID_DATA = 10;
        return PresetUseResultEnum;
    })
    Protocol.PresetUseResultEnum = PresetUseResultEnum;
    var PrismListenEnum = (function() {
        function PrismListenEnum() {}
        PrismListenEnum.PRISM_LISTEN_NONE = 0;
        PrismListenEnum.PRISM_LISTEN_MINE = 1;
        PrismListenEnum.PRISM_LISTEN_ALL = 2;
        return PrismListenEnum;
    })
    Protocol.PrismListenEnum = PrismListenEnum;
    var PrismSetSabotagedRefusedReasonEnum = (function() {
        function PrismSetSabotagedRefusedReasonEnum() {}
        PrismSetSabotagedRefusedReasonEnum.SABOTAGE_REFUSED = -1;
        PrismSetSabotagedRefusedReasonEnum.SABOTAGE_INSUFFICIENT_RIGHTS = 0;
        PrismSetSabotagedRefusedReasonEnum.SABOTAGE_MEMBER_ACCOUNT_NEEDED = 1;
        PrismSetSabotagedRefusedReasonEnum.SABOTAGE_RESTRICTED_ACCOUNT = 2;
        PrismSetSabotagedRefusedReasonEnum.SABOTAGE_WRONG_ALLIANCE = 3;
        PrismSetSabotagedRefusedReasonEnum.SABOTAGE_NO_PRISM = 4;
        PrismSetSabotagedRefusedReasonEnum.SABOTAGE_WRONG_STATE = 5;
        return PrismSetSabotagedRefusedReasonEnum;
    })
    Protocol.PrismSetSabotagedRefusedReasonEnum = PrismSetSabotagedRefusedReasonEnum;
    var PrismStateEnum = (function() {
        function PrismStateEnum() {}
        PrismStateEnum.PRISM_STATE_INVULNERABLE = 0;
        PrismStateEnum.PRISM_STATE_NORMAL = 1;
        PrismStateEnum.PRISM_STATE_ATTACKED = 2;
        PrismStateEnum.PRISM_STATE_FIGHTING = 3;
        PrismStateEnum.PRISM_STATE_WEAKENED = 4;
        PrismStateEnum.PRISM_STATE_VULNERABLE = 5;
        PrismStateEnum.PRISM_STATE_DEFEATED = 6;
        PrismStateEnum.PRISM_STATE_SABOTAGED = 7;
        return PrismStateEnum;
    })
    Protocol.PrismStateEnum = PrismStateEnum;
    var PvpArenaStepEnum = (function() {
        function PvpArenaStepEnum() {}
        PvpArenaStepEnum.ARENA_STEP_REGISTRED = 0;
        PvpArenaStepEnum.ARENA_STEP_WAITING_FIGHT = 1;
        PvpArenaStepEnum.ARENA_STEP_STARTING_FIGHT = 2;
        PvpArenaStepEnum.ARENA_STEP_UNREGISTER = 3;
        return PvpArenaStepEnum;
    })
    Protocol.PvpArenaStepEnum = PvpArenaStepEnum;
    var PvpArenaTypeEnum = (function() {
        function PvpArenaTypeEnum() {}
        PvpArenaTypeEnum.ARENA_TYPE_1VS1 = 1;
        PvpArenaTypeEnum.ARENA_TYPE_3VS3_SOLO = 2;
        PvpArenaTypeEnum.ARENA_TYPE_3VS3_TEAM = 3;
        return PvpArenaTypeEnum;
    })
    Protocol.PvpArenaTypeEnum = PvpArenaTypeEnum;
    var SavablePresetTypeEnum = (function() {
        function SavablePresetTypeEnum() {}
        SavablePresetTypeEnum.CHARACTER_BUILD = 0;
        SavablePresetTypeEnum.SPELL_PRESET = 1;
        return SavablePresetTypeEnum;
    })
    Protocol.SavablePresetTypeEnum = SavablePresetTypeEnum;
    var ServerCompletionEnum = (function() {
        function ServerCompletionEnum() {}
        ServerCompletionEnum.COMPLETION_RECOMANDATED = 0;
        ServerCompletionEnum.COMPLETION_AVERAGE = 1;
        ServerCompletionEnum.COMPLETION_HIGH = 2;
        ServerCompletionEnum.COMPLETION_COMING_SOON = 3;
        ServerCompletionEnum.COMPLETION_FULL = 4;
        return ServerCompletionEnum;
    })
    Protocol.ServerCompletionEnum = ServerCompletionEnum;
    var ServerConnectionErrorEnum = (function() {
        function ServerConnectionErrorEnum() {}
        ServerConnectionErrorEnum.SERVER_CONNECTION_ERROR_DUE_TO_STATUS = 0;
        ServerConnectionErrorEnum.SERVER_CONNECTION_ERROR_NO_REASON = 1;
        ServerConnectionErrorEnum.SERVER_CONNECTION_ERROR_ACCOUNT_RESTRICTED = 2;
        ServerConnectionErrorEnum.SERVER_CONNECTION_ERROR_COMMUNITY_RESTRICTED = 3;
        ServerConnectionErrorEnum.SERVER_CONNECTION_ERROR_LOCATION_RESTRICTED = 4;
        ServerConnectionErrorEnum.SERVER_CONNECTION_ERROR_SUBSCRIBERS_ONLY = 5;
        ServerConnectionErrorEnum.SERVER_CONNECTION_ERROR_REGULAR_PLAYERS_ONLY = 6;
        ServerConnectionErrorEnum.SERVER_CONNECTION_ERROR_MONOACCOUNT_CANNOT_VERIFY = 7;
        ServerConnectionErrorEnum.SERVER_CONNECTION_ERROR_MONOACCOUNT_ONLY = 8;
        ServerConnectionErrorEnum.SERVER_CONNECTION_ERROR_SERVER_OVERLOAD = 9;
        return ServerConnectionErrorEnum;
    })
    Protocol.ServerConnectionErrorEnum = ServerConnectionErrorEnum;
    var ServerStatusEnum = (function() {
        function ServerStatusEnum() {}
        ServerStatusEnum.STATUS_UNKNOWN = 0;
        ServerStatusEnum.OFFLINE = 1;
        ServerStatusEnum.STARTING = 2;
        ServerStatusEnum.ONLINE = 3;
        ServerStatusEnum.NOJOIN = 4;
        ServerStatusEnum.SAVING = 5;
        ServerStatusEnum.STOPING = 6;
        ServerStatusEnum.FULL = 7;
        return ServerStatusEnum;
    })
    Protocol.ServerStatusEnum = ServerStatusEnum;
    var ShortcutBarEnum = (function() {
        function ShortcutBarEnum() {}
        ShortcutBarEnum.GENERAL_SHORTCUT_BAR = 0;
        ShortcutBarEnum.SPELL_SHORTCUT_BAR = 1;
        return ShortcutBarEnum;
    })
    Protocol.ShortcutBarEnum = ShortcutBarEnum;
    var SocialContactCategoryEnum = (function() {
        function SocialContactCategoryEnum() {}
        SocialContactCategoryEnum.SOCIAL_CONTACT_FRIEND = 0;
        SocialContactCategoryEnum.SOCIAL_CONTACT_SPOUSE = 1;
        SocialContactCategoryEnum.SOCIAL_CONTACT_PARTY = 2;
        SocialContactCategoryEnum.SOCIAL_CONTACT_GUILD = 3;
        SocialContactCategoryEnum.SOCIAL_CONTACT_ALLIANCE = 4;
        SocialContactCategoryEnum.SOCIAL_CONTACT_CRAFTER = 5;
        SocialContactCategoryEnum.SOCIAL_CONTACT_INTERLOCUTOR = 6;
        SocialContactCategoryEnum.SOCIAL_CONTACT_FIGHT = 7;
        return SocialContactCategoryEnum;
    })
    Protocol.SocialContactCategoryEnum = SocialContactCategoryEnum;
    var SocialGroupCreationResultEnum = (function() {
        function SocialGroupCreationResultEnum() {}
        SocialGroupCreationResultEnum.SOCIAL_GROUP_CREATE_OK = 1;
        SocialGroupCreationResultEnum.SOCIAL_GROUP_CREATE_ERROR_NAME_INVALID = 2;
        SocialGroupCreationResultEnum.SOCIAL_GROUP_CREATE_ERROR_ALREADY_IN_GROUP = 3;
        SocialGroupCreationResultEnum.SOCIAL_GROUP_CREATE_ERROR_NAME_ALREADY_EXISTS = 4;
        SocialGroupCreationResultEnum.SOCIAL_GROUP_CREATE_ERROR_EMBLEM_ALREADY_EXISTS = 5;
        SocialGroupCreationResultEnum.SOCIAL_GROUP_CREATE_ERROR_LEAVE = 6;
        SocialGroupCreationResultEnum.SOCIAL_GROUP_CREATE_ERROR_CANCEL = 7;
        SocialGroupCreationResultEnum.SOCIAL_GROUP_CREATE_ERROR_REQUIREMENT_UNMET = 8;
        SocialGroupCreationResultEnum.SOCIAL_GROUP_CREATE_ERROR_EMBLEM_INVALID = 9;
        SocialGroupCreationResultEnum.SOCIAL_GROUP_CREATE_ERROR_TAG_INVALID = 10;
        SocialGroupCreationResultEnum.SOCIAL_GROUP_CREATE_ERROR_TAG_ALREADY_EXISTS = 11;
        SocialGroupCreationResultEnum.SOCIAL_GROUP_CREATE_ERROR_NEEDS_SUBGROUP = 12;
        SocialGroupCreationResultEnum.SOCIAL_GROUP_CREATE_ERROR_UNKNOWN = 99;
        return SocialGroupCreationResultEnum;
    })
    Protocol.SocialGroupCreationResultEnum = SocialGroupCreationResultEnum;
    var SocialGroupInvitationStateEnum = (function() {
        function SocialGroupInvitationStateEnum() {}
        SocialGroupInvitationStateEnum.SOCIAL_GROUP_INVITATION_FAILED = 0;
        SocialGroupInvitationStateEnum.SOCIAL_GROUP_INVITATION_SENT = 1;
        SocialGroupInvitationStateEnum.SOCIAL_GROUP_INVITATION_CANCELED = 2;
        SocialGroupInvitationStateEnum.SOCIAL_GROUP_INVITATION_OK = 3;
        return SocialGroupInvitationStateEnum;
    })
    Protocol.SocialGroupInvitationStateEnum = SocialGroupInvitationStateEnum;
    var SocialNoticeErrorEnum = (function() {
        function SocialNoticeErrorEnum() {}
        SocialNoticeErrorEnum.SOCIAL_NOTICE_UNKNOWN_ERROR = 0;
        SocialNoticeErrorEnum.SOCIAL_NOTICE_INVALID_RIGHTS = 1;
        SocialNoticeErrorEnum.SOCIAL_NOTICE_COOLDOWN = 2;
        return SocialNoticeErrorEnum;
    })
    Protocol.SocialNoticeErrorEnum = SocialNoticeErrorEnum;
    var StatsUpgradeResultEnum = (function() {
        function StatsUpgradeResultEnum() {}
        StatsUpgradeResultEnum.NONE = -1;
        StatsUpgradeResultEnum.SUCCESS = 0;
        StatsUpgradeResultEnum.RESTRICTED = 1;
        StatsUpgradeResultEnum.GUEST = 2;
        StatsUpgradeResultEnum.IN_FIGHT = 3;
        StatsUpgradeResultEnum.NOT_ENOUGH_POINT = 4;
        return StatsUpgradeResultEnum;
    })
    Protocol.StatsUpgradeResultEnum = StatsUpgradeResultEnum;
    var SubEntityBindingPointCategoryEnum = (function() {
        function SubEntityBindingPointCategoryEnum() {}
        SubEntityBindingPointCategoryEnum.HOOK_POINT_CATEGORY_UNUSED = 0;
        SubEntityBindingPointCategoryEnum.HOOK_POINT_CATEGORY_PET = 1;
        SubEntityBindingPointCategoryEnum.HOOK_POINT_CATEGORY_MOUNT_DRIVER = 2;
        SubEntityBindingPointCategoryEnum.HOOK_POINT_CATEGORY_LIFTED_ENTITY = 3;
        SubEntityBindingPointCategoryEnum.HOOK_POINT_CATEGORY_BASE_BACKGROUND = 4;
        SubEntityBindingPointCategoryEnum.HOOK_POINT_CATEGORY_MERCHANT_BAG = 5;
        SubEntityBindingPointCategoryEnum.HOOK_POINT_CATEGORY_BASE_FOREGROUND = 6;
        SubEntityBindingPointCategoryEnum.HOOK_POINT_CATEGORY_PET_FOLLOWER = 7;
        SubEntityBindingPointCategoryEnum.HOOK_POINT_CATEGORY_UNDERWATER_BUBBLES = 8;
        return SubEntityBindingPointCategoryEnum;
    })
    Protocol.SubEntityBindingPointCategoryEnum = SubEntityBindingPointCategoryEnum;
    var SubscriptionRequiredEnum = (function() {
        function SubscriptionRequiredEnum() {}
        SubscriptionRequiredEnum.LIMITED_TO_SUBSCRIBER = 0;
        SubscriptionRequiredEnum.LIMIT_ON_JOB_XP = 1;
        SubscriptionRequiredEnum.LIMIT_ON_JOB_USE = 2;
        SubscriptionRequiredEnum.LIMIT_ON_MAP = 3;
        SubscriptionRequiredEnum.LIMIT_ON_ITEM = 4;
        SubscriptionRequiredEnum.LIMIT_ON_VENDOR = 5;
        SubscriptionRequiredEnum.LIMIT_ON_HAVENBAG = 6;
        return SubscriptionRequiredEnum;
    })
    Protocol.SubscriptionRequiredEnum = SubscriptionRequiredEnum;
    var TaxCollectorErrorReasonEnum = (function() {
        function TaxCollectorErrorReasonEnum() {}
        TaxCollectorErrorReasonEnum.TAX_COLLECTOR_ERROR_UNKNOWN = 0;
        TaxCollectorErrorReasonEnum.TAX_COLLECTOR_NOT_FOUND = 1;
        TaxCollectorErrorReasonEnum.TAX_COLLECTOR_NOT_OWNED = 2;
        TaxCollectorErrorReasonEnum.TAX_COLLECTOR_NO_RIGHTS = 3;
        TaxCollectorErrorReasonEnum.TAX_COLLECTOR_MAX_REACHED = 4;
        TaxCollectorErrorReasonEnum.TAX_COLLECTOR_ALREADY_ONE = 5;
        TaxCollectorErrorReasonEnum.TAX_COLLECTOR_CANT_HIRE_YET = 6;
        TaxCollectorErrorReasonEnum.TAX_COLLECTOR_CANT_HIRE_HERE = 7;
        TaxCollectorErrorReasonEnum.TAX_COLLECTOR_NOT_ENOUGH_KAMAS = 8;
        return TaxCollectorErrorReasonEnum;
    })
    Protocol.TaxCollectorErrorReasonEnum = TaxCollectorErrorReasonEnum;
    var TaxCollectorMovementTypeEnum = (function() {
        function TaxCollectorMovementTypeEnum() {}
        TaxCollectorMovementTypeEnum.TAX_COLLECTOR_UNKNOWN_ACTION = 0;
        TaxCollectorMovementTypeEnum.TAX_COLLECTOR_HIRED = 1;
        TaxCollectorMovementTypeEnum.TAX_COLLECTOR_HARVESTED = 2;
        TaxCollectorMovementTypeEnum.TAX_COLLECTOR_DEFEATED = 3;
        TaxCollectorMovementTypeEnum.TAX_COLLECTOR_DESTROYED = 4;
        return TaxCollectorMovementTypeEnum;
    })
    Protocol.TaxCollectorMovementTypeEnum = TaxCollectorMovementTypeEnum;
    var TaxCollectorStateEnum = (function() {
        function TaxCollectorStateEnum() {}
        TaxCollectorStateEnum.STATE_COLLECTING = 0;
        TaxCollectorStateEnum.STATE_WAITING_FOR_HELP = 1;
        TaxCollectorStateEnum.STATE_FIGHTING = 2;
        return TaxCollectorStateEnum;
    })
    Protocol.TaxCollectorStateEnum = TaxCollectorStateEnum;
    var TeamEnum = (function() {
        function TeamEnum() {}
        TeamEnum.TEAM_CHALLENGER = 0;
        TeamEnum.TEAM_DEFENDER = 1;
        TeamEnum.TEAM_SPECTATOR = 2;
        return TeamEnum;
    })
    Protocol.TeamEnum = TeamEnum;
    var TeamTypeEnum = (function() {
        function TeamTypeEnum() {}
        TeamTypeEnum.TEAM_TYPE_PLAYER = 0;
        TeamTypeEnum.TEAM_TYPE_MONSTER = 1;
        TeamTypeEnum.TEAM_TYPE_MUTANT = 2;
        TeamTypeEnum.TEAM_TYPE_TAXCOLLECTOR = 3;
        TeamTypeEnum.TEAM_TYPE_BAD_PLAYER = 4;
        TeamTypeEnum.TEAM_TYPE_PRISM = 5;
        return TeamTypeEnum;
    })
    Protocol.TeamTypeEnum = TeamTypeEnum;
    var TeleporterTypeEnum = (function() {
        function TeleporterTypeEnum() {}
        TeleporterTypeEnum.TELEPORTER_ZAAP = 0;
        TeleporterTypeEnum.TELEPORTER_SUBWAY = 1;
        TeleporterTypeEnum.TELEPORTER_PRISM = 2;
        TeleporterTypeEnum.TELEPORTER_HAVENBAG = 3;
        TeleporterTypeEnum.TELEPORTER_ANOMALY = 4;
        return TeleporterTypeEnum;
    })
    Protocol.TeleporterTypeEnum = TeleporterTypeEnum;
    var TextInformationTypeEnum = (function() {
        function TextInformationTypeEnum() {}
        TextInformationTypeEnum.TEXT_INFORMATION_MESSAGE = 0;
        TextInformationTypeEnum.TEXT_INFORMATION_ERROR = 1;
        TextInformationTypeEnum.TEXT_INFORMATION_PVP = 2;
        TextInformationTypeEnum.TEXT_INFORMATION_FIGHT_LOG = 3;
        TextInformationTypeEnum.TEXT_INFORMATION_POPUP = 4;
        TextInformationTypeEnum.TEXT_LIVING_OBJECT = 5;
        TextInformationTypeEnum.TEXT_ENTITY_TALK = 6;
        TextInformationTypeEnum.TEXT_INFORMATION_FIGHT = 7;
        return TextInformationTypeEnum;
    })
    Protocol.TextInformationTypeEnum = TextInformationTypeEnum;
    var TreasureHuntDigRequestEnum = (function() {
        function TreasureHuntDigRequestEnum() {}
        TreasureHuntDigRequestEnum.TREASURE_HUNT_DIG_ERROR_UNDEFINED = 0;
        TreasureHuntDigRequestEnum.TREASURE_HUNT_DIG_NEW_HINT = 1;
        TreasureHuntDigRequestEnum.TREASURE_HUNT_DIG_FINISHED = 2;
        TreasureHuntDigRequestEnum.TREASURE_HUNT_DIG_WRONG = 3;
        TreasureHuntDigRequestEnum.TREASURE_HUNT_DIG_LOST = 4;
        TreasureHuntDigRequestEnum.TREASURE_HUNT_DIG_ERROR_IMPOSSIBLE = 5;
        TreasureHuntDigRequestEnum.TREASURE_HUNT_DIG_WRONG_AND_YOU_KNOW_IT = 6;
        return TreasureHuntDigRequestEnum;
    })
    Protocol.TreasureHuntDigRequestEnum = TreasureHuntDigRequestEnum;
    var TreasureHuntFlagRequestEnum = (function() {
        function TreasureHuntFlagRequestEnum() {}
        TreasureHuntFlagRequestEnum.TREASURE_HUNT_FLAG_ERROR_UNDEFINED = 0;
        TreasureHuntFlagRequestEnum.TREASURE_HUNT_FLAG_OK = 1;
        TreasureHuntFlagRequestEnum.TREASURE_HUNT_FLAG_WRONG = 2;
        TreasureHuntFlagRequestEnum.TREASURE_HUNT_FLAG_TOO_MANY = 3;
        TreasureHuntFlagRequestEnum.TREASURE_HUNT_FLAG_ERROR_IMPOSSIBLE = 4;
        TreasureHuntFlagRequestEnum.TREASURE_HUNT_FLAG_WRONG_INDEX = 5;
        TreasureHuntFlagRequestEnum.TREASURE_HUNT_FLAG_SAME_MAP = 6;
        return TreasureHuntFlagRequestEnum;
    })
    Protocol.TreasureHuntFlagRequestEnum = TreasureHuntFlagRequestEnum;
    var TreasureHuntFlagStateEnum = (function() {
        function TreasureHuntFlagStateEnum() {}
        TreasureHuntFlagStateEnum.TREASURE_HUNT_FLAG_STATE_UNKNOWN = 0;
        TreasureHuntFlagStateEnum.TREASURE_HUNT_FLAG_STATE_OK = 1;
        TreasureHuntFlagStateEnum.TREASURE_HUNT_FLAG_STATE_WRONG = 2;
        return TreasureHuntFlagStateEnum;
    })
    Protocol.TreasureHuntFlagStateEnum = TreasureHuntFlagStateEnum;
    var TreasureHuntRequestEnum = (function() {
        function TreasureHuntRequestEnum() {}
        TreasureHuntRequestEnum.TREASURE_HUNT_ERROR_UNDEFINED = 0;
        TreasureHuntRequestEnum.TREASURE_HUNT_ERROR_NO_QUEST_FOUND = 2;
        TreasureHuntRequestEnum.TREASURE_HUNT_ERROR_ALREADY_HAVE_QUEST = 3;
        TreasureHuntRequestEnum.TREASURE_HUNT_ERROR_NOT_AVAILABLE = 4;
        TreasureHuntRequestEnum.TREASURE_HUNT_ERROR_DAILY_LIMIT_EXCEEDED = 5;
        TreasureHuntRequestEnum.TREASURE_HUNT_OK = 1;
        return TreasureHuntRequestEnum;
    })
    Protocol.TreasureHuntRequestEnum = TreasureHuntRequestEnum;
    var TreasureHuntTypeEnum = (function() {
        function TreasureHuntTypeEnum() {}
        TreasureHuntTypeEnum.TREASURE_HUNT_CLASSIC = 0;
        TreasureHuntTypeEnum.TREASURE_HUNT_PORTAL = 1;
        TreasureHuntTypeEnum.TREASURE_HUNT_LEGENDARY = 2;
        return TreasureHuntTypeEnum;
    })
    Protocol.TreasureHuntTypeEnum = TreasureHuntTypeEnum;
    var StatisticData = (function() {

        function StatisticData() {


        }
        StatisticData.prototype.getMessageId = function() {
            return StatisticData.ID;
        };
        StatisticData.prototype.reset = function() {

        };
        StatisticData.prototype.serialize = function(output) {
            this.serializeAs_StatisticData(output);
        };
        StatisticData.prototype.deserialize = function(input) {
            this.deserializeAs_StatisticData(input);
        };
        StatisticData.prototype.serializeAs_StatisticData = function(output) {

        };
        StatisticData.prototype.deserializeAs_StatisticData = function(input) {

        };
        StatisticData.ID = 7795;
        return StatisticData;
    })();
    Protocol.StatisticData = StatisticData;
    var StatisticDataBoolean = (function(_super) {
        __extends(StatisticDataBoolean, _super);

        function StatisticDataBoolean() {
            this.value = false;
            _super.call(this)
        }
        StatisticDataBoolean.prototype.getMessageId = function() {
            return StatisticDataBoolean.ID;
        };
        StatisticDataBoolean.prototype.reset = function() {
            this.value = false;
        };
        StatisticDataBoolean.prototype.serialize = function(output) {
            this.serializeAs_StatisticDataBoolean(output);
        };
        StatisticDataBoolean.prototype.deserialize = function(input) {
            this.deserializeAs_StatisticDataBoolean(input);
        };
        StatisticDataBoolean.prototype.serializeAs_StatisticDataBoolean = function(output) {
            _super.prototype.serializeAs_StatisticData(this, output);
            output.writeBoolean(this.value);
        };
        StatisticDataBoolean.prototype.deserializeAs_StatisticDataBoolean = function(input) {
            _super.prototype.deserializeStatisticData(this, input);
            this.value = input.readBoolean();
        };
        StatisticDataBoolean.ID = 3779;
        return StatisticDataBoolean;
    })(StatisticData);
    Protocol.StatisticDataBoolean = StatisticDataBoolean;
    var StatisticDataByte = (function(_super) {
        __extends(StatisticDataByte, _super);

        function StatisticDataByte() {
            this.value = 0;
            _super.call(this)
        }
        StatisticDataByte.prototype.getMessageId = function() {
            return StatisticDataByte.ID;
        };
        StatisticDataByte.prototype.reset = function() {
            this.value = 0;
        };
        StatisticDataByte.prototype.serialize = function(output) {
            this.serializeAs_StatisticDataByte(output);
        };
        StatisticDataByte.prototype.deserialize = function(input) {
            this.deserializeAs_StatisticDataByte(input);
        };
        StatisticDataByte.prototype.serializeAs_StatisticDataByte = function(output) {
            _super.prototype.serializeAs_StatisticData(this, output);
            output.writeByte(this.value);
        };
        StatisticDataByte.prototype.deserializeAs_StatisticDataByte = function(input) {
            _super.prototype.deserializeStatisticData(this, input);
            this.value = input.readByte();
        };
        StatisticDataByte.ID = 3536;
        return StatisticDataByte;
    })(StatisticData);
    Protocol.StatisticDataByte = StatisticDataByte;
    var StatisticDataInt = (function(_super) {
        __extends(StatisticDataInt, _super);

        function StatisticDataInt() {
            this.value = 0;
            _super.call(this)
        }
        StatisticDataInt.prototype.getMessageId = function() {
            return StatisticDataInt.ID;
        };
        StatisticDataInt.prototype.reset = function() {
            this.value = 0;
        };
        StatisticDataInt.prototype.serialize = function(output) {
            this.serializeAs_StatisticDataInt(output);
        };
        StatisticDataInt.prototype.deserialize = function(input) {
            this.deserializeAs_StatisticDataInt(input);
        };
        StatisticDataInt.prototype.serializeAs_StatisticDataInt = function(output) {
            _super.prototype.serializeAs_StatisticData(this, output);
            output.writeInt(this.value);
        };
        StatisticDataInt.prototype.deserializeAs_StatisticDataInt = function(input) {
            _super.prototype.deserializeStatisticData(this, input);
            this.value = input.readInt();
        };
        StatisticDataInt.ID = 4640;
        return StatisticDataInt;
    })(StatisticData);
    Protocol.StatisticDataInt = StatisticDataInt;
    var StatisticDataShort = (function(_super) {
        __extends(StatisticDataShort, _super);

        function StatisticDataShort() {
            this.value = 0;
            _super.call(this)
        }
        StatisticDataShort.prototype.getMessageId = function() {
            return StatisticDataShort.ID;
        };
        StatisticDataShort.prototype.reset = function() {
            this.value = 0;
        };
        StatisticDataShort.prototype.serialize = function(output) {
            this.serializeAs_StatisticDataShort(output);
        };
        StatisticDataShort.prototype.deserialize = function(input) {
            this.deserializeAs_StatisticDataShort(input);
        };
        StatisticDataShort.prototype.serializeAs_StatisticDataShort = function(output) {
            _super.prototype.serializeAs_StatisticData(this, output);
            output.writeShort(this.value);
        };
        StatisticDataShort.prototype.deserializeAs_StatisticDataShort = function(input) {
            _super.prototype.deserializeStatisticData(this, input);
            this.value = input.readShort();
        };
        StatisticDataShort.ID = 4749;
        return StatisticDataShort;
    })(StatisticData);
    Protocol.StatisticDataShort = StatisticDataShort;
    var StatisticDataString = (function(_super) {
        __extends(StatisticDataString, _super);

        function StatisticDataString() {
            this.value = "";
            _super.call(this)
        }
        StatisticDataString.prototype.getMessageId = function() {
            return StatisticDataString.ID;
        };
        StatisticDataString.prototype.reset = function() {
            this.value = "";
        };
        StatisticDataString.prototype.serialize = function(output) {
            this.serializeAs_StatisticDataString(output);
        };
        StatisticDataString.prototype.deserialize = function(input) {
            this.deserializeAs_StatisticDataString(input);
        };
        StatisticDataString.prototype.serializeAs_StatisticDataString = function(output) {
            _super.prototype.serializeAs_StatisticData(this, output);
            output.writeUTF(this.value);
        };
        StatisticDataString.prototype.deserializeAs_StatisticDataString = function(input) {
            _super.prototype.deserializeStatisticData(this, input);
            this.value = input.readUTF();
        };
        StatisticDataString.ID = 9818;
        return StatisticDataString;
    })(StatisticData);
    Protocol.StatisticDataString = StatisticDataString;
    var GameServerInformations = (function() {

        function GameServerInformations() {
            this.id = 0;
            this.type = -1;
            this.isMonoAccount = false;
            this.status = 1;
            this.completion = 0;
            this.isSelectable = false;
            this.charactersCount = 0;
            this.charactersSlots = 0;
            this.date = 0;

        }
        GameServerInformations.prototype.getMessageId = function() {
            return GameServerInformations.ID;
        };
        GameServerInformations.prototype.reset = function() {
            this.id = 0;
            this.type = -1;
            this.isMonoAccount = false;
            this.status = 1;
            this.completion = 0;
            this.isSelectable = false;
            this.charactersCount = 0;
            this.charactersSlots = 0;
            this.date = 0;
        };
        GameServerInformations.prototype.serialize = function(output) {
            this.serializeAs_GameServerInformations(output);
        };
        GameServerInformations.prototype.deserialize = function(input) {
            this.deserializeAs_GameServerInformations(input);
        };
        GameServerInformations.prototype.serializeAs_GameServerInformations = function(output) {
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.isMonoAccount);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.isSelectable);
            output.writeByte(_box0);
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarShort(this.id);
            output.writeByte(this.type);
            output.writeByte(this.status);
            output.writeByte(this.completion);
            if (this.charactersCount < 0) {
                throw new Error("Forbidden value (" + this.charactersCount + ") on element charactersCount.");
            }
            output.writeByte(this.charactersCount);
            if (this.charactersSlots < 0) {
                throw new Error("Forbidden value (" + this.charactersSlots + ") on element charactersSlots.");
            }
            output.writeByte(this.charactersSlots);
            if (this.date < -9007199254740990 || this.date > 9007199254740990) {
                throw new Error("Forbidden value (" + this.date + ") on element date.");
            }
            output.writeDouble(this.date);
        };
        GameServerInformations.prototype.deserializeAs_GameServerInformations = function(input) {
            this.deserializeByteBoxes(input);
            this.id = input.readVarUhShort();
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element of GameServerInformations.id.");
            }
            this.type = input.readByte();
            this.status = input.readByte();
            if (this.status < 0) {
                throw new Error("Forbidden value (" + this.status + ") on element of GameServerInformations.status.");
            }
            this.completion = input.readByte();
            if (this.completion < 0) {
                throw new Error("Forbidden value (" + this.completion + ") on element of GameServerInformations.completion.");
            }
            this.charactersCount = input.readByte();
            if (this.charactersCount < 0) {
                throw new Error("Forbidden value (" + this.charactersCount + ") on element of GameServerInformations.charactersCount.");
            }
            this.charactersSlots = input.readByte();
            if (this.charactersSlots < 0) {
                throw new Error("Forbidden value (" + this.charactersSlots + ") on element of GameServerInformations.charactersSlots.");
            }
            this.date = input.readDouble();
            if (this.date < -9007199254740990 || this.date > 9007199254740990) {
                throw new Error("Forbidden value (" + this.date + ") on element of GameServerInformations.date.");
            }
        };
        GameServerInformations.ID = 1852;
        return GameServerInformations;
    })();
    Protocol.GameServerInformations = GameServerInformations;
    var Achievement = (function() {

        function Achievement() {
            this.id = 0;
            this.finishedObjective = [];
            this.startedObjectives = [];

        }
        Achievement.prototype.getMessageId = function() {
            return Achievement.ID;
        };
        Achievement.prototype.reset = function() {
            this.id = 0;
            this.finishedObjective = [];
            this.startedObjectives = [];
        };
        Achievement.prototype.serialize = function(output) {
            this.serializeAs_Achievement(output);
        };
        Achievement.prototype.deserialize = function(input) {
            this.deserializeAs_Achievement(input);
        };
        Achievement.prototype.serializeAs_Achievement = function(output) {
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarShort(this.id);
            output.writeShort(this.finishedObjective.length);
            for (var _i2 = 0; _i2 < this.finishedObjective.length; _i2++) {
                (this.finishedObjective[_i2]).serializeAs_AchievementObjective(output);
            }
            output.writeShort(this.startedObjectives.length);
            for (var _i3 = 0; _i3 < this.startedObjectives.length; _i3++) {
                (this.startedObjectives[_i3]).serializeAs_AchievementStartedObjective(output);
            }
        };
        Achievement.prototype.deserializeAs_Achievement = function(input) {
            var _item2 = null;
            var _item3 = null;
            this.id = input.readVarUhShort();
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element of Achievement.id.");
            }
            var _finishedObjectiveLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _finishedObjectiveLen; _i2++) {
                _item2 = new AchievementObjective();
                _item2.deserialize(input);
                this.finishedObjective.push(_item2);
            }
            var _startedObjectivesLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _startedObjectivesLen; _i3++) {
                _item3 = new AchievementStartedObjective();
                _item3.deserialize(input);
                this.startedObjectives.push(_item3);
            }
        };
        Achievement.ID = 4830;
        return Achievement;
    })();
    Protocol.Achievement = Achievement;
    var AchievementAchieved = (function() {

        function AchievementAchieved() {
            this.id = 0;
            this.achievedBy = 0;

        }
        AchievementAchieved.prototype.getMessageId = function() {
            return AchievementAchieved.ID;
        };
        AchievementAchieved.prototype.reset = function() {
            this.id = 0;
            this.achievedBy = 0;
        };
        AchievementAchieved.prototype.serialize = function(output) {
            this.serializeAs_AchievementAchieved(output);
        };
        AchievementAchieved.prototype.deserialize = function(input) {
            this.deserializeAs_AchievementAchieved(input);
        };
        AchievementAchieved.prototype.serializeAs_AchievementAchieved = function(output) {
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarShort(this.id);
            if (this.achievedBy < 0 || this.achievedBy > 9007199254740990) {
                throw new Error("Forbidden value (" + this.achievedBy + ") on element achievedBy.");
            }
            output.writeVarLong(this.achievedBy);
        };
        AchievementAchieved.prototype.deserializeAs_AchievementAchieved = function(input) {
            this.id = input.readVarUhShort();
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element of AchievementAchieved.id.");
            }
            this.achievedBy = input.readVarUhLong();
            if (this.achievedBy < 0 || this.achievedBy > 9007199254740990) {
                throw new Error("Forbidden value (" + this.achievedBy + ") on element of AchievementAchieved.achievedBy.");
            }
        };
        AchievementAchieved.ID = 9231;
        return AchievementAchieved;
    })();
    Protocol.AchievementAchieved = AchievementAchieved;
    var AchievementAchievedRewardable = (function(_super) {
        __extends(AchievementAchievedRewardable, _super);

        function AchievementAchievedRewardable() {
            this.finishedlevel = 0;
            _super.call(this)
        }
        AchievementAchievedRewardable.prototype.getMessageId = function() {
            return AchievementAchievedRewardable.ID;
        };
        AchievementAchievedRewardable.prototype.reset = function() {
            this.finishedlevel = 0;
        };
        AchievementAchievedRewardable.prototype.serialize = function(output) {
            this.serializeAs_AchievementAchievedRewardable(output);
        };
        AchievementAchievedRewardable.prototype.deserialize = function(input) {
            this.deserializeAs_AchievementAchievedRewardable(input);
        };
        AchievementAchievedRewardable.prototype.serializeAs_AchievementAchievedRewardable = function(output) {
            _super.prototype.serializeAs_AchievementAchieved(this, output);
            if (this.finishedlevel < 0 || this.finishedlevel > 200) {
                throw new Error("Forbidden value (" + this.finishedlevel + ") on element finishedlevel.");
            }
            output.writeVarShort(this.finishedlevel);
        };
        AchievementAchievedRewardable.prototype.deserializeAs_AchievementAchievedRewardable = function(input) {
            _super.prototype.deserializeAchievementAchieved(this, input);
            this.finishedlevel = input.readVarUhShort();
            if (this.finishedlevel < 0 || this.finishedlevel > 200) {
                throw new Error("Forbidden value (" + this.finishedlevel + ") on element of AchievementAchievedRewardable.finishedlevel.");
            }
        };
        AchievementAchievedRewardable.ID = 2164;
        return AchievementAchievedRewardable;
    })(AchievementAchieved);
    Protocol.AchievementAchievedRewardable = AchievementAchievedRewardable;
    var AchievementObjective = (function() {

        function AchievementObjective() {
            this.id = 0;
            this.maxValue = 0;

        }
        AchievementObjective.prototype.getMessageId = function() {
            return AchievementObjective.ID;
        };
        AchievementObjective.prototype.reset = function() {
            this.id = 0;
            this.maxValue = 0;
        };
        AchievementObjective.prototype.serialize = function(output) {
            this.serializeAs_AchievementObjective(output);
        };
        AchievementObjective.prototype.deserialize = function(input) {
            this.deserializeAs_AchievementObjective(input);
        };
        AchievementObjective.prototype.serializeAs_AchievementObjective = function(output) {
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarInt(this.id);
            if (this.maxValue < 0) {
                throw new Error("Forbidden value (" + this.maxValue + ") on element maxValue.");
            }
            output.writeVarShort(this.maxValue);
        };
        AchievementObjective.prototype.deserializeAs_AchievementObjective = function(input) {
            this.id = input.readVarUhInt();
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element of AchievementObjective.id.");
            }
            this.maxValue = input.readVarUhShort();
            if (this.maxValue < 0) {
                throw new Error("Forbidden value (" + this.maxValue + ") on element of AchievementObjective.maxValue.");
            }
        };
        AchievementObjective.ID = 8118;
        return AchievementObjective;
    })();
    Protocol.AchievementObjective = AchievementObjective;
    var AchievementStartedObjective = (function(_super) {
        __extends(AchievementStartedObjective, _super);

        function AchievementStartedObjective() {
            this.value = 0;
            _super.call(this)
        }
        AchievementStartedObjective.prototype.getMessageId = function() {
            return AchievementStartedObjective.ID;
        };
        AchievementStartedObjective.prototype.reset = function() {
            this.value = 0;
        };
        AchievementStartedObjective.prototype.serialize = function(output) {
            this.serializeAs_AchievementStartedObjective(output);
        };
        AchievementStartedObjective.prototype.deserialize = function(input) {
            this.deserializeAs_AchievementStartedObjective(input);
        };
        AchievementStartedObjective.prototype.serializeAs_AchievementStartedObjective = function(output) {
            _super.prototype.serializeAs_AchievementObjective(this, output);
            if (this.value < 0) {
                throw new Error("Forbidden value (" + this.value + ") on element value.");
            }
            output.writeVarShort(this.value);
        };
        AchievementStartedObjective.prototype.deserializeAs_AchievementStartedObjective = function(input) {
            _super.prototype.deserializeAchievementObjective(this, input);
            this.value = input.readVarUhShort();
            if (this.value < 0) {
                throw new Error("Forbidden value (" + this.value + ") on element of AchievementStartedObjective.value.");
            }
        };
        AchievementStartedObjective.ID = 3401;
        return AchievementStartedObjective;
    })(AchievementObjective);
    Protocol.AchievementStartedObjective = AchievementStartedObjective;
    var FightDispellableEffectExtendedInformations = (function() {

        function FightDispellableEffectExtendedInformations() {
            this.actionId = 0;
            this.sourceId = 0;
            this.effect = new AbstractFightDispellableEffect();

        }
        FightDispellableEffectExtendedInformations.prototype.getMessageId = function() {
            return FightDispellableEffectExtendedInformations.ID;
        };
        FightDispellableEffectExtendedInformations.prototype.reset = function() {
            this.actionId = 0;
            this.sourceId = 0;
            this.effect = new AbstractFightDispellableEffect();
        };
        FightDispellableEffectExtendedInformations.prototype.serialize = function(output) {
            this.serializeAs_FightDispellableEffectExtendedInformations(output);
        };
        FightDispellableEffectExtendedInformations.prototype.deserialize = function(input) {
            this.deserializeAs_FightDispellableEffectExtendedInformations(input);
        };
        FightDispellableEffectExtendedInformations.prototype.serializeAs_FightDispellableEffectExtendedInformations = function(output) {
            if (this.actionId < 0) {
                throw new Error("Forbidden value (" + this.actionId + ") on element actionId.");
            }
            output.writeVarShort(this.actionId);
            if (this.sourceId < -9007199254740990 || this.sourceId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.sourceId + ") on element sourceId.");
            }
            output.writeDouble(this.sourceId);
            output.writeShort(this.effect.getTypeId());
            this.effect.serialize(output);
        };
        FightDispellableEffectExtendedInformations.prototype.deserializeAs_FightDispellableEffectExtendedInformations = function(input) {
            this.actionId = input.readVarUhShort();
            if (this.actionId < 0) {
                throw new Error("Forbidden value (" + this.actionId + ") on element of FightDispellableEffectExtendedInformations.actionId.");
            }
            this.sourceId = input.readDouble();
            if (this.sourceId < -9007199254740990 || this.sourceId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.sourceId + ") on element of FightDispellableEffectExtendedInformations.sourceId.");
            }
            var _id3 = input.readUnsignedShort();
            this.effect = ProtocolTypeManager.getInstance(AbstractFightDispellableEffect, _id3);
            this.effect.deserialize(input);
        };
        FightDispellableEffectExtendedInformations.ID = 2740;
        return FightDispellableEffectExtendedInformations;
    })();
    Protocol.FightDispellableEffectExtendedInformations = FightDispellableEffectExtendedInformations;
    var AbstractFightDispellableEffect = (function() {

        function AbstractFightDispellableEffect() {
            this.uid = 0;
            this.targetId = 0;
            this.turnDuration = 0;
            this.dispelable = 1;
            this.spellId = 0;
            this.effectId = 0;
            this.parentBoostUid = 0;

        }
        AbstractFightDispellableEffect.prototype.getMessageId = function() {
            return AbstractFightDispellableEffect.ID;
        };
        AbstractFightDispellableEffect.prototype.reset = function() {
            this.uid = 0;
            this.targetId = 0;
            this.turnDuration = 0;
            this.dispelable = 1;
            this.spellId = 0;
            this.effectId = 0;
            this.parentBoostUid = 0;
        };
        AbstractFightDispellableEffect.prototype.serialize = function(output) {
            this.serializeAs_AbstractFightDispellableEffect(output);
        };
        AbstractFightDispellableEffect.prototype.deserialize = function(input) {
            this.deserializeAs_AbstractFightDispellableEffect(input);
        };
        AbstractFightDispellableEffect.prototype.serializeAs_AbstractFightDispellableEffect = function(output) {
            if (this.uid < 0) {
                throw new Error("Forbidden value (" + this.uid + ") on element uid.");
            }
            output.writeVarInt(this.uid);
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            output.writeShort(this.turnDuration);
            output.writeByte(this.dispelable);
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
            }
            output.writeVarShort(this.spellId);
            if (this.effectId < 0) {
                throw new Error("Forbidden value (" + this.effectId + ") on element effectId.");
            }
            output.writeVarInt(this.effectId);
            if (this.parentBoostUid < 0) {
                throw new Error("Forbidden value (" + this.parentBoostUid + ") on element parentBoostUid.");
            }
            output.writeVarInt(this.parentBoostUid);
        };
        AbstractFightDispellableEffect.prototype.deserializeAs_AbstractFightDispellableEffect = function(input) {
            this.uid = input.readVarUhInt();
            if (this.uid < 0) {
                throw new Error("Forbidden value (" + this.uid + ") on element of AbstractFightDispellableEffect.uid.");
            }
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of AbstractFightDispellableEffect.targetId.");
            }
            this.turnDuration = input.readShort();
            this.dispelable = input.readByte();
            if (this.dispelable < 0) {
                throw new Error("Forbidden value (" + this.dispelable + ") on element of AbstractFightDispellableEffect.dispelable.");
            }
            this.spellId = input.readVarUhShort();
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element of AbstractFightDispellableEffect.spellId.");
            }
            this.effectId = input.readVarUhInt();
            if (this.effectId < 0) {
                throw new Error("Forbidden value (" + this.effectId + ") on element of AbstractFightDispellableEffect.effectId.");
            }
            this.parentBoostUid = input.readVarUhInt();
            if (this.parentBoostUid < 0) {
                throw new Error("Forbidden value (" + this.parentBoostUid + ") on element of AbstractFightDispellableEffect.parentBoostUid.");
            }
        };
        AbstractFightDispellableEffect.ID = 9836;
        return AbstractFightDispellableEffect;
    })();
    Protocol.AbstractFightDispellableEffect = AbstractFightDispellableEffect;
    var FightTemporaryBoostEffect = (function(_super) {
        __extends(FightTemporaryBoostEffect, _super);

        function FightTemporaryBoostEffect() {
            this.delta = 0;
            _super.call(this)
        }
        FightTemporaryBoostEffect.prototype.getMessageId = function() {
            return FightTemporaryBoostEffect.ID;
        };
        FightTemporaryBoostEffect.prototype.reset = function() {
            this.delta = 0;
        };
        FightTemporaryBoostEffect.prototype.serialize = function(output) {
            this.serializeAs_FightTemporaryBoostEffect(output);
        };
        FightTemporaryBoostEffect.prototype.deserialize = function(input) {
            this.deserializeAs_FightTemporaryBoostEffect(input);
        };
        FightTemporaryBoostEffect.prototype.serializeAs_FightTemporaryBoostEffect = function(output) {
            _super.prototype.serializeAs_AbstractFightDispellableEffect(this, output);
            output.writeInt(this.delta);
        };
        FightTemporaryBoostEffect.prototype.deserializeAs_FightTemporaryBoostEffect = function(input) {
            _super.prototype.deserializeAbstractFightDispellableEffect(this, input);
            this.delta = input.readInt();
        };
        FightTemporaryBoostEffect.ID = 2668;
        return FightTemporaryBoostEffect;
    })(AbstractFightDispellableEffect);
    Protocol.FightTemporaryBoostEffect = FightTemporaryBoostEffect;
    var FightTemporaryBoostStateEffect = (function(_super) {
        __extends(FightTemporaryBoostStateEffect, _super);

        function FightTemporaryBoostStateEffect() {
            this.stateId = 0;
            _super.call(this)
        }
        FightTemporaryBoostStateEffect.prototype.getMessageId = function() {
            return FightTemporaryBoostStateEffect.ID;
        };
        FightTemporaryBoostStateEffect.prototype.reset = function() {
            this.stateId = 0;
        };
        FightTemporaryBoostStateEffect.prototype.serialize = function(output) {
            this.serializeAs_FightTemporaryBoostStateEffect(output);
        };
        FightTemporaryBoostStateEffect.prototype.deserialize = function(input) {
            this.deserializeAs_FightTemporaryBoostStateEffect(input);
        };
        FightTemporaryBoostStateEffect.prototype.serializeAs_FightTemporaryBoostStateEffect = function(output) {
            _super.prototype.serializeAs_FightTemporaryBoostEffect(this, output);
            output.writeShort(this.stateId);
        };
        FightTemporaryBoostStateEffect.prototype.deserializeAs_FightTemporaryBoostStateEffect = function(input) {
            _super.prototype.deserializeFightTemporaryBoostEffect(this, input);
            this.stateId = input.readShort();
        };
        FightTemporaryBoostStateEffect.ID = 7115;
        return FightTemporaryBoostStateEffect;
    })(FightTemporaryBoostEffect);
    Protocol.FightTemporaryBoostStateEffect = FightTemporaryBoostStateEffect;
    var FightTemporaryBoostWeaponDamagesEffect = (function(_super) {
        __extends(FightTemporaryBoostWeaponDamagesEffect, _super);

        function FightTemporaryBoostWeaponDamagesEffect() {
            this.weaponTypeId = 0;
            _super.call(this)
        }
        FightTemporaryBoostWeaponDamagesEffect.prototype.getMessageId = function() {
            return FightTemporaryBoostWeaponDamagesEffect.ID;
        };
        FightTemporaryBoostWeaponDamagesEffect.prototype.reset = function() {
            this.weaponTypeId = 0;
        };
        FightTemporaryBoostWeaponDamagesEffect.prototype.serialize = function(output) {
            this.serializeAs_FightTemporaryBoostWeaponDamagesEffect(output);
        };
        FightTemporaryBoostWeaponDamagesEffect.prototype.deserialize = function(input) {
            this.deserializeAs_FightTemporaryBoostWeaponDamagesEffect(input);
        };
        FightTemporaryBoostWeaponDamagesEffect.prototype.serializeAs_FightTemporaryBoostWeaponDamagesEffect = function(output) {
            _super.prototype.serializeAs_FightTemporaryBoostEffect(this, output);
            output.writeShort(this.weaponTypeId);
        };
        FightTemporaryBoostWeaponDamagesEffect.prototype.deserializeAs_FightTemporaryBoostWeaponDamagesEffect = function(input) {
            _super.prototype.deserializeFightTemporaryBoostEffect(this, input);
            this.weaponTypeId = input.readShort();
        };
        FightTemporaryBoostWeaponDamagesEffect.ID = 4451;
        return FightTemporaryBoostWeaponDamagesEffect;
    })(FightTemporaryBoostEffect);
    Protocol.FightTemporaryBoostWeaponDamagesEffect = FightTemporaryBoostWeaponDamagesEffect;
    var FightTemporarySpellBoostEffect = (function(_super) {
        __extends(FightTemporarySpellBoostEffect, _super);

        function FightTemporarySpellBoostEffect() {
            this.boostedSpellId = 0;
            _super.call(this)
        }
        FightTemporarySpellBoostEffect.prototype.getMessageId = function() {
            return FightTemporarySpellBoostEffect.ID;
        };
        FightTemporarySpellBoostEffect.prototype.reset = function() {
            this.boostedSpellId = 0;
        };
        FightTemporarySpellBoostEffect.prototype.serialize = function(output) {
            this.serializeAs_FightTemporarySpellBoostEffect(output);
        };
        FightTemporarySpellBoostEffect.prototype.deserialize = function(input) {
            this.deserializeAs_FightTemporarySpellBoostEffect(input);
        };
        FightTemporarySpellBoostEffect.prototype.serializeAs_FightTemporarySpellBoostEffect = function(output) {
            _super.prototype.serializeAs_FightTemporaryBoostEffect(this, output);
            if (this.boostedSpellId < 0) {
                throw new Error("Forbidden value (" + this.boostedSpellId + ") on element boostedSpellId.");
            }
            output.writeVarShort(this.boostedSpellId);
        };
        FightTemporarySpellBoostEffect.prototype.deserializeAs_FightTemporarySpellBoostEffect = function(input) {
            _super.prototype.deserializeFightTemporaryBoostEffect(this, input);
            this.boostedSpellId = input.readVarUhShort();
            if (this.boostedSpellId < 0) {
                throw new Error("Forbidden value (" + this.boostedSpellId + ") on element of FightTemporarySpellBoostEffect.boostedSpellId.");
            }
        };
        FightTemporarySpellBoostEffect.ID = 5674;
        return FightTemporarySpellBoostEffect;
    })(FightTemporaryBoostEffect);
    Protocol.FightTemporarySpellBoostEffect = FightTemporarySpellBoostEffect;
    var FightTemporarySpellImmunityEffect = (function(_super) {
        __extends(FightTemporarySpellImmunityEffect, _super);

        function FightTemporarySpellImmunityEffect() {
            this.immuneSpellId = 0;
            _super.call(this)
        }
        FightTemporarySpellImmunityEffect.prototype.getMessageId = function() {
            return FightTemporarySpellImmunityEffect.ID;
        };
        FightTemporarySpellImmunityEffect.prototype.reset = function() {
            this.immuneSpellId = 0;
        };
        FightTemporarySpellImmunityEffect.prototype.serialize = function(output) {
            this.serializeAs_FightTemporarySpellImmunityEffect(output);
        };
        FightTemporarySpellImmunityEffect.prototype.deserialize = function(input) {
            this.deserializeAs_FightTemporarySpellImmunityEffect(input);
        };
        FightTemporarySpellImmunityEffect.prototype.serializeAs_FightTemporarySpellImmunityEffect = function(output) {
            _super.prototype.serializeAs_AbstractFightDispellableEffect(this, output);
            output.writeInt(this.immuneSpellId);
        };
        FightTemporarySpellImmunityEffect.prototype.deserializeAs_FightTemporarySpellImmunityEffect = function(input) {
            _super.prototype.deserializeAbstractFightDispellableEffect(this, input);
            this.immuneSpellId = input.readInt();
        };
        FightTemporarySpellImmunityEffect.ID = 8464;
        return FightTemporarySpellImmunityEffect;
    })(AbstractFightDispellableEffect);
    Protocol.FightTemporarySpellImmunityEffect = FightTemporarySpellImmunityEffect;
    var FightTriggeredEffect = (function(_super) {
        __extends(FightTriggeredEffect, _super);

        function FightTriggeredEffect() {
            this.param1 = 0;
            this.param2 = 0;
            this.param3 = 0;
            this.delay = 0;
            _super.call(this)
        }
        FightTriggeredEffect.prototype.getMessageId = function() {
            return FightTriggeredEffect.ID;
        };
        FightTriggeredEffect.prototype.reset = function() {
            this.param1 = 0;
            this.param2 = 0;
            this.param3 = 0;
            this.delay = 0;
        };
        FightTriggeredEffect.prototype.serialize = function(output) {
            this.serializeAs_FightTriggeredEffect(output);
        };
        FightTriggeredEffect.prototype.deserialize = function(input) {
            this.deserializeAs_FightTriggeredEffect(input);
        };
        FightTriggeredEffect.prototype.serializeAs_FightTriggeredEffect = function(output) {
            _super.prototype.serializeAs_AbstractFightDispellableEffect(this, output);
            output.writeInt(this.param1);
            output.writeInt(this.param2);
            output.writeInt(this.param3);
            output.writeShort(this.delay);
        };
        FightTriggeredEffect.prototype.deserializeAs_FightTriggeredEffect = function(input) {
            _super.prototype.deserializeAbstractFightDispellableEffect(this, input);
            this.param1 = input.readInt();
            this.param2 = input.readInt();
            this.param3 = input.readInt();
            this.delay = input.readShort();
        };
        FightTriggeredEffect.ID = 3040;
        return FightTriggeredEffect;
    })(AbstractFightDispellableEffect);
    Protocol.FightTriggeredEffect = FightTriggeredEffect;
    var GameActionMark = (function() {

        function GameActionMark() {
            this.markAuthorId = 0;
            this.markTeamId = 2;
            this.markSpellId = 0;
            this.markSpellLevel = 0;
            this.markId = 0;
            this.markType = 0;
            this.markimpactCell = 0;
            this.cells = [];
            this.active = false;

        }
        GameActionMark.prototype.getMessageId = function() {
            return GameActionMark.ID;
        };
        GameActionMark.prototype.reset = function() {
            this.markAuthorId = 0;
            this.markTeamId = 2;
            this.markSpellId = 0;
            this.markSpellLevel = 0;
            this.markId = 0;
            this.markType = 0;
            this.markimpactCell = 0;
            this.cells = [];
            this.active = false;
        };
        GameActionMark.prototype.serialize = function(output) {
            this.serializeAs_GameActionMark(output);
        };
        GameActionMark.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionMark(input);
        };
        GameActionMark.prototype.serializeAs_GameActionMark = function(output) {
            if (this.markAuthorId < -9007199254740990 || this.markAuthorId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.markAuthorId + ") on element markAuthorId.");
            }
            output.writeDouble(this.markAuthorId);
            output.writeByte(this.markTeamId);
            if (this.markSpellId < 0) {
                throw new Error("Forbidden value (" + this.markSpellId + ") on element markSpellId.");
            }
            output.writeInt(this.markSpellId);
            if (this.markSpellLevel < 1 || this.markSpellLevel > 32767) {
                throw new Error("Forbidden value (" + this.markSpellLevel + ") on element markSpellLevel.");
            }
            output.writeShort(this.markSpellLevel);
            output.writeShort(this.markId);
            output.writeByte(this.markType);
            if (this.markimpactCell < -1 || this.markimpactCell > 559) {
                throw new Error("Forbidden value (" + this.markimpactCell + ") on element markimpactCell.");
            }
            output.writeShort(this.markimpactCell);
            output.writeShort(this.cells.length);
            for (var _i8 = 0; _i8 < this.cells.length; _i8++) {
                (this.cells[_i8]).serializeAs_GameActionMarkedCell(output);
            }
            output.writeBoolean(this.active);
        };
        GameActionMark.prototype.deserializeAs_GameActionMark = function(input) {
            var _item8 = null;
            this.markAuthorId = input.readDouble();
            if (this.markAuthorId < -9007199254740990 || this.markAuthorId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.markAuthorId + ") on element of GameActionMark.markAuthorId.");
            }
            this.markTeamId = input.readByte();
            if (this.markTeamId < 0) {
                throw new Error("Forbidden value (" + this.markTeamId + ") on element of GameActionMark.markTeamId.");
            }
            this.markSpellId = input.readInt();
            if (this.markSpellId < 0) {
                throw new Error("Forbidden value (" + this.markSpellId + ") on element of GameActionMark.markSpellId.");
            }
            this.markSpellLevel = input.readShort();
            if (this.markSpellLevel < 1 || this.markSpellLevel > 32767) {
                throw new Error("Forbidden value (" + this.markSpellLevel + ") on element of GameActionMark.markSpellLevel.");
            }
            this.markId = input.readShort();
            this.markType = input.readByte();
            this.markimpactCell = input.readShort();
            if (this.markimpactCell < -1 || this.markimpactCell > 559) {
                throw new Error("Forbidden value (" + this.markimpactCell + ") on element of GameActionMark.markimpactCell.");
            }
            var _cellsLen = input.readUnsignedShort();
            for (var _i8 = 0; _i8 < _cellsLen; _i8++) {
                _item8 = new GameActionMarkedCell();
                _item8.deserialize(input);
                this.cells.push(_item8);
            }
            this.active = input.readBoolean();
        };
        GameActionMark.ID = 8797;
        return GameActionMark;
    })();
    Protocol.GameActionMark = GameActionMark;
    var GameActionMarkedCell = (function() {

        function GameActionMarkedCell() {
            this.cellId = 0;
            this.zoneSize = 0;
            this.cellColor = 0;
            this.cellsType = 0;

        }
        GameActionMarkedCell.prototype.getMessageId = function() {
            return GameActionMarkedCell.ID;
        };
        GameActionMarkedCell.prototype.reset = function() {
            this.cellId = 0;
            this.zoneSize = 0;
            this.cellColor = 0;
            this.cellsType = 0;
        };
        GameActionMarkedCell.prototype.serialize = function(output) {
            this.serializeAs_GameActionMarkedCell(output);
        };
        GameActionMarkedCell.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionMarkedCell(input);
        };
        GameActionMarkedCell.prototype.serializeAs_GameActionMarkedCell = function(output) {
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
            }
            output.writeVarShort(this.cellId);
            output.writeByte(this.zoneSize);
            output.writeInt(this.cellColor);
            output.writeByte(this.cellsType);
        };
        GameActionMarkedCell.prototype.deserializeAs_GameActionMarkedCell = function(input) {
            this.cellId = input.readVarUhShort();
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element of GameActionMarkedCell.cellId.");
            }
            this.zoneSize = input.readByte();
            this.cellColor = input.readInt();
            this.cellsType = input.readByte();
        };
        GameActionMarkedCell.ID = 7802;
        return GameActionMarkedCell;
    })();
    Protocol.GameActionMarkedCell = GameActionMarkedCell;
    var ServerSessionConstant = (function() {

        function ServerSessionConstant() {
            this.id = 0;

        }
        ServerSessionConstant.prototype.getMessageId = function() {
            return ServerSessionConstant.ID;
        };
        ServerSessionConstant.prototype.reset = function() {
            this.id = 0;
        };
        ServerSessionConstant.prototype.serialize = function(output) {
            this.serializeAs_ServerSessionConstant(output);
        };
        ServerSessionConstant.prototype.deserialize = function(input) {
            this.deserializeAs_ServerSessionConstant(input);
        };
        ServerSessionConstant.prototype.serializeAs_ServerSessionConstant = function(output) {
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarShort(this.id);
        };
        ServerSessionConstant.prototype.deserializeAs_ServerSessionConstant = function(input) {
            this.id = input.readVarUhShort();
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element of ServerSessionConstant.id.");
            }
        };
        ServerSessionConstant.ID = 9452;
        return ServerSessionConstant;
    })();
    Protocol.ServerSessionConstant = ServerSessionConstant;
    var ServerSessionConstantInteger = (function(_super) {
        __extends(ServerSessionConstantInteger, _super);

        function ServerSessionConstantInteger() {
            this.value = 0;
            _super.call(this)
        }
        ServerSessionConstantInteger.prototype.getMessageId = function() {
            return ServerSessionConstantInteger.ID;
        };
        ServerSessionConstantInteger.prototype.reset = function() {
            this.value = 0;
        };
        ServerSessionConstantInteger.prototype.serialize = function(output) {
            this.serializeAs_ServerSessionConstantInteger(output);
        };
        ServerSessionConstantInteger.prototype.deserialize = function(input) {
            this.deserializeAs_ServerSessionConstantInteger(input);
        };
        ServerSessionConstantInteger.prototype.serializeAs_ServerSessionConstantInteger = function(output) {
            _super.prototype.serializeAs_ServerSessionConstant(this, output);
            output.writeInt(this.value);
        };
        ServerSessionConstantInteger.prototype.deserializeAs_ServerSessionConstantInteger = function(input) {
            _super.prototype.deserializeServerSessionConstant(this, input);
            this.value = input.readInt();
        };
        ServerSessionConstantInteger.ID = 292;
        return ServerSessionConstantInteger;
    })(ServerSessionConstant);
    Protocol.ServerSessionConstantInteger = ServerSessionConstantInteger;
    var ServerSessionConstantLong = (function(_super) {
        __extends(ServerSessionConstantLong, _super);

        function ServerSessionConstantLong() {
            this.value = 0;
            _super.call(this)
        }
        ServerSessionConstantLong.prototype.getMessageId = function() {
            return ServerSessionConstantLong.ID;
        };
        ServerSessionConstantLong.prototype.reset = function() {
            this.value = 0;
        };
        ServerSessionConstantLong.prototype.serialize = function(output) {
            this.serializeAs_ServerSessionConstantLong(output);
        };
        ServerSessionConstantLong.prototype.deserialize = function(input) {
            this.deserializeAs_ServerSessionConstantLong(input);
        };
        ServerSessionConstantLong.prototype.serializeAs_ServerSessionConstantLong = function(output) {
            _super.prototype.serializeAs_ServerSessionConstant(this, output);
            if (this.value < -9007199254740990 || this.value > 9007199254740990) {
                throw new Error("Forbidden value (" + this.value + ") on element value.");
            }
            output.writeDouble(this.value);
        };
        ServerSessionConstantLong.prototype.deserializeAs_ServerSessionConstantLong = function(input) {
            _super.prototype.deserializeServerSessionConstant(this, input);
            this.value = input.readDouble();
            if (this.value < -9007199254740990 || this.value > 9007199254740990) {
                throw new Error("Forbidden value (" + this.value + ") on element of ServerSessionConstantLong.value.");
            }
        };
        ServerSessionConstantLong.ID = 2488;
        return ServerSessionConstantLong;
    })(ServerSessionConstant);
    Protocol.ServerSessionConstantLong = ServerSessionConstantLong;
    var ServerSessionConstantString = (function(_super) {
        __extends(ServerSessionConstantString, _super);

        function ServerSessionConstantString() {
            this.value = "";
            _super.call(this)
        }
        ServerSessionConstantString.prototype.getMessageId = function() {
            return ServerSessionConstantString.ID;
        };
        ServerSessionConstantString.prototype.reset = function() {
            this.value = "";
        };
        ServerSessionConstantString.prototype.serialize = function(output) {
            this.serializeAs_ServerSessionConstantString(output);
        };
        ServerSessionConstantString.prototype.deserialize = function(input) {
            this.deserializeAs_ServerSessionConstantString(input);
        };
        ServerSessionConstantString.prototype.serializeAs_ServerSessionConstantString = function(output) {
            _super.prototype.serializeAs_ServerSessionConstant(this, output);
            output.writeUTF(this.value);
        };
        ServerSessionConstantString.prototype.deserializeAs_ServerSessionConstantString = function(input) {
            _super.prototype.deserializeServerSessionConstant(this, input);
            this.value = input.readUTF();
        };
        ServerSessionConstantString.ID = 133;
        return ServerSessionConstantString;
    })(ServerSessionConstant);
    Protocol.ServerSessionConstantString = ServerSessionConstantString;
    var AbstractCharacterInformation = (function() {

        function AbstractCharacterInformation() {
            this.id = 0;

        }
        AbstractCharacterInformation.prototype.getMessageId = function() {
            return AbstractCharacterInformation.ID;
        };
        AbstractCharacterInformation.prototype.reset = function() {
            this.id = 0;
        };
        AbstractCharacterInformation.prototype.serialize = function(output) {
            this.serializeAs_AbstractCharacterInformation(output);
        };
        AbstractCharacterInformation.prototype.deserialize = function(input) {
            this.deserializeAs_AbstractCharacterInformation(input);
        };
        AbstractCharacterInformation.prototype.serializeAs_AbstractCharacterInformation = function(output) {
            if (this.id < 0 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarLong(this.id);
        };
        AbstractCharacterInformation.prototype.deserializeAs_AbstractCharacterInformation = function(input) {
            this.id = input.readVarUhLong();
            if (this.id < 0 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element of AbstractCharacterInformation.id.");
            }
        };
        AbstractCharacterInformation.ID = 120;
        return AbstractCharacterInformation;
    })();
    Protocol.AbstractCharacterInformation = AbstractCharacterInformation;
    var ActorAlignmentInformations = (function() {

        function ActorAlignmentInformations() {
            this.alignmentSide = 0;
            this.alignmentValue = 0;
            this.alignmentGrade = 0;
            this.characterPower = 0;

        }
        ActorAlignmentInformations.prototype.getMessageId = function() {
            return ActorAlignmentInformations.ID;
        };
        ActorAlignmentInformations.prototype.reset = function() {
            this.alignmentSide = 0;
            this.alignmentValue = 0;
            this.alignmentGrade = 0;
            this.characterPower = 0;
        };
        ActorAlignmentInformations.prototype.serialize = function(output) {
            this.serializeAs_ActorAlignmentInformations(output);
        };
        ActorAlignmentInformations.prototype.deserialize = function(input) {
            this.deserializeAs_ActorAlignmentInformations(input);
        };
        ActorAlignmentInformations.prototype.serializeAs_ActorAlignmentInformations = function(output) {
            output.writeByte(this.alignmentSide);
            if (this.alignmentValue < 0) {
                throw new Error("Forbidden value (" + this.alignmentValue + ") on element alignmentValue.");
            }
            output.writeByte(this.alignmentValue);
            if (this.alignmentGrade < 0) {
                throw new Error("Forbidden value (" + this.alignmentGrade + ") on element alignmentGrade.");
            }
            output.writeByte(this.alignmentGrade);
            if (this.characterPower < -9007199254740990 || this.characterPower > 9007199254740990) {
                throw new Error("Forbidden value (" + this.characterPower + ") on element characterPower.");
            }
            output.writeDouble(this.characterPower);
        };
        ActorAlignmentInformations.prototype.deserializeAs_ActorAlignmentInformations = function(input) {
            this.alignmentSide = input.readByte();
            this.alignmentValue = input.readByte();
            if (this.alignmentValue < 0) {
                throw new Error("Forbidden value (" + this.alignmentValue + ") on element of ActorAlignmentInformations.alignmentValue.");
            }
            this.alignmentGrade = input.readByte();
            if (this.alignmentGrade < 0) {
                throw new Error("Forbidden value (" + this.alignmentGrade + ") on element of ActorAlignmentInformations.alignmentGrade.");
            }
            this.characterPower = input.readDouble();
            if (this.characterPower < -9007199254740990 || this.characterPower > 9007199254740990) {
                throw new Error("Forbidden value (" + this.characterPower + ") on element of ActorAlignmentInformations.characterPower.");
            }
        };
        ActorAlignmentInformations.ID = 1230;
        return ActorAlignmentInformations;
    })();
    Protocol.ActorAlignmentInformations = ActorAlignmentInformations;
    var ActorExtendedAlignmentInformations = (function(_super) {
        __extends(ActorExtendedAlignmentInformations, _super);

        function ActorExtendedAlignmentInformations() {
            this.honor = 0;
            this.honorGradeFloor = 0;
            this.honorNextGradeFloor = 0;
            this.aggressable = 0;
            _super.call(this)
        }
        ActorExtendedAlignmentInformations.prototype.getMessageId = function() {
            return ActorExtendedAlignmentInformations.ID;
        };
        ActorExtendedAlignmentInformations.prototype.reset = function() {
            this.honor = 0;
            this.honorGradeFloor = 0;
            this.honorNextGradeFloor = 0;
            this.aggressable = 0;
        };
        ActorExtendedAlignmentInformations.prototype.serialize = function(output) {
            this.serializeAs_ActorExtendedAlignmentInformations(output);
        };
        ActorExtendedAlignmentInformations.prototype.deserialize = function(input) {
            this.deserializeAs_ActorExtendedAlignmentInformations(input);
        };
        ActorExtendedAlignmentInformations.prototype.serializeAs_ActorExtendedAlignmentInformations = function(output) {
            _super.prototype.serializeAs_ActorAlignmentInformations(this, output);
            if (this.honor < 0 || this.honor > 20000) {
                throw new Error("Forbidden value (" + this.honor + ") on element honor.");
            }
            output.writeVarShort(this.honor);
            if (this.honorGradeFloor < 0 || this.honorGradeFloor > 20000) {
                throw new Error("Forbidden value (" + this.honorGradeFloor + ") on element honorGradeFloor.");
            }
            output.writeVarShort(this.honorGradeFloor);
            if (this.honorNextGradeFloor < 0 || this.honorNextGradeFloor > 20000) {
                throw new Error("Forbidden value (" + this.honorNextGradeFloor + ") on element honorNextGradeFloor.");
            }
            output.writeVarShort(this.honorNextGradeFloor);
            output.writeByte(this.aggressable);
        };
        ActorExtendedAlignmentInformations.prototype.deserializeAs_ActorExtendedAlignmentInformations = function(input) {
            _super.prototype.deserializeActorAlignmentInformations(this, input);
            this.honor = input.readVarUhShort();
            if (this.honor < 0 || this.honor > 20000) {
                throw new Error("Forbidden value (" + this.honor + ") on element of ActorExtendedAlignmentInformations.honor.");
            }
            this.honorGradeFloor = input.readVarUhShort();
            if (this.honorGradeFloor < 0 || this.honorGradeFloor > 20000) {
                throw new Error("Forbidden value (" + this.honorGradeFloor + ") on element of ActorExtendedAlignmentInformations.honorGradeFloor.");
            }
            this.honorNextGradeFloor = input.readVarUhShort();
            if (this.honorNextGradeFloor < 0 || this.honorNextGradeFloor > 20000) {
                throw new Error("Forbidden value (" + this.honorNextGradeFloor + ") on element of ActorExtendedAlignmentInformations.honorNextGradeFloor.");
            }
            this.aggressable = input.readByte();
            if (this.aggressable < 0) {
                throw new Error("Forbidden value (" + this.aggressable + ") on element of ActorExtendedAlignmentInformations.aggressable.");
            }
        };
        ActorExtendedAlignmentInformations.ID = 5506;
        return ActorExtendedAlignmentInformations;
    })(ActorAlignmentInformations);
    Protocol.ActorExtendedAlignmentInformations = ActorExtendedAlignmentInformations;
    var CharacterBasicMinimalInformations = (function(_super) {
        __extends(CharacterBasicMinimalInformations, _super);

        function CharacterBasicMinimalInformations() {
            this.name = "";
            _super.call(this)
        }
        CharacterBasicMinimalInformations.prototype.getMessageId = function() {
            return CharacterBasicMinimalInformations.ID;
        };
        CharacterBasicMinimalInformations.prototype.reset = function() {
            this.name = "";
        };
        CharacterBasicMinimalInformations.prototype.serialize = function(output) {
            this.serializeAs_CharacterBasicMinimalInformations(output);
        };
        CharacterBasicMinimalInformations.prototype.deserialize = function(input) {
            this.deserializeAs_CharacterBasicMinimalInformations(input);
        };
        CharacterBasicMinimalInformations.prototype.serializeAs_CharacterBasicMinimalInformations = function(output) {
            _super.prototype.serializeAs_AbstractCharacterInformation(this, output);
            output.writeUTF(this.name);
        };
        CharacterBasicMinimalInformations.prototype.deserializeAs_CharacterBasicMinimalInformations = function(input) {
            _super.prototype.deserializeAbstractCharacterInformation(this, input);
            this.name = input.readUTF();
        };
        CharacterBasicMinimalInformations.ID = 9273;
        return CharacterBasicMinimalInformations;
    })(AbstractCharacterInformation);
    Protocol.CharacterBasicMinimalInformations = CharacterBasicMinimalInformations;
    var CharacterBaseCharacteristic = (function() {

        function CharacterBaseCharacteristic() {
            this.base = 0;
            this.additionnal = 0;
            this.objectsAndMountBonus = 0;
            this.alignGiftBonus = 0;
            this.contextModif = 0;

        }
        CharacterBaseCharacteristic.prototype.getMessageId = function() {
            return CharacterBaseCharacteristic.ID;
        };
        CharacterBaseCharacteristic.prototype.reset = function() {
            this.base = 0;
            this.additionnal = 0;
            this.objectsAndMountBonus = 0;
            this.alignGiftBonus = 0;
            this.contextModif = 0;
        };
        CharacterBaseCharacteristic.prototype.serialize = function(output) {
            this.serializeAs_CharacterBaseCharacteristic(output);
        };
        CharacterBaseCharacteristic.prototype.deserialize = function(input) {
            this.deserializeAs_CharacterBaseCharacteristic(input);
        };
        CharacterBaseCharacteristic.prototype.serializeAs_CharacterBaseCharacteristic = function(output) {
            output.writeVarShort(this.base);
            output.writeVarShort(this.additionnal);
            output.writeVarShort(this.objectsAndMountBonus);
            output.writeVarShort(this.alignGiftBonus);
            output.writeVarShort(this.contextModif);
        };
        CharacterBaseCharacteristic.prototype.deserializeAs_CharacterBaseCharacteristic = function(input) {
            this.base = input.readVarShort();
            this.additionnal = input.readVarShort();
            this.objectsAndMountBonus = input.readVarShort();
            this.alignGiftBonus = input.readVarShort();
            this.contextModif = input.readVarShort();
        };
        CharacterBaseCharacteristic.ID = 1767;
        return CharacterBaseCharacteristic;
    })();
    Protocol.CharacterBaseCharacteristic = CharacterBaseCharacteristic;
    var CharacterCharacteristicsInformations = (function() {

        function CharacterCharacteristicsInformations() {
            this.experience = 0;
            this.experienceLevelFloor = 0;
            this.experienceNextLevelFloor = 0;
            this.experienceBonusLimit = 0;
            this.kamas = 0;
            this.statsPoints = 0;
            this.additionnalPoints = 0;
            this.spellsPoints = 0;
            this.alignmentInfos = new ActorExtendedAlignmentInformations();
            this.lifePoints = 0;
            this.maxLifePoints = 0;
            this.energyPoints = 0;
            this.maxEnergyPoints = 0;
            this.actionPointsCurrent = 0;
            this.movementPointsCurrent = 0;
            this.initiative = new CharacterBaseCharacteristic();
            this.prospecting = new CharacterBaseCharacteristic();
            this.actionPoints = new CharacterBaseCharacteristic();
            this.movementPoints = new CharacterBaseCharacteristic();
            this.strength = new CharacterBaseCharacteristic();
            this.vitality = new CharacterBaseCharacteristic();
            this.wisdom = new CharacterBaseCharacteristic();
            this.chance = new CharacterBaseCharacteristic();
            this.agility = new CharacterBaseCharacteristic();
            this.intelligence = new CharacterBaseCharacteristic();
            this.range = new CharacterBaseCharacteristic();
            this.summonableCreaturesBoost = new CharacterBaseCharacteristic();
            this.reflect = new CharacterBaseCharacteristic();
            this.criticalHit = new CharacterBaseCharacteristic();
            this.criticalHitWeapon = 0;
            this.criticalMiss = new CharacterBaseCharacteristic();
            this.healBonus = new CharacterBaseCharacteristic();
            this.allDamagesBonus = new CharacterBaseCharacteristic();
            this.weaponDamagesBonusPercent = new CharacterBaseCharacteristic();
            this.damagesBonusPercent = new CharacterBaseCharacteristic();
            this.trapBonus = new CharacterBaseCharacteristic();
            this.trapBonusPercent = new CharacterBaseCharacteristic();
            this.glyphBonusPercent = new CharacterBaseCharacteristic();
            this.runeBonusPercent = new CharacterBaseCharacteristic();
            this.permanentDamagePercent = new CharacterBaseCharacteristic();
            this.tackleBlock = new CharacterBaseCharacteristic();
            this.tackleEvade = new CharacterBaseCharacteristic();
            this.PAAttack = new CharacterBaseCharacteristic();
            this.PMAttack = new CharacterBaseCharacteristic();
            this.pushDamageBonus = new CharacterBaseCharacteristic();
            this.criticalDamageBonus = new CharacterBaseCharacteristic();
            this.neutralDamageBonus = new CharacterBaseCharacteristic();
            this.earthDamageBonus = new CharacterBaseCharacteristic();
            this.waterDamageBonus = new CharacterBaseCharacteristic();
            this.airDamageBonus = new CharacterBaseCharacteristic();
            this.fireDamageBonus = new CharacterBaseCharacteristic();
            this.dodgePALostProbability = new CharacterBaseCharacteristic();
            this.dodgePMLostProbability = new CharacterBaseCharacteristic();
            this.neutralElementResistPercent = new CharacterBaseCharacteristic();
            this.earthElementResistPercent = new CharacterBaseCharacteristic();
            this.waterElementResistPercent = new CharacterBaseCharacteristic();
            this.airElementResistPercent = new CharacterBaseCharacteristic();
            this.fireElementResistPercent = new CharacterBaseCharacteristic();
            this.neutralElementReduction = new CharacterBaseCharacteristic();
            this.earthElementReduction = new CharacterBaseCharacteristic();
            this.waterElementReduction = new CharacterBaseCharacteristic();
            this.airElementReduction = new CharacterBaseCharacteristic();
            this.fireElementReduction = new CharacterBaseCharacteristic();
            this.pushDamageReduction = new CharacterBaseCharacteristic();
            this.criticalDamageReduction = new CharacterBaseCharacteristic();
            this.pvpNeutralElementResistPercent = new CharacterBaseCharacteristic();
            this.pvpEarthElementResistPercent = new CharacterBaseCharacteristic();
            this.pvpWaterElementResistPercent = new CharacterBaseCharacteristic();
            this.pvpAirElementResistPercent = new CharacterBaseCharacteristic();
            this.pvpFireElementResistPercent = new CharacterBaseCharacteristic();
            this.pvpNeutralElementReduction = new CharacterBaseCharacteristic();
            this.pvpEarthElementReduction = new CharacterBaseCharacteristic();
            this.pvpWaterElementReduction = new CharacterBaseCharacteristic();
            this.pvpAirElementReduction = new CharacterBaseCharacteristic();
            this.pvpFireElementReduction = new CharacterBaseCharacteristic();
            this.meleeDamageDonePercent = new CharacterBaseCharacteristic();
            this.meleeDamageReceivedPercent = new CharacterBaseCharacteristic();
            this.rangedDamageDonePercent = new CharacterBaseCharacteristic();
            this.rangedDamageReceivedPercent = new CharacterBaseCharacteristic();
            this.weaponDamageDonePercent = new CharacterBaseCharacteristic();
            this.weaponDamageReceivedPercent = new CharacterBaseCharacteristic();
            this.spellDamageDonePercent = new CharacterBaseCharacteristic();
            this.spellDamageReceivedPercent = new CharacterBaseCharacteristic();
            this.spellModifications = [];
            this.probationTime = 0;

        }
        CharacterCharacteristicsInformations.prototype.getMessageId = function() {
            return CharacterCharacteristicsInformations.ID;
        };
        CharacterCharacteristicsInformations.prototype.reset = function() {
            this.experience = 0;
            this.experienceLevelFloor = 0;
            this.experienceNextLevelFloor = 0;
            this.experienceBonusLimit = 0;
            this.kamas = 0;
            this.statsPoints = 0;
            this.additionnalPoints = 0;
            this.spellsPoints = 0;
            this.alignmentInfos = new ActorExtendedAlignmentInformations();
            this.lifePoints = 0;
            this.maxLifePoints = 0;
            this.energyPoints = 0;
            this.maxEnergyPoints = 0;
            this.actionPointsCurrent = 0;
            this.movementPointsCurrent = 0;
            this.initiative = new CharacterBaseCharacteristic();
            this.prospecting = new CharacterBaseCharacteristic();
            this.actionPoints = new CharacterBaseCharacteristic();
            this.movementPoints = new CharacterBaseCharacteristic();
            this.strength = new CharacterBaseCharacteristic();
            this.vitality = new CharacterBaseCharacteristic();
            this.wisdom = new CharacterBaseCharacteristic();
            this.chance = new CharacterBaseCharacteristic();
            this.agility = new CharacterBaseCharacteristic();
            this.intelligence = new CharacterBaseCharacteristic();
            this.range = new CharacterBaseCharacteristic();
            this.summonableCreaturesBoost = new CharacterBaseCharacteristic();
            this.reflect = new CharacterBaseCharacteristic();
            this.criticalHit = new CharacterBaseCharacteristic();
            this.criticalHitWeapon = 0;
            this.criticalMiss = new CharacterBaseCharacteristic();
            this.healBonus = new CharacterBaseCharacteristic();
            this.allDamagesBonus = new CharacterBaseCharacteristic();
            this.weaponDamagesBonusPercent = new CharacterBaseCharacteristic();
            this.damagesBonusPercent = new CharacterBaseCharacteristic();
            this.trapBonus = new CharacterBaseCharacteristic();
            this.trapBonusPercent = new CharacterBaseCharacteristic();
            this.glyphBonusPercent = new CharacterBaseCharacteristic();
            this.runeBonusPercent = new CharacterBaseCharacteristic();
            this.permanentDamagePercent = new CharacterBaseCharacteristic();
            this.tackleBlock = new CharacterBaseCharacteristic();
            this.tackleEvade = new CharacterBaseCharacteristic();
            this.PAAttack = new CharacterBaseCharacteristic();
            this.PMAttack = new CharacterBaseCharacteristic();
            this.pushDamageBonus = new CharacterBaseCharacteristic();
            this.criticalDamageBonus = new CharacterBaseCharacteristic();
            this.neutralDamageBonus = new CharacterBaseCharacteristic();
            this.earthDamageBonus = new CharacterBaseCharacteristic();
            this.waterDamageBonus = new CharacterBaseCharacteristic();
            this.airDamageBonus = new CharacterBaseCharacteristic();
            this.fireDamageBonus = new CharacterBaseCharacteristic();
            this.dodgePALostProbability = new CharacterBaseCharacteristic();
            this.dodgePMLostProbability = new CharacterBaseCharacteristic();
            this.neutralElementResistPercent = new CharacterBaseCharacteristic();
            this.earthElementResistPercent = new CharacterBaseCharacteristic();
            this.waterElementResistPercent = new CharacterBaseCharacteristic();
            this.airElementResistPercent = new CharacterBaseCharacteristic();
            this.fireElementResistPercent = new CharacterBaseCharacteristic();
            this.neutralElementReduction = new CharacterBaseCharacteristic();
            this.earthElementReduction = new CharacterBaseCharacteristic();
            this.waterElementReduction = new CharacterBaseCharacteristic();
            this.airElementReduction = new CharacterBaseCharacteristic();
            this.fireElementReduction = new CharacterBaseCharacteristic();
            this.pushDamageReduction = new CharacterBaseCharacteristic();
            this.criticalDamageReduction = new CharacterBaseCharacteristic();
            this.pvpNeutralElementResistPercent = new CharacterBaseCharacteristic();
            this.pvpEarthElementResistPercent = new CharacterBaseCharacteristic();
            this.pvpWaterElementResistPercent = new CharacterBaseCharacteristic();
            this.pvpAirElementResistPercent = new CharacterBaseCharacteristic();
            this.pvpFireElementResistPercent = new CharacterBaseCharacteristic();
            this.pvpNeutralElementReduction = new CharacterBaseCharacteristic();
            this.pvpEarthElementReduction = new CharacterBaseCharacteristic();
            this.pvpWaterElementReduction = new CharacterBaseCharacteristic();
            this.pvpAirElementReduction = new CharacterBaseCharacteristic();
            this.pvpFireElementReduction = new CharacterBaseCharacteristic();
            this.meleeDamageDonePercent = new CharacterBaseCharacteristic();
            this.meleeDamageReceivedPercent = new CharacterBaseCharacteristic();
            this.rangedDamageDonePercent = new CharacterBaseCharacteristic();
            this.rangedDamageReceivedPercent = new CharacterBaseCharacteristic();
            this.weaponDamageDonePercent = new CharacterBaseCharacteristic();
            this.weaponDamageReceivedPercent = new CharacterBaseCharacteristic();
            this.spellDamageDonePercent = new CharacterBaseCharacteristic();
            this.spellDamageReceivedPercent = new CharacterBaseCharacteristic();
            this.spellModifications = [];
            this.probationTime = 0;
        };
        CharacterCharacteristicsInformations.prototype.serialize = function(output) {
            this.serializeAs_CharacterCharacteristicsInformations(output);
        };
        CharacterCharacteristicsInformations.prototype.deserialize = function(input) {
            this.deserializeAs_CharacterCharacteristicsInformations(input);
        };
        CharacterCharacteristicsInformations.prototype.serializeAs_CharacterCharacteristicsInformations = function(output) {
            if (this.experience < 0 || this.experience > 9007199254740990) {
                throw new Error("Forbidden value (" + this.experience + ") on element experience.");
            }
            output.writeVarLong(this.experience);
            if (this.experienceLevelFloor < 0 || this.experienceLevelFloor > 9007199254740990) {
                throw new Error("Forbidden value (" + this.experienceLevelFloor + ") on element experienceLevelFloor.");
            }
            output.writeVarLong(this.experienceLevelFloor);
            if (this.experienceNextLevelFloor < 0 || this.experienceNextLevelFloor > 9007199254740990) {
                throw new Error("Forbidden value (" + this.experienceNextLevelFloor + ") on element experienceNextLevelFloor.");
            }
            output.writeVarLong(this.experienceNextLevelFloor);
            if (this.experienceBonusLimit < 0 || this.experienceBonusLimit > 9007199254740990) {
                throw new Error("Forbidden value (" + this.experienceBonusLimit + ") on element experienceBonusLimit.");
            }
            output.writeVarLong(this.experienceBonusLimit);
            if (this.kamas < 0 || this.kamas > 9007199254740990) {
                throw new Error("Forbidden value (" + this.kamas + ") on element kamas.");
            }
            output.writeVarLong(this.kamas);
            if (this.statsPoints < 0) {
                throw new Error("Forbidden value (" + this.statsPoints + ") on element statsPoints.");
            }
            output.writeVarShort(this.statsPoints);
            if (this.additionnalPoints < 0) {
                throw new Error("Forbidden value (" + this.additionnalPoints + ") on element additionnalPoints.");
            }
            output.writeVarShort(this.additionnalPoints);
            if (this.spellsPoints < 0) {
                throw new Error("Forbidden value (" + this.spellsPoints + ") on element spellsPoints.");
            }
            output.writeVarShort(this.spellsPoints);
            this.alignmentInfos.serializeAs_ActorExtendedAlignmentInformations(output);
            if (this.lifePoints < 0) {
                throw new Error("Forbidden value (" + this.lifePoints + ") on element lifePoints.");
            }
            output.writeVarInt(this.lifePoints);
            if (this.maxLifePoints < 0) {
                throw new Error("Forbidden value (" + this.maxLifePoints + ") on element maxLifePoints.");
            }
            output.writeVarInt(this.maxLifePoints);
            if (this.energyPoints < 0) {
                throw new Error("Forbidden value (" + this.energyPoints + ") on element energyPoints.");
            }
            output.writeVarShort(this.energyPoints);
            if (this.maxEnergyPoints < 0) {
                throw new Error("Forbidden value (" + this.maxEnergyPoints + ") on element maxEnergyPoints.");
            }
            output.writeVarShort(this.maxEnergyPoints);
            output.writeVarShort(this.actionPointsCurrent);
            output.writeVarShort(this.movementPointsCurrent);
            this.initiative.serializeAs_CharacterBaseCharacteristic(output);
            this.prospecting.serializeAs_CharacterBaseCharacteristic(output);
            this.actionPoints.serializeAs_CharacterBaseCharacteristic(output);
            this.movementPoints.serializeAs_CharacterBaseCharacteristic(output);
            this.strength.serializeAs_CharacterBaseCharacteristic(output);
            this.vitality.serializeAs_CharacterBaseCharacteristic(output);
            this.wisdom.serializeAs_CharacterBaseCharacteristic(output);
            this.chance.serializeAs_CharacterBaseCharacteristic(output);
            this.agility.serializeAs_CharacterBaseCharacteristic(output);
            this.intelligence.serializeAs_CharacterBaseCharacteristic(output);
            this.range.serializeAs_CharacterBaseCharacteristic(output);
            this.summonableCreaturesBoost.serializeAs_CharacterBaseCharacteristic(output);
            this.reflect.serializeAs_CharacterBaseCharacteristic(output);
            this.criticalHit.serializeAs_CharacterBaseCharacteristic(output);
            if (this.criticalHitWeapon < 0) {
                throw new Error("Forbidden value (" + this.criticalHitWeapon + ") on element criticalHitWeapon.");
            }
            output.writeVarShort(this.criticalHitWeapon);
            this.criticalMiss.serializeAs_CharacterBaseCharacteristic(output);
            this.healBonus.serializeAs_CharacterBaseCharacteristic(output);
            this.allDamagesBonus.serializeAs_CharacterBaseCharacteristic(output);
            this.weaponDamagesBonusPercent.serializeAs_CharacterBaseCharacteristic(output);
            this.damagesBonusPercent.serializeAs_CharacterBaseCharacteristic(output);
            this.trapBonus.serializeAs_CharacterBaseCharacteristic(output);
            this.trapBonusPercent.serializeAs_CharacterBaseCharacteristic(output);
            this.glyphBonusPercent.serializeAs_CharacterBaseCharacteristic(output);
            this.runeBonusPercent.serializeAs_CharacterBaseCharacteristic(output);
            this.permanentDamagePercent.serializeAs_CharacterBaseCharacteristic(output);
            this.tackleBlock.serializeAs_CharacterBaseCharacteristic(output);
            this.tackleEvade.serializeAs_CharacterBaseCharacteristic(output);
            this.PAAttack.serializeAs_CharacterBaseCharacteristic(output);
            this.PMAttack.serializeAs_CharacterBaseCharacteristic(output);
            this.pushDamageBonus.serializeAs_CharacterBaseCharacteristic(output);
            this.criticalDamageBonus.serializeAs_CharacterBaseCharacteristic(output);
            this.neutralDamageBonus.serializeAs_CharacterBaseCharacteristic(output);
            this.earthDamageBonus.serializeAs_CharacterBaseCharacteristic(output);
            this.waterDamageBonus.serializeAs_CharacterBaseCharacteristic(output);
            this.airDamageBonus.serializeAs_CharacterBaseCharacteristic(output);
            this.fireDamageBonus.serializeAs_CharacterBaseCharacteristic(output);
            this.dodgePALostProbability.serializeAs_CharacterBaseCharacteristic(output);
            this.dodgePMLostProbability.serializeAs_CharacterBaseCharacteristic(output);
            this.neutralElementResistPercent.serializeAs_CharacterBaseCharacteristic(output);
            this.earthElementResistPercent.serializeAs_CharacterBaseCharacteristic(output);
            this.waterElementResistPercent.serializeAs_CharacterBaseCharacteristic(output);
            this.airElementResistPercent.serializeAs_CharacterBaseCharacteristic(output);
            this.fireElementResistPercent.serializeAs_CharacterBaseCharacteristic(output);
            this.neutralElementReduction.serializeAs_CharacterBaseCharacteristic(output);
            this.earthElementReduction.serializeAs_CharacterBaseCharacteristic(output);
            this.waterElementReduction.serializeAs_CharacterBaseCharacteristic(output);
            this.airElementReduction.serializeAs_CharacterBaseCharacteristic(output);
            this.fireElementReduction.serializeAs_CharacterBaseCharacteristic(output);
            this.pushDamageReduction.serializeAs_CharacterBaseCharacteristic(output);
            this.criticalDamageReduction.serializeAs_CharacterBaseCharacteristic(output);
            this.pvpNeutralElementResistPercent.serializeAs_CharacterBaseCharacteristic(output);
            this.pvpEarthElementResistPercent.serializeAs_CharacterBaseCharacteristic(output);
            this.pvpWaterElementResistPercent.serializeAs_CharacterBaseCharacteristic(output);
            this.pvpAirElementResistPercent.serializeAs_CharacterBaseCharacteristic(output);
            this.pvpFireElementResistPercent.serializeAs_CharacterBaseCharacteristic(output);
            this.pvpNeutralElementReduction.serializeAs_CharacterBaseCharacteristic(output);
            this.pvpEarthElementReduction.serializeAs_CharacterBaseCharacteristic(output);
            this.pvpWaterElementReduction.serializeAs_CharacterBaseCharacteristic(output);
            this.pvpAirElementReduction.serializeAs_CharacterBaseCharacteristic(output);
            this.pvpFireElementReduction.serializeAs_CharacterBaseCharacteristic(output);
            this.meleeDamageDonePercent.serializeAs_CharacterBaseCharacteristic(output);
            this.meleeDamageReceivedPercent.serializeAs_CharacterBaseCharacteristic(output);
            this.rangedDamageDonePercent.serializeAs_CharacterBaseCharacteristic(output);
            this.rangedDamageReceivedPercent.serializeAs_CharacterBaseCharacteristic(output);
            this.weaponDamageDonePercent.serializeAs_CharacterBaseCharacteristic(output);
            this.weaponDamageReceivedPercent.serializeAs_CharacterBaseCharacteristic(output);
            this.spellDamageDonePercent.serializeAs_CharacterBaseCharacteristic(output);
            this.spellDamageReceivedPercent.serializeAs_CharacterBaseCharacteristic(output);
            output.writeShort(this.spellModifications.length);
            for (var _i84 = 0; _i84 < this.spellModifications.length; _i84++) {
                (this.spellModifications[_i84]).serializeAs_CharacterSpellModification(output);
            }
            if (this.probationTime < 0) {
                throw new Error("Forbidden value (" + this.probationTime + ") on element probationTime.");
            }
            output.writeInt(this.probationTime);
        };
        CharacterCharacteristicsInformations.prototype.deserializeAs_CharacterCharacteristicsInformations = function(input) {
            var _item84 = null;
            this.experience = input.readVarUhLong();
            if (this.experience < 0 || this.experience > 9007199254740990) {
                throw new Error("Forbidden value (" + this.experience + ") on element of CharacterCharacteristicsInformations.experience.");
            }
            this.experienceLevelFloor = input.readVarUhLong();
            if (this.experienceLevelFloor < 0 || this.experienceLevelFloor > 9007199254740990) {
                throw new Error("Forbidden value (" + this.experienceLevelFloor + ") on element of CharacterCharacteristicsInformations.experienceLevelFloor.");
            }
            this.experienceNextLevelFloor = input.readVarUhLong();
            if (this.experienceNextLevelFloor < 0 || this.experienceNextLevelFloor > 9007199254740990) {
                throw new Error("Forbidden value (" + this.experienceNextLevelFloor + ") on element of CharacterCharacteristicsInformations.experienceNextLevelFloor.");
            }
            this.experienceBonusLimit = input.readVarUhLong();
            if (this.experienceBonusLimit < 0 || this.experienceBonusLimit > 9007199254740990) {
                throw new Error("Forbidden value (" + this.experienceBonusLimit + ") on element of CharacterCharacteristicsInformations.experienceBonusLimit.");
            }
            this.kamas = input.readVarUhLong();
            if (this.kamas < 0 || this.kamas > 9007199254740990) {
                throw new Error("Forbidden value (" + this.kamas + ") on element of CharacterCharacteristicsInformations.kamas.");
            }
            this.statsPoints = input.readVarUhShort();
            if (this.statsPoints < 0) {
                throw new Error("Forbidden value (" + this.statsPoints + ") on element of CharacterCharacteristicsInformations.statsPoints.");
            }
            this.additionnalPoints = input.readVarUhShort();
            if (this.additionnalPoints < 0) {
                throw new Error("Forbidden value (" + this.additionnalPoints + ") on element of CharacterCharacteristicsInformations.additionnalPoints.");
            }
            this.spellsPoints = input.readVarUhShort();
            if (this.spellsPoints < 0) {
                throw new Error("Forbidden value (" + this.spellsPoints + ") on element of CharacterCharacteristicsInformations.spellsPoints.");
            }
            this.alignmentInfos = new ActorExtendedAlignmentInformations();
            this.alignmentInfos.deserialize(input);
            this.lifePoints = input.readVarUhInt();
            if (this.lifePoints < 0) {
                throw new Error("Forbidden value (" + this.lifePoints + ") on element of CharacterCharacteristicsInformations.lifePoints.");
            }
            this.maxLifePoints = input.readVarUhInt();
            if (this.maxLifePoints < 0) {
                throw new Error("Forbidden value (" + this.maxLifePoints + ") on element of CharacterCharacteristicsInformations.maxLifePoints.");
            }
            this.energyPoints = input.readVarUhShort();
            if (this.energyPoints < 0) {
                throw new Error("Forbidden value (" + this.energyPoints + ") on element of CharacterCharacteristicsInformations.energyPoints.");
            }
            this.maxEnergyPoints = input.readVarUhShort();
            if (this.maxEnergyPoints < 0) {
                throw new Error("Forbidden value (" + this.maxEnergyPoints + ") on element of CharacterCharacteristicsInformations.maxEnergyPoints.");
            }
            this.actionPointsCurrent = input.readVarShort();
            this.movementPointsCurrent = input.readVarShort();
            this.initiative = new CharacterBaseCharacteristic();
            this.initiative.deserialize(input);
            this.prospecting = new CharacterBaseCharacteristic();
            this.prospecting.deserialize(input);
            this.actionPoints = new CharacterBaseCharacteristic();
            this.actionPoints.deserialize(input);
            this.movementPoints = new CharacterBaseCharacteristic();
            this.movementPoints.deserialize(input);
            this.strength = new CharacterBaseCharacteristic();
            this.strength.deserialize(input);
            this.vitality = new CharacterBaseCharacteristic();
            this.vitality.deserialize(input);
            this.wisdom = new CharacterBaseCharacteristic();
            this.wisdom.deserialize(input);
            this.chance = new CharacterBaseCharacteristic();
            this.chance.deserialize(input);
            this.agility = new CharacterBaseCharacteristic();
            this.agility.deserialize(input);
            this.intelligence = new CharacterBaseCharacteristic();
            this.intelligence.deserialize(input);
            this.range = new CharacterBaseCharacteristic();
            this.range.deserialize(input);
            this.summonableCreaturesBoost = new CharacterBaseCharacteristic();
            this.summonableCreaturesBoost.deserialize(input);
            this.reflect = new CharacterBaseCharacteristic();
            this.reflect.deserialize(input);
            this.criticalHit = new CharacterBaseCharacteristic();
            this.criticalHit.deserialize(input);
            this.criticalHitWeapon = input.readVarUhShort();
            if (this.criticalHitWeapon < 0) {
                throw new Error("Forbidden value (" + this.criticalHitWeapon + ") on element of CharacterCharacteristicsInformations.criticalHitWeapon.");
            }
            this.criticalMiss = new CharacterBaseCharacteristic();
            this.criticalMiss.deserialize(input);
            this.healBonus = new CharacterBaseCharacteristic();
            this.healBonus.deserialize(input);
            this.allDamagesBonus = new CharacterBaseCharacteristic();
            this.allDamagesBonus.deserialize(input);
            this.weaponDamagesBonusPercent = new CharacterBaseCharacteristic();
            this.weaponDamagesBonusPercent.deserialize(input);
            this.damagesBonusPercent = new CharacterBaseCharacteristic();
            this.damagesBonusPercent.deserialize(input);
            this.trapBonus = new CharacterBaseCharacteristic();
            this.trapBonus.deserialize(input);
            this.trapBonusPercent = new CharacterBaseCharacteristic();
            this.trapBonusPercent.deserialize(input);
            this.glyphBonusPercent = new CharacterBaseCharacteristic();
            this.glyphBonusPercent.deserialize(input);
            this.runeBonusPercent = new CharacterBaseCharacteristic();
            this.runeBonusPercent.deserialize(input);
            this.permanentDamagePercent = new CharacterBaseCharacteristic();
            this.permanentDamagePercent.deserialize(input);
            this.tackleBlock = new CharacterBaseCharacteristic();
            this.tackleBlock.deserialize(input);
            this.tackleEvade = new CharacterBaseCharacteristic();
            this.tackleEvade.deserialize(input);
            this.PAAttack = new CharacterBaseCharacteristic();
            this.PAAttack.deserialize(input);
            this.PMAttack = new CharacterBaseCharacteristic();
            this.PMAttack.deserialize(input);
            this.pushDamageBonus = new CharacterBaseCharacteristic();
            this.pushDamageBonus.deserialize(input);
            this.criticalDamageBonus = new CharacterBaseCharacteristic();
            this.criticalDamageBonus.deserialize(input);
            this.neutralDamageBonus = new CharacterBaseCharacteristic();
            this.neutralDamageBonus.deserialize(input);
            this.earthDamageBonus = new CharacterBaseCharacteristic();
            this.earthDamageBonus.deserialize(input);
            this.waterDamageBonus = new CharacterBaseCharacteristic();
            this.waterDamageBonus.deserialize(input);
            this.airDamageBonus = new CharacterBaseCharacteristic();
            this.airDamageBonus.deserialize(input);
            this.fireDamageBonus = new CharacterBaseCharacteristic();
            this.fireDamageBonus.deserialize(input);
            this.dodgePALostProbability = new CharacterBaseCharacteristic();
            this.dodgePALostProbability.deserialize(input);
            this.dodgePMLostProbability = new CharacterBaseCharacteristic();
            this.dodgePMLostProbability.deserialize(input);
            this.neutralElementResistPercent = new CharacterBaseCharacteristic();
            this.neutralElementResistPercent.deserialize(input);
            this.earthElementResistPercent = new CharacterBaseCharacteristic();
            this.earthElementResistPercent.deserialize(input);
            this.waterElementResistPercent = new CharacterBaseCharacteristic();
            this.waterElementResistPercent.deserialize(input);
            this.airElementResistPercent = new CharacterBaseCharacteristic();
            this.airElementResistPercent.deserialize(input);
            this.fireElementResistPercent = new CharacterBaseCharacteristic();
            this.fireElementResistPercent.deserialize(input);
            this.neutralElementReduction = new CharacterBaseCharacteristic();
            this.neutralElementReduction.deserialize(input);
            this.earthElementReduction = new CharacterBaseCharacteristic();
            this.earthElementReduction.deserialize(input);
            this.waterElementReduction = new CharacterBaseCharacteristic();
            this.waterElementReduction.deserialize(input);
            this.airElementReduction = new CharacterBaseCharacteristic();
            this.airElementReduction.deserialize(input);
            this.fireElementReduction = new CharacterBaseCharacteristic();
            this.fireElementReduction.deserialize(input);
            this.pushDamageReduction = new CharacterBaseCharacteristic();
            this.pushDamageReduction.deserialize(input);
            this.criticalDamageReduction = new CharacterBaseCharacteristic();
            this.criticalDamageReduction.deserialize(input);
            this.pvpNeutralElementResistPercent = new CharacterBaseCharacteristic();
            this.pvpNeutralElementResistPercent.deserialize(input);
            this.pvpEarthElementResistPercent = new CharacterBaseCharacteristic();
            this.pvpEarthElementResistPercent.deserialize(input);
            this.pvpWaterElementResistPercent = new CharacterBaseCharacteristic();
            this.pvpWaterElementResistPercent.deserialize(input);
            this.pvpAirElementResistPercent = new CharacterBaseCharacteristic();
            this.pvpAirElementResistPercent.deserialize(input);
            this.pvpFireElementResistPercent = new CharacterBaseCharacteristic();
            this.pvpFireElementResistPercent.deserialize(input);
            this.pvpNeutralElementReduction = new CharacterBaseCharacteristic();
            this.pvpNeutralElementReduction.deserialize(input);
            this.pvpEarthElementReduction = new CharacterBaseCharacteristic();
            this.pvpEarthElementReduction.deserialize(input);
            this.pvpWaterElementReduction = new CharacterBaseCharacteristic();
            this.pvpWaterElementReduction.deserialize(input);
            this.pvpAirElementReduction = new CharacterBaseCharacteristic();
            this.pvpAirElementReduction.deserialize(input);
            this.pvpFireElementReduction = new CharacterBaseCharacteristic();
            this.pvpFireElementReduction.deserialize(input);
            this.meleeDamageDonePercent = new CharacterBaseCharacteristic();
            this.meleeDamageDonePercent.deserialize(input);
            this.meleeDamageReceivedPercent = new CharacterBaseCharacteristic();
            this.meleeDamageReceivedPercent.deserialize(input);
            this.rangedDamageDonePercent = new CharacterBaseCharacteristic();
            this.rangedDamageDonePercent.deserialize(input);
            this.rangedDamageReceivedPercent = new CharacterBaseCharacteristic();
            this.rangedDamageReceivedPercent.deserialize(input);
            this.weaponDamageDonePercent = new CharacterBaseCharacteristic();
            this.weaponDamageDonePercent.deserialize(input);
            this.weaponDamageReceivedPercent = new CharacterBaseCharacteristic();
            this.weaponDamageReceivedPercent.deserialize(input);
            this.spellDamageDonePercent = new CharacterBaseCharacteristic();
            this.spellDamageDonePercent.deserialize(input);
            this.spellDamageReceivedPercent = new CharacterBaseCharacteristic();
            this.spellDamageReceivedPercent.deserialize(input);
            var _spellModificationsLen = input.readUnsignedShort();
            for (var _i84 = 0; _i84 < _spellModificationsLen; _i84++) {
                _item84 = new CharacterSpellModification();
                _item84.deserialize(input);
                this.spellModifications.push(_item84);
            }
            this.probationTime = input.readInt();
            if (this.probationTime < 0) {
                throw new Error("Forbidden value (" + this.probationTime + ") on element of CharacterCharacteristicsInformations.probationTime.");
            }
        };
        CharacterCharacteristicsInformations.ID = 1092;
        return CharacterCharacteristicsInformations;
    })();
    Protocol.CharacterCharacteristicsInformations = CharacterCharacteristicsInformations;
    var CharacterSpellModification = (function() {

        function CharacterSpellModification() {
            this.modificationType = 0;
            this.spellId = 0;
            this.value = new CharacterBaseCharacteristic();

        }
        CharacterSpellModification.prototype.getMessageId = function() {
            return CharacterSpellModification.ID;
        };
        CharacterSpellModification.prototype.reset = function() {
            this.modificationType = 0;
            this.spellId = 0;
            this.value = new CharacterBaseCharacteristic();
        };
        CharacterSpellModification.prototype.serialize = function(output) {
            this.serializeAs_CharacterSpellModification(output);
        };
        CharacterSpellModification.prototype.deserialize = function(input) {
            this.deserializeAs_CharacterSpellModification(input);
        };
        CharacterSpellModification.prototype.serializeAs_CharacterSpellModification = function(output) {
            output.writeByte(this.modificationType);
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
            }
            output.writeVarShort(this.spellId);
            this.value.serializeAs_CharacterBaseCharacteristic(output);
        };
        CharacterSpellModification.prototype.deserializeAs_CharacterSpellModification = function(input) {
            this.modificationType = input.readByte();
            if (this.modificationType < 0) {
                throw new Error("Forbidden value (" + this.modificationType + ") on element of CharacterSpellModification.modificationType.");
            }
            this.spellId = input.readVarUhShort();
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element of CharacterSpellModification.spellId.");
            }
            this.value = new CharacterBaseCharacteristic();
            this.value.deserialize(input);
        };
        CharacterSpellModification.ID = 9332;
        return CharacterSpellModification;
    })();
    Protocol.CharacterSpellModification = CharacterSpellModification;
    var CharacterMinimalInformations = (function(_super) {
        __extends(CharacterMinimalInformations, _super);

        function CharacterMinimalInformations() {
            this.level = 0;
            _super.call(this)
        }
        CharacterMinimalInformations.prototype.getMessageId = function() {
            return CharacterMinimalInformations.ID;
        };
        CharacterMinimalInformations.prototype.reset = function() {
            this.level = 0;
        };
        CharacterMinimalInformations.prototype.serialize = function(output) {
            this.serializeAs_CharacterMinimalInformations(output);
        };
        CharacterMinimalInformations.prototype.deserialize = function(input) {
            this.deserializeAs_CharacterMinimalInformations(input);
        };
        CharacterMinimalInformations.prototype.serializeAs_CharacterMinimalInformations = function(output) {
            _super.prototype.serializeAs_CharacterBasicMinimalInformations(this, output);
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeVarShort(this.level);
        };
        CharacterMinimalInformations.prototype.deserializeAs_CharacterMinimalInformations = function(input) {
            _super.prototype.deserializeCharacterBasicMinimalInformations(this, input);
            this.level = input.readVarUhShort();
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element of CharacterMinimalInformations.level.");
            }
        };
        CharacterMinimalInformations.ID = 8058;
        return CharacterMinimalInformations;
    })(CharacterBasicMinimalInformations);
    Protocol.CharacterMinimalInformations = CharacterMinimalInformations;
    var CharacterMinimalPlusLookInformations = (function(_super) {
        __extends(CharacterMinimalPlusLookInformations, _super);

        function CharacterMinimalPlusLookInformations() {
            this.entityLook = new EntityLook();
            this.breed = 0;
            _super.call(this)
        }
        CharacterMinimalPlusLookInformations.prototype.getMessageId = function() {
            return CharacterMinimalPlusLookInformations.ID;
        };
        CharacterMinimalPlusLookInformations.prototype.reset = function() {
            this.entityLook = new EntityLook();
            this.breed = 0;
        };
        CharacterMinimalPlusLookInformations.prototype.serialize = function(output) {
            this.serializeAs_CharacterMinimalPlusLookInformations(output);
        };
        CharacterMinimalPlusLookInformations.prototype.deserialize = function(input) {
            this.deserializeAs_CharacterMinimalPlusLookInformations(input);
        };
        CharacterMinimalPlusLookInformations.prototype.serializeAs_CharacterMinimalPlusLookInformations = function(output) {
            _super.prototype.serializeAs_CharacterMinimalInformations(this, output);
            this.entityLook.serializeAs_EntityLook(output);
            output.writeByte(this.breed);
        };
        CharacterMinimalPlusLookInformations.prototype.deserializeAs_CharacterMinimalPlusLookInformations = function(input) {
            _super.prototype.deserializeCharacterMinimalInformations(this, input);
            this.entityLook = new EntityLook();
            this.entityLook.deserialize(input);
            this.breed = input.readByte();
        };
        CharacterMinimalPlusLookInformations.ID = 8237;
        return CharacterMinimalPlusLookInformations;
    })(CharacterMinimalInformations);
    Protocol.CharacterMinimalPlusLookInformations = CharacterMinimalPlusLookInformations;
    var CharacterMinimalGuildInformations = (function(_super) {
        __extends(CharacterMinimalGuildInformations, _super);

        function CharacterMinimalGuildInformations() {
            this.guild = new BasicGuildInformations();
            _super.call(this)
        }
        CharacterMinimalGuildInformations.prototype.getMessageId = function() {
            return CharacterMinimalGuildInformations.ID;
        };
        CharacterMinimalGuildInformations.prototype.reset = function() {
            this.guild = new BasicGuildInformations();
        };
        CharacterMinimalGuildInformations.prototype.serialize = function(output) {
            this.serializeAs_CharacterMinimalGuildInformations(output);
        };
        CharacterMinimalGuildInformations.prototype.deserialize = function(input) {
            this.deserializeAs_CharacterMinimalGuildInformations(input);
        };
        CharacterMinimalGuildInformations.prototype.serializeAs_CharacterMinimalGuildInformations = function(output) {
            _super.prototype.serializeAs_CharacterMinimalPlusLookInformations(this, output);
            this.guild.serializeAs_BasicGuildInformations(output);
        };
        CharacterMinimalGuildInformations.prototype.deserializeAs_CharacterMinimalGuildInformations = function(input) {
            _super.prototype.deserializeCharacterMinimalPlusLookInformations(this, input);
            this.guild = new BasicGuildInformations();
            this.guild.deserialize(input);
        };
        CharacterMinimalGuildInformations.ID = 6416;
        return CharacterMinimalGuildInformations;
    })(CharacterMinimalPlusLookInformations);
    Protocol.CharacterMinimalGuildInformations = CharacterMinimalGuildInformations;
    var CharacterMinimalAllianceInformations = (function(_super) {
        __extends(CharacterMinimalAllianceInformations, _super);

        function CharacterMinimalAllianceInformations() {
            this.alliance = new BasicAllianceInformations();
            _super.call(this)
        }
        CharacterMinimalAllianceInformations.prototype.getMessageId = function() {
            return CharacterMinimalAllianceInformations.ID;
        };
        CharacterMinimalAllianceInformations.prototype.reset = function() {
            this.alliance = new BasicAllianceInformations();
        };
        CharacterMinimalAllianceInformations.prototype.serialize = function(output) {
            this.serializeAs_CharacterMinimalAllianceInformations(output);
        };
        CharacterMinimalAllianceInformations.prototype.deserialize = function(input) {
            this.deserializeAs_CharacterMinimalAllianceInformations(input);
        };
        CharacterMinimalAllianceInformations.prototype.serializeAs_CharacterMinimalAllianceInformations = function(output) {
            _super.prototype.serializeAs_CharacterMinimalGuildInformations(this, output);
            this.alliance.serializeAs_BasicAllianceInformations(output);
        };
        CharacterMinimalAllianceInformations.prototype.deserializeAs_CharacterMinimalAllianceInformations = function(input) {
            _super.prototype.deserializeCharacterMinimalGuildInformations(this, input);
            this.alliance = new BasicAllianceInformations();
            this.alliance.deserialize(input);
        };
        CharacterMinimalAllianceInformations.ID = 9412;
        return CharacterMinimalAllianceInformations;
    })(CharacterMinimalGuildInformations);
    Protocol.CharacterMinimalAllianceInformations = CharacterMinimalAllianceInformations;
    var CharacterMinimalGuildPublicInformations = (function(_super) {
        __extends(CharacterMinimalGuildPublicInformations, _super);

        function CharacterMinimalGuildPublicInformations() {
            this.rank = 0;
            _super.call(this)
        }
        CharacterMinimalGuildPublicInformations.prototype.getMessageId = function() {
            return CharacterMinimalGuildPublicInformations.ID;
        };
        CharacterMinimalGuildPublicInformations.prototype.reset = function() {
            this.rank = 0;
        };
        CharacterMinimalGuildPublicInformations.prototype.serialize = function(output) {
            this.serializeAs_CharacterMinimalGuildPublicInformations(output);
        };
        CharacterMinimalGuildPublicInformations.prototype.deserialize = function(input) {
            this.deserializeAs_CharacterMinimalGuildPublicInformations(input);
        };
        CharacterMinimalGuildPublicInformations.prototype.serializeAs_CharacterMinimalGuildPublicInformations = function(output) {
            _super.prototype.serializeAs_CharacterMinimalInformations(this, output);
            if (this.rank < 0) {
                throw new Error("Forbidden value (" + this.rank + ") on element rank.");
            }
            output.writeVarInt(this.rank);
        };
        CharacterMinimalGuildPublicInformations.prototype.deserializeAs_CharacterMinimalGuildPublicInformations = function(input) {
            _super.prototype.deserializeCharacterMinimalInformations(this, input);
            this.rank = input.readVarUhInt();
            if (this.rank < 0) {
                throw new Error("Forbidden value (" + this.rank + ") on element of CharacterMinimalGuildPublicInformations.rank.");
            }
        };
        CharacterMinimalGuildPublicInformations.ID = 2887;
        return CharacterMinimalGuildPublicInformations;
    })(CharacterMinimalInformations);
    Protocol.CharacterMinimalGuildPublicInformations = CharacterMinimalGuildPublicInformations;
    var CharacterMinimalPlusLookAndGradeInformations = (function(_super) {
        __extends(CharacterMinimalPlusLookAndGradeInformations, _super);

        function CharacterMinimalPlusLookAndGradeInformations() {
            this.grade = 0;
            _super.call(this)
        }
        CharacterMinimalPlusLookAndGradeInformations.prototype.getMessageId = function() {
            return CharacterMinimalPlusLookAndGradeInformations.ID;
        };
        CharacterMinimalPlusLookAndGradeInformations.prototype.reset = function() {
            this.grade = 0;
        };
        CharacterMinimalPlusLookAndGradeInformations.prototype.serialize = function(output) {
            this.serializeAs_CharacterMinimalPlusLookAndGradeInformations(output);
        };
        CharacterMinimalPlusLookAndGradeInformations.prototype.deserialize = function(input) {
            this.deserializeAs_CharacterMinimalPlusLookAndGradeInformations(input);
        };
        CharacterMinimalPlusLookAndGradeInformations.prototype.serializeAs_CharacterMinimalPlusLookAndGradeInformations = function(output) {
            _super.prototype.serializeAs_CharacterMinimalPlusLookInformations(this, output);
            if (this.grade < 0) {
                throw new Error("Forbidden value (" + this.grade + ") on element grade.");
            }
            output.writeVarInt(this.grade);
        };
        CharacterMinimalPlusLookAndGradeInformations.prototype.deserializeAs_CharacterMinimalPlusLookAndGradeInformations = function(input) {
            _super.prototype.deserializeCharacterMinimalPlusLookInformations(this, input);
            this.grade = input.readVarUhInt();
            if (this.grade < 0) {
                throw new Error("Forbidden value (" + this.grade + ") on element of CharacterMinimalPlusLookAndGradeInformations.grade.");
            }
        };
        CharacterMinimalPlusLookAndGradeInformations.ID = 651;
        return CharacterMinimalPlusLookAndGradeInformations;
    })(CharacterMinimalPlusLookInformations);
    Protocol.CharacterMinimalPlusLookAndGradeInformations = CharacterMinimalPlusLookAndGradeInformations;
    var CharacterBaseInformations = (function(_super) {
        __extends(CharacterBaseInformations, _super);

        function CharacterBaseInformations() {
            this.sex = false;
            _super.call(this)
        }
        CharacterBaseInformations.prototype.getMessageId = function() {
            return CharacterBaseInformations.ID;
        };
        CharacterBaseInformations.prototype.reset = function() {
            this.sex = false;
        };
        CharacterBaseInformations.prototype.serialize = function(output) {
            this.serializeAs_CharacterBaseInformations(output);
        };
        CharacterBaseInformations.prototype.deserialize = function(input) {
            this.deserializeAs_CharacterBaseInformations(input);
        };
        CharacterBaseInformations.prototype.serializeAs_CharacterBaseInformations = function(output) {
            _super.prototype.serializeAs_CharacterMinimalPlusLookInformations(this, output);
            output.writeBoolean(this.sex);
        };
        CharacterBaseInformations.prototype.deserializeAs_CharacterBaseInformations = function(input) {
            _super.prototype.deserializeCharacterMinimalPlusLookInformations(this, input);
            this.sex = input.readBoolean();
        };
        CharacterBaseInformations.ID = 6238;
        return CharacterBaseInformations;
    })(CharacterMinimalPlusLookInformations);
    Protocol.CharacterBaseInformations = CharacterBaseInformations;
    var CharacterHardcoreOrEpicInformations = (function(_super) {
        __extends(CharacterHardcoreOrEpicInformations, _super);

        function CharacterHardcoreOrEpicInformations() {
            this.deathState = 0;
            this.deathCount = 0;
            this.deathMaxLevel = 0;
            _super.call(this)
        }
        CharacterHardcoreOrEpicInformations.prototype.getMessageId = function() {
            return CharacterHardcoreOrEpicInformations.ID;
        };
        CharacterHardcoreOrEpicInformations.prototype.reset = function() {
            this.deathState = 0;
            this.deathCount = 0;
            this.deathMaxLevel = 0;
        };
        CharacterHardcoreOrEpicInformations.prototype.serialize = function(output) {
            this.serializeAs_CharacterHardcoreOrEpicInformations(output);
        };
        CharacterHardcoreOrEpicInformations.prototype.deserialize = function(input) {
            this.deserializeAs_CharacterHardcoreOrEpicInformations(input);
        };
        CharacterHardcoreOrEpicInformations.prototype.serializeAs_CharacterHardcoreOrEpicInformations = function(output) {
            _super.prototype.serializeAs_CharacterBaseInformations(this, output);
            output.writeByte(this.deathState);
            if (this.deathCount < 0) {
                throw new Error("Forbidden value (" + this.deathCount + ") on element deathCount.");
            }
            output.writeVarShort(this.deathCount);
            if (this.deathMaxLevel < 0) {
                throw new Error("Forbidden value (" + this.deathMaxLevel + ") on element deathMaxLevel.");
            }
            output.writeVarShort(this.deathMaxLevel);
        };
        CharacterHardcoreOrEpicInformations.prototype.deserializeAs_CharacterHardcoreOrEpicInformations = function(input) {
            _super.prototype.deserializeCharacterBaseInformations(this, input);
            this.deathState = input.readByte();
            if (this.deathState < 0) {
                throw new Error("Forbidden value (" + this.deathState + ") on element of CharacterHardcoreOrEpicInformations.deathState.");
            }
            this.deathCount = input.readVarUhShort();
            if (this.deathCount < 0) {
                throw new Error("Forbidden value (" + this.deathCount + ") on element of CharacterHardcoreOrEpicInformations.deathCount.");
            }
            this.deathMaxLevel = input.readVarUhShort();
            if (this.deathMaxLevel < 0) {
                throw new Error("Forbidden value (" + this.deathMaxLevel + ") on element of CharacterHardcoreOrEpicInformations.deathMaxLevel.");
            }
        };
        CharacterHardcoreOrEpicInformations.ID = 3059;
        return CharacterHardcoreOrEpicInformations;
    })(CharacterBaseInformations);
    Protocol.CharacterHardcoreOrEpicInformations = CharacterHardcoreOrEpicInformations;
    var CharacterRemodelingInformation = (function(_super) {
        __extends(CharacterRemodelingInformation, _super);

        function CharacterRemodelingInformation() {
            this.name = "";
            this.breed = 0;
            this.sex = false;
            this.cosmeticId = 0;
            this.colors = [];
            _super.call(this)
        }
        CharacterRemodelingInformation.prototype.getMessageId = function() {
            return CharacterRemodelingInformation.ID;
        };
        CharacterRemodelingInformation.prototype.reset = function() {
            this.name = "";
            this.breed = 0;
            this.sex = false;
            this.cosmeticId = 0;
            this.colors = [];
        };
        CharacterRemodelingInformation.prototype.serialize = function(output) {
            this.serializeAs_CharacterRemodelingInformation(output);
        };
        CharacterRemodelingInformation.prototype.deserialize = function(input) {
            this.deserializeAs_CharacterRemodelingInformation(input);
        };
        CharacterRemodelingInformation.prototype.serializeAs_CharacterRemodelingInformation = function(output) {
            _super.prototype.serializeAs_AbstractCharacterInformation(this, output);
            output.writeUTF(this.name);
            output.writeByte(this.breed);
            output.writeBoolean(this.sex);
            if (this.cosmeticId < 0) {
                throw new Error("Forbidden value (" + this.cosmeticId + ") on element cosmeticId.");
            }
            output.writeVarShort(this.cosmeticId);
            output.writeShort(this.colors.length);
            for (var _i5 = 0; _i5 < this.colors.length; _i5++) {
                output.writeInt(this.colors[_i5]);
            }
        };
        CharacterRemodelingInformation.prototype.deserializeAs_CharacterRemodelingInformation = function(input) {
            var _val5 = 0;
            _super.prototype.deserializeAbstractCharacterInformation(this, input);
            this.name = input.readUTF();
            this.breed = input.readByte();
            this.sex = input.readBoolean();
            this.cosmeticId = input.readVarUhShort();
            if (this.cosmeticId < 0) {
                throw new Error("Forbidden value (" + this.cosmeticId + ") on element of CharacterRemodelingInformation.cosmeticId.");
            }
            var _colorsLen = input.readUnsignedShort();
            for (var _i5 = 0; _i5 < _colorsLen; _i5++) {
                _val5 = input.readInt();
                this.colors.push(_val5);
            }
        };
        CharacterRemodelingInformation.ID = 2924;
        return CharacterRemodelingInformation;
    })(AbstractCharacterInformation);
    Protocol.CharacterRemodelingInformation = CharacterRemodelingInformation;
    var CharacterToRemodelInformations = (function(_super) {
        __extends(CharacterToRemodelInformations, _super);

        function CharacterToRemodelInformations() {
            this.possibleChangeMask = 0;
            this.mandatoryChangeMask = 0;
            _super.call(this)
        }
        CharacterToRemodelInformations.prototype.getMessageId = function() {
            return CharacterToRemodelInformations.ID;
        };
        CharacterToRemodelInformations.prototype.reset = function() {
            this.possibleChangeMask = 0;
            this.mandatoryChangeMask = 0;
        };
        CharacterToRemodelInformations.prototype.serialize = function(output) {
            this.serializeAs_CharacterToRemodelInformations(output);
        };
        CharacterToRemodelInformations.prototype.deserialize = function(input) {
            this.deserializeAs_CharacterToRemodelInformations(input);
        };
        CharacterToRemodelInformations.prototype.serializeAs_CharacterToRemodelInformations = function(output) {
            _super.prototype.serializeAs_CharacterRemodelingInformation(this, output);
            if (this.possibleChangeMask < 0) {
                throw new Error("Forbidden value (" + this.possibleChangeMask + ") on element possibleChangeMask.");
            }
            output.writeByte(this.possibleChangeMask);
            if (this.mandatoryChangeMask < 0) {
                throw new Error("Forbidden value (" + this.mandatoryChangeMask + ") on element mandatoryChangeMask.");
            }
            output.writeByte(this.mandatoryChangeMask);
        };
        CharacterToRemodelInformations.prototype.deserializeAs_CharacterToRemodelInformations = function(input) {
            _super.prototype.deserializeCharacterRemodelingInformation(this, input);
            this.possibleChangeMask = input.readByte();
            if (this.possibleChangeMask < 0) {
                throw new Error("Forbidden value (" + this.possibleChangeMask + ") on element of CharacterToRemodelInformations.possibleChangeMask.");
            }
            this.mandatoryChangeMask = input.readByte();
            if (this.mandatoryChangeMask < 0) {
                throw new Error("Forbidden value (" + this.mandatoryChangeMask + ") on element of CharacterToRemodelInformations.mandatoryChangeMask.");
            }
        };
        CharacterToRemodelInformations.ID = 1292;
        return CharacterToRemodelInformations;
    })(CharacterRemodelingInformation);
    Protocol.CharacterToRemodelInformations = CharacterToRemodelInformations;
    var RemodelingInformation = (function() {

        function RemodelingInformation() {
            this.name = "";
            this.breed = 0;
            this.sex = false;
            this.cosmeticId = 0;
            this.colors = [];

        }
        RemodelingInformation.prototype.getMessageId = function() {
            return RemodelingInformation.ID;
        };
        RemodelingInformation.prototype.reset = function() {
            this.name = "";
            this.breed = 0;
            this.sex = false;
            this.cosmeticId = 0;
            this.colors = [];
        };
        RemodelingInformation.prototype.serialize = function(output) {
            this.serializeAs_RemodelingInformation(output);
        };
        RemodelingInformation.prototype.deserialize = function(input) {
            this.deserializeAs_RemodelingInformation(input);
        };
        RemodelingInformation.prototype.serializeAs_RemodelingInformation = function(output) {
            output.writeUTF(this.name);
            output.writeByte(this.breed);
            output.writeBoolean(this.sex);
            if (this.cosmeticId < 0) {
                throw new Error("Forbidden value (" + this.cosmeticId + ") on element cosmeticId.");
            }
            output.writeVarShort(this.cosmeticId);
            output.writeShort(this.colors.length);
            for (var _i5 = 0; _i5 < this.colors.length; _i5++) {
                output.writeInt(this.colors[_i5]);
            }
        };
        RemodelingInformation.prototype.deserializeAs_RemodelingInformation = function(input) {
            var _val5 = 0;
            this.name = input.readUTF();
            this.breed = input.readByte();
            this.sex = input.readBoolean();
            this.cosmeticId = input.readVarUhShort();
            if (this.cosmeticId < 0) {
                throw new Error("Forbidden value (" + this.cosmeticId + ") on element of RemodelingInformation.cosmeticId.");
            }
            var _colorsLen = input.readUnsignedShort();
            for (var _i5 = 0; _i5 < _colorsLen; _i5++) {
                _val5 = input.readInt();
                this.colors.push(_val5);
            }
        };
        RemodelingInformation.ID = 6075;
        return RemodelingInformation;
    })();
    Protocol.RemodelingInformation = RemodelingInformation;
    var DebtInformation = (function() {

        function DebtInformation() {
            this.id = 0;
            this.timestamp = 0;

        }
        DebtInformation.prototype.getMessageId = function() {
            return DebtInformation.ID;
        };
        DebtInformation.prototype.reset = function() {
            this.id = 0;
            this.timestamp = 0;
        };
        DebtInformation.prototype.serialize = function(output) {
            this.serializeAs_DebtInformation(output);
        };
        DebtInformation.prototype.deserialize = function(input) {
            this.deserializeAs_DebtInformation(input);
        };
        DebtInformation.prototype.serializeAs_DebtInformation = function(output) {
            if (this.id < 0 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeDouble(this.id);
            if (this.timestamp < 0 || this.timestamp > 9007199254740990) {
                throw new Error("Forbidden value (" + this.timestamp + ") on element timestamp.");
            }
            output.writeDouble(this.timestamp);
        };
        DebtInformation.prototype.deserializeAs_DebtInformation = function(input) {
            this.id = input.readDouble();
            if (this.id < 0 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element of DebtInformation.id.");
            }
            this.timestamp = input.readDouble();
            if (this.timestamp < 0 || this.timestamp > 9007199254740990) {
                throw new Error("Forbidden value (" + this.timestamp + ") on element of DebtInformation.timestamp.");
            }
        };
        DebtInformation.ID = 9957;
        return DebtInformation;
    })();
    Protocol.DebtInformation = DebtInformation;
    var KamaDebtInformation = (function(_super) {
        __extends(KamaDebtInformation, _super);

        function KamaDebtInformation() {
            this.kamas = 0;
            _super.call(this)
        }
        KamaDebtInformation.prototype.getMessageId = function() {
            return KamaDebtInformation.ID;
        };
        KamaDebtInformation.prototype.reset = function() {
            this.kamas = 0;
        };
        KamaDebtInformation.prototype.serialize = function(output) {
            this.serializeAs_KamaDebtInformation(output);
        };
        KamaDebtInformation.prototype.deserialize = function(input) {
            this.deserializeAs_KamaDebtInformation(input);
        };
        KamaDebtInformation.prototype.serializeAs_KamaDebtInformation = function(output) {
            _super.prototype.serializeAs_DebtInformation(this, output);
            if (this.kamas < 0 || this.kamas > 9007199254740990) {
                throw new Error("Forbidden value (" + this.kamas + ") on element kamas.");
            }
            output.writeVarLong(this.kamas);
        };
        KamaDebtInformation.prototype.deserializeAs_KamaDebtInformation = function(input) {
            _super.prototype.deserializeDebtInformation(this, input);
            this.kamas = input.readVarUhLong();
            if (this.kamas < 0 || this.kamas > 9007199254740990) {
                throw new Error("Forbidden value (" + this.kamas + ") on element of KamaDebtInformation.kamas.");
            }
        };
        KamaDebtInformation.ID = 9275;
        return KamaDebtInformation;
    })(DebtInformation);
    Protocol.KamaDebtInformation = KamaDebtInformation;
    var ActorRestrictionsInformations = (function() {

        function ActorRestrictionsInformations() {
            this.cantBeAggressed = false;
            this.cantBeChallenged = false;
            this.cantTrade = false;
            this.cantBeAttackedByMutant = false;
            this.cantRun = false;
            this.forceSlowWalk = false;
            this.cantMinimize = false;
            this.cantMove = false;
            this.cantAggress = false;
            this.cantChallenge = false;
            this.cantExchange = false;
            this.cantAttack = false;
            this.cantChat = false;
            this.cantBeMerchant = false;
            this.cantUseObject = false;
            this.cantUseTaxCollector = false;
            this.cantUseInteractive = false;
            this.cantSpeakToNPC = false;
            this.cantChangeZone = false;
            this.cantAttackMonster = false;
            this.cantWalk8Directions = false;

        }
        ActorRestrictionsInformations.prototype.getMessageId = function() {
            return ActorRestrictionsInformations.ID;
        };
        ActorRestrictionsInformations.prototype.reset = function() {
            this.cantBeAggressed = false;
            this.cantBeChallenged = false;
            this.cantTrade = false;
            this.cantBeAttackedByMutant = false;
            this.cantRun = false;
            this.forceSlowWalk = false;
            this.cantMinimize = false;
            this.cantMove = false;
            this.cantAggress = false;
            this.cantChallenge = false;
            this.cantExchange = false;
            this.cantAttack = false;
            this.cantChat = false;
            this.cantBeMerchant = false;
            this.cantUseObject = false;
            this.cantUseTaxCollector = false;
            this.cantUseInteractive = false;
            this.cantSpeakToNPC = false;
            this.cantChangeZone = false;
            this.cantAttackMonster = false;
            this.cantWalk8Directions = false;
        };
        ActorRestrictionsInformations.prototype.serialize = function(output) {
            this.serializeAs_ActorRestrictionsInformations(output);
        };
        ActorRestrictionsInformations.prototype.deserialize = function(input) {
            this.deserializeAs_ActorRestrictionsInformations(input);
        };
        ActorRestrictionsInformations.prototype.serializeAs_ActorRestrictionsInformations = function(output) {
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.cantBeAggressed);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.cantBeChallenged);
            _box0 = BooleanByteWrapper.setFlag(_box0, 2, this.cantTrade);
            _box0 = BooleanByteWrapper.setFlag(_box0, 3, this.cantBeAttackedByMutant);
            _box0 = BooleanByteWrapper.setFlag(_box0, 4, this.cantRun);
            _box0 = BooleanByteWrapper.setFlag(_box0, 5, this.forceSlowWalk);
            _box0 = BooleanByteWrapper.setFlag(_box0, 6, this.cantMinimize);
            _box0 = BooleanByteWrapper.setFlag(_box0, 7, this.cantMove);
            output.writeByte(_box0);
            var _box1 = 0;
            _box1 = BooleanByteWrapper.setFlag(_box1, 0, this.cantAggress);
            _box1 = BooleanByteWrapper.setFlag(_box1, 1, this.cantChallenge);
            _box1 = BooleanByteWrapper.setFlag(_box1, 2, this.cantExchange);
            _box1 = BooleanByteWrapper.setFlag(_box1, 3, this.cantAttack);
            _box1 = BooleanByteWrapper.setFlag(_box1, 4, this.cantChat);
            _box1 = BooleanByteWrapper.setFlag(_box1, 5, this.cantBeMerchant);
            _box1 = BooleanByteWrapper.setFlag(_box1, 6, this.cantUseObject);
            _box1 = BooleanByteWrapper.setFlag(_box1, 7, this.cantUseTaxCollector);
            output.writeByte(_box1);
            var _box2 = 0;
            _box2 = BooleanByteWrapper.setFlag(_box2, 0, this.cantUseInteractive);
            _box2 = BooleanByteWrapper.setFlag(_box2, 1, this.cantSpeakToNPC);
            _box2 = BooleanByteWrapper.setFlag(_box2, 2, this.cantChangeZone);
            _box2 = BooleanByteWrapper.setFlag(_box2, 3, this.cantAttackMonster);
            _box2 = BooleanByteWrapper.setFlag(_box2, 4, this.cantWalk8Directions);
            output.writeByte(_box2);
        };
        ActorRestrictionsInformations.prototype.deserializeAs_ActorRestrictionsInformations = function(input) {
            this.deserializeByteBoxes(input);
        };
        ActorRestrictionsInformations.ID = 4964;
        return ActorRestrictionsInformations;
    })();
    Protocol.ActorRestrictionsInformations = ActorRestrictionsInformations;
    var PlayerStatus = (function() {

        function PlayerStatus() {
            this.statusId = 1;

        }
        PlayerStatus.prototype.getMessageId = function() {
            return PlayerStatus.ID;
        };
        PlayerStatus.prototype.reset = function() {
            this.statusId = 1;
        };
        PlayerStatus.prototype.serialize = function(output) {
            this.serializeAs_PlayerStatus(output);
        };
        PlayerStatus.prototype.deserialize = function(input) {
            this.deserializeAs_PlayerStatus(input);
        };
        PlayerStatus.prototype.serializeAs_PlayerStatus = function(output) {
            output.writeByte(this.statusId);
        };
        PlayerStatus.prototype.deserializeAs_PlayerStatus = function(input) {
            this.statusId = input.readByte();
            if (this.statusId < 0) {
                throw new Error("Forbidden value (" + this.statusId + ") on element of PlayerStatus.statusId.");
            }
        };
        PlayerStatus.ID = 6513;
        return PlayerStatus;
    })();
    Protocol.PlayerStatus = PlayerStatus;
    var PlayerStatusExtended = (function(_super) {
        __extends(PlayerStatusExtended, _super);

        function PlayerStatusExtended() {
            this.message = "";
            _super.call(this)
        }
        PlayerStatusExtended.prototype.getMessageId = function() {
            return PlayerStatusExtended.ID;
        };
        PlayerStatusExtended.prototype.reset = function() {
            this.message = "";
        };
        PlayerStatusExtended.prototype.serialize = function(output) {
            this.serializeAs_PlayerStatusExtended(output);
        };
        PlayerStatusExtended.prototype.deserialize = function(input) {
            this.deserializeAs_PlayerStatusExtended(input);
        };
        PlayerStatusExtended.prototype.serializeAs_PlayerStatusExtended = function(output) {
            _super.prototype.serializeAs_PlayerStatus(this, output);
            output.writeUTF(this.message);
        };
        PlayerStatusExtended.prototype.deserializeAs_PlayerStatusExtended = function(input) {
            _super.prototype.deserializePlayerStatus(this, input);
            this.message = input.readUTF();
        };
        PlayerStatusExtended.ID = 2943;
        return PlayerStatusExtended;
    })(PlayerStatus);
    Protocol.PlayerStatusExtended = PlayerStatusExtended;
    var ActorOrientation = (function() {

        function ActorOrientation() {
            this.id = 0;
            this.direction = 1;

        }
        ActorOrientation.prototype.getMessageId = function() {
            return ActorOrientation.ID;
        };
        ActorOrientation.prototype.reset = function() {
            this.id = 0;
            this.direction = 1;
        };
        ActorOrientation.prototype.serialize = function(output) {
            this.serializeAs_ActorOrientation(output);
        };
        ActorOrientation.prototype.deserialize = function(input) {
            this.deserializeAs_ActorOrientation(input);
        };
        ActorOrientation.prototype.serializeAs_ActorOrientation = function(output) {
            if (this.id < -9007199254740990 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeDouble(this.id);
            output.writeByte(this.direction);
        };
        ActorOrientation.prototype.deserializeAs_ActorOrientation = function(input) {
            this.id = input.readDouble();
            if (this.id < -9007199254740990 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element of ActorOrientation.id.");
            }
            this.direction = input.readByte();
            if (this.direction < 0) {
                throw new Error("Forbidden value (" + this.direction + ") on element of ActorOrientation.direction.");
            }
        };
        ActorOrientation.ID = 3924;
        return ActorOrientation;
    })();
    Protocol.ActorOrientation = ActorOrientation;
    var EntityDispositionInformations = (function() {

        function EntityDispositionInformations() {
            this.cellId = 0;
            this.direction = 1;

        }
        EntityDispositionInformations.prototype.getMessageId = function() {
            return EntityDispositionInformations.ID;
        };
        EntityDispositionInformations.prototype.reset = function() {
            this.cellId = 0;
            this.direction = 1;
        };
        EntityDispositionInformations.prototype.serialize = function(output) {
            this.serializeAs_EntityDispositionInformations(output);
        };
        EntityDispositionInformations.prototype.deserialize = function(input) {
            this.deserializeAs_EntityDispositionInformations(input);
        };
        EntityDispositionInformations.prototype.serializeAs_EntityDispositionInformations = function(output) {
            if (this.cellId < -1 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
            }
            output.writeShort(this.cellId);
            output.writeByte(this.direction);
        };
        EntityDispositionInformations.prototype.deserializeAs_EntityDispositionInformations = function(input) {
            this.cellId = input.readShort();
            if (this.cellId < -1 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element of EntityDispositionInformations.cellId.");
            }
            this.direction = input.readByte();
            if (this.direction < 0) {
                throw new Error("Forbidden value (" + this.direction + ") on element of EntityDispositionInformations.direction.");
            }
        };
        EntityDispositionInformations.ID = 7114;
        return EntityDispositionInformations;
    })();
    Protocol.EntityDispositionInformations = EntityDispositionInformations;
    var EntityMovementInformations = (function() {

        function EntityMovementInformations() {
            this.id = 0;
            this.steps = [];

        }
        EntityMovementInformations.prototype.getMessageId = function() {
            return EntityMovementInformations.ID;
        };
        EntityMovementInformations.prototype.reset = function() {
            this.id = 0;
            this.steps = [];
        };
        EntityMovementInformations.prototype.serialize = function(output) {
            this.serializeAs_EntityMovementInformations(output);
        };
        EntityMovementInformations.prototype.deserialize = function(input) {
            this.deserializeAs_EntityMovementInformations(input);
        };
        EntityMovementInformations.prototype.serializeAs_EntityMovementInformations = function(output) {
            output.writeInt(this.id);
            output.writeShort(this.steps.length);
            for (var _i2 = 0; _i2 < this.steps.length; _i2++) {
                output.writeByte(this.steps[_i2]);
            }
        };
        EntityMovementInformations.prototype.deserializeAs_EntityMovementInformations = function(input) {
            var _val2 = 0;
            this.id = input.readInt();
            var _stepsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _stepsLen; _i2++) {
                _val2 = input.readByte();
                this.steps.push(_val2);
            }
        };
        EntityMovementInformations.ID = 8915;
        return EntityMovementInformations;
    })();
    Protocol.EntityMovementInformations = EntityMovementInformations;
    var AbstractFightTeamInformations = (function() {

        function AbstractFightTeamInformations() {
            this.teamId = 2;
            this.leaderId = 0;
            this.teamSide = 0;
            this.teamTypeId = 0;
            this.nbWaves = 0;

        }
        AbstractFightTeamInformations.prototype.getMessageId = function() {
            return AbstractFightTeamInformations.ID;
        };
        AbstractFightTeamInformations.prototype.reset = function() {
            this.teamId = 2;
            this.leaderId = 0;
            this.teamSide = 0;
            this.teamTypeId = 0;
            this.nbWaves = 0;
        };
        AbstractFightTeamInformations.prototype.serialize = function(output) {
            this.serializeAs_AbstractFightTeamInformations(output);
        };
        AbstractFightTeamInformations.prototype.deserialize = function(input) {
            this.deserializeAs_AbstractFightTeamInformations(input);
        };
        AbstractFightTeamInformations.prototype.serializeAs_AbstractFightTeamInformations = function(output) {
            output.writeByte(this.teamId);
            if (this.leaderId < -9007199254740990 || this.leaderId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.leaderId + ") on element leaderId.");
            }
            output.writeDouble(this.leaderId);
            output.writeByte(this.teamSide);
            output.writeByte(this.teamTypeId);
            if (this.nbWaves < 0) {
                throw new Error("Forbidden value (" + this.nbWaves + ") on element nbWaves.");
            }
            output.writeByte(this.nbWaves);
        };
        AbstractFightTeamInformations.prototype.deserializeAs_AbstractFightTeamInformations = function(input) {
            this.teamId = input.readByte();
            if (this.teamId < 0) {
                throw new Error("Forbidden value (" + this.teamId + ") on element of AbstractFightTeamInformations.teamId.");
            }
            this.leaderId = input.readDouble();
            if (this.leaderId < -9007199254740990 || this.leaderId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.leaderId + ") on element of AbstractFightTeamInformations.leaderId.");
            }
            this.teamSide = input.readByte();
            this.teamTypeId = input.readByte();
            if (this.teamTypeId < 0) {
                throw new Error("Forbidden value (" + this.teamTypeId + ") on element of AbstractFightTeamInformations.teamTypeId.");
            }
            this.nbWaves = input.readByte();
            if (this.nbWaves < 0) {
                throw new Error("Forbidden value (" + this.nbWaves + ") on element of AbstractFightTeamInformations.nbWaves.");
            }
        };
        AbstractFightTeamInformations.ID = 5839;
        return AbstractFightTeamInformations;
    })();
    Protocol.AbstractFightTeamInformations = AbstractFightTeamInformations;
    var SpawnInformation = (function() {

        function SpawnInformation() {


        }
        SpawnInformation.prototype.getMessageId = function() {
            return SpawnInformation.ID;
        };
        SpawnInformation.prototype.reset = function() {

        };
        SpawnInformation.prototype.serialize = function(output) {
            this.serializeAs_SpawnInformation(output);
        };
        SpawnInformation.prototype.deserialize = function(input) {
            this.deserializeAs_SpawnInformation(input);
        };
        SpawnInformation.prototype.serializeAs_SpawnInformation = function(output) {

        };
        SpawnInformation.prototype.deserializeAs_SpawnInformation = function(input) {

        };
        SpawnInformation.ID = 2131;
        return SpawnInformation;
    })();
    Protocol.SpawnInformation = SpawnInformation;
    var BaseSpawnMonsterInformation = (function(_super) {
        __extends(BaseSpawnMonsterInformation, _super);

        function BaseSpawnMonsterInformation() {
            this.creatureGenericId = 0;
            _super.call(this)
        }
        BaseSpawnMonsterInformation.prototype.getMessageId = function() {
            return BaseSpawnMonsterInformation.ID;
        };
        BaseSpawnMonsterInformation.prototype.reset = function() {
            this.creatureGenericId = 0;
        };
        BaseSpawnMonsterInformation.prototype.serialize = function(output) {
            this.serializeAs_BaseSpawnMonsterInformation(output);
        };
        BaseSpawnMonsterInformation.prototype.deserialize = function(input) {
            this.deserializeAs_BaseSpawnMonsterInformation(input);
        };
        BaseSpawnMonsterInformation.prototype.serializeAs_BaseSpawnMonsterInformation = function(output) {
            _super.prototype.serializeAs_SpawnInformation(this, output);
            if (this.creatureGenericId < 0) {
                throw new Error("Forbidden value (" + this.creatureGenericId + ") on element creatureGenericId.");
            }
            output.writeVarShort(this.creatureGenericId);
        };
        BaseSpawnMonsterInformation.prototype.deserializeAs_BaseSpawnMonsterInformation = function(input) {
            _super.prototype.deserializeSpawnInformation(this, input);
            this.creatureGenericId = input.readVarUhShort();
            if (this.creatureGenericId < 0) {
                throw new Error("Forbidden value (" + this.creatureGenericId + ") on element of BaseSpawnMonsterInformation.creatureGenericId.");
            }
        };
        BaseSpawnMonsterInformation.ID = 1071;
        return BaseSpawnMonsterInformation;
    })(SpawnInformation);
    Protocol.BaseSpawnMonsterInformation = BaseSpawnMonsterInformation;
    var FightTeamInformations = (function(_super) {
        __extends(FightTeamInformations, _super);

        function FightTeamInformations() {
            this.teamMembers = [];
            _super.call(this)
        }
        FightTeamInformations.prototype.getMessageId = function() {
            return FightTeamInformations.ID;
        };
        FightTeamInformations.prototype.reset = function() {
            this.teamMembers = [];
        };
        FightTeamInformations.prototype.serialize = function(output) {
            this.serializeAs_FightTeamInformations(output);
        };
        FightTeamInformations.prototype.deserialize = function(input) {
            this.deserializeAs_FightTeamInformations(input);
        };
        FightTeamInformations.prototype.serializeAs_FightTeamInformations = function(output) {
            _super.prototype.serializeAs_AbstractFightTeamInformations(this, output);
            output.writeShort(this.teamMembers.length);
            for (var _i1 = 0; _i1 < this.teamMembers.length; _i1++) {
                output.writeShort((this.teamMembers[_i1]).getTypeId());
                (this.teamMembers[_i1]).serialize(output);
            }
        };
        FightTeamInformations.prototype.deserializeAs_FightTeamInformations = function(input) {
            var _id1 = 0;
            var _item1 = null;
            _super.prototype.deserializeAbstractFightTeamInformations(this, input);
            var _teamMembersLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _teamMembersLen; _i1++) {
                _id1 = input.readUnsignedShort();
                _item1 = ProtocolTypeManager.getInstance(FightTeamMemberInformations, _id1);
                _item1.deserialize(input);
                this.teamMembers.push(_item1);
            }
        };
        FightTeamInformations.ID = 4426;
        return FightTeamInformations;
    })(AbstractFightTeamInformations);
    Protocol.FightTeamInformations = FightTeamInformations;
    var FightAllianceTeamInformations = (function(_super) {
        __extends(FightAllianceTeamInformations, _super);

        function FightAllianceTeamInformations() {
            this.relation = 0;
            _super.call(this)
        }
        FightAllianceTeamInformations.prototype.getMessageId = function() {
            return FightAllianceTeamInformations.ID;
        };
        FightAllianceTeamInformations.prototype.reset = function() {
            this.relation = 0;
        };
        FightAllianceTeamInformations.prototype.serialize = function(output) {
            this.serializeAs_FightAllianceTeamInformations(output);
        };
        FightAllianceTeamInformations.prototype.deserialize = function(input) {
            this.deserializeAs_FightAllianceTeamInformations(input);
        };
        FightAllianceTeamInformations.prototype.serializeAs_FightAllianceTeamInformations = function(output) {
            _super.prototype.serializeAs_FightTeamInformations(this, output);
            output.writeByte(this.relation);
        };
        FightAllianceTeamInformations.prototype.deserializeAs_FightAllianceTeamInformations = function(input) {
            _super.prototype.deserializeFightTeamInformations(this, input);
            this.relation = input.readByte();
            if (this.relation < 0) {
                throw new Error("Forbidden value (" + this.relation + ") on element of FightAllianceTeamInformations.relation.");
            }
        };
        FightAllianceTeamInformations.ID = 5175;
        return FightAllianceTeamInformations;
    })(FightTeamInformations);
    Protocol.FightAllianceTeamInformations = FightAllianceTeamInformations;
    var FightCommonInformations = (function() {

        function FightCommonInformations() {
            this.fightId = 0;
            this.fightType = 0;
            this.fightTeams = [];
            this.fightTeamsPositions = [];
            this.fightTeamsOptions = [];

        }
        FightCommonInformations.prototype.getMessageId = function() {
            return FightCommonInformations.ID;
        };
        FightCommonInformations.prototype.reset = function() {
            this.fightId = 0;
            this.fightType = 0;
            this.fightTeams = [];
            this.fightTeamsPositions = [];
            this.fightTeamsOptions = [];
        };
        FightCommonInformations.prototype.serialize = function(output) {
            this.serializeAs_FightCommonInformations(output);
        };
        FightCommonInformations.prototype.deserialize = function(input) {
            this.deserializeAs_FightCommonInformations(input);
        };
        FightCommonInformations.prototype.serializeAs_FightCommonInformations = function(output) {
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeVarShort(this.fightId);
            output.writeByte(this.fightType);
            output.writeShort(this.fightTeams.length);
            for (var _i3 = 0; _i3 < this.fightTeams.length; _i3++) {
                output.writeShort((this.fightTeams[_i3]).getTypeId());
                (this.fightTeams[_i3]).serialize(output);
            }
            output.writeShort(this.fightTeamsPositions.length);
            for (var _i4 = 0; _i4 < this.fightTeamsPositions.length; _i4++) {
                if (this.fightTeamsPositions[_i4] < 0 || this.fightTeamsPositions[_i4] > 559) {
                    throw new Error("Forbidden value (" + this.fightTeamsPositions[_i4] + ") on element 4 (starting at 1) of fightTeamsPositions.");
                }
                output.writeVarShort(this.fightTeamsPositions[_i4]);
            }
            output.writeShort(this.fightTeamsOptions.length);
            for (var _i5 = 0; _i5 < this.fightTeamsOptions.length; _i5++) {
                (this.fightTeamsOptions[_i5]).serializeAs_FightOptionsInformations(output);
            }
        };
        FightCommonInformations.prototype.deserializeAs_FightCommonInformations = function(input) {
            var _id3 = 0;
            var _item3 = null;
            var _val4 = 0;
            var _item5 = null;
            this.fightId = input.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of FightCommonInformations.fightId.");
            }
            this.fightType = input.readByte();
            if (this.fightType < 0) {
                throw new Error("Forbidden value (" + this.fightType + ") on element of FightCommonInformations.fightType.");
            }
            var _fightTeamsLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _fightTeamsLen; _i3++) {
                _id3 = input.readUnsignedShort();
                _item3 = ProtocolTypeManager.getInstance(FightTeamInformations, _id3);
                _item3.deserialize(input);
                this.fightTeams.push(_item3);
            }
            var _fightTeamsPositionsLen = input.readUnsignedShort();
            for (var _i4 = 0; _i4 < _fightTeamsPositionsLen; _i4++) {
                _val4 = input.readVarUhShort();
                if (_val4 < 0 || _val4 > 559) {
                    throw new Error("Forbidden value (" + _val4 + ") on elements of fightTeamsPositions.");
                }
                this.fightTeamsPositions.push(_val4);
            }
            var _fightTeamsOptionsLen = input.readUnsignedShort();
            for (var _i5 = 0; _i5 < _fightTeamsOptionsLen; _i5++) {
                _item5 = new FightOptionsInformations();
                _item5.deserialize(input);
                this.fightTeamsOptions.push(_item5);
            }
        };
        FightCommonInformations.ID = 3668;
        return FightCommonInformations;
    })();
    Protocol.FightCommonInformations = FightCommonInformations;
    var FightExternalInformations = (function() {

        function FightExternalInformations() {
            this.fightId = 0;
            this.fightType = 0;
            this.fightStart = 0;
            this.fightSpectatorLocked = false;
            this.fightTeams = [];
            this.fightTeamsOptions = [];

        }
        FightExternalInformations.prototype.getMessageId = function() {
            return FightExternalInformations.ID;
        };
        FightExternalInformations.prototype.reset = function() {
            this.fightId = 0;
            this.fightType = 0;
            this.fightStart = 0;
            this.fightSpectatorLocked = false;
            this.fightTeams = [];
            this.fightTeamsOptions = [];
        };
        FightExternalInformations.prototype.serialize = function(output) {
            this.serializeAs_FightExternalInformations(output);
        };
        FightExternalInformations.prototype.deserialize = function(input) {
            this.deserializeAs_FightExternalInformations(input);
        };
        FightExternalInformations.prototype.serializeAs_FightExternalInformations = function(output) {
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeVarShort(this.fightId);
            output.writeByte(this.fightType);
            if (this.fightStart < 0) {
                throw new Error("Forbidden value (" + this.fightStart + ") on element fightStart.");
            }
            output.writeInt(this.fightStart);
            output.writeBoolean(this.fightSpectatorLocked);
            for (var _i5 = 0; _i5 < 2; _i5++) {
                this.fightTeams[_i5].serializeAs_FightTeamLightInformations(output);
            }
            for (var _i6 = 0; _i6 < 2; _i6++) {
                this.fightTeamsOptions[_i6].serializeAs_FightOptionsInformations(output);
            }
        };
        FightExternalInformations.prototype.deserializeAs_FightExternalInformations = function(input) {
            this.fightId = input.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of FightExternalInformations.fightId.");
            }
            this.fightType = input.readByte();
            if (this.fightType < 0) {
                throw new Error("Forbidden value (" + this.fightType + ") on element of FightExternalInformations.fightType.");
            }
            this.fightStart = input.readInt();
            if (this.fightStart < 0) {
                throw new Error("Forbidden value (" + this.fightStart + ") on element of FightExternalInformations.fightStart.");
            }
            this.fightSpectatorLocked = input.readBoolean();
            for (var _i5 = 0; _i5 < 2; _i5++) {
                this.fightTeams[_i5] = new FightTeamLightInformations();
                this.fightTeams[_i5].deserialize(input);
            }
            for (var _i6 = 0; _i6 < 2; _i6++) {
                this.fightTeamsOptions[_i6] = new FightOptionsInformations();
                this.fightTeamsOptions[_i6].deserialize(input);
            }
        };
        FightExternalInformations.ID = 1397;
        return FightExternalInformations;
    })();
    Protocol.FightExternalInformations = FightExternalInformations;
    var FightLoot = (function() {

        function FightLoot() {
            this.objects = [];
            this.kamas = 0;

        }
        FightLoot.prototype.getMessageId = function() {
            return FightLoot.ID;
        };
        FightLoot.prototype.reset = function() {
            this.objects = [];
            this.kamas = 0;
        };
        FightLoot.prototype.serialize = function(output) {
            this.serializeAs_FightLoot(output);
        };
        FightLoot.prototype.deserialize = function(input) {
            this.deserializeAs_FightLoot(input);
        };
        FightLoot.prototype.serializeAs_FightLoot = function(output) {
            output.writeShort(this.objects.length);
            for (var _i1 = 0; _i1 < this.objects.length; _i1++) {
                if (this.objects[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.objects[_i1] + ") on element 1 (starting at 1) of objects.");
                }
                output.writeVarInt(this.objects[_i1]);
            }
            if (this.kamas < 0 || this.kamas > 9007199254740990) {
                throw new Error("Forbidden value (" + this.kamas + ") on element kamas.");
            }
            output.writeVarLong(this.kamas);
        };
        FightLoot.prototype.deserializeAs_FightLoot = function(input) {
            var _val1 = 0;
            var _objectsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _objectsLen; _i1++) {
                _val1 = input.readVarUhInt();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of objects.");
                }
                this.objects.push(_val1);
            }
            this.kamas = input.readVarUhLong();
            if (this.kamas < 0 || this.kamas > 9007199254740990) {
                throw new Error("Forbidden value (" + this.kamas + ") on element of FightLoot.kamas.");
            }
        };
        FightLoot.ID = 7757;
        return FightLoot;
    })();
    Protocol.FightLoot = FightLoot;
    var FightOptionsInformations = (function() {

        function FightOptionsInformations() {
            this.isSecret = false;
            this.isRestrictedToPartyOnly = false;
            this.isClosed = false;
            this.isAskingForHelp = false;

        }
        FightOptionsInformations.prototype.getMessageId = function() {
            return FightOptionsInformations.ID;
        };
        FightOptionsInformations.prototype.reset = function() {
            this.isSecret = false;
            this.isRestrictedToPartyOnly = false;
            this.isClosed = false;
            this.isAskingForHelp = false;
        };
        FightOptionsInformations.prototype.serialize = function(output) {
            this.serializeAs_FightOptionsInformations(output);
        };
        FightOptionsInformations.prototype.deserialize = function(input) {
            this.deserializeAs_FightOptionsInformations(input);
        };
        FightOptionsInformations.prototype.serializeAs_FightOptionsInformations = function(output) {
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.isSecret);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.isRestrictedToPartyOnly);
            _box0 = BooleanByteWrapper.setFlag(_box0, 2, this.isClosed);
            _box0 = BooleanByteWrapper.setFlag(_box0, 3, this.isAskingForHelp);
            output.writeByte(_box0);
        };
        FightOptionsInformations.prototype.deserializeAs_FightOptionsInformations = function(input) {
            this.deserializeByteBoxes(input);
        };
        FightOptionsInformations.ID = 7650;
        return FightOptionsInformations;
    })();
    Protocol.FightOptionsInformations = FightOptionsInformations;
    var FightResultAdditionalData = (function() {

        function FightResultAdditionalData() {


        }
        FightResultAdditionalData.prototype.getMessageId = function() {
            return FightResultAdditionalData.ID;
        };
        FightResultAdditionalData.prototype.reset = function() {

        };
        FightResultAdditionalData.prototype.serialize = function(output) {
            this.serializeAs_FightResultAdditionalData(output);
        };
        FightResultAdditionalData.prototype.deserialize = function(input) {
            this.deserializeAs_FightResultAdditionalData(input);
        };
        FightResultAdditionalData.prototype.serializeAs_FightResultAdditionalData = function(output) {

        };
        FightResultAdditionalData.prototype.deserializeAs_FightResultAdditionalData = function(input) {

        };
        FightResultAdditionalData.ID = 5618;
        return FightResultAdditionalData;
    })();
    Protocol.FightResultAdditionalData = FightResultAdditionalData;
    var FightResultExperienceData = (function(_super) {
        __extends(FightResultExperienceData, _super);

        function FightResultExperienceData() {
            this.experience = 0;
            this.showExperience = false;
            this.experienceLevelFloor = 0;
            this.showExperienceLevelFloor = false;
            this.experienceNextLevelFloor = 0;
            this.showExperienceNextLevelFloor = false;
            this.experienceFightDelta = 0;
            this.showExperienceFightDelta = false;
            this.experienceForGuild = 0;
            this.showExperienceForGuild = false;
            this.experienceForMount = 0;
            this.showExperienceForMount = false;
            this.isIncarnationExperience = false;
            this.rerollExperienceMul = 0;
            _super.call(this)
        }
        FightResultExperienceData.prototype.getMessageId = function() {
            return FightResultExperienceData.ID;
        };
        FightResultExperienceData.prototype.reset = function() {
            this.experience = 0;
            this.showExperience = false;
            this.experienceLevelFloor = 0;
            this.showExperienceLevelFloor = false;
            this.experienceNextLevelFloor = 0;
            this.showExperienceNextLevelFloor = false;
            this.experienceFightDelta = 0;
            this.showExperienceFightDelta = false;
            this.experienceForGuild = 0;
            this.showExperienceForGuild = false;
            this.experienceForMount = 0;
            this.showExperienceForMount = false;
            this.isIncarnationExperience = false;
            this.rerollExperienceMul = 0;
        };
        FightResultExperienceData.prototype.serialize = function(output) {
            this.serializeAs_FightResultExperienceData(output);
        };
        FightResultExperienceData.prototype.deserialize = function(input) {
            this.deserializeAs_FightResultExperienceData(input);
        };
        FightResultExperienceData.prototype.serializeAs_FightResultExperienceData = function(output) {
            _super.prototype.serializeAs_FightResultAdditionalData(this, output);
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.showExperience);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.showExperienceLevelFloor);
            _box0 = BooleanByteWrapper.setFlag(_box0, 2, this.showExperienceNextLevelFloor);
            _box0 = BooleanByteWrapper.setFlag(_box0, 3, this.showExperienceFightDelta);
            _box0 = BooleanByteWrapper.setFlag(_box0, 4, this.showExperienceForGuild);
            _box0 = BooleanByteWrapper.setFlag(_box0, 5, this.showExperienceForMount);
            _box0 = BooleanByteWrapper.setFlag(_box0, 6, this.isIncarnationExperience);
            output.writeByte(_box0);
            if (this.experience < 0 || this.experience > 9007199254740990) {
                throw new Error("Forbidden value (" + this.experience + ") on element experience.");
            }
            output.writeVarLong(this.experience);
            if (this.experienceLevelFloor < 0 || this.experienceLevelFloor > 9007199254740990) {
                throw new Error("Forbidden value (" + this.experienceLevelFloor + ") on element experienceLevelFloor.");
            }
            output.writeVarLong(this.experienceLevelFloor);
            if (this.experienceNextLevelFloor < 0 || this.experienceNextLevelFloor > 9007199254740990) {
                throw new Error("Forbidden value (" + this.experienceNextLevelFloor + ") on element experienceNextLevelFloor.");
            }
            output.writeVarLong(this.experienceNextLevelFloor);
            if (this.experienceFightDelta < 0 || this.experienceFightDelta > 9007199254740990) {
                throw new Error("Forbidden value (" + this.experienceFightDelta + ") on element experienceFightDelta.");
            }
            output.writeVarLong(this.experienceFightDelta);
            if (this.experienceForGuild < 0 || this.experienceForGuild > 9007199254740990) {
                throw new Error("Forbidden value (" + this.experienceForGuild + ") on element experienceForGuild.");
            }
            output.writeVarLong(this.experienceForGuild);
            if (this.experienceForMount < 0 || this.experienceForMount > 9007199254740990) {
                throw new Error("Forbidden value (" + this.experienceForMount + ") on element experienceForMount.");
            }
            output.writeVarLong(this.experienceForMount);
            if (this.rerollExperienceMul < 0) {
                throw new Error("Forbidden value (" + this.rerollExperienceMul + ") on element rerollExperienceMul.");
            }
            output.writeByte(this.rerollExperienceMul);
        };
        FightResultExperienceData.prototype.deserializeAs_FightResultExperienceData = function(input) {
            _super.prototype.deserializeFightResultAdditionalData(this, input);
            this.deserializeByteBoxes(input);
            this.experience = input.readVarUhLong();
            if (this.experience < 0 || this.experience > 9007199254740990) {
                throw new Error("Forbidden value (" + this.experience + ") on element of FightResultExperienceData.experience.");
            }
            this.experienceLevelFloor = input.readVarUhLong();
            if (this.experienceLevelFloor < 0 || this.experienceLevelFloor > 9007199254740990) {
                throw new Error("Forbidden value (" + this.experienceLevelFloor + ") on element of FightResultExperienceData.experienceLevelFloor.");
            }
            this.experienceNextLevelFloor = input.readVarUhLong();
            if (this.experienceNextLevelFloor < 0 || this.experienceNextLevelFloor > 9007199254740990) {
                throw new Error("Forbidden value (" + this.experienceNextLevelFloor + ") on element of FightResultExperienceData.experienceNextLevelFloor.");
            }
            this.experienceFightDelta = input.readVarUhLong();
            if (this.experienceFightDelta < 0 || this.experienceFightDelta > 9007199254740990) {
                throw new Error("Forbidden value (" + this.experienceFightDelta + ") on element of FightResultExperienceData.experienceFightDelta.");
            }
            this.experienceForGuild = input.readVarUhLong();
            if (this.experienceForGuild < 0 || this.experienceForGuild > 9007199254740990) {
                throw new Error("Forbidden value (" + this.experienceForGuild + ") on element of FightResultExperienceData.experienceForGuild.");
            }
            this.experienceForMount = input.readVarUhLong();
            if (this.experienceForMount < 0 || this.experienceForMount > 9007199254740990) {
                throw new Error("Forbidden value (" + this.experienceForMount + ") on element of FightResultExperienceData.experienceForMount.");
            }
            this.rerollExperienceMul = input.readByte();
            if (this.rerollExperienceMul < 0) {
                throw new Error("Forbidden value (" + this.rerollExperienceMul + ") on element of FightResultExperienceData.rerollExperienceMul.");
            }
        };
        FightResultExperienceData.ID = 2135;
        return FightResultExperienceData;
    })(FightResultAdditionalData);
    Protocol.FightResultExperienceData = FightResultExperienceData;
    var FightResultListEntry = (function() {

        function FightResultListEntry() {
            this.outcome = 0;
            this.wave = 0;
            this.rewards = new FightLoot();

        }
        FightResultListEntry.prototype.getMessageId = function() {
            return FightResultListEntry.ID;
        };
        FightResultListEntry.prototype.reset = function() {
            this.outcome = 0;
            this.wave = 0;
            this.rewards = new FightLoot();
        };
        FightResultListEntry.prototype.serialize = function(output) {
            this.serializeAs_FightResultListEntry(output);
        };
        FightResultListEntry.prototype.deserialize = function(input) {
            this.deserializeAs_FightResultListEntry(input);
        };
        FightResultListEntry.prototype.serializeAs_FightResultListEntry = function(output) {
            output.writeVarShort(this.outcome);
            if (this.wave < 0) {
                throw new Error("Forbidden value (" + this.wave + ") on element wave.");
            }
            output.writeByte(this.wave);
            this.rewards.serializeAs_FightLoot(output);
        };
        FightResultListEntry.prototype.deserializeAs_FightResultListEntry = function(input) {
            this.outcome = input.readVarUhShort();
            if (this.outcome < 0) {
                throw new Error("Forbidden value (" + this.outcome + ") on element of FightResultListEntry.outcome.");
            }
            this.wave = input.readByte();
            if (this.wave < 0) {
                throw new Error("Forbidden value (" + this.wave + ") on element of FightResultListEntry.wave.");
            }
            this.rewards = new FightLoot();
            this.rewards.deserialize(input);
        };
        FightResultListEntry.ID = 5766;
        return FightResultListEntry;
    })();
    Protocol.FightResultListEntry = FightResultListEntry;
    var FightResultFighterListEntry = (function(_super) {
        __extends(FightResultFighterListEntry, _super);

        function FightResultFighterListEntry() {
            this.id = 0;
            this.alive = false;
            _super.call(this)
        }
        FightResultFighterListEntry.prototype.getMessageId = function() {
            return FightResultFighterListEntry.ID;
        };
        FightResultFighterListEntry.prototype.reset = function() {
            this.id = 0;
            this.alive = false;
        };
        FightResultFighterListEntry.prototype.serialize = function(output) {
            this.serializeAs_FightResultFighterListEntry(output);
        };
        FightResultFighterListEntry.prototype.deserialize = function(input) {
            this.deserializeAs_FightResultFighterListEntry(input);
        };
        FightResultFighterListEntry.prototype.serializeAs_FightResultFighterListEntry = function(output) {
            _super.prototype.serializeAs_FightResultListEntry(this, output);
            if (this.id < -9007199254740990 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeDouble(this.id);
            output.writeBoolean(this.alive);
        };
        FightResultFighterListEntry.prototype.deserializeAs_FightResultFighterListEntry = function(input) {
            _super.prototype.deserializeFightResultListEntry(this, input);
            this.id = input.readDouble();
            if (this.id < -9007199254740990 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element of FightResultFighterListEntry.id.");
            }
            this.alive = input.readBoolean();
        };
        FightResultFighterListEntry.ID = 7733;
        return FightResultFighterListEntry;
    })(FightResultListEntry);
    Protocol.FightResultFighterListEntry = FightResultFighterListEntry;
    var FightResultMutantListEntry = (function(_super) {
        __extends(FightResultMutantListEntry, _super);

        function FightResultMutantListEntry() {
            this.level = 0;
            _super.call(this)
        }
        FightResultMutantListEntry.prototype.getMessageId = function() {
            return FightResultMutantListEntry.ID;
        };
        FightResultMutantListEntry.prototype.reset = function() {
            this.level = 0;
        };
        FightResultMutantListEntry.prototype.serialize = function(output) {
            this.serializeAs_FightResultMutantListEntry(output);
        };
        FightResultMutantListEntry.prototype.deserialize = function(input) {
            this.deserializeAs_FightResultMutantListEntry(input);
        };
        FightResultMutantListEntry.prototype.serializeAs_FightResultMutantListEntry = function(output) {
            _super.prototype.serializeAs_FightResultFighterListEntry(this, output);
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeVarShort(this.level);
        };
        FightResultMutantListEntry.prototype.deserializeAs_FightResultMutantListEntry = function(input) {
            _super.prototype.deserializeFightResultFighterListEntry(this, input);
            this.level = input.readVarUhShort();
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element of FightResultMutantListEntry.level.");
            }
        };
        FightResultMutantListEntry.ID = 6988;
        return FightResultMutantListEntry;
    })(FightResultFighterListEntry);
    Protocol.FightResultMutantListEntry = FightResultMutantListEntry;
    var FightResultPlayerListEntry = (function(_super) {
        __extends(FightResultPlayerListEntry, _super);

        function FightResultPlayerListEntry() {
            this.level = 0;
            this.additional = [];
            _super.call(this)
        }
        FightResultPlayerListEntry.prototype.getMessageId = function() {
            return FightResultPlayerListEntry.ID;
        };
        FightResultPlayerListEntry.prototype.reset = function() {
            this.level = 0;
            this.additional = [];
        };
        FightResultPlayerListEntry.prototype.serialize = function(output) {
            this.serializeAs_FightResultPlayerListEntry(output);
        };
        FightResultPlayerListEntry.prototype.deserialize = function(input) {
            this.deserializeAs_FightResultPlayerListEntry(input);
        };
        FightResultPlayerListEntry.prototype.serializeAs_FightResultPlayerListEntry = function(output) {
            _super.prototype.serializeAs_FightResultFighterListEntry(this, output);
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeVarShort(this.level);
            output.writeShort(this.additional.length);
            for (var _i2 = 0; _i2 < this.additional.length; _i2++) {
                output.writeShort((this.additional[_i2]).getTypeId());
                (this.additional[_i2]).serialize(output);
            }
        };
        FightResultPlayerListEntry.prototype.deserializeAs_FightResultPlayerListEntry = function(input) {
            var _id2 = 0;
            var _item2 = null;
            _super.prototype.deserializeFightResultFighterListEntry(this, input);
            this.level = input.readVarUhShort();
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element of FightResultPlayerListEntry.level.");
            }
            var _additionalLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _additionalLen; _i2++) {
                _id2 = input.readUnsignedShort();
                _item2 = ProtocolTypeManager.getInstance(FightResultAdditionalData, _id2);
                _item2.deserialize(input);
                this.additional.push(_item2);
            }
        };
        FightResultPlayerListEntry.ID = 6765;
        return FightResultPlayerListEntry;
    })(FightResultFighterListEntry);
    Protocol.FightResultPlayerListEntry = FightResultPlayerListEntry;
    var FightResultPvpData = (function(_super) {
        __extends(FightResultPvpData, _super);

        function FightResultPvpData() {
            this.grade = 0;
            this.minHonorForGrade = 0;
            this.maxHonorForGrade = 0;
            this.honor = 0;
            this.honorDelta = 0;
            _super.call(this)
        }
        FightResultPvpData.prototype.getMessageId = function() {
            return FightResultPvpData.ID;
        };
        FightResultPvpData.prototype.reset = function() {
            this.grade = 0;
            this.minHonorForGrade = 0;
            this.maxHonorForGrade = 0;
            this.honor = 0;
            this.honorDelta = 0;
        };
        FightResultPvpData.prototype.serialize = function(output) {
            this.serializeAs_FightResultPvpData(output);
        };
        FightResultPvpData.prototype.deserialize = function(input) {
            this.deserializeAs_FightResultPvpData(input);
        };
        FightResultPvpData.prototype.serializeAs_FightResultPvpData = function(output) {
            _super.prototype.serializeAs_FightResultAdditionalData(this, output);
            if (this.grade < 0 || this.grade > 255) {
                throw new Error("Forbidden value (" + this.grade + ") on element grade.");
            }
            output.writeByte(this.grade);
            if (this.minHonorForGrade < 0 || this.minHonorForGrade > 20000) {
                throw new Error("Forbidden value (" + this.minHonorForGrade + ") on element minHonorForGrade.");
            }
            output.writeVarShort(this.minHonorForGrade);
            if (this.maxHonorForGrade < 0 || this.maxHonorForGrade > 20000) {
                throw new Error("Forbidden value (" + this.maxHonorForGrade + ") on element maxHonorForGrade.");
            }
            output.writeVarShort(this.maxHonorForGrade);
            if (this.honor < 0 || this.honor > 20000) {
                throw new Error("Forbidden value (" + this.honor + ") on element honor.");
            }
            output.writeVarShort(this.honor);
            output.writeVarShort(this.honorDelta);
        };
        FightResultPvpData.prototype.deserializeAs_FightResultPvpData = function(input) {
            _super.prototype.deserializeFightResultAdditionalData(this, input);
            this.grade = input.readUnsignedByte();
            if (this.grade < 0 || this.grade > 255) {
                throw new Error("Forbidden value (" + this.grade + ") on element of FightResultPvpData.grade.");
            }
            this.minHonorForGrade = input.readVarUhShort();
            if (this.minHonorForGrade < 0 || this.minHonorForGrade > 20000) {
                throw new Error("Forbidden value (" + this.minHonorForGrade + ") on element of FightResultPvpData.minHonorForGrade.");
            }
            this.maxHonorForGrade = input.readVarUhShort();
            if (this.maxHonorForGrade < 0 || this.maxHonorForGrade > 20000) {
                throw new Error("Forbidden value (" + this.maxHonorForGrade + ") on element of FightResultPvpData.maxHonorForGrade.");
            }
            this.honor = input.readVarUhShort();
            if (this.honor < 0 || this.honor > 20000) {
                throw new Error("Forbidden value (" + this.honor + ") on element of FightResultPvpData.honor.");
            }
            this.honorDelta = input.readVarShort();
        };
        FightResultPvpData.ID = 3462;
        return FightResultPvpData;
    })(FightResultAdditionalData);
    Protocol.FightResultPvpData = FightResultPvpData;
    var FightResultTaxCollectorListEntry = (function(_super) {
        __extends(FightResultTaxCollectorListEntry, _super);

        function FightResultTaxCollectorListEntry() {
            this.level = 0;
            this.guildInfo = new BasicGuildInformations();
            this.experienceForGuild = 0;
            _super.call(this)
        }
        FightResultTaxCollectorListEntry.prototype.getMessageId = function() {
            return FightResultTaxCollectorListEntry.ID;
        };
        FightResultTaxCollectorListEntry.prototype.reset = function() {
            this.level = 0;
            this.guildInfo = new BasicGuildInformations();
            this.experienceForGuild = 0;
        };
        FightResultTaxCollectorListEntry.prototype.serialize = function(output) {
            this.serializeAs_FightResultTaxCollectorListEntry(output);
        };
        FightResultTaxCollectorListEntry.prototype.deserialize = function(input) {
            this.deserializeAs_FightResultTaxCollectorListEntry(input);
        };
        FightResultTaxCollectorListEntry.prototype.serializeAs_FightResultTaxCollectorListEntry = function(output) {
            _super.prototype.serializeAs_FightResultFighterListEntry(this, output);
            if (this.level < 1 || this.level > 200) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeByte(this.level);
            this.guildInfo.serializeAs_BasicGuildInformations(output);
            output.writeInt(this.experienceForGuild);
        };
        FightResultTaxCollectorListEntry.prototype.deserializeAs_FightResultTaxCollectorListEntry = function(input) {
            _super.prototype.deserializeFightResultFighterListEntry(this, input);
            this.level = input.readUnsignedByte();
            if (this.level < 1 || this.level > 200) {
                throw new Error("Forbidden value (" + this.level + ") on element of FightResultTaxCollectorListEntry.level.");
            }
            this.guildInfo = new BasicGuildInformations();
            this.guildInfo.deserialize(input);
            this.experienceForGuild = input.readInt();
        };
        FightResultTaxCollectorListEntry.ID = 6240;
        return FightResultTaxCollectorListEntry;
    })(FightResultFighterListEntry);
    Protocol.FightResultTaxCollectorListEntry = FightResultTaxCollectorListEntry;
    var FightStartingPositions = (function() {

        function FightStartingPositions() {
            this.positionsForChallengers = [];
            this.positionsForDefenders = [];

        }
        FightStartingPositions.prototype.getMessageId = function() {
            return FightStartingPositions.ID;
        };
        FightStartingPositions.prototype.reset = function() {
            this.positionsForChallengers = [];
            this.positionsForDefenders = [];
        };
        FightStartingPositions.prototype.serialize = function(output) {
            this.serializeAs_FightStartingPositions(output);
        };
        FightStartingPositions.prototype.deserialize = function(input) {
            this.deserializeAs_FightStartingPositions(input);
        };
        FightStartingPositions.prototype.serializeAs_FightStartingPositions = function(output) {
            output.writeShort(this.positionsForChallengers.length);
            for (var _i1 = 0; _i1 < this.positionsForChallengers.length; _i1++) {
                if (this.positionsForChallengers[_i1] < 0 || this.positionsForChallengers[_i1] > 559) {
                    throw new Error("Forbidden value (" + this.positionsForChallengers[_i1] + ") on element 1 (starting at 1) of positionsForChallengers.");
                }
                output.writeVarShort(this.positionsForChallengers[_i1]);
            }
            output.writeShort(this.positionsForDefenders.length);
            for (var _i2 = 0; _i2 < this.positionsForDefenders.length; _i2++) {
                if (this.positionsForDefenders[_i2] < 0 || this.positionsForDefenders[_i2] > 559) {
                    throw new Error("Forbidden value (" + this.positionsForDefenders[_i2] + ") on element 2 (starting at 1) of positionsForDefenders.");
                }
                output.writeVarShort(this.positionsForDefenders[_i2]);
            }
        };
        FightStartingPositions.prototype.deserializeAs_FightStartingPositions = function(input) {
            var _val1 = 0;
            var _val2 = 0;
            var _positionsForChallengersLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _positionsForChallengersLen; _i1++) {
                _val1 = input.readVarUhShort();
                if (_val1 < 0 || _val1 > 559) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of positionsForChallengers.");
                }
                this.positionsForChallengers.push(_val1);
            }
            var _positionsForDefendersLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _positionsForDefendersLen; _i2++) {
                _val2 = input.readVarUhShort();
                if (_val2 < 0 || _val2 > 559) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of positionsForDefenders.");
                }
                this.positionsForDefenders.push(_val2);
            }
        };
        FightStartingPositions.ID = 9262;
        return FightStartingPositions;
    })();
    Protocol.FightStartingPositions = FightStartingPositions;
    var FightTeamLightInformations = (function(_super) {
        __extends(FightTeamLightInformations, _super);

        function FightTeamLightInformations() {
            this.teamMembersCount = 0;
            this.meanLevel = 0;
            this.hasFriend = false;
            this.hasGuildMember = false;
            this.hasAllianceMember = false;
            this.hasGroupMember = false;
            this.hasMyTaxCollector = false;
            _super.call(this)
        }
        FightTeamLightInformations.prototype.getMessageId = function() {
            return FightTeamLightInformations.ID;
        };
        FightTeamLightInformations.prototype.reset = function() {
            this.teamMembersCount = 0;
            this.meanLevel = 0;
            this.hasFriend = false;
            this.hasGuildMember = false;
            this.hasAllianceMember = false;
            this.hasGroupMember = false;
            this.hasMyTaxCollector = false;
        };
        FightTeamLightInformations.prototype.serialize = function(output) {
            this.serializeAs_FightTeamLightInformations(output);
        };
        FightTeamLightInformations.prototype.deserialize = function(input) {
            this.deserializeAs_FightTeamLightInformations(input);
        };
        FightTeamLightInformations.prototype.serializeAs_FightTeamLightInformations = function(output) {
            _super.prototype.serializeAs_AbstractFightTeamInformations(this, output);
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.hasFriend);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.hasGuildMember);
            _box0 = BooleanByteWrapper.setFlag(_box0, 2, this.hasAllianceMember);
            _box0 = BooleanByteWrapper.setFlag(_box0, 3, this.hasGroupMember);
            _box0 = BooleanByteWrapper.setFlag(_box0, 4, this.hasMyTaxCollector);
            output.writeByte(_box0);
            if (this.teamMembersCount < 0) {
                throw new Error("Forbidden value (" + this.teamMembersCount + ") on element teamMembersCount.");
            }
            output.writeByte(this.teamMembersCount);
            if (this.meanLevel < 0) {
                throw new Error("Forbidden value (" + this.meanLevel + ") on element meanLevel.");
            }
            output.writeVarInt(this.meanLevel);
        };
        FightTeamLightInformations.prototype.deserializeAs_FightTeamLightInformations = function(input) {
            _super.prototype.deserializeAbstractFightTeamInformations(this, input);
            this.deserializeByteBoxes(input);
            this.teamMembersCount = input.readByte();
            if (this.teamMembersCount < 0) {
                throw new Error("Forbidden value (" + this.teamMembersCount + ") on element of FightTeamLightInformations.teamMembersCount.");
            }
            this.meanLevel = input.readVarUhInt();
            if (this.meanLevel < 0) {
                throw new Error("Forbidden value (" + this.meanLevel + ") on element of FightTeamLightInformations.meanLevel.");
            }
        };
        FightTeamLightInformations.ID = 6266;
        return FightTeamLightInformations;
    })(AbstractFightTeamInformations);
    Protocol.FightTeamLightInformations = FightTeamLightInformations;
    var FightTeamMemberInformations = (function() {

        function FightTeamMemberInformations() {
            this.id = 0;

        }
        FightTeamMemberInformations.prototype.getMessageId = function() {
            return FightTeamMemberInformations.ID;
        };
        FightTeamMemberInformations.prototype.reset = function() {
            this.id = 0;
        };
        FightTeamMemberInformations.prototype.serialize = function(output) {
            this.serializeAs_FightTeamMemberInformations(output);
        };
        FightTeamMemberInformations.prototype.deserialize = function(input) {
            this.deserializeAs_FightTeamMemberInformations(input);
        };
        FightTeamMemberInformations.prototype.serializeAs_FightTeamMemberInformations = function(output) {
            if (this.id < -9007199254740990 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeDouble(this.id);
        };
        FightTeamMemberInformations.prototype.deserializeAs_FightTeamMemberInformations = function(input) {
            this.id = input.readDouble();
            if (this.id < -9007199254740990 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element of FightTeamMemberInformations.id.");
            }
        };
        FightTeamMemberInformations.ID = 5931;
        return FightTeamMemberInformations;
    })();
    Protocol.FightTeamMemberInformations = FightTeamMemberInformations;
    var FightTeamMemberCharacterInformations = (function(_super) {
        __extends(FightTeamMemberCharacterInformations, _super);

        function FightTeamMemberCharacterInformations() {
            this.name = "";
            this.level = 0;
            _super.call(this)
        }
        FightTeamMemberCharacterInformations.prototype.getMessageId = function() {
            return FightTeamMemberCharacterInformations.ID;
        };
        FightTeamMemberCharacterInformations.prototype.reset = function() {
            this.name = "";
            this.level = 0;
        };
        FightTeamMemberCharacterInformations.prototype.serialize = function(output) {
            this.serializeAs_FightTeamMemberCharacterInformations(output);
        };
        FightTeamMemberCharacterInformations.prototype.deserialize = function(input) {
            this.deserializeAs_FightTeamMemberCharacterInformations(input);
        };
        FightTeamMemberCharacterInformations.prototype.serializeAs_FightTeamMemberCharacterInformations = function(output) {
            _super.prototype.serializeAs_FightTeamMemberInformations(this, output);
            output.writeUTF(this.name);
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeVarShort(this.level);
        };
        FightTeamMemberCharacterInformations.prototype.deserializeAs_FightTeamMemberCharacterInformations = function(input) {
            _super.prototype.deserializeFightTeamMemberInformations(this, input);
            this.name = input.readUTF();
            this.level = input.readVarUhShort();
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element of FightTeamMemberCharacterInformations.level.");
            }
        };
        FightTeamMemberCharacterInformations.ID = 9851;
        return FightTeamMemberCharacterInformations;
    })(FightTeamMemberInformations);
    Protocol.FightTeamMemberCharacterInformations = FightTeamMemberCharacterInformations;
    var FightTeamMemberEntityInformation = (function(_super) {
        __extends(FightTeamMemberEntityInformation, _super);

        function FightTeamMemberEntityInformation() {
            this.entityModelId = 0;
            this.level = 0;
            this.masterId = 0;
            _super.call(this)
        }
        FightTeamMemberEntityInformation.prototype.getMessageId = function() {
            return FightTeamMemberEntityInformation.ID;
        };
        FightTeamMemberEntityInformation.prototype.reset = function() {
            this.entityModelId = 0;
            this.level = 0;
            this.masterId = 0;
        };
        FightTeamMemberEntityInformation.prototype.serialize = function(output) {
            this.serializeAs_FightTeamMemberEntityInformation(output);
        };
        FightTeamMemberEntityInformation.prototype.deserialize = function(input) {
            this.deserializeAs_FightTeamMemberEntityInformation(input);
        };
        FightTeamMemberEntityInformation.prototype.serializeAs_FightTeamMemberEntityInformation = function(output) {
            _super.prototype.serializeAs_FightTeamMemberInformations(this, output);
            if (this.entityModelId < 0) {
                throw new Error("Forbidden value (" + this.entityModelId + ") on element entityModelId.");
            }
            output.writeByte(this.entityModelId);
            if (this.level < 1 || this.level > 200) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeVarShort(this.level);
            if (this.masterId < -9007199254740990 || this.masterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.masterId + ") on element masterId.");
            }
            output.writeDouble(this.masterId);
        };
        FightTeamMemberEntityInformation.prototype.deserializeAs_FightTeamMemberEntityInformation = function(input) {
            _super.prototype.deserializeFightTeamMemberInformations(this, input);
            this.entityModelId = input.readByte();
            if (this.entityModelId < 0) {
                throw new Error("Forbidden value (" + this.entityModelId + ") on element of FightTeamMemberEntityInformation.entityModelId.");
            }
            this.level = input.readVarUhShort();
            if (this.level < 1 || this.level > 200) {
                throw new Error("Forbidden value (" + this.level + ") on element of FightTeamMemberEntityInformation.level.");
            }
            this.masterId = input.readDouble();
            if (this.masterId < -9007199254740990 || this.masterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.masterId + ") on element of FightTeamMemberEntityInformation.masterId.");
            }
        };
        FightTeamMemberEntityInformation.ID = 6288;
        return FightTeamMemberEntityInformation;
    })(FightTeamMemberInformations);
    Protocol.FightTeamMemberEntityInformation = FightTeamMemberEntityInformation;
    var FightTeamMemberMonsterInformations = (function(_super) {
        __extends(FightTeamMemberMonsterInformations, _super);

        function FightTeamMemberMonsterInformations() {
            this.monsterId = 0;
            this.grade = 0;
            _super.call(this)
        }
        FightTeamMemberMonsterInformations.prototype.getMessageId = function() {
            return FightTeamMemberMonsterInformations.ID;
        };
        FightTeamMemberMonsterInformations.prototype.reset = function() {
            this.monsterId = 0;
            this.grade = 0;
        };
        FightTeamMemberMonsterInformations.prototype.serialize = function(output) {
            this.serializeAs_FightTeamMemberMonsterInformations(output);
        };
        FightTeamMemberMonsterInformations.prototype.deserialize = function(input) {
            this.deserializeAs_FightTeamMemberMonsterInformations(input);
        };
        FightTeamMemberMonsterInformations.prototype.serializeAs_FightTeamMemberMonsterInformations = function(output) {
            _super.prototype.serializeAs_FightTeamMemberInformations(this, output);
            output.writeInt(this.monsterId);
            if (this.grade < 0) {
                throw new Error("Forbidden value (" + this.grade + ") on element grade.");
            }
            output.writeByte(this.grade);
        };
        FightTeamMemberMonsterInformations.prototype.deserializeAs_FightTeamMemberMonsterInformations = function(input) {
            _super.prototype.deserializeFightTeamMemberInformations(this, input);
            this.monsterId = input.readInt();
            this.grade = input.readByte();
            if (this.grade < 0) {
                throw new Error("Forbidden value (" + this.grade + ") on element of FightTeamMemberMonsterInformations.grade.");
            }
        };
        FightTeamMemberMonsterInformations.ID = 8081;
        return FightTeamMemberMonsterInformations;
    })(FightTeamMemberInformations);
    Protocol.FightTeamMemberMonsterInformations = FightTeamMemberMonsterInformations;
    var FightTeamMemberTaxCollectorInformations = (function(_super) {
        __extends(FightTeamMemberTaxCollectorInformations, _super);

        function FightTeamMemberTaxCollectorInformations() {
            this.firstNameId = 0;
            this.lastNameId = 0;
            this.level = 0;
            this.guildId = 0;
            this.uid = 0;
            _super.call(this)
        }
        FightTeamMemberTaxCollectorInformations.prototype.getMessageId = function() {
            return FightTeamMemberTaxCollectorInformations.ID;
        };
        FightTeamMemberTaxCollectorInformations.prototype.reset = function() {
            this.firstNameId = 0;
            this.lastNameId = 0;
            this.level = 0;
            this.guildId = 0;
            this.uid = 0;
        };
        FightTeamMemberTaxCollectorInformations.prototype.serialize = function(output) {
            this.serializeAs_FightTeamMemberTaxCollectorInformations(output);
        };
        FightTeamMemberTaxCollectorInformations.prototype.deserialize = function(input) {
            this.deserializeAs_FightTeamMemberTaxCollectorInformations(input);
        };
        FightTeamMemberTaxCollectorInformations.prototype.serializeAs_FightTeamMemberTaxCollectorInformations = function(output) {
            _super.prototype.serializeAs_FightTeamMemberInformations(this, output);
            if (this.firstNameId < 0) {
                throw new Error("Forbidden value (" + this.firstNameId + ") on element firstNameId.");
            }
            output.writeVarShort(this.firstNameId);
            if (this.lastNameId < 0) {
                throw new Error("Forbidden value (" + this.lastNameId + ") on element lastNameId.");
            }
            output.writeVarShort(this.lastNameId);
            if (this.level < 1 || this.level > 200) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeByte(this.level);
            if (this.guildId < 0) {
                throw new Error("Forbidden value (" + this.guildId + ") on element guildId.");
            }
            output.writeVarInt(this.guildId);
            if (this.uid < 0 || this.uid > 9007199254740990) {
                throw new Error("Forbidden value (" + this.uid + ") on element uid.");
            }
            output.writeDouble(this.uid);
        };
        FightTeamMemberTaxCollectorInformations.prototype.deserializeAs_FightTeamMemberTaxCollectorInformations = function(input) {
            _super.prototype.deserializeFightTeamMemberInformations(this, input);
            this.firstNameId = input.readVarUhShort();
            if (this.firstNameId < 0) {
                throw new Error("Forbidden value (" + this.firstNameId + ") on element of FightTeamMemberTaxCollectorInformations.firstNameId.");
            }
            this.lastNameId = input.readVarUhShort();
            if (this.lastNameId < 0) {
                throw new Error("Forbidden value (" + this.lastNameId + ") on element of FightTeamMemberTaxCollectorInformations.lastNameId.");
            }
            this.level = input.readUnsignedByte();
            if (this.level < 1 || this.level > 200) {
                throw new Error("Forbidden value (" + this.level + ") on element of FightTeamMemberTaxCollectorInformations.level.");
            }
            this.guildId = input.readVarUhInt();
            if (this.guildId < 0) {
                throw new Error("Forbidden value (" + this.guildId + ") on element of FightTeamMemberTaxCollectorInformations.guildId.");
            }
            this.uid = input.readDouble();
            if (this.uid < 0 || this.uid > 9007199254740990) {
                throw new Error("Forbidden value (" + this.uid + ") on element of FightTeamMemberTaxCollectorInformations.uid.");
            }
        };
        FightTeamMemberTaxCollectorInformations.ID = 431;
        return FightTeamMemberTaxCollectorInformations;
    })(FightTeamMemberInformations);
    Protocol.FightTeamMemberTaxCollectorInformations = FightTeamMemberTaxCollectorInformations;
    var FightTeamMemberWithAllianceCharacterInformations = (function(_super) {
        __extends(FightTeamMemberWithAllianceCharacterInformations, _super);

        function FightTeamMemberWithAllianceCharacterInformations() {
            this.allianceInfos = new BasicAllianceInformations();
            _super.call(this)
        }
        FightTeamMemberWithAllianceCharacterInformations.prototype.getMessageId = function() {
            return FightTeamMemberWithAllianceCharacterInformations.ID;
        };
        FightTeamMemberWithAllianceCharacterInformations.prototype.reset = function() {
            this.allianceInfos = new BasicAllianceInformations();
        };
        FightTeamMemberWithAllianceCharacterInformations.prototype.serialize = function(output) {
            this.serializeAs_FightTeamMemberWithAllianceCharacterInformations(output);
        };
        FightTeamMemberWithAllianceCharacterInformations.prototype.deserialize = function(input) {
            this.deserializeAs_FightTeamMemberWithAllianceCharacterInformations(input);
        };
        FightTeamMemberWithAllianceCharacterInformations.prototype.serializeAs_FightTeamMemberWithAllianceCharacterInformations = function(output) {
            _super.prototype.serializeAs_FightTeamMemberCharacterInformations(this, output);
            this.allianceInfos.serializeAs_BasicAllianceInformations(output);
        };
        FightTeamMemberWithAllianceCharacterInformations.prototype.deserializeAs_FightTeamMemberWithAllianceCharacterInformations = function(input) {
            _super.prototype.deserializeFightTeamMemberCharacterInformations(this, input);
            this.allianceInfos = new BasicAllianceInformations();
            this.allianceInfos.deserialize(input);
        };
        FightTeamMemberWithAllianceCharacterInformations.ID = 8004;
        return FightTeamMemberWithAllianceCharacterInformations;
    })(FightTeamMemberCharacterInformations);
    Protocol.FightTeamMemberWithAllianceCharacterInformations = FightTeamMemberWithAllianceCharacterInformations;
    var GameContextBasicSpawnInformation = (function() {

        function GameContextBasicSpawnInformation() {
            this.teamId = 2;
            this.alive = false;
            this.informations = new GameContextActorPositionInformations();

        }
        GameContextBasicSpawnInformation.prototype.getMessageId = function() {
            return GameContextBasicSpawnInformation.ID;
        };
        GameContextBasicSpawnInformation.prototype.reset = function() {
            this.teamId = 2;
            this.alive = false;
            this.informations = new GameContextActorPositionInformations();
        };
        GameContextBasicSpawnInformation.prototype.serialize = function(output) {
            this.serializeAs_GameContextBasicSpawnInformation(output);
        };
        GameContextBasicSpawnInformation.prototype.deserialize = function(input) {
            this.deserializeAs_GameContextBasicSpawnInformation(input);
        };
        GameContextBasicSpawnInformation.prototype.serializeAs_GameContextBasicSpawnInformation = function(output) {
            output.writeByte(this.teamId);
            output.writeBoolean(this.alive);
            output.writeShort(this.informations.getTypeId());
            this.informations.serialize(output);
        };
        GameContextBasicSpawnInformation.prototype.deserializeAs_GameContextBasicSpawnInformation = function(input) {
            this.teamId = input.readByte();
            if (this.teamId < 0) {
                throw new Error("Forbidden value (" + this.teamId + ") on element of GameContextBasicSpawnInformation.teamId.");
            }
            this.alive = input.readBoolean();
            var _id3 = input.readUnsignedShort();
            this.informations = ProtocolTypeManager.getInstance(GameContextActorPositionInformations, _id3);
            this.informations.deserialize(input);
        };
        GameContextBasicSpawnInformation.ID = 7069;
        return GameContextBasicSpawnInformation;
    })();
    Protocol.GameContextBasicSpawnInformation = GameContextBasicSpawnInformation;
    var GameContextSummonsInformation = (function() {

        function GameContextSummonsInformation() {
            this.spawnInformation = new SpawnInformation();
            this.wave = 0;
            this.look = new EntityLook();
            this.stats = new GameFightMinimalStats();
            this.summons = [];

        }
        GameContextSummonsInformation.prototype.getMessageId = function() {
            return GameContextSummonsInformation.ID;
        };
        GameContextSummonsInformation.prototype.reset = function() {
            this.spawnInformation = new SpawnInformation();
            this.wave = 0;
            this.look = new EntityLook();
            this.stats = new GameFightMinimalStats();
            this.summons = [];
        };
        GameContextSummonsInformation.prototype.serialize = function(output) {
            this.serializeAs_GameContextSummonsInformation(output);
        };
        GameContextSummonsInformation.prototype.deserialize = function(input) {
            this.deserializeAs_GameContextSummonsInformation(input);
        };
        GameContextSummonsInformation.prototype.serializeAs_GameContextSummonsInformation = function(output) {
            output.writeShort(this.spawnInformation.getTypeId());
            this.spawnInformation.serialize(output);
            if (this.wave < 0) {
                throw new Error("Forbidden value (" + this.wave + ") on element wave.");
            }
            output.writeByte(this.wave);
            this.look.serializeAs_EntityLook(output);
            output.writeShort(this.stats.getTypeId());
            this.stats.serialize(output);
            output.writeShort(this.summons.length);
            for (var _i5 = 0; _i5 < this.summons.length; _i5++) {
                output.writeShort((this.summons[_i5]).getTypeId());
                (this.summons[_i5]).serialize(output);
            }
        };
        GameContextSummonsInformation.prototype.deserializeAs_GameContextSummonsInformation = function(input) {
            var _id5 = 0;
            var _item5 = null;
            var _id1 = input.readUnsignedShort();
            this.spawnInformation = ProtocolTypeManager.getInstance(SpawnInformation, _id1);
            this.spawnInformation.deserialize(input);
            this.wave = input.readByte();
            if (this.wave < 0) {
                throw new Error("Forbidden value (" + this.wave + ") on element of GameContextSummonsInformation.wave.");
            }
            this.look = new EntityLook();
            this.look.deserialize(input);
            var _id4 = input.readUnsignedShort();
            this.stats = ProtocolTypeManager.getInstance(GameFightMinimalStats, _id4);
            this.stats.deserialize(input);
            var _summonsLen = input.readUnsignedShort();
            for (var _i5 = 0; _i5 < _summonsLen; _i5++) {
                _id5 = input.readUnsignedShort();
                _item5 = ProtocolTypeManager.getInstance(GameContextBasicSpawnInformation, _id5);
                _item5.deserialize(input);
                this.summons.push(_item5);
            }
        };
        GameContextSummonsInformation.ID = 904;
        return GameContextSummonsInformation;
    })();
    Protocol.GameContextSummonsInformation = GameContextSummonsInformation;
    var GameContextActorPositionInformations = (function() {

        function GameContextActorPositionInformations() {
            this.contextualId = 0;
            this.disposition = new EntityDispositionInformations();

        }
        GameContextActorPositionInformations.prototype.getMessageId = function() {
            return GameContextActorPositionInformations.ID;
        };
        GameContextActorPositionInformations.prototype.reset = function() {
            this.contextualId = 0;
            this.disposition = new EntityDispositionInformations();
        };
        GameContextActorPositionInformations.prototype.serialize = function(output) {
            this.serializeAs_GameContextActorPositionInformations(output);
        };
        GameContextActorPositionInformations.prototype.deserialize = function(input) {
            this.deserializeAs_GameContextActorPositionInformations(input);
        };
        GameContextActorPositionInformations.prototype.serializeAs_GameContextActorPositionInformations = function(output) {
            if (this.contextualId < -9007199254740990 || this.contextualId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.contextualId + ") on element contextualId.");
            }
            output.writeDouble(this.contextualId);
            output.writeShort(this.disposition.getTypeId());
            this.disposition.serialize(output);
        };
        GameContextActorPositionInformations.prototype.deserializeAs_GameContextActorPositionInformations = function(input) {
            this.contextualId = input.readDouble();
            if (this.contextualId < -9007199254740990 || this.contextualId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.contextualId + ") on element of GameContextActorPositionInformations.contextualId.");
            }
            var _id2 = input.readUnsignedShort();
            this.disposition = ProtocolTypeManager.getInstance(EntityDispositionInformations, _id2);
            this.disposition.deserialize(input);
        };
        GameContextActorPositionInformations.ID = 9244;
        return GameContextActorPositionInformations;
    })();
    Protocol.GameContextActorPositionInformations = GameContextActorPositionInformations;
    var GameContextActorInformations = (function(_super) {
        __extends(GameContextActorInformations, _super);

        function GameContextActorInformations() {
            this.look = new EntityLook();
            _super.call(this)
        }
        GameContextActorInformations.prototype.getMessageId = function() {
            return GameContextActorInformations.ID;
        };
        GameContextActorInformations.prototype.reset = function() {
            this.look = new EntityLook();
        };
        GameContextActorInformations.prototype.serialize = function(output) {
            this.serializeAs_GameContextActorInformations(output);
        };
        GameContextActorInformations.prototype.deserialize = function(input) {
            this.deserializeAs_GameContextActorInformations(input);
        };
        GameContextActorInformations.prototype.serializeAs_GameContextActorInformations = function(output) {
            _super.prototype.serializeAs_GameContextActorPositionInformations(this, output);
            this.look.serializeAs_EntityLook(output);
        };
        GameContextActorInformations.prototype.deserializeAs_GameContextActorInformations = function(input) {
            _super.prototype.deserializeGameContextActorPositionInformations(this, input);
            this.look = new EntityLook();
            this.look.deserialize(input);
        };
        GameContextActorInformations.ID = 424;
        return GameContextActorInformations;
    })(GameContextActorPositionInformations);
    Protocol.GameContextActorInformations = GameContextActorInformations;
    var GameFightFighterInformations = (function(_super) {
        __extends(GameFightFighterInformations, _super);

        function GameFightFighterInformations() {
            this.spawnInfo = new GameContextBasicSpawnInformation();
            this.wave = 0;
            this.stats = new GameFightMinimalStats();
            this.previousPositions = [];
            _super.call(this)
        }
        GameFightFighterInformations.prototype.getMessageId = function() {
            return GameFightFighterInformations.ID;
        };
        GameFightFighterInformations.prototype.reset = function() {
            this.spawnInfo = new GameContextBasicSpawnInformation();
            this.wave = 0;
            this.stats = new GameFightMinimalStats();
            this.previousPositions = [];
        };
        GameFightFighterInformations.prototype.serialize = function(output) {
            this.serializeAs_GameFightFighterInformations(output);
        };
        GameFightFighterInformations.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightFighterInformations(input);
        };
        GameFightFighterInformations.prototype.serializeAs_GameFightFighterInformations = function(output) {
            _super.prototype.serializeAs_GameContextActorInformations(this, output);
            this.spawnInfo.serializeAs_GameContextBasicSpawnInformation(output);
            if (this.wave < 0) {
                throw new Error("Forbidden value (" + this.wave + ") on element wave.");
            }
            output.writeByte(this.wave);
            output.writeShort(this.stats.getTypeId());
            this.stats.serialize(output);
            output.writeShort(this.previousPositions.length);
            for (var _i4 = 0; _i4 < this.previousPositions.length; _i4++) {
                if (this.previousPositions[_i4] < 0 || this.previousPositions[_i4] > 559) {
                    throw new Error("Forbidden value (" + this.previousPositions[_i4] + ") on element 4 (starting at 1) of previousPositions.");
                }
                output.writeVarShort(this.previousPositions[_i4]);
            }
        };
        GameFightFighterInformations.prototype.deserializeAs_GameFightFighterInformations = function(input) {
            var _val4 = 0;
            _super.prototype.deserializeGameContextActorInformations(this, input);
            this.spawnInfo = new GameContextBasicSpawnInformation();
            this.spawnInfo.deserialize(input);
            this.wave = input.readByte();
            if (this.wave < 0) {
                throw new Error("Forbidden value (" + this.wave + ") on element of GameFightFighterInformations.wave.");
            }
            var _id3 = input.readUnsignedShort();
            this.stats = ProtocolTypeManager.getInstance(GameFightMinimalStats, _id3);
            this.stats.deserialize(input);
            var _previousPositionsLen = input.readUnsignedShort();
            for (var _i4 = 0; _i4 < _previousPositionsLen; _i4++) {
                _val4 = input.readVarUhShort();
                if (_val4 < 0 || _val4 > 559) {
                    throw new Error("Forbidden value (" + _val4 + ") on elements of previousPositions.");
                }
                this.previousPositions.push(_val4);
            }
        };
        GameFightFighterInformations.ID = 8400;
        return GameFightFighterInformations;
    })(GameContextActorInformations);
    Protocol.GameFightFighterInformations = GameFightFighterInformations;
    var GameFightAIInformations = (function(_super) {
        __extends(GameFightAIInformations, _super);

        function GameFightAIInformations() {

            _super.call(this)
        }
        GameFightAIInformations.prototype.getMessageId = function() {
            return GameFightAIInformations.ID;
        };
        GameFightAIInformations.prototype.reset = function() {

        };
        GameFightAIInformations.prototype.serialize = function(output) {
            this.serializeAs_GameFightAIInformations(output);
        };
        GameFightAIInformations.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightAIInformations(input);
        };
        GameFightAIInformations.prototype.serializeAs_GameFightAIInformations = function(output) {
            _super.prototype.serializeAs_GameFightFighterInformations(this, output);
        };
        GameFightAIInformations.prototype.deserializeAs_GameFightAIInformations = function(input) {
            _super.prototype.deserializeGameFightFighterInformations(this, input);
        };
        GameFightAIInformations.ID = 950;
        return GameFightAIInformations;
    })(GameFightFighterInformations);
    Protocol.GameFightAIInformations = GameFightAIInformations;
    var GameFightFighterNamedInformations = (function(_super) {
        __extends(GameFightFighterNamedInformations, _super);

        function GameFightFighterNamedInformations() {
            this.name = "";
            this.status = new PlayerStatus();
            this.leagueId = 0;
            this.ladderPosition = 0;
            this.hiddenInPrefight = false;
            _super.call(this)
        }
        GameFightFighterNamedInformations.prototype.getMessageId = function() {
            return GameFightFighterNamedInformations.ID;
        };
        GameFightFighterNamedInformations.prototype.reset = function() {
            this.name = "";
            this.status = new PlayerStatus();
            this.leagueId = 0;
            this.ladderPosition = 0;
            this.hiddenInPrefight = false;
        };
        GameFightFighterNamedInformations.prototype.serialize = function(output) {
            this.serializeAs_GameFightFighterNamedInformations(output);
        };
        GameFightFighterNamedInformations.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightFighterNamedInformations(input);
        };
        GameFightFighterNamedInformations.prototype.serializeAs_GameFightFighterNamedInformations = function(output) {
            _super.prototype.serializeAs_GameFightFighterInformations(this, output);
            output.writeUTF(this.name);
            this.status.serializeAs_PlayerStatus(output);
            output.writeVarShort(this.leagueId);
            output.writeInt(this.ladderPosition);
            output.writeBoolean(this.hiddenInPrefight);
        };
        GameFightFighterNamedInformations.prototype.deserializeAs_GameFightFighterNamedInformations = function(input) {
            _super.prototype.deserializeGameFightFighterInformations(this, input);
            this.name = input.readUTF();
            this.status = new PlayerStatus();
            this.status.deserialize(input);
            this.leagueId = input.readVarShort();
            this.ladderPosition = input.readInt();
            this.hiddenInPrefight = input.readBoolean();
        };
        GameFightFighterNamedInformations.ID = 6665;
        return GameFightFighterNamedInformations;
    })(GameFightFighterInformations);
    Protocol.GameFightFighterNamedInformations = GameFightFighterNamedInformations;
    var GameFightCharacterInformations = (function(_super) {
        __extends(GameFightCharacterInformations, _super);

        function GameFightCharacterInformations() {
            this.level = 0;
            this.alignmentInfos = new ActorAlignmentInformations();
            this.breed = 0;
            this.sex = false;
            _super.call(this)
        }
        GameFightCharacterInformations.prototype.getMessageId = function() {
            return GameFightCharacterInformations.ID;
        };
        GameFightCharacterInformations.prototype.reset = function() {
            this.level = 0;
            this.alignmentInfos = new ActorAlignmentInformations();
            this.breed = 0;
            this.sex = false;
        };
        GameFightCharacterInformations.prototype.serialize = function(output) {
            this.serializeAs_GameFightCharacterInformations(output);
        };
        GameFightCharacterInformations.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightCharacterInformations(input);
        };
        GameFightCharacterInformations.prototype.serializeAs_GameFightCharacterInformations = function(output) {
            _super.prototype.serializeAs_GameFightFighterNamedInformations(this, output);
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeVarShort(this.level);
            this.alignmentInfos.serializeAs_ActorAlignmentInformations(output);
            output.writeByte(this.breed);
            output.writeBoolean(this.sex);
        };
        GameFightCharacterInformations.prototype.deserializeAs_GameFightCharacterInformations = function(input) {
            _super.prototype.deserializeGameFightFighterNamedInformations(this, input);
            this.level = input.readVarUhShort();
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element of GameFightCharacterInformations.level.");
            }
            this.alignmentInfos = new ActorAlignmentInformations();
            this.alignmentInfos.deserialize(input);
            this.breed = input.readByte();
            this.sex = input.readBoolean();
        };
        GameFightCharacterInformations.ID = 7807;
        return GameFightCharacterInformations;
    })(GameFightFighterNamedInformations);
    Protocol.GameFightCharacterInformations = GameFightCharacterInformations;
    var GameFightEffectTriggerCount = (function() {

        function GameFightEffectTriggerCount() {
            this.effectId = 0;
            this.targetId = 0;
            this.count = 0;

        }
        GameFightEffectTriggerCount.prototype.getMessageId = function() {
            return GameFightEffectTriggerCount.ID;
        };
        GameFightEffectTriggerCount.prototype.reset = function() {
            this.effectId = 0;
            this.targetId = 0;
            this.count = 0;
        };
        GameFightEffectTriggerCount.prototype.serialize = function(output) {
            this.serializeAs_GameFightEffectTriggerCount(output);
        };
        GameFightEffectTriggerCount.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightEffectTriggerCount(input);
        };
        GameFightEffectTriggerCount.prototype.serializeAs_GameFightEffectTriggerCount = function(output) {
            if (this.effectId < 0) {
                throw new Error("Forbidden value (" + this.effectId + ") on element effectId.");
            }
            output.writeVarInt(this.effectId);
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            if (this.count < 0) {
                throw new Error("Forbidden value (" + this.count + ") on element count.");
            }
            output.writeByte(this.count);
        };
        GameFightEffectTriggerCount.prototype.deserializeAs_GameFightEffectTriggerCount = function(input) {
            this.effectId = input.readVarUhInt();
            if (this.effectId < 0) {
                throw new Error("Forbidden value (" + this.effectId + ") on element of GameFightEffectTriggerCount.effectId.");
            }
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameFightEffectTriggerCount.targetId.");
            }
            this.count = input.readByte();
            if (this.count < 0) {
                throw new Error("Forbidden value (" + this.count + ") on element of GameFightEffectTriggerCount.count.");
            }
        };
        GameFightEffectTriggerCount.ID = 7452;
        return GameFightEffectTriggerCount;
    })();
    Protocol.GameFightEffectTriggerCount = GameFightEffectTriggerCount;
    var GameFightEntityInformation = (function(_super) {
        __extends(GameFightEntityInformation, _super);

        function GameFightEntityInformation() {
            this.entityModelId = 0;
            this.level = 0;
            this.masterId = 0;
            _super.call(this)
        }
        GameFightEntityInformation.prototype.getMessageId = function() {
            return GameFightEntityInformation.ID;
        };
        GameFightEntityInformation.prototype.reset = function() {
            this.entityModelId = 0;
            this.level = 0;
            this.masterId = 0;
        };
        GameFightEntityInformation.prototype.serialize = function(output) {
            this.serializeAs_GameFightEntityInformation(output);
        };
        GameFightEntityInformation.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightEntityInformation(input);
        };
        GameFightEntityInformation.prototype.serializeAs_GameFightEntityInformation = function(output) {
            _super.prototype.serializeAs_GameFightFighterInformations(this, output);
            if (this.entityModelId < 0) {
                throw new Error("Forbidden value (" + this.entityModelId + ") on element entityModelId.");
            }
            output.writeByte(this.entityModelId);
            if (this.level < 1 || this.level > 200) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeVarShort(this.level);
            if (this.masterId < -9007199254740990 || this.masterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.masterId + ") on element masterId.");
            }
            output.writeDouble(this.masterId);
        };
        GameFightEntityInformation.prototype.deserializeAs_GameFightEntityInformation = function(input) {
            _super.prototype.deserializeGameFightFighterInformations(this, input);
            this.entityModelId = input.readByte();
            if (this.entityModelId < 0) {
                throw new Error("Forbidden value (" + this.entityModelId + ") on element of GameFightEntityInformation.entityModelId.");
            }
            this.level = input.readVarUhShort();
            if (this.level < 1 || this.level > 200) {
                throw new Error("Forbidden value (" + this.level + ") on element of GameFightEntityInformation.level.");
            }
            this.masterId = input.readDouble();
            if (this.masterId < -9007199254740990 || this.masterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.masterId + ") on element of GameFightEntityInformation.masterId.");
            }
        };
        GameFightEntityInformation.ID = 9631;
        return GameFightEntityInformation;
    })(GameFightFighterInformations);
    Protocol.GameFightEntityInformation = GameFightEntityInformation;
    var GameFightFighterLightInformations = (function() {

        function GameFightFighterLightInformations() {
            this.id = 0;
            this.wave = 0;
            this.level = 0;
            this.breed = 0;
            this.sex = false;
            this.alive = false;

        }
        GameFightFighterLightInformations.prototype.getMessageId = function() {
            return GameFightFighterLightInformations.ID;
        };
        GameFightFighterLightInformations.prototype.reset = function() {
            this.id = 0;
            this.wave = 0;
            this.level = 0;
            this.breed = 0;
            this.sex = false;
            this.alive = false;
        };
        GameFightFighterLightInformations.prototype.serialize = function(output) {
            this.serializeAs_GameFightFighterLightInformations(output);
        };
        GameFightFighterLightInformations.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightFighterLightInformations(input);
        };
        GameFightFighterLightInformations.prototype.serializeAs_GameFightFighterLightInformations = function(output) {
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.sex);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.alive);
            output.writeByte(_box0);
            if (this.id < -9007199254740990 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeDouble(this.id);
            if (this.wave < 0) {
                throw new Error("Forbidden value (" + this.wave + ") on element wave.");
            }
            output.writeByte(this.wave);
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeVarShort(this.level);
            output.writeByte(this.breed);
        };
        GameFightFighterLightInformations.prototype.deserializeAs_GameFightFighterLightInformations = function(input) {
            this.deserializeByteBoxes(input);
            this.id = input.readDouble();
            if (this.id < -9007199254740990 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element of GameFightFighterLightInformations.id.");
            }
            this.wave = input.readByte();
            if (this.wave < 0) {
                throw new Error("Forbidden value (" + this.wave + ") on element of GameFightFighterLightInformations.wave.");
            }
            this.level = input.readVarUhShort();
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element of GameFightFighterLightInformations.level.");
            }
            this.breed = input.readByte();
        };
        GameFightFighterLightInformations.ID = 6683;
        return GameFightFighterLightInformations;
    })();
    Protocol.GameFightFighterLightInformations = GameFightFighterLightInformations;
    var GameFightFighterEntityLightInformation = (function(_super) {
        __extends(GameFightFighterEntityLightInformation, _super);

        function GameFightFighterEntityLightInformation() {
            this.entityModelId = 0;
            this.masterId = 0;
            _super.call(this)
        }
        GameFightFighterEntityLightInformation.prototype.getMessageId = function() {
            return GameFightFighterEntityLightInformation.ID;
        };
        GameFightFighterEntityLightInformation.prototype.reset = function() {
            this.entityModelId = 0;
            this.masterId = 0;
        };
        GameFightFighterEntityLightInformation.prototype.serialize = function(output) {
            this.serializeAs_GameFightFighterEntityLightInformation(output);
        };
        GameFightFighterEntityLightInformation.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightFighterEntityLightInformation(input);
        };
        GameFightFighterEntityLightInformation.prototype.serializeAs_GameFightFighterEntityLightInformation = function(output) {
            _super.prototype.serializeAs_GameFightFighterLightInformations(this, output);
            if (this.entityModelId < 0) {
                throw new Error("Forbidden value (" + this.entityModelId + ") on element entityModelId.");
            }
            output.writeByte(this.entityModelId);
            if (this.masterId < -9007199254740990 || this.masterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.masterId + ") on element masterId.");
            }
            output.writeDouble(this.masterId);
        };
        GameFightFighterEntityLightInformation.prototype.deserializeAs_GameFightFighterEntityLightInformation = function(input) {
            _super.prototype.deserializeGameFightFighterLightInformations(this, input);
            this.entityModelId = input.readByte();
            if (this.entityModelId < 0) {
                throw new Error("Forbidden value (" + this.entityModelId + ") on element of GameFightFighterEntityLightInformation.entityModelId.");
            }
            this.masterId = input.readDouble();
            if (this.masterId < -9007199254740990 || this.masterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.masterId + ") on element of GameFightFighterEntityLightInformation.masterId.");
            }
        };
        GameFightFighterEntityLightInformation.ID = 6182;
        return GameFightFighterEntityLightInformation;
    })(GameFightFighterLightInformations);
    Protocol.GameFightFighterEntityLightInformation = GameFightFighterEntityLightInformation;
    var GameFightFighterMonsterLightInformations = (function(_super) {
        __extends(GameFightFighterMonsterLightInformations, _super);

        function GameFightFighterMonsterLightInformations() {
            this.creatureGenericId = 0;
            _super.call(this)
        }
        GameFightFighterMonsterLightInformations.prototype.getMessageId = function() {
            return GameFightFighterMonsterLightInformations.ID;
        };
        GameFightFighterMonsterLightInformations.prototype.reset = function() {
            this.creatureGenericId = 0;
        };
        GameFightFighterMonsterLightInformations.prototype.serialize = function(output) {
            this.serializeAs_GameFightFighterMonsterLightInformations(output);
        };
        GameFightFighterMonsterLightInformations.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightFighterMonsterLightInformations(input);
        };
        GameFightFighterMonsterLightInformations.prototype.serializeAs_GameFightFighterMonsterLightInformations = function(output) {
            _super.prototype.serializeAs_GameFightFighterLightInformations(this, output);
            if (this.creatureGenericId < 0) {
                throw new Error("Forbidden value (" + this.creatureGenericId + ") on element creatureGenericId.");
            }
            output.writeVarShort(this.creatureGenericId);
        };
        GameFightFighterMonsterLightInformations.prototype.deserializeAs_GameFightFighterMonsterLightInformations = function(input) {
            _super.prototype.deserializeGameFightFighterLightInformations(this, input);
            this.creatureGenericId = input.readVarUhShort();
            if (this.creatureGenericId < 0) {
                throw new Error("Forbidden value (" + this.creatureGenericId + ") on element of GameFightFighterMonsterLightInformations.creatureGenericId.");
            }
        };
        GameFightFighterMonsterLightInformations.ID = 6947;
        return GameFightFighterMonsterLightInformations;
    })(GameFightFighterLightInformations);
    Protocol.GameFightFighterMonsterLightInformations = GameFightFighterMonsterLightInformations;
    var GameFightFighterNamedLightInformations = (function(_super) {
        __extends(GameFightFighterNamedLightInformations, _super);

        function GameFightFighterNamedLightInformations() {
            this.name = "";
            _super.call(this)
        }
        GameFightFighterNamedLightInformations.prototype.getMessageId = function() {
            return GameFightFighterNamedLightInformations.ID;
        };
        GameFightFighterNamedLightInformations.prototype.reset = function() {
            this.name = "";
        };
        GameFightFighterNamedLightInformations.prototype.serialize = function(output) {
            this.serializeAs_GameFightFighterNamedLightInformations(output);
        };
        GameFightFighterNamedLightInformations.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightFighterNamedLightInformations(input);
        };
        GameFightFighterNamedLightInformations.prototype.serializeAs_GameFightFighterNamedLightInformations = function(output) {
            _super.prototype.serializeAs_GameFightFighterLightInformations(this, output);
            output.writeUTF(this.name);
        };
        GameFightFighterNamedLightInformations.prototype.deserializeAs_GameFightFighterNamedLightInformations = function(input) {
            _super.prototype.deserializeGameFightFighterLightInformations(this, input);
            this.name = input.readUTF();
        };
        GameFightFighterNamedLightInformations.ID = 8143;
        return GameFightFighterNamedLightInformations;
    })(GameFightFighterLightInformations);
    Protocol.GameFightFighterNamedLightInformations = GameFightFighterNamedLightInformations;
    var GameFightFighterTaxCollectorLightInformations = (function(_super) {
        __extends(GameFightFighterTaxCollectorLightInformations, _super);

        function GameFightFighterTaxCollectorLightInformations() {
            this.firstNameId = 0;
            this.lastNameId = 0;
            _super.call(this)
        }
        GameFightFighterTaxCollectorLightInformations.prototype.getMessageId = function() {
            return GameFightFighterTaxCollectorLightInformations.ID;
        };
        GameFightFighterTaxCollectorLightInformations.prototype.reset = function() {
            this.firstNameId = 0;
            this.lastNameId = 0;
        };
        GameFightFighterTaxCollectorLightInformations.prototype.serialize = function(output) {
            this.serializeAs_GameFightFighterTaxCollectorLightInformations(output);
        };
        GameFightFighterTaxCollectorLightInformations.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightFighterTaxCollectorLightInformations(input);
        };
        GameFightFighterTaxCollectorLightInformations.prototype.serializeAs_GameFightFighterTaxCollectorLightInformations = function(output) {
            _super.prototype.serializeAs_GameFightFighterLightInformations(this, output);
            if (this.firstNameId < 0) {
                throw new Error("Forbidden value (" + this.firstNameId + ") on element firstNameId.");
            }
            output.writeVarShort(this.firstNameId);
            if (this.lastNameId < 0) {
                throw new Error("Forbidden value (" + this.lastNameId + ") on element lastNameId.");
            }
            output.writeVarShort(this.lastNameId);
        };
        GameFightFighterTaxCollectorLightInformations.prototype.deserializeAs_GameFightFighterTaxCollectorLightInformations = function(input) {
            _super.prototype.deserializeGameFightFighterLightInformations(this, input);
            this.firstNameId = input.readVarUhShort();
            if (this.firstNameId < 0) {
                throw new Error("Forbidden value (" + this.firstNameId + ") on element of GameFightFighterTaxCollectorLightInformations.firstNameId.");
            }
            this.lastNameId = input.readVarUhShort();
            if (this.lastNameId < 0) {
                throw new Error("Forbidden value (" + this.lastNameId + ") on element of GameFightFighterTaxCollectorLightInformations.lastNameId.");
            }
        };
        GameFightFighterTaxCollectorLightInformations.ID = 8613;
        return GameFightFighterTaxCollectorLightInformations;
    })(GameFightFighterLightInformations);
    Protocol.GameFightFighterTaxCollectorLightInformations = GameFightFighterTaxCollectorLightInformations;
    var GameFightMinimalStats = (function() {

        function GameFightMinimalStats() {
            this.lifePoints = 0;
            this.maxLifePoints = 0;
            this.baseMaxLifePoints = 0;
            this.permanentDamagePercent = 0;
            this.shieldPoints = 0;
            this.actionPoints = 0;
            this.maxActionPoints = 0;
            this.movementPoints = 0;
            this.maxMovementPoints = 0;
            this.summoner = 0;
            this.summoned = false;
            this.neutralElementResistPercent = 0;
            this.earthElementResistPercent = 0;
            this.waterElementResistPercent = 0;
            this.airElementResistPercent = 0;
            this.fireElementResistPercent = 0;
            this.neutralElementReduction = 0;
            this.earthElementReduction = 0;
            this.waterElementReduction = 0;
            this.airElementReduction = 0;
            this.fireElementReduction = 0;
            this.criticalDamageFixedResist = 0;
            this.pushDamageFixedResist = 0;
            this.pvpNeutralElementResistPercent = 0;
            this.pvpEarthElementResistPercent = 0;
            this.pvpWaterElementResistPercent = 0;
            this.pvpAirElementResistPercent = 0;
            this.pvpFireElementResistPercent = 0;
            this.pvpNeutralElementReduction = 0;
            this.pvpEarthElementReduction = 0;
            this.pvpWaterElementReduction = 0;
            this.pvpAirElementReduction = 0;
            this.pvpFireElementReduction = 0;
            this.dodgePALostProbability = 0;
            this.dodgePMLostProbability = 0;
            this.tackleBlock = 0;
            this.tackleEvade = 0;
            this.fixedDamageReflection = 0;
            this.invisibilityState = 0;
            this.meleeDamageReceivedPercent = 0;
            this.rangedDamageReceivedPercent = 0;
            this.weaponDamageReceivedPercent = 0;
            this.spellDamageReceivedPercent = 0;

        }
        GameFightMinimalStats.prototype.getMessageId = function() {
            return GameFightMinimalStats.ID;
        };
        GameFightMinimalStats.prototype.reset = function() {
            this.lifePoints = 0;
            this.maxLifePoints = 0;
            this.baseMaxLifePoints = 0;
            this.permanentDamagePercent = 0;
            this.shieldPoints = 0;
            this.actionPoints = 0;
            this.maxActionPoints = 0;
            this.movementPoints = 0;
            this.maxMovementPoints = 0;
            this.summoner = 0;
            this.summoned = false;
            this.neutralElementResistPercent = 0;
            this.earthElementResistPercent = 0;
            this.waterElementResistPercent = 0;
            this.airElementResistPercent = 0;
            this.fireElementResistPercent = 0;
            this.neutralElementReduction = 0;
            this.earthElementReduction = 0;
            this.waterElementReduction = 0;
            this.airElementReduction = 0;
            this.fireElementReduction = 0;
            this.criticalDamageFixedResist = 0;
            this.pushDamageFixedResist = 0;
            this.pvpNeutralElementResistPercent = 0;
            this.pvpEarthElementResistPercent = 0;
            this.pvpWaterElementResistPercent = 0;
            this.pvpAirElementResistPercent = 0;
            this.pvpFireElementResistPercent = 0;
            this.pvpNeutralElementReduction = 0;
            this.pvpEarthElementReduction = 0;
            this.pvpWaterElementReduction = 0;
            this.pvpAirElementReduction = 0;
            this.pvpFireElementReduction = 0;
            this.dodgePALostProbability = 0;
            this.dodgePMLostProbability = 0;
            this.tackleBlock = 0;
            this.tackleEvade = 0;
            this.fixedDamageReflection = 0;
            this.invisibilityState = 0;
            this.meleeDamageReceivedPercent = 0;
            this.rangedDamageReceivedPercent = 0;
            this.weaponDamageReceivedPercent = 0;
            this.spellDamageReceivedPercent = 0;
        };
        GameFightMinimalStats.prototype.serialize = function(output) {
            this.serializeAs_GameFightMinimalStats(output);
        };
        GameFightMinimalStats.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightMinimalStats(input);
        };
        GameFightMinimalStats.prototype.serializeAs_GameFightMinimalStats = function(output) {
            if (this.lifePoints < 0) {
                throw new Error("Forbidden value (" + this.lifePoints + ") on element lifePoints.");
            }
            output.writeVarInt(this.lifePoints);
            if (this.maxLifePoints < 0) {
                throw new Error("Forbidden value (" + this.maxLifePoints + ") on element maxLifePoints.");
            }
            output.writeVarInt(this.maxLifePoints);
            if (this.baseMaxLifePoints < 0) {
                throw new Error("Forbidden value (" + this.baseMaxLifePoints + ") on element baseMaxLifePoints.");
            }
            output.writeVarInt(this.baseMaxLifePoints);
            if (this.permanentDamagePercent < 0) {
                throw new Error("Forbidden value (" + this.permanentDamagePercent + ") on element permanentDamagePercent.");
            }
            output.writeVarInt(this.permanentDamagePercent);
            if (this.shieldPoints < 0) {
                throw new Error("Forbidden value (" + this.shieldPoints + ") on element shieldPoints.");
            }
            output.writeVarInt(this.shieldPoints);
            output.writeVarShort(this.actionPoints);
            output.writeVarShort(this.maxActionPoints);
            output.writeVarShort(this.movementPoints);
            output.writeVarShort(this.maxMovementPoints);
            if (this.summoner < -9007199254740990 || this.summoner > 9007199254740990) {
                throw new Error("Forbidden value (" + this.summoner + ") on element summoner.");
            }
            output.writeDouble(this.summoner);
            output.writeBoolean(this.summoned);
            output.writeVarShort(this.neutralElementResistPercent);
            output.writeVarShort(this.earthElementResistPercent);
            output.writeVarShort(this.waterElementResistPercent);
            output.writeVarShort(this.airElementResistPercent);
            output.writeVarShort(this.fireElementResistPercent);
            output.writeVarShort(this.neutralElementReduction);
            output.writeVarShort(this.earthElementReduction);
            output.writeVarShort(this.waterElementReduction);
            output.writeVarShort(this.airElementReduction);
            output.writeVarShort(this.fireElementReduction);
            output.writeVarShort(this.criticalDamageFixedResist);
            output.writeVarShort(this.pushDamageFixedResist);
            output.writeVarShort(this.pvpNeutralElementResistPercent);
            output.writeVarShort(this.pvpEarthElementResistPercent);
            output.writeVarShort(this.pvpWaterElementResistPercent);
            output.writeVarShort(this.pvpAirElementResistPercent);
            output.writeVarShort(this.pvpFireElementResistPercent);
            output.writeVarShort(this.pvpNeutralElementReduction);
            output.writeVarShort(this.pvpEarthElementReduction);
            output.writeVarShort(this.pvpWaterElementReduction);
            output.writeVarShort(this.pvpAirElementReduction);
            output.writeVarShort(this.pvpFireElementReduction);
            if (this.dodgePALostProbability < 0) {
                throw new Error("Forbidden value (" + this.dodgePALostProbability + ") on element dodgePALostProbability.");
            }
            output.writeVarShort(this.dodgePALostProbability);
            if (this.dodgePMLostProbability < 0) {
                throw new Error("Forbidden value (" + this.dodgePMLostProbability + ") on element dodgePMLostProbability.");
            }
            output.writeVarShort(this.dodgePMLostProbability);
            output.writeVarShort(this.tackleBlock);
            output.writeVarShort(this.tackleEvade);
            output.writeVarShort(this.fixedDamageReflection);
            output.writeByte(this.invisibilityState);
            if (this.meleeDamageReceivedPercent < 0) {
                throw new Error("Forbidden value (" + this.meleeDamageReceivedPercent + ") on element meleeDamageReceivedPercent.");
            }
            output.writeVarShort(this.meleeDamageReceivedPercent);
            if (this.rangedDamageReceivedPercent < 0) {
                throw new Error("Forbidden value (" + this.rangedDamageReceivedPercent + ") on element rangedDamageReceivedPercent.");
            }
            output.writeVarShort(this.rangedDamageReceivedPercent);
            if (this.weaponDamageReceivedPercent < 0) {
                throw new Error("Forbidden value (" + this.weaponDamageReceivedPercent + ") on element weaponDamageReceivedPercent.");
            }
            output.writeVarShort(this.weaponDamageReceivedPercent);
            if (this.spellDamageReceivedPercent < 0) {
                throw new Error("Forbidden value (" + this.spellDamageReceivedPercent + ") on element spellDamageReceivedPercent.");
            }
            output.writeVarShort(this.spellDamageReceivedPercent);
        };
        GameFightMinimalStats.prototype.deserializeAs_GameFightMinimalStats = function(input) {
            this.lifePoints = input.readVarUhInt();
            if (this.lifePoints < 0) {
                throw new Error("Forbidden value (" + this.lifePoints + ") on element of GameFightMinimalStats.lifePoints.");
            }
            this.maxLifePoints = input.readVarUhInt();
            if (this.maxLifePoints < 0) {
                throw new Error("Forbidden value (" + this.maxLifePoints + ") on element of GameFightMinimalStats.maxLifePoints.");
            }
            this.baseMaxLifePoints = input.readVarUhInt();
            if (this.baseMaxLifePoints < 0) {
                throw new Error("Forbidden value (" + this.baseMaxLifePoints + ") on element of GameFightMinimalStats.baseMaxLifePoints.");
            }
            this.permanentDamagePercent = input.readVarUhInt();
            if (this.permanentDamagePercent < 0) {
                throw new Error("Forbidden value (" + this.permanentDamagePercent + ") on element of GameFightMinimalStats.permanentDamagePercent.");
            }
            this.shieldPoints = input.readVarUhInt();
            if (this.shieldPoints < 0) {
                throw new Error("Forbidden value (" + this.shieldPoints + ") on element of GameFightMinimalStats.shieldPoints.");
            }
            this.actionPoints = input.readVarShort();
            this.maxActionPoints = input.readVarShort();
            this.movementPoints = input.readVarShort();
            this.maxMovementPoints = input.readVarShort();
            this.summoner = input.readDouble();
            if (this.summoner < -9007199254740990 || this.summoner > 9007199254740990) {
                throw new Error("Forbidden value (" + this.summoner + ") on element of GameFightMinimalStats.summoner.");
            }
            this.summoned = input.readBoolean();
            this.neutralElementResistPercent = input.readVarShort();
            this.earthElementResistPercent = input.readVarShort();
            this.waterElementResistPercent = input.readVarShort();
            this.airElementResistPercent = input.readVarShort();
            this.fireElementResistPercent = input.readVarShort();
            this.neutralElementReduction = input.readVarShort();
            this.earthElementReduction = input.readVarShort();
            this.waterElementReduction = input.readVarShort();
            this.airElementReduction = input.readVarShort();
            this.fireElementReduction = input.readVarShort();
            this.criticalDamageFixedResist = input.readVarShort();
            this.pushDamageFixedResist = input.readVarShort();
            this.pvpNeutralElementResistPercent = input.readVarShort();
            this.pvpEarthElementResistPercent = input.readVarShort();
            this.pvpWaterElementResistPercent = input.readVarShort();
            this.pvpAirElementResistPercent = input.readVarShort();
            this.pvpFireElementResistPercent = input.readVarShort();
            this.pvpNeutralElementReduction = input.readVarShort();
            this.pvpEarthElementReduction = input.readVarShort();
            this.pvpWaterElementReduction = input.readVarShort();
            this.pvpAirElementReduction = input.readVarShort();
            this.pvpFireElementReduction = input.readVarShort();
            this.dodgePALostProbability = input.readVarUhShort();
            if (this.dodgePALostProbability < 0) {
                throw new Error("Forbidden value (" + this.dodgePALostProbability + ") on element of GameFightMinimalStats.dodgePALostProbability.");
            }
            this.dodgePMLostProbability = input.readVarUhShort();
            if (this.dodgePMLostProbability < 0) {
                throw new Error("Forbidden value (" + this.dodgePMLostProbability + ") on element of GameFightMinimalStats.dodgePMLostProbability.");
            }
            this.tackleBlock = input.readVarShort();
            this.tackleEvade = input.readVarShort();
            this.fixedDamageReflection = input.readVarShort();
            this.invisibilityState = input.readByte();
            if (this.invisibilityState < 0) {
                throw new Error("Forbidden value (" + this.invisibilityState + ") on element of GameFightMinimalStats.invisibilityState.");
            }
            this.meleeDamageReceivedPercent = input.readVarUhShort();
            if (this.meleeDamageReceivedPercent < 0) {
                throw new Error("Forbidden value (" + this.meleeDamageReceivedPercent + ") on element of GameFightMinimalStats.meleeDamageReceivedPercent.");
            }
            this.rangedDamageReceivedPercent = input.readVarUhShort();
            if (this.rangedDamageReceivedPercent < 0) {
                throw new Error("Forbidden value (" + this.rangedDamageReceivedPercent + ") on element of GameFightMinimalStats.rangedDamageReceivedPercent.");
            }
            this.weaponDamageReceivedPercent = input.readVarUhShort();
            if (this.weaponDamageReceivedPercent < 0) {
                throw new Error("Forbidden value (" + this.weaponDamageReceivedPercent + ") on element of GameFightMinimalStats.weaponDamageReceivedPercent.");
            }
            this.spellDamageReceivedPercent = input.readVarUhShort();
            if (this.spellDamageReceivedPercent < 0) {
                throw new Error("Forbidden value (" + this.spellDamageReceivedPercent + ") on element of GameFightMinimalStats.spellDamageReceivedPercent.");
            }
        };
        GameFightMinimalStats.ID = 8253;
        return GameFightMinimalStats;
    })();
    Protocol.GameFightMinimalStats = GameFightMinimalStats;
    var GameFightMinimalStatsPreparation = (function(_super) {
        __extends(GameFightMinimalStatsPreparation, _super);

        function GameFightMinimalStatsPreparation() {
            this.initiative = 0;
            _super.call(this)
        }
        GameFightMinimalStatsPreparation.prototype.getMessageId = function() {
            return GameFightMinimalStatsPreparation.ID;
        };
        GameFightMinimalStatsPreparation.prototype.reset = function() {
            this.initiative = 0;
        };
        GameFightMinimalStatsPreparation.prototype.serialize = function(output) {
            this.serializeAs_GameFightMinimalStatsPreparation(output);
        };
        GameFightMinimalStatsPreparation.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightMinimalStatsPreparation(input);
        };
        GameFightMinimalStatsPreparation.prototype.serializeAs_GameFightMinimalStatsPreparation = function(output) {
            _super.prototype.serializeAs_GameFightMinimalStats(this, output);
            if (this.initiative < 0) {
                throw new Error("Forbidden value (" + this.initiative + ") on element initiative.");
            }
            output.writeVarInt(this.initiative);
        };
        GameFightMinimalStatsPreparation.prototype.deserializeAs_GameFightMinimalStatsPreparation = function(input) {
            _super.prototype.deserializeGameFightMinimalStats(this, input);
            this.initiative = input.readVarUhInt();
            if (this.initiative < 0) {
                throw new Error("Forbidden value (" + this.initiative + ") on element of GameFightMinimalStatsPreparation.initiative.");
            }
        };
        GameFightMinimalStatsPreparation.ID = 9464;
        return GameFightMinimalStatsPreparation;
    })(GameFightMinimalStats);
    Protocol.GameFightMinimalStatsPreparation = GameFightMinimalStatsPreparation;
    var GameFightMonsterInformations = (function(_super) {
        __extends(GameFightMonsterInformations, _super);

        function GameFightMonsterInformations() {
            this.creatureGenericId = 0;
            this.creatureGrade = 0;
            this.creatureLevel = 0;
            _super.call(this)
        }
        GameFightMonsterInformations.prototype.getMessageId = function() {
            return GameFightMonsterInformations.ID;
        };
        GameFightMonsterInformations.prototype.reset = function() {
            this.creatureGenericId = 0;
            this.creatureGrade = 0;
            this.creatureLevel = 0;
        };
        GameFightMonsterInformations.prototype.serialize = function(output) {
            this.serializeAs_GameFightMonsterInformations(output);
        };
        GameFightMonsterInformations.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightMonsterInformations(input);
        };
        GameFightMonsterInformations.prototype.serializeAs_GameFightMonsterInformations = function(output) {
            _super.prototype.serializeAs_GameFightAIInformations(this, output);
            if (this.creatureGenericId < 0) {
                throw new Error("Forbidden value (" + this.creatureGenericId + ") on element creatureGenericId.");
            }
            output.writeVarShort(this.creatureGenericId);
            if (this.creatureGrade < 0) {
                throw new Error("Forbidden value (" + this.creatureGrade + ") on element creatureGrade.");
            }
            output.writeByte(this.creatureGrade);
            if (this.creatureLevel < 0) {
                throw new Error("Forbidden value (" + this.creatureLevel + ") on element creatureLevel.");
            }
            output.writeShort(this.creatureLevel);
        };
        GameFightMonsterInformations.prototype.deserializeAs_GameFightMonsterInformations = function(input) {
            _super.prototype.deserializeGameFightAIInformations(this, input);
            this.creatureGenericId = input.readVarUhShort();
            if (this.creatureGenericId < 0) {
                throw new Error("Forbidden value (" + this.creatureGenericId + ") on element of GameFightMonsterInformations.creatureGenericId.");
            }
            this.creatureGrade = input.readByte();
            if (this.creatureGrade < 0) {
                throw new Error("Forbidden value (" + this.creatureGrade + ") on element of GameFightMonsterInformations.creatureGrade.");
            }
            this.creatureLevel = input.readShort();
            if (this.creatureLevel < 0) {
                throw new Error("Forbidden value (" + this.creatureLevel + ") on element of GameFightMonsterInformations.creatureLevel.");
            }
        };
        GameFightMonsterInformations.ID = 6096;
        return GameFightMonsterInformations;
    })(GameFightAIInformations);
    Protocol.GameFightMonsterInformations = GameFightMonsterInformations;
    var GameFightMonsterWithAlignmentInformations = (function(_super) {
        __extends(GameFightMonsterWithAlignmentInformations, _super);

        function GameFightMonsterWithAlignmentInformations() {
            this.alignmentInfos = new ActorAlignmentInformations();
            _super.call(this)
        }
        GameFightMonsterWithAlignmentInformations.prototype.getMessageId = function() {
            return GameFightMonsterWithAlignmentInformations.ID;
        };
        GameFightMonsterWithAlignmentInformations.prototype.reset = function() {
            this.alignmentInfos = new ActorAlignmentInformations();
        };
        GameFightMonsterWithAlignmentInformations.prototype.serialize = function(output) {
            this.serializeAs_GameFightMonsterWithAlignmentInformations(output);
        };
        GameFightMonsterWithAlignmentInformations.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightMonsterWithAlignmentInformations(input);
        };
        GameFightMonsterWithAlignmentInformations.prototype.serializeAs_GameFightMonsterWithAlignmentInformations = function(output) {
            _super.prototype.serializeAs_GameFightMonsterInformations(this, output);
            this.alignmentInfos.serializeAs_ActorAlignmentInformations(output);
        };
        GameFightMonsterWithAlignmentInformations.prototype.deserializeAs_GameFightMonsterWithAlignmentInformations = function(input) {
            _super.prototype.deserializeGameFightMonsterInformations(this, input);
            this.alignmentInfos = new ActorAlignmentInformations();
            this.alignmentInfos.deserialize(input);
        };
        GameFightMonsterWithAlignmentInformations.ID = 1318;
        return GameFightMonsterWithAlignmentInformations;
    })(GameFightMonsterInformations);
    Protocol.GameFightMonsterWithAlignmentInformations = GameFightMonsterWithAlignmentInformations;
    var GameFightMutantInformations = (function(_super) {
        __extends(GameFightMutantInformations, _super);

        function GameFightMutantInformations() {
            this.powerLevel = 0;
            _super.call(this)
        }
        GameFightMutantInformations.prototype.getMessageId = function() {
            return GameFightMutantInformations.ID;
        };
        GameFightMutantInformations.prototype.reset = function() {
            this.powerLevel = 0;
        };
        GameFightMutantInformations.prototype.serialize = function(output) {
            this.serializeAs_GameFightMutantInformations(output);
        };
        GameFightMutantInformations.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightMutantInformations(input);
        };
        GameFightMutantInformations.prototype.serializeAs_GameFightMutantInformations = function(output) {
            _super.prototype.serializeAs_GameFightFighterNamedInformations(this, output);
            if (this.powerLevel < 0) {
                throw new Error("Forbidden value (" + this.powerLevel + ") on element powerLevel.");
            }
            output.writeByte(this.powerLevel);
        };
        GameFightMutantInformations.prototype.deserializeAs_GameFightMutantInformations = function(input) {
            _super.prototype.deserializeGameFightFighterNamedInformations(this, input);
            this.powerLevel = input.readByte();
            if (this.powerLevel < 0) {
                throw new Error("Forbidden value (" + this.powerLevel + ") on element of GameFightMutantInformations.powerLevel.");
            }
        };
        GameFightMutantInformations.ID = 4633;
        return GameFightMutantInformations;
    })(GameFightFighterNamedInformations);
    Protocol.GameFightMutantInformations = GameFightMutantInformations;
    var GameFightResumeSlaveInfo = (function() {

        function GameFightResumeSlaveInfo() {
            this.slaveId = 0;
            this.spellCooldowns = [];
            this.summonCount = 0;
            this.bombCount = 0;

        }
        GameFightResumeSlaveInfo.prototype.getMessageId = function() {
            return GameFightResumeSlaveInfo.ID;
        };
        GameFightResumeSlaveInfo.prototype.reset = function() {
            this.slaveId = 0;
            this.spellCooldowns = [];
            this.summonCount = 0;
            this.bombCount = 0;
        };
        GameFightResumeSlaveInfo.prototype.serialize = function(output) {
            this.serializeAs_GameFightResumeSlaveInfo(output);
        };
        GameFightResumeSlaveInfo.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightResumeSlaveInfo(input);
        };
        GameFightResumeSlaveInfo.prototype.serializeAs_GameFightResumeSlaveInfo = function(output) {
            if (this.slaveId < -9007199254740990 || this.slaveId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.slaveId + ") on element slaveId.");
            }
            output.writeDouble(this.slaveId);
            output.writeShort(this.spellCooldowns.length);
            for (var _i2 = 0; _i2 < this.spellCooldowns.length; _i2++) {
                (this.spellCooldowns[_i2]).serializeAs_GameFightSpellCooldown(output);
            }
            if (this.summonCount < 0) {
                throw new Error("Forbidden value (" + this.summonCount + ") on element summonCount.");
            }
            output.writeByte(this.summonCount);
            if (this.bombCount < 0) {
                throw new Error("Forbidden value (" + this.bombCount + ") on element bombCount.");
            }
            output.writeByte(this.bombCount);
        };
        GameFightResumeSlaveInfo.prototype.deserializeAs_GameFightResumeSlaveInfo = function(input) {
            var _item2 = null;
            this.slaveId = input.readDouble();
            if (this.slaveId < -9007199254740990 || this.slaveId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.slaveId + ") on element of GameFightResumeSlaveInfo.slaveId.");
            }
            var _spellCooldownsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _spellCooldownsLen; _i2++) {
                _item2 = new GameFightSpellCooldown();
                _item2.deserialize(input);
                this.spellCooldowns.push(_item2);
            }
            this.summonCount = input.readByte();
            if (this.summonCount < 0) {
                throw new Error("Forbidden value (" + this.summonCount + ") on element of GameFightResumeSlaveInfo.summonCount.");
            }
            this.bombCount = input.readByte();
            if (this.bombCount < 0) {
                throw new Error("Forbidden value (" + this.bombCount + ") on element of GameFightResumeSlaveInfo.bombCount.");
            }
        };
        GameFightResumeSlaveInfo.ID = 8499;
        return GameFightResumeSlaveInfo;
    })();
    Protocol.GameFightResumeSlaveInfo = GameFightResumeSlaveInfo;
    var GameFightSpellCooldown = (function() {

        function GameFightSpellCooldown() {
            this.spellId = 0;
            this.cooldown = 0;

        }
        GameFightSpellCooldown.prototype.getMessageId = function() {
            return GameFightSpellCooldown.ID;
        };
        GameFightSpellCooldown.prototype.reset = function() {
            this.spellId = 0;
            this.cooldown = 0;
        };
        GameFightSpellCooldown.prototype.serialize = function(output) {
            this.serializeAs_GameFightSpellCooldown(output);
        };
        GameFightSpellCooldown.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightSpellCooldown(input);
        };
        GameFightSpellCooldown.prototype.serializeAs_GameFightSpellCooldown = function(output) {
            output.writeInt(this.spellId);
            if (this.cooldown < 0) {
                throw new Error("Forbidden value (" + this.cooldown + ") on element cooldown.");
            }
            output.writeByte(this.cooldown);
        };
        GameFightSpellCooldown.prototype.deserializeAs_GameFightSpellCooldown = function(input) {
            this.spellId = input.readInt();
            this.cooldown = input.readByte();
            if (this.cooldown < 0) {
                throw new Error("Forbidden value (" + this.cooldown + ") on element of GameFightSpellCooldown.cooldown.");
            }
        };
        GameFightSpellCooldown.ID = 9167;
        return GameFightSpellCooldown;
    })();
    Protocol.GameFightSpellCooldown = GameFightSpellCooldown;
    var GameFightTaxCollectorInformations = (function(_super) {
        __extends(GameFightTaxCollectorInformations, _super);

        function GameFightTaxCollectorInformations() {
            this.firstNameId = 0;
            this.lastNameId = 0;
            this.level = 0;
            _super.call(this)
        }
        GameFightTaxCollectorInformations.prototype.getMessageId = function() {
            return GameFightTaxCollectorInformations.ID;
        };
        GameFightTaxCollectorInformations.prototype.reset = function() {
            this.firstNameId = 0;
            this.lastNameId = 0;
            this.level = 0;
        };
        GameFightTaxCollectorInformations.prototype.serialize = function(output) {
            this.serializeAs_GameFightTaxCollectorInformations(output);
        };
        GameFightTaxCollectorInformations.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightTaxCollectorInformations(input);
        };
        GameFightTaxCollectorInformations.prototype.serializeAs_GameFightTaxCollectorInformations = function(output) {
            _super.prototype.serializeAs_GameFightAIInformations(this, output);
            if (this.firstNameId < 0) {
                throw new Error("Forbidden value (" + this.firstNameId + ") on element firstNameId.");
            }
            output.writeVarShort(this.firstNameId);
            if (this.lastNameId < 0) {
                throw new Error("Forbidden value (" + this.lastNameId + ") on element lastNameId.");
            }
            output.writeVarShort(this.lastNameId);
            if (this.level < 0 || this.level > 255) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeByte(this.level);
        };
        GameFightTaxCollectorInformations.prototype.deserializeAs_GameFightTaxCollectorInformations = function(input) {
            _super.prototype.deserializeGameFightAIInformations(this, input);
            this.firstNameId = input.readVarUhShort();
            if (this.firstNameId < 0) {
                throw new Error("Forbidden value (" + this.firstNameId + ") on element of GameFightTaxCollectorInformations.firstNameId.");
            }
            this.lastNameId = input.readVarUhShort();
            if (this.lastNameId < 0) {
                throw new Error("Forbidden value (" + this.lastNameId + ") on element of GameFightTaxCollectorInformations.lastNameId.");
            }
            this.level = input.readUnsignedByte();
            if (this.level < 0 || this.level > 255) {
                throw new Error("Forbidden value (" + this.level + ") on element of GameFightTaxCollectorInformations.level.");
            }
        };
        GameFightTaxCollectorInformations.ID = 6975;
        return GameFightTaxCollectorInformations;
    })(GameFightAIInformations);
    Protocol.GameFightTaxCollectorInformations = GameFightTaxCollectorInformations;
    var SpawnCharacterInformation = (function(_super) {
        __extends(SpawnCharacterInformation, _super);

        function SpawnCharacterInformation() {
            this.name = "";
            this.level = 0;
            _super.call(this)
        }
        SpawnCharacterInformation.prototype.getMessageId = function() {
            return SpawnCharacterInformation.ID;
        };
        SpawnCharacterInformation.prototype.reset = function() {
            this.name = "";
            this.level = 0;
        };
        SpawnCharacterInformation.prototype.serialize = function(output) {
            this.serializeAs_SpawnCharacterInformation(output);
        };
        SpawnCharacterInformation.prototype.deserialize = function(input) {
            this.deserializeAs_SpawnCharacterInformation(input);
        };
        SpawnCharacterInformation.prototype.serializeAs_SpawnCharacterInformation = function(output) {
            _super.prototype.serializeAs_SpawnInformation(this, output);
            output.writeUTF(this.name);
            if (this.level < 1 || this.level > 200) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeVarShort(this.level);
        };
        SpawnCharacterInformation.prototype.deserializeAs_SpawnCharacterInformation = function(input) {
            _super.prototype.deserializeSpawnInformation(this, input);
            this.name = input.readUTF();
            this.level = input.readVarUhShort();
            if (this.level < 1 || this.level > 200) {
                throw new Error("Forbidden value (" + this.level + ") on element of SpawnCharacterInformation.level.");
            }
        };
        SpawnCharacterInformation.ID = 1888;
        return SpawnCharacterInformation;
    })(SpawnInformation);
    Protocol.SpawnCharacterInformation = SpawnCharacterInformation;
    var SpawnCompanionInformation = (function(_super) {
        __extends(SpawnCompanionInformation, _super);

        function SpawnCompanionInformation() {
            this.modelId = 0;
            this.level = 0;
            this.summonerId = 0;
            this.ownerId = 0;
            _super.call(this)
        }
        SpawnCompanionInformation.prototype.getMessageId = function() {
            return SpawnCompanionInformation.ID;
        };
        SpawnCompanionInformation.prototype.reset = function() {
            this.modelId = 0;
            this.level = 0;
            this.summonerId = 0;
            this.ownerId = 0;
        };
        SpawnCompanionInformation.prototype.serialize = function(output) {
            this.serializeAs_SpawnCompanionInformation(output);
        };
        SpawnCompanionInformation.prototype.deserialize = function(input) {
            this.deserializeAs_SpawnCompanionInformation(input);
        };
        SpawnCompanionInformation.prototype.serializeAs_SpawnCompanionInformation = function(output) {
            _super.prototype.serializeAs_SpawnInformation(this, output);
            if (this.modelId < 0) {
                throw new Error("Forbidden value (" + this.modelId + ") on element modelId.");
            }
            output.writeByte(this.modelId);
            if (this.level < 1 || this.level > 200) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeVarShort(this.level);
            if (this.summonerId < -9007199254740990 || this.summonerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.summonerId + ") on element summonerId.");
            }
            output.writeDouble(this.summonerId);
            if (this.ownerId < -9007199254740990 || this.ownerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.ownerId + ") on element ownerId.");
            }
            output.writeDouble(this.ownerId);
        };
        SpawnCompanionInformation.prototype.deserializeAs_SpawnCompanionInformation = function(input) {
            _super.prototype.deserializeSpawnInformation(this, input);
            this.modelId = input.readByte();
            if (this.modelId < 0) {
                throw new Error("Forbidden value (" + this.modelId + ") on element of SpawnCompanionInformation.modelId.");
            }
            this.level = input.readVarUhShort();
            if (this.level < 1 || this.level > 200) {
                throw new Error("Forbidden value (" + this.level + ") on element of SpawnCompanionInformation.level.");
            }
            this.summonerId = input.readDouble();
            if (this.summonerId < -9007199254740990 || this.summonerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.summonerId + ") on element of SpawnCompanionInformation.summonerId.");
            }
            this.ownerId = input.readDouble();
            if (this.ownerId < -9007199254740990 || this.ownerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.ownerId + ") on element of SpawnCompanionInformation.ownerId.");
            }
        };
        SpawnCompanionInformation.ID = 7811;
        return SpawnCompanionInformation;
    })(SpawnInformation);
    Protocol.SpawnCompanionInformation = SpawnCompanionInformation;
    var SpawnMonsterInformation = (function(_super) {
        __extends(SpawnMonsterInformation, _super);

        function SpawnMonsterInformation() {
            this.creatureGrade = 0;
            _super.call(this)
        }
        SpawnMonsterInformation.prototype.getMessageId = function() {
            return SpawnMonsterInformation.ID;
        };
        SpawnMonsterInformation.prototype.reset = function() {
            this.creatureGrade = 0;
        };
        SpawnMonsterInformation.prototype.serialize = function(output) {
            this.serializeAs_SpawnMonsterInformation(output);
        };
        SpawnMonsterInformation.prototype.deserialize = function(input) {
            this.deserializeAs_SpawnMonsterInformation(input);
        };
        SpawnMonsterInformation.prototype.serializeAs_SpawnMonsterInformation = function(output) {
            _super.prototype.serializeAs_BaseSpawnMonsterInformation(this, output);
            if (this.creatureGrade < 0) {
                throw new Error("Forbidden value (" + this.creatureGrade + ") on element creatureGrade.");
            }
            output.writeByte(this.creatureGrade);
        };
        SpawnMonsterInformation.prototype.deserializeAs_SpawnMonsterInformation = function(input) {
            _super.prototype.deserializeBaseSpawnMonsterInformation(this, input);
            this.creatureGrade = input.readByte();
            if (this.creatureGrade < 0) {
                throw new Error("Forbidden value (" + this.creatureGrade + ") on element of SpawnMonsterInformation.creatureGrade.");
            }
        };
        SpawnMonsterInformation.ID = 3264;
        return SpawnMonsterInformation;
    })(BaseSpawnMonsterInformation);
    Protocol.SpawnMonsterInformation = SpawnMonsterInformation;
    var SpawnScaledMonsterInformation = (function(_super) {
        __extends(SpawnScaledMonsterInformation, _super);

        function SpawnScaledMonsterInformation() {
            this.creatureLevel = 0;
            _super.call(this)
        }
        SpawnScaledMonsterInformation.prototype.getMessageId = function() {
            return SpawnScaledMonsterInformation.ID;
        };
        SpawnScaledMonsterInformation.prototype.reset = function() {
            this.creatureLevel = 0;
        };
        SpawnScaledMonsterInformation.prototype.serialize = function(output) {
            this.serializeAs_SpawnScaledMonsterInformation(output);
        };
        SpawnScaledMonsterInformation.prototype.deserialize = function(input) {
            this.deserializeAs_SpawnScaledMonsterInformation(input);
        };
        SpawnScaledMonsterInformation.prototype.serializeAs_SpawnScaledMonsterInformation = function(output) {
            _super.prototype.serializeAs_BaseSpawnMonsterInformation(this, output);
            if (this.creatureLevel < 0) {
                throw new Error("Forbidden value (" + this.creatureLevel + ") on element creatureLevel.");
            }
            output.writeShort(this.creatureLevel);
        };
        SpawnScaledMonsterInformation.prototype.deserializeAs_SpawnScaledMonsterInformation = function(input) {
            _super.prototype.deserializeBaseSpawnMonsterInformation(this, input);
            this.creatureLevel = input.readShort();
            if (this.creatureLevel < 0) {
                throw new Error("Forbidden value (" + this.creatureLevel + ") on element of SpawnScaledMonsterInformation.creatureLevel.");
            }
        };
        SpawnScaledMonsterInformation.ID = 8617;
        return SpawnScaledMonsterInformation;
    })(BaseSpawnMonsterInformation);
    Protocol.SpawnScaledMonsterInformation = SpawnScaledMonsterInformation;
    var FightEntityDispositionInformations = (function(_super) {
        __extends(FightEntityDispositionInformations, _super);

        function FightEntityDispositionInformations() {
            this.carryingCharacterId = 0;
            _super.call(this)
        }
        FightEntityDispositionInformations.prototype.getMessageId = function() {
            return FightEntityDispositionInformations.ID;
        };
        FightEntityDispositionInformations.prototype.reset = function() {
            this.carryingCharacterId = 0;
        };
        FightEntityDispositionInformations.prototype.serialize = function(output) {
            this.serializeAs_FightEntityDispositionInformations(output);
        };
        FightEntityDispositionInformations.prototype.deserialize = function(input) {
            this.deserializeAs_FightEntityDispositionInformations(input);
        };
        FightEntityDispositionInformations.prototype.serializeAs_FightEntityDispositionInformations = function(output) {
            _super.prototype.serializeAs_EntityDispositionInformations(this, output);
            if (this.carryingCharacterId < -9007199254740990 || this.carryingCharacterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.carryingCharacterId + ") on element carryingCharacterId.");
            }
            output.writeDouble(this.carryingCharacterId);
        };
        FightEntityDispositionInformations.prototype.deserializeAs_FightEntityDispositionInformations = function(input) {
            _super.prototype.deserializeEntityDispositionInformations(this, input);
            this.carryingCharacterId = input.readDouble();
            if (this.carryingCharacterId < -9007199254740990 || this.carryingCharacterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.carryingCharacterId + ") on element of FightEntityDispositionInformations.carryingCharacterId.");
            }
        };
        FightEntityDispositionInformations.ID = 4954;
        return FightEntityDispositionInformations;
    })(EntityDispositionInformations);
    Protocol.FightEntityDispositionInformations = FightEntityDispositionInformations;
    var GameRolePlayActorInformations = (function(_super) {
        __extends(GameRolePlayActorInformations, _super);

        function GameRolePlayActorInformations() {

            _super.call(this)
        }
        GameRolePlayActorInformations.prototype.getMessageId = function() {
            return GameRolePlayActorInformations.ID;
        };
        GameRolePlayActorInformations.prototype.reset = function() {

        };
        GameRolePlayActorInformations.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayActorInformations(output);
        };
        GameRolePlayActorInformations.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayActorInformations(input);
        };
        GameRolePlayActorInformations.prototype.serializeAs_GameRolePlayActorInformations = function(output) {
            _super.prototype.serializeAs_GameContextActorInformations(this, output);
        };
        GameRolePlayActorInformations.prototype.deserializeAs_GameRolePlayActorInformations = function(input) {
            _super.prototype.deserializeGameContextActorInformations(this, input);
        };
        GameRolePlayActorInformations.ID = 2333;
        return GameRolePlayActorInformations;
    })(GameContextActorInformations);
    Protocol.GameRolePlayActorInformations = GameRolePlayActorInformations;
    var GameRolePlayTaxCollectorInformations = (function(_super) {
        __extends(GameRolePlayTaxCollectorInformations, _super);

        function GameRolePlayTaxCollectorInformations() {
            this.identification = new TaxCollectorStaticInformations();
            this.guildLevel = 0;
            this.taxCollectorAttack = 0;
            _super.call(this)
        }
        GameRolePlayTaxCollectorInformations.prototype.getMessageId = function() {
            return GameRolePlayTaxCollectorInformations.ID;
        };
        GameRolePlayTaxCollectorInformations.prototype.reset = function() {
            this.identification = new TaxCollectorStaticInformations();
            this.guildLevel = 0;
            this.taxCollectorAttack = 0;
        };
        GameRolePlayTaxCollectorInformations.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayTaxCollectorInformations(output);
        };
        GameRolePlayTaxCollectorInformations.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayTaxCollectorInformations(input);
        };
        GameRolePlayTaxCollectorInformations.prototype.serializeAs_GameRolePlayTaxCollectorInformations = function(output) {
            _super.prototype.serializeAs_GameRolePlayActorInformations(this, output);
            output.writeShort(this.identification.getTypeId());
            this.identification.serialize(output);
            if (this.guildLevel < 0 || this.guildLevel > 255) {
                throw new Error("Forbidden value (" + this.guildLevel + ") on element guildLevel.");
            }
            output.writeByte(this.guildLevel);
            output.writeInt(this.taxCollectorAttack);
        };
        GameRolePlayTaxCollectorInformations.prototype.deserializeAs_GameRolePlayTaxCollectorInformations = function(input) {
            _super.prototype.deserializeGameRolePlayActorInformations(this, input);
            var _id1 = input.readUnsignedShort();
            this.identification = ProtocolTypeManager.getInstance(TaxCollectorStaticInformations, _id1);
            this.identification.deserialize(input);
            this.guildLevel = input.readUnsignedByte();
            if (this.guildLevel < 0 || this.guildLevel > 255) {
                throw new Error("Forbidden value (" + this.guildLevel + ") on element of GameRolePlayTaxCollectorInformations.guildLevel.");
            }
            this.taxCollectorAttack = input.readInt();
        };
        GameRolePlayTaxCollectorInformations.ID = 3424;
        return GameRolePlayTaxCollectorInformations;
    })(GameRolePlayActorInformations);
    Protocol.GameRolePlayTaxCollectorInformations = GameRolePlayTaxCollectorInformations;
    var IdentifiedEntityDispositionInformations = (function(_super) {
        __extends(IdentifiedEntityDispositionInformations, _super);

        function IdentifiedEntityDispositionInformations() {
            this.id = 0;
            _super.call(this)
        }
        IdentifiedEntityDispositionInformations.prototype.getMessageId = function() {
            return IdentifiedEntityDispositionInformations.ID;
        };
        IdentifiedEntityDispositionInformations.prototype.reset = function() {
            this.id = 0;
        };
        IdentifiedEntityDispositionInformations.prototype.serialize = function(output) {
            this.serializeAs_IdentifiedEntityDispositionInformations(output);
        };
        IdentifiedEntityDispositionInformations.prototype.deserialize = function(input) {
            this.deserializeAs_IdentifiedEntityDispositionInformations(input);
        };
        IdentifiedEntityDispositionInformations.prototype.serializeAs_IdentifiedEntityDispositionInformations = function(output) {
            _super.prototype.serializeAs_EntityDispositionInformations(this, output);
            if (this.id < -9007199254740990 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeDouble(this.id);
        };
        IdentifiedEntityDispositionInformations.prototype.deserializeAs_IdentifiedEntityDispositionInformations = function(input) {
            _super.prototype.deserializeEntityDispositionInformations(this, input);
            this.id = input.readDouble();
            if (this.id < -9007199254740990 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element of IdentifiedEntityDispositionInformations.id.");
            }
        };
        IdentifiedEntityDispositionInformations.ID = 4029;
        return IdentifiedEntityDispositionInformations;
    })(EntityDispositionInformations);
    Protocol.IdentifiedEntityDispositionInformations = IdentifiedEntityDispositionInformations;
    var MapCoordinates = (function() {

        function MapCoordinates() {
            this.worldX = 0;
            this.worldY = 0;

        }
        MapCoordinates.prototype.getMessageId = function() {
            return MapCoordinates.ID;
        };
        MapCoordinates.prototype.reset = function() {
            this.worldX = 0;
            this.worldY = 0;
        };
        MapCoordinates.prototype.serialize = function(output) {
            this.serializeAs_MapCoordinates(output);
        };
        MapCoordinates.prototype.deserialize = function(input) {
            this.deserializeAs_MapCoordinates(input);
        };
        MapCoordinates.prototype.serializeAs_MapCoordinates = function(output) {
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
            }
            output.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
            }
            output.writeShort(this.worldY);
        };
        MapCoordinates.prototype.deserializeAs_MapCoordinates = function(input) {
            this.worldX = input.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element of MapCoordinates.worldX.");
            }
            this.worldY = input.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element of MapCoordinates.worldY.");
            }
        };
        MapCoordinates.ID = 2571;
        return MapCoordinates;
    })();
    Protocol.MapCoordinates = MapCoordinates;
    var MapCoordinatesAndId = (function(_super) {
        __extends(MapCoordinatesAndId, _super);

        function MapCoordinatesAndId() {
            this.mapId = 0;
            _super.call(this)
        }
        MapCoordinatesAndId.prototype.getMessageId = function() {
            return MapCoordinatesAndId.ID;
        };
        MapCoordinatesAndId.prototype.reset = function() {
            this.mapId = 0;
        };
        MapCoordinatesAndId.prototype.serialize = function(output) {
            this.serializeAs_MapCoordinatesAndId(output);
        };
        MapCoordinatesAndId.prototype.deserialize = function(input) {
            this.deserializeAs_MapCoordinatesAndId(input);
        };
        MapCoordinatesAndId.prototype.serializeAs_MapCoordinatesAndId = function(output) {
            _super.prototype.serializeAs_MapCoordinates(this, output);
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
        };
        MapCoordinatesAndId.prototype.deserializeAs_MapCoordinatesAndId = function(input) {
            _super.prototype.deserializeMapCoordinates(this, input);
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of MapCoordinatesAndId.mapId.");
            }
        };
        MapCoordinatesAndId.ID = 5358;
        return MapCoordinatesAndId;
    })(MapCoordinates);
    Protocol.MapCoordinatesAndId = MapCoordinatesAndId;
    var MapCoordinatesExtended = (function(_super) {
        __extends(MapCoordinatesExtended, _super);

        function MapCoordinatesExtended() {
            this.subAreaId = 0;
            _super.call(this)
        }
        MapCoordinatesExtended.prototype.getMessageId = function() {
            return MapCoordinatesExtended.ID;
        };
        MapCoordinatesExtended.prototype.reset = function() {
            this.subAreaId = 0;
        };
        MapCoordinatesExtended.prototype.serialize = function(output) {
            this.serializeAs_MapCoordinatesExtended(output);
        };
        MapCoordinatesExtended.prototype.deserialize = function(input) {
            this.deserializeAs_MapCoordinatesExtended(input);
        };
        MapCoordinatesExtended.prototype.serializeAs_MapCoordinatesExtended = function(output) {
            _super.prototype.serializeAs_MapCoordinatesAndId(this, output);
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
        };
        MapCoordinatesExtended.prototype.deserializeAs_MapCoordinatesExtended = function(input) {
            _super.prototype.deserializeMapCoordinatesAndId(this, input);
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of MapCoordinatesExtended.subAreaId.");
            }
        };
        MapCoordinatesExtended.ID = 1591;
        return MapCoordinatesExtended;
    })(MapCoordinatesAndId);
    Protocol.MapCoordinatesExtended = MapCoordinatesExtended;
    var AlignmentWarEffortInformation = (function() {

        function AlignmentWarEffortInformation() {
            this.alignmentSide = 0;
            this.alignmentWarEffort = 0;

        }
        AlignmentWarEffortInformation.prototype.getMessageId = function() {
            return AlignmentWarEffortInformation.ID;
        };
        AlignmentWarEffortInformation.prototype.reset = function() {
            this.alignmentSide = 0;
            this.alignmentWarEffort = 0;
        };
        AlignmentWarEffortInformation.prototype.serialize = function(output) {
            this.serializeAs_AlignmentWarEffortInformation(output);
        };
        AlignmentWarEffortInformation.prototype.deserialize = function(input) {
            this.deserializeAs_AlignmentWarEffortInformation(input);
        };
        AlignmentWarEffortInformation.prototype.serializeAs_AlignmentWarEffortInformation = function(output) {
            output.writeByte(this.alignmentSide);
            if (this.alignmentWarEffort < 0 || this.alignmentWarEffort > 9007199254740990) {
                throw new Error("Forbidden value (" + this.alignmentWarEffort + ") on element alignmentWarEffort.");
            }
            output.writeVarLong(this.alignmentWarEffort);
        };
        AlignmentWarEffortInformation.prototype.deserializeAs_AlignmentWarEffortInformation = function(input) {
            this.alignmentSide = input.readByte();
            this.alignmentWarEffort = input.readVarUhLong();
            if (this.alignmentWarEffort < 0 || this.alignmentWarEffort > 9007199254740990) {
                throw new Error("Forbidden value (" + this.alignmentWarEffort + ") on element of AlignmentWarEffortInformation.alignmentWarEffort.");
            }
        };
        AlignmentWarEffortInformation.ID = 2771;
        return AlignmentWarEffortInformation;
    })();
    Protocol.AlignmentWarEffortInformation = AlignmentWarEffortInformation;
    var AbstractSocialGroupInfos = (function() {

        function AbstractSocialGroupInfos() {


        }
        AbstractSocialGroupInfos.prototype.getMessageId = function() {
            return AbstractSocialGroupInfos.ID;
        };
        AbstractSocialGroupInfos.prototype.reset = function() {

        };
        AbstractSocialGroupInfos.prototype.serialize = function(output) {
            this.serializeAs_AbstractSocialGroupInfos(output);
        };
        AbstractSocialGroupInfos.prototype.deserialize = function(input) {
            this.deserializeAs_AbstractSocialGroupInfos(input);
        };
        AbstractSocialGroupInfos.prototype.serializeAs_AbstractSocialGroupInfos = function(output) {

        };
        AbstractSocialGroupInfos.prototype.deserializeAs_AbstractSocialGroupInfos = function(input) {

        };
        AbstractSocialGroupInfos.ID = 781;
        return AbstractSocialGroupInfos;
    })();
    Protocol.AbstractSocialGroupInfos = AbstractSocialGroupInfos;
    var BasicAllianceInformations = (function(_super) {
        __extends(BasicAllianceInformations, _super);

        function BasicAllianceInformations() {
            this.allianceId = 0;
            this.allianceTag = "";
            _super.call(this)
        }
        BasicAllianceInformations.prototype.getMessageId = function() {
            return BasicAllianceInformations.ID;
        };
        BasicAllianceInformations.prototype.reset = function() {
            this.allianceId = 0;
            this.allianceTag = "";
        };
        BasicAllianceInformations.prototype.serialize = function(output) {
            this.serializeAs_BasicAllianceInformations(output);
        };
        BasicAllianceInformations.prototype.deserialize = function(input) {
            this.deserializeAs_BasicAllianceInformations(input);
        };
        BasicAllianceInformations.prototype.serializeAs_BasicAllianceInformations = function(output) {
            _super.prototype.serializeAs_AbstractSocialGroupInfos(this, output);
            if (this.allianceId < 0) {
                throw new Error("Forbidden value (" + this.allianceId + ") on element allianceId.");
            }
            output.writeVarInt(this.allianceId);
            output.writeUTF(this.allianceTag);
        };
        BasicAllianceInformations.prototype.deserializeAs_BasicAllianceInformations = function(input) {
            _super.prototype.deserializeAbstractSocialGroupInfos(this, input);
            this.allianceId = input.readVarUhInt();
            if (this.allianceId < 0) {
                throw new Error("Forbidden value (" + this.allianceId + ") on element of BasicAllianceInformations.allianceId.");
            }
            this.allianceTag = input.readUTF();
        };
        BasicAllianceInformations.ID = 3988;
        return BasicAllianceInformations;
    })(AbstractSocialGroupInfos);
    Protocol.BasicAllianceInformations = BasicAllianceInformations;
    var BasicNamedAllianceInformations = (function(_super) {
        __extends(BasicNamedAllianceInformations, _super);

        function BasicNamedAllianceInformations() {
            this.allianceName = "";
            _super.call(this)
        }
        BasicNamedAllianceInformations.prototype.getMessageId = function() {
            return BasicNamedAllianceInformations.ID;
        };
        BasicNamedAllianceInformations.prototype.reset = function() {
            this.allianceName = "";
        };
        BasicNamedAllianceInformations.prototype.serialize = function(output) {
            this.serializeAs_BasicNamedAllianceInformations(output);
        };
        BasicNamedAllianceInformations.prototype.deserialize = function(input) {
            this.deserializeAs_BasicNamedAllianceInformations(input);
        };
        BasicNamedAllianceInformations.prototype.serializeAs_BasicNamedAllianceInformations = function(output) {
            _super.prototype.serializeAs_BasicAllianceInformations(this, output);
            output.writeUTF(this.allianceName);
        };
        BasicNamedAllianceInformations.prototype.deserializeAs_BasicNamedAllianceInformations = function(input) {
            _super.prototype.deserializeBasicAllianceInformations(this, input);
            this.allianceName = input.readUTF();
        };
        BasicNamedAllianceInformations.ID = 5935;
        return BasicNamedAllianceInformations;
    })(BasicAllianceInformations);
    Protocol.BasicNamedAllianceInformations = BasicNamedAllianceInformations;
    var AllianceInformations = (function(_super) {
        __extends(AllianceInformations, _super);

        function AllianceInformations() {
            this.allianceEmblem = new GuildEmblem();
            _super.call(this)
        }
        AllianceInformations.prototype.getMessageId = function() {
            return AllianceInformations.ID;
        };
        AllianceInformations.prototype.reset = function() {
            this.allianceEmblem = new GuildEmblem();
        };
        AllianceInformations.prototype.serialize = function(output) {
            this.serializeAs_AllianceInformations(output);
        };
        AllianceInformations.prototype.deserialize = function(input) {
            this.deserializeAs_AllianceInformations(input);
        };
        AllianceInformations.prototype.serializeAs_AllianceInformations = function(output) {
            _super.prototype.serializeAs_BasicNamedAllianceInformations(this, output);
            this.allianceEmblem.serializeAs_GuildEmblem(output);
        };
        AllianceInformations.prototype.deserializeAs_AllianceInformations = function(input) {
            _super.prototype.deserializeBasicNamedAllianceInformations(this, input);
            this.allianceEmblem = new GuildEmblem();
            this.allianceEmblem.deserialize(input);
        };
        AllianceInformations.ID = 2484;
        return AllianceInformations;
    })(BasicNamedAllianceInformations);
    Protocol.AllianceInformations = AllianceInformations;
    var AlternativeMonstersInGroupLightInformations = (function() {

        function AlternativeMonstersInGroupLightInformations() {
            this.playerCount = 0;
            this.monsters = [];

        }
        AlternativeMonstersInGroupLightInformations.prototype.getMessageId = function() {
            return AlternativeMonstersInGroupLightInformations.ID;
        };
        AlternativeMonstersInGroupLightInformations.prototype.reset = function() {
            this.playerCount = 0;
            this.monsters = [];
        };
        AlternativeMonstersInGroupLightInformations.prototype.serialize = function(output) {
            this.serializeAs_AlternativeMonstersInGroupLightInformations(output);
        };
        AlternativeMonstersInGroupLightInformations.prototype.deserialize = function(input) {
            this.deserializeAs_AlternativeMonstersInGroupLightInformations(input);
        };
        AlternativeMonstersInGroupLightInformations.prototype.serializeAs_AlternativeMonstersInGroupLightInformations = function(output) {
            output.writeInt(this.playerCount);
            output.writeShort(this.monsters.length);
            for (var _i2 = 0; _i2 < this.monsters.length; _i2++) {
                (this.monsters[_i2]).serializeAs_MonsterInGroupLightInformations(output);
            }
        };
        AlternativeMonstersInGroupLightInformations.prototype.deserializeAs_AlternativeMonstersInGroupLightInformations = function(input) {
            var _item2 = null;
            this.playerCount = input.readInt();
            var _monstersLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _monstersLen; _i2++) {
                _item2 = new MonsterInGroupLightInformations();
                _item2.deserialize(input);
                this.monsters.push(_item2);
            }
        };
        AlternativeMonstersInGroupLightInformations.ID = 1267;
        return AlternativeMonstersInGroupLightInformations;
    })();
    Protocol.AlternativeMonstersInGroupLightInformations = AlternativeMonstersInGroupLightInformations;
    var AnomalySubareaInformation = (function() {

        function AnomalySubareaInformation() {
            this.subAreaId = 0;
            this.rewardRate = 0;
            this.hasAnomaly = false;
            this.anomalyClosingTime = 0;

        }
        AnomalySubareaInformation.prototype.getMessageId = function() {
            return AnomalySubareaInformation.ID;
        };
        AnomalySubareaInformation.prototype.reset = function() {
            this.subAreaId = 0;
            this.rewardRate = 0;
            this.hasAnomaly = false;
            this.anomalyClosingTime = 0;
        };
        AnomalySubareaInformation.prototype.serialize = function(output) {
            this.serializeAs_AnomalySubareaInformation(output);
        };
        AnomalySubareaInformation.prototype.deserialize = function(input) {
            this.deserializeAs_AnomalySubareaInformation(input);
        };
        AnomalySubareaInformation.prototype.serializeAs_AnomalySubareaInformation = function(output) {
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
            output.writeVarShort(this.rewardRate);
            output.writeBoolean(this.hasAnomaly);
            if (this.anomalyClosingTime < 0 || this.anomalyClosingTime > 9007199254740990) {
                throw new Error("Forbidden value (" + this.anomalyClosingTime + ") on element anomalyClosingTime.");
            }
            output.writeVarLong(this.anomalyClosingTime);
        };
        AnomalySubareaInformation.prototype.deserializeAs_AnomalySubareaInformation = function(input) {
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of AnomalySubareaInformation.subAreaId.");
            }
            this.rewardRate = input.readVarShort();
            this.hasAnomaly = input.readBoolean();
            this.anomalyClosingTime = input.readVarUhLong();
            if (this.anomalyClosingTime < 0 || this.anomalyClosingTime > 9007199254740990) {
                throw new Error("Forbidden value (" + this.anomalyClosingTime + ") on element of AnomalySubareaInformation.anomalyClosingTime.");
            }
        };
        AnomalySubareaInformation.ID = 9877;
        return AnomalySubareaInformation;
    })();
    Protocol.AnomalySubareaInformation = AnomalySubareaInformation;
    var AtlasPointsInformations = (function() {

        function AtlasPointsInformations() {
            this.type = 0;
            this.coords = [];

        }
        AtlasPointsInformations.prototype.getMessageId = function() {
            return AtlasPointsInformations.ID;
        };
        AtlasPointsInformations.prototype.reset = function() {
            this.type = 0;
            this.coords = [];
        };
        AtlasPointsInformations.prototype.serialize = function(output) {
            this.serializeAs_AtlasPointsInformations(output);
        };
        AtlasPointsInformations.prototype.deserialize = function(input) {
            this.deserializeAs_AtlasPointsInformations(input);
        };
        AtlasPointsInformations.prototype.serializeAs_AtlasPointsInformations = function(output) {
            output.writeByte(this.type);
            output.writeShort(this.coords.length);
            for (var _i2 = 0; _i2 < this.coords.length; _i2++) {
                (this.coords[_i2]).serializeAs_MapCoordinatesExtended(output);
            }
        };
        AtlasPointsInformations.prototype.deserializeAs_AtlasPointsInformations = function(input) {
            var _item2 = null;
            this.type = input.readByte();
            if (this.type < 0) {
                throw new Error("Forbidden value (" + this.type + ") on element of AtlasPointsInformations.type.");
            }
            var _coordsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _coordsLen; _i2++) {
                _item2 = new MapCoordinatesExtended();
                _item2.deserialize(input);
                this.coords.push(_item2);
            }
        };
        AtlasPointsInformations.ID = 6171;
        return AtlasPointsInformations;
    })();
    Protocol.AtlasPointsInformations = AtlasPointsInformations;
    var BasicGuildInformations = (function(_super) {
        __extends(BasicGuildInformations, _super);

        function BasicGuildInformations() {
            this.guildId = 0;
            this.guildName = "";
            this.guildLevel = 0;
            _super.call(this)
        }
        BasicGuildInformations.prototype.getMessageId = function() {
            return BasicGuildInformations.ID;
        };
        BasicGuildInformations.prototype.reset = function() {
            this.guildId = 0;
            this.guildName = "";
            this.guildLevel = 0;
        };
        BasicGuildInformations.prototype.serialize = function(output) {
            this.serializeAs_BasicGuildInformations(output);
        };
        BasicGuildInformations.prototype.deserialize = function(input) {
            this.deserializeAs_BasicGuildInformations(input);
        };
        BasicGuildInformations.prototype.serializeAs_BasicGuildInformations = function(output) {
            _super.prototype.serializeAs_AbstractSocialGroupInfos(this, output);
            if (this.guildId < 0) {
                throw new Error("Forbidden value (" + this.guildId + ") on element guildId.");
            }
            output.writeVarInt(this.guildId);
            output.writeUTF(this.guildName);
            if (this.guildLevel < 0 || this.guildLevel > 200) {
                throw new Error("Forbidden value (" + this.guildLevel + ") on element guildLevel.");
            }
            output.writeByte(this.guildLevel);
        };
        BasicGuildInformations.prototype.deserializeAs_BasicGuildInformations = function(input) {
            _super.prototype.deserializeAbstractSocialGroupInfos(this, input);
            this.guildId = input.readVarUhInt();
            if (this.guildId < 0) {
                throw new Error("Forbidden value (" + this.guildId + ") on element of BasicGuildInformations.guildId.");
            }
            this.guildName = input.readUTF();
            this.guildLevel = input.readUnsignedByte();
            if (this.guildLevel < 0 || this.guildLevel > 200) {
                throw new Error("Forbidden value (" + this.guildLevel + ") on element of BasicGuildInformations.guildLevel.");
            }
        };
        BasicGuildInformations.ID = 492;
        return BasicGuildInformations;
    })(AbstractSocialGroupInfos);
    Protocol.BasicGuildInformations = BasicGuildInformations;
    var BreachBranch = (function() {

        function BreachBranch() {
            this.room = 0;
            this.element = 0;
            this.bosses = [];
            this.map = 0;
            this.score = 0;
            this.relativeScore = 0;
            this.monsters = [];

        }
        BreachBranch.prototype.getMessageId = function() {
            return BreachBranch.ID;
        };
        BreachBranch.prototype.reset = function() {
            this.room = 0;
            this.element = 0;
            this.bosses = [];
            this.map = 0;
            this.score = 0;
            this.relativeScore = 0;
            this.monsters = [];
        };
        BreachBranch.prototype.serialize = function(output) {
            this.serializeAs_BreachBranch(output);
        };
        BreachBranch.prototype.deserialize = function(input) {
            this.deserializeAs_BreachBranch(input);
        };
        BreachBranch.prototype.serializeAs_BreachBranch = function(output) {
            if (this.room < 0) {
                throw new Error("Forbidden value (" + this.room + ") on element room.");
            }
            output.writeByte(this.room);
            if (this.element < 0) {
                throw new Error("Forbidden value (" + this.element + ") on element element.");
            }
            output.writeInt(this.element);
            output.writeShort(this.bosses.length);
            for (var _i3 = 0; _i3 < this.bosses.length; _i3++) {
                (this.bosses[_i3]).serializeAs_MonsterInGroupLightInformations(output);
            }
            if (this.map < 0 || this.map > 9007199254740990) {
                throw new Error("Forbidden value (" + this.map + ") on element map.");
            }
            output.writeDouble(this.map);
            output.writeShort(this.score);
            output.writeShort(this.relativeScore);
            output.writeShort(this.monsters.length);
            for (var _i7 = 0; _i7 < this.monsters.length; _i7++) {
                (this.monsters[_i7]).serializeAs_MonsterInGroupLightInformations(output);
            }
        };
        BreachBranch.prototype.deserializeAs_BreachBranch = function(input) {
            var _item3 = null;
            var _item7 = null;
            this.room = input.readByte();
            if (this.room < 0) {
                throw new Error("Forbidden value (" + this.room + ") on element of BreachBranch.room.");
            }
            this.element = input.readInt();
            if (this.element < 0) {
                throw new Error("Forbidden value (" + this.element + ") on element of BreachBranch.element.");
            }
            var _bossesLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _bossesLen; _i3++) {
                _item3 = new MonsterInGroupLightInformations();
                _item3.deserialize(input);
                this.bosses.push(_item3);
            }
            this.map = input.readDouble();
            if (this.map < 0 || this.map > 9007199254740990) {
                throw new Error("Forbidden value (" + this.map + ") on element of BreachBranch.map.");
            }
            this.score = input.readShort();
            this.relativeScore = input.readShort();
            var _monstersLen = input.readUnsignedShort();
            for (var _i7 = 0; _i7 < _monstersLen; _i7++) {
                _item7 = new MonsterInGroupLightInformations();
                _item7.deserialize(input);
                this.monsters.push(_item7);
            }
        };
        BreachBranch.ID = 4379;
        return BreachBranch;
    })();
    Protocol.BreachBranch = BreachBranch;
    var BreachReward = (function() {

        function BreachReward() {
            this.id = 0;
            this.buyLocks = [];
            this.buyCriterion = "";
            this.remainingQty = 0;
            this.price = 0;

        }
        BreachReward.prototype.getMessageId = function() {
            return BreachReward.ID;
        };
        BreachReward.prototype.reset = function() {
            this.id = 0;
            this.buyLocks = [];
            this.buyCriterion = "";
            this.remainingQty = 0;
            this.price = 0;
        };
        BreachReward.prototype.serialize = function(output) {
            this.serializeAs_BreachReward(output);
        };
        BreachReward.prototype.deserialize = function(input) {
            this.deserializeAs_BreachReward(input);
        };
        BreachReward.prototype.serializeAs_BreachReward = function(output) {
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarInt(this.id);
            output.writeShort(this.buyLocks.length);
            for (var _i2 = 0; _i2 < this.buyLocks.length; _i2++) {
                output.writeByte(this.buyLocks[_i2]);
            }
            output.writeUTF(this.buyCriterion);
            output.writeVarInt(this.remainingQty);
            if (this.price < 0) {
                throw new Error("Forbidden value (" + this.price + ") on element price.");
            }
            output.writeVarInt(this.price);
        };
        BreachReward.prototype.deserializeAs_BreachReward = function(input) {
            var _val2 = 0;
            this.id = input.readVarUhInt();
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element of BreachReward.id.");
            }
            var _buyLocksLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _buyLocksLen; _i2++) {
                _val2 = input.readByte();
                if (_val2 < 0) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of buyLocks.");
                }
                this.buyLocks.push(_val2);
            }
            this.buyCriterion = input.readUTF();
            this.remainingQty = input.readVarInt();
            this.price = input.readVarUhInt();
            if (this.price < 0) {
                throw new Error("Forbidden value (" + this.price + ") on element of BreachReward.price.");
            }
        };
        BreachReward.ID = 5533;
        return BreachReward;
    })();
    Protocol.BreachReward = BreachReward;
    var ExtendedBreachBranch = (function(_super) {
        __extends(ExtendedBreachBranch, _super);

        function ExtendedBreachBranch() {
            this.rewards = [];
            this.modifier = 0;
            this.prize = 0;
            _super.call(this)
        }
        ExtendedBreachBranch.prototype.getMessageId = function() {
            return ExtendedBreachBranch.ID;
        };
        ExtendedBreachBranch.prototype.reset = function() {
            this.rewards = [];
            this.modifier = 0;
            this.prize = 0;
        };
        ExtendedBreachBranch.prototype.serialize = function(output) {
            this.serializeAs_ExtendedBreachBranch(output);
        };
        ExtendedBreachBranch.prototype.deserialize = function(input) {
            this.deserializeAs_ExtendedBreachBranch(input);
        };
        ExtendedBreachBranch.prototype.serializeAs_ExtendedBreachBranch = function(output) {
            _super.prototype.serializeAs_BreachBranch(this, output);
            output.writeShort(this.rewards.length);
            for (var _i1 = 0; _i1 < this.rewards.length; _i1++) {
                (this.rewards[_i1]).serializeAs_BreachReward(output);
            }
            output.writeVarInt(this.modifier);
            if (this.prize < 0) {
                throw new Error("Forbidden value (" + this.prize + ") on element prize.");
            }
            output.writeVarInt(this.prize);
        };
        ExtendedBreachBranch.prototype.deserializeAs_ExtendedBreachBranch = function(input) {
            var _item1 = null;
            _super.prototype.deserializeBreachBranch(this, input);
            var _rewardsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _rewardsLen; _i1++) {
                _item1 = new BreachReward();
                _item1.deserialize(input);
                this.rewards.push(_item1);
            }
            this.modifier = input.readVarInt();
            this.prize = input.readVarUhInt();
            if (this.prize < 0) {
                throw new Error("Forbidden value (" + this.prize + ") on element of ExtendedBreachBranch.prize.");
            }
        };
        ExtendedBreachBranch.ID = 4962;
        return ExtendedBreachBranch;
    })(BreachBranch);
    Protocol.ExtendedBreachBranch = ExtendedBreachBranch;
    var ExtendedLockedBreachBranch = (function(_super) {
        __extends(ExtendedLockedBreachBranch, _super);

        function ExtendedLockedBreachBranch() {
            this.unlockPrice = 0;
            _super.call(this)
        }
        ExtendedLockedBreachBranch.prototype.getMessageId = function() {
            return ExtendedLockedBreachBranch.ID;
        };
        ExtendedLockedBreachBranch.prototype.reset = function() {
            this.unlockPrice = 0;
        };
        ExtendedLockedBreachBranch.prototype.serialize = function(output) {
            this.serializeAs_ExtendedLockedBreachBranch(output);
        };
        ExtendedLockedBreachBranch.prototype.deserialize = function(input) {
            this.deserializeAs_ExtendedLockedBreachBranch(input);
        };
        ExtendedLockedBreachBranch.prototype.serializeAs_ExtendedLockedBreachBranch = function(output) {
            _super.prototype.serializeAs_ExtendedBreachBranch(this, output);
            if (this.unlockPrice < 0) {
                throw new Error("Forbidden value (" + this.unlockPrice + ") on element unlockPrice.");
            }
            output.writeVarInt(this.unlockPrice);
        };
        ExtendedLockedBreachBranch.prototype.deserializeAs_ExtendedLockedBreachBranch = function(input) {
            _super.prototype.deserializeExtendedBreachBranch(this, input);
            this.unlockPrice = input.readVarUhInt();
            if (this.unlockPrice < 0) {
                throw new Error("Forbidden value (" + this.unlockPrice + ") on element of ExtendedLockedBreachBranch.unlockPrice.");
            }
        };
        ExtendedLockedBreachBranch.ID = 3547;
        return ExtendedLockedBreachBranch;
    })(ExtendedBreachBranch);
    Protocol.ExtendedLockedBreachBranch = ExtendedLockedBreachBranch;
    var ArenaLeagueRanking = (function() {

        function ArenaLeagueRanking() {
            this.rank = 0;
            this.leagueId = 0;
            this.leaguePoints = 0;
            this.totalLeaguePoints = 0;
            this.ladderPosition = 0;

        }
        ArenaLeagueRanking.prototype.getMessageId = function() {
            return ArenaLeagueRanking.ID;
        };
        ArenaLeagueRanking.prototype.reset = function() {
            this.rank = 0;
            this.leagueId = 0;
            this.leaguePoints = 0;
            this.totalLeaguePoints = 0;
            this.ladderPosition = 0;
        };
        ArenaLeagueRanking.prototype.serialize = function(output) {
            this.serializeAs_ArenaLeagueRanking(output);
        };
        ArenaLeagueRanking.prototype.deserialize = function(input) {
            this.deserializeAs_ArenaLeagueRanking(input);
        };
        ArenaLeagueRanking.prototype.serializeAs_ArenaLeagueRanking = function(output) {
            if (this.rank < 0 || this.rank > 20000) {
                throw new Error("Forbidden value (" + this.rank + ") on element rank.");
            }
            output.writeVarShort(this.rank);
            if (this.leagueId < 0) {
                throw new Error("Forbidden value (" + this.leagueId + ") on element leagueId.");
            }
            output.writeVarShort(this.leagueId);
            output.writeVarShort(this.leaguePoints);
            output.writeVarShort(this.totalLeaguePoints);
            output.writeInt(this.ladderPosition);
        };
        ArenaLeagueRanking.prototype.deserializeAs_ArenaLeagueRanking = function(input) {
            this.rank = input.readVarUhShort();
            if (this.rank < 0 || this.rank > 20000) {
                throw new Error("Forbidden value (" + this.rank + ") on element of ArenaLeagueRanking.rank.");
            }
            this.leagueId = input.readVarUhShort();
            if (this.leagueId < 0) {
                throw new Error("Forbidden value (" + this.leagueId + ") on element of ArenaLeagueRanking.leagueId.");
            }
            this.leaguePoints = input.readVarShort();
            this.totalLeaguePoints = input.readVarShort();
            this.ladderPosition = input.readInt();
        };
        ArenaLeagueRanking.ID = 125;
        return ArenaLeagueRanking;
    })();
    Protocol.ArenaLeagueRanking = ArenaLeagueRanking;
    var ArenaRankInfos = (function() {

        function ArenaRankInfos() {
            this.ranking = new ArenaRanking();
            this.leagueRanking = new ArenaLeagueRanking();
            this.victoryCount = 0;
            this.fightcount = 0;
            this.numFightNeededForLadder = 0;

        }
        ArenaRankInfos.prototype.getMessageId = function() {
            return ArenaRankInfos.ID;
        };
        ArenaRankInfos.prototype.reset = function() {
            this.ranking = new ArenaRanking();
            this.leagueRanking = new ArenaLeagueRanking();
            this.victoryCount = 0;
            this.fightcount = 0;
            this.numFightNeededForLadder = 0;
        };
        ArenaRankInfos.prototype.serialize = function(output) {
            this.serializeAs_ArenaRankInfos(output);
        };
        ArenaRankInfos.prototype.deserialize = function(input) {
            this.deserializeAs_ArenaRankInfos(input);
        };
        ArenaRankInfos.prototype.serializeAs_ArenaRankInfos = function(output) {
            if (this.ranking == null) {
                output.writeByte(0);
            } else {
                output.writeByte(1);
                this.ranking.serializeAs_ArenaRanking(output);
            }
            if (this.leagueRanking == null) {
                output.writeByte(0);
            } else {
                output.writeByte(1);
                this.leagueRanking.serializeAs_ArenaLeagueRanking(output);
            }
            if (this.victoryCount < 0) {
                throw new Error("Forbidden value (" + this.victoryCount + ") on element victoryCount.");
            }
            output.writeVarShort(this.victoryCount);
            if (this.fightcount < 0) {
                throw new Error("Forbidden value (" + this.fightcount + ") on element fightcount.");
            }
            output.writeVarShort(this.fightcount);
            if (this.numFightNeededForLadder < 0) {
                throw new Error("Forbidden value (" + this.numFightNeededForLadder + ") on element numFightNeededForLadder.");
            }
            output.writeShort(this.numFightNeededForLadder);
        };
        ArenaRankInfos.prototype.deserializeAs_ArenaRankInfos = function(input) {
            if (input.readByte() == 0) {
                this.ranking = null;
            } else {
                this.ranking = new ArenaRanking();
                this.ranking.deserialize(input);
            }
            if (input.readByte() == 0) {
                this.leagueRanking = null;
            } else {
                this.leagueRanking = new ArenaLeagueRanking();
                this.leagueRanking.deserialize(input);
            }
            this.victoryCount = input.readVarUhShort();
            if (this.victoryCount < 0) {
                throw new Error("Forbidden value (" + this.victoryCount + ") on element of ArenaRankInfos.victoryCount.");
            }
            this.fightcount = input.readVarUhShort();
            if (this.fightcount < 0) {
                throw new Error("Forbidden value (" + this.fightcount + ") on element of ArenaRankInfos.fightcount.");
            }
            this.numFightNeededForLadder = input.readShort();
            if (this.numFightNeededForLadder < 0) {
                throw new Error("Forbidden value (" + this.numFightNeededForLadder + ") on element of ArenaRankInfos.numFightNeededForLadder.");
            }
        };
        ArenaRankInfos.ID = 7040;
        return ArenaRankInfos;
    })();
    Protocol.ArenaRankInfos = ArenaRankInfos;
    var ArenaRanking = (function() {

        function ArenaRanking() {
            this.rank = 0;
            this.bestRank = 0;

        }
        ArenaRanking.prototype.getMessageId = function() {
            return ArenaRanking.ID;
        };
        ArenaRanking.prototype.reset = function() {
            this.rank = 0;
            this.bestRank = 0;
        };
        ArenaRanking.prototype.serialize = function(output) {
            this.serializeAs_ArenaRanking(output);
        };
        ArenaRanking.prototype.deserialize = function(input) {
            this.deserializeAs_ArenaRanking(input);
        };
        ArenaRanking.prototype.serializeAs_ArenaRanking = function(output) {
            if (this.rank < 0 || this.rank > 20000) {
                throw new Error("Forbidden value (" + this.rank + ") on element rank.");
            }
            output.writeVarShort(this.rank);
            if (this.bestRank < 0 || this.bestRank > 20000) {
                throw new Error("Forbidden value (" + this.bestRank + ") on element bestRank.");
            }
            output.writeVarShort(this.bestRank);
        };
        ArenaRanking.prototype.deserializeAs_ArenaRanking = function(input) {
            this.rank = input.readVarUhShort();
            if (this.rank < 0 || this.rank > 20000) {
                throw new Error("Forbidden value (" + this.rank + ") on element of ArenaRanking.rank.");
            }
            this.bestRank = input.readVarUhShort();
            if (this.bestRank < 0 || this.bestRank > 20000) {
                throw new Error("Forbidden value (" + this.bestRank + ") on element of ArenaRanking.bestRank.");
            }
        };
        ArenaRanking.ID = 7102;
        return ArenaRanking;
    })();
    Protocol.ArenaRanking = ArenaRanking;
    var AbstractContactInformations = (function() {

        function AbstractContactInformations() {
            this.accountId = 0;
            this.accountName = "";

        }
        AbstractContactInformations.prototype.getMessageId = function() {
            return AbstractContactInformations.ID;
        };
        AbstractContactInformations.prototype.reset = function() {
            this.accountId = 0;
            this.accountName = "";
        };
        AbstractContactInformations.prototype.serialize = function(output) {
            this.serializeAs_AbstractContactInformations(output);
        };
        AbstractContactInformations.prototype.deserialize = function(input) {
            this.deserializeAs_AbstractContactInformations(input);
        };
        AbstractContactInformations.prototype.serializeAs_AbstractContactInformations = function(output) {
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element accountId.");
            }
            output.writeInt(this.accountId);
            output.writeUTF(this.accountName);
        };
        AbstractContactInformations.prototype.deserializeAs_AbstractContactInformations = function(input) {
            this.accountId = input.readInt();
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element of AbstractContactInformations.accountId.");
            }
            this.accountName = input.readUTF();
        };
        AbstractContactInformations.ID = 5170;
        return AbstractContactInformations;
    })();
    Protocol.AbstractContactInformations = AbstractContactInformations;
    var LeagueFriendInformations = (function(_super) {
        __extends(LeagueFriendInformations, _super);

        function LeagueFriendInformations() {
            this.playerId = 0;
            this.playerName = "";
            this.breed = 0;
            this.sex = false;
            this.level = 0;
            this.leagueId = 0;
            this.totalLeaguePoints = 0;
            this.ladderPosition = 0;
            _super.call(this)
        }
        LeagueFriendInformations.prototype.getMessageId = function() {
            return LeagueFriendInformations.ID;
        };
        LeagueFriendInformations.prototype.reset = function() {
            this.playerId = 0;
            this.playerName = "";
            this.breed = 0;
            this.sex = false;
            this.level = 0;
            this.leagueId = 0;
            this.totalLeaguePoints = 0;
            this.ladderPosition = 0;
        };
        LeagueFriendInformations.prototype.serialize = function(output) {
            this.serializeAs_LeagueFriendInformations(output);
        };
        LeagueFriendInformations.prototype.deserialize = function(input) {
            this.deserializeAs_LeagueFriendInformations(input);
        };
        LeagueFriendInformations.prototype.serializeAs_LeagueFriendInformations = function(output) {
            _super.prototype.serializeAs_AbstractContactInformations(this, output);
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
            output.writeUTF(this.playerName);
            output.writeByte(this.breed);
            output.writeBoolean(this.sex);
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeVarShort(this.level);
            output.writeVarShort(this.leagueId);
            output.writeVarShort(this.totalLeaguePoints);
            output.writeInt(this.ladderPosition);
        };
        LeagueFriendInformations.prototype.deserializeAs_LeagueFriendInformations = function(input) {
            _super.prototype.deserializeAbstractContactInformations(this, input);
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of LeagueFriendInformations.playerId.");
            }
            this.playerName = input.readUTF();
            this.breed = input.readByte();
            if (this.breed < PlayableBreedEnum.Feca || this.breed > PlayableBreedEnum.Ouginak) {
                throw new Error("Forbidden value (" + this.breed + ") on element of LeagueFriendInformations.breed.");
            }
            this.sex = input.readBoolean();
            this.level = input.readVarUhShort();
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element of LeagueFriendInformations.level.");
            }
            this.leagueId = input.readVarShort();
            this.totalLeaguePoints = input.readVarShort();
            this.ladderPosition = input.readInt();
        };
        LeagueFriendInformations.ID = 1189;
        return LeagueFriendInformations;
    })(AbstractContactInformations);
    Protocol.LeagueFriendInformations = LeagueFriendInformations;
    var GameRolePlayNamedActorInformations = (function(_super) {
        __extends(GameRolePlayNamedActorInformations, _super);

        function GameRolePlayNamedActorInformations() {
            this.name = "";
            _super.call(this)
        }
        GameRolePlayNamedActorInformations.prototype.getMessageId = function() {
            return GameRolePlayNamedActorInformations.ID;
        };
        GameRolePlayNamedActorInformations.prototype.reset = function() {
            this.name = "";
        };
        GameRolePlayNamedActorInformations.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayNamedActorInformations(output);
        };
        GameRolePlayNamedActorInformations.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayNamedActorInformations(input);
        };
        GameRolePlayNamedActorInformations.prototype.serializeAs_GameRolePlayNamedActorInformations = function(output) {
            _super.prototype.serializeAs_GameRolePlayActorInformations(this, output);
            output.writeUTF(this.name);
        };
        GameRolePlayNamedActorInformations.prototype.deserializeAs_GameRolePlayNamedActorInformations = function(input) {
            _super.prototype.deserializeGameRolePlayActorInformations(this, input);
            this.name = input.readUTF();
        };
        GameRolePlayNamedActorInformations.ID = 5940;
        return GameRolePlayNamedActorInformations;
    })(GameRolePlayActorInformations);
    Protocol.GameRolePlayNamedActorInformations = GameRolePlayNamedActorInformations;
    var GameRolePlayHumanoidInformations = (function(_super) {
        __extends(GameRolePlayHumanoidInformations, _super);

        function GameRolePlayHumanoidInformations() {
            this.humanoidInfo = new HumanInformations();
            this.accountId = 0;
            _super.call(this)
        }
        GameRolePlayHumanoidInformations.prototype.getMessageId = function() {
            return GameRolePlayHumanoidInformations.ID;
        };
        GameRolePlayHumanoidInformations.prototype.reset = function() {
            this.humanoidInfo = new HumanInformations();
            this.accountId = 0;
        };
        GameRolePlayHumanoidInformations.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayHumanoidInformations(output);
        };
        GameRolePlayHumanoidInformations.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayHumanoidInformations(input);
        };
        GameRolePlayHumanoidInformations.prototype.serializeAs_GameRolePlayHumanoidInformations = function(output) {
            _super.prototype.serializeAs_GameRolePlayNamedActorInformations(this, output);
            output.writeShort(this.humanoidInfo.getTypeId());
            this.humanoidInfo.serialize(output);
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element accountId.");
            }
            output.writeInt(this.accountId);
        };
        GameRolePlayHumanoidInformations.prototype.deserializeAs_GameRolePlayHumanoidInformations = function(input) {
            _super.prototype.deserializeGameRolePlayNamedActorInformations(this, input);
            var _id1 = input.readUnsignedShort();
            this.humanoidInfo = ProtocolTypeManager.getInstance(HumanInformations, _id1);
            this.humanoidInfo.deserialize(input);
            this.accountId = input.readInt();
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element of GameRolePlayHumanoidInformations.accountId.");
            }
        };
        GameRolePlayHumanoidInformations.ID = 2640;
        return GameRolePlayHumanoidInformations;
    })(GameRolePlayNamedActorInformations);
    Protocol.GameRolePlayHumanoidInformations = GameRolePlayHumanoidInformations;
    var GameRolePlayCharacterInformations = (function(_super) {
        __extends(GameRolePlayCharacterInformations, _super);

        function GameRolePlayCharacterInformations() {
            this.alignmentInfos = new ActorAlignmentInformations();
            _super.call(this)
        }
        GameRolePlayCharacterInformations.prototype.getMessageId = function() {
            return GameRolePlayCharacterInformations.ID;
        };
        GameRolePlayCharacterInformations.prototype.reset = function() {
            this.alignmentInfos = new ActorAlignmentInformations();
        };
        GameRolePlayCharacterInformations.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayCharacterInformations(output);
        };
        GameRolePlayCharacterInformations.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayCharacterInformations(input);
        };
        GameRolePlayCharacterInformations.prototype.serializeAs_GameRolePlayCharacterInformations = function(output) {
            _super.prototype.serializeAs_GameRolePlayHumanoidInformations(this, output);
            this.alignmentInfos.serializeAs_ActorAlignmentInformations(output);
        };
        GameRolePlayCharacterInformations.prototype.deserializeAs_GameRolePlayCharacterInformations = function(input) {
            _super.prototype.deserializeGameRolePlayHumanoidInformations(this, input);
            this.alignmentInfos = new ActorAlignmentInformations();
            this.alignmentInfos.deserialize(input);
        };
        GameRolePlayCharacterInformations.ID = 5268;
        return GameRolePlayCharacterInformations;
    })(GameRolePlayHumanoidInformations);
    Protocol.GameRolePlayCharacterInformations = GameRolePlayCharacterInformations;
    var GameRolePlayGroupMonsterInformations = (function(_super) {
        __extends(GameRolePlayGroupMonsterInformations, _super);

        function GameRolePlayGroupMonsterInformations() {
            this.staticInfos = new GroupMonsterStaticInformations();
            this.lootShare = 0;
            this.alignmentSide = 0;
            this.keyRingBonus = false;
            this.hasHardcoreDrop = false;
            this.hasAVARewardToken = false;
            _super.call(this)
        }
        GameRolePlayGroupMonsterInformations.prototype.getMessageId = function() {
            return GameRolePlayGroupMonsterInformations.ID;
        };
        GameRolePlayGroupMonsterInformations.prototype.reset = function() {
            this.staticInfos = new GroupMonsterStaticInformations();
            this.lootShare = 0;
            this.alignmentSide = 0;
            this.keyRingBonus = false;
            this.hasHardcoreDrop = false;
            this.hasAVARewardToken = false;
        };
        GameRolePlayGroupMonsterInformations.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayGroupMonsterInformations(output);
        };
        GameRolePlayGroupMonsterInformations.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayGroupMonsterInformations(input);
        };
        GameRolePlayGroupMonsterInformations.prototype.serializeAs_GameRolePlayGroupMonsterInformations = function(output) {
            _super.prototype.serializeAs_GameRolePlayActorInformations(this, output);
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.keyRingBonus);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.hasHardcoreDrop);
            _box0 = BooleanByteWrapper.setFlag(_box0, 2, this.hasAVARewardToken);
            output.writeByte(_box0);
            output.writeShort(this.staticInfos.getTypeId());
            this.staticInfos.serialize(output);
            if (this.lootShare < -1 || this.lootShare > 8) {
                throw new Error("Forbidden value (" + this.lootShare + ") on element lootShare.");
            }
            output.writeByte(this.lootShare);
            output.writeByte(this.alignmentSide);
        };
        GameRolePlayGroupMonsterInformations.prototype.deserializeAs_GameRolePlayGroupMonsterInformations = function(input) {
            _super.prototype.deserializeGameRolePlayActorInformations(this, input);
            this.deserializeByteBoxes(input);
            var _id1 = input.readUnsignedShort();
            this.staticInfos = ProtocolTypeManager.getInstance(GroupMonsterStaticInformations, _id1);
            this.staticInfos.deserialize(input);
            this.lootShare = input.readByte();
            if (this.lootShare < -1 || this.lootShare > 8) {
                throw new Error("Forbidden value (" + this.lootShare + ") on element of GameRolePlayGroupMonsterInformations.lootShare.");
            }
            this.alignmentSide = input.readByte();
        };
        GameRolePlayGroupMonsterInformations.ID = 4648;
        return GameRolePlayGroupMonsterInformations;
    })(GameRolePlayActorInformations);
    Protocol.GameRolePlayGroupMonsterInformations = GameRolePlayGroupMonsterInformations;
    var GameRolePlayGroupMonsterWaveInformations = (function(_super) {
        __extends(GameRolePlayGroupMonsterWaveInformations, _super);

        function GameRolePlayGroupMonsterWaveInformations() {
            this.nbWaves = 0;
            this.alternatives = [];
            _super.call(this)
        }
        GameRolePlayGroupMonsterWaveInformations.prototype.getMessageId = function() {
            return GameRolePlayGroupMonsterWaveInformations.ID;
        };
        GameRolePlayGroupMonsterWaveInformations.prototype.reset = function() {
            this.nbWaves = 0;
            this.alternatives = [];
        };
        GameRolePlayGroupMonsterWaveInformations.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayGroupMonsterWaveInformations(output);
        };
        GameRolePlayGroupMonsterWaveInformations.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayGroupMonsterWaveInformations(input);
        };
        GameRolePlayGroupMonsterWaveInformations.prototype.serializeAs_GameRolePlayGroupMonsterWaveInformations = function(output) {
            _super.prototype.serializeAs_GameRolePlayGroupMonsterInformations(this, output);
            if (this.nbWaves < 0) {
                throw new Error("Forbidden value (" + this.nbWaves + ") on element nbWaves.");
            }
            output.writeByte(this.nbWaves);
            output.writeShort(this.alternatives.length);
            for (var _i2 = 0; _i2 < this.alternatives.length; _i2++) {
                output.writeShort((this.alternatives[_i2]).getTypeId());
                (this.alternatives[_i2]).serialize(output);
            }
        };
        GameRolePlayGroupMonsterWaveInformations.prototype.deserializeAs_GameRolePlayGroupMonsterWaveInformations = function(input) {
            var _id2 = 0;
            var _item2 = null;
            _super.prototype.deserializeGameRolePlayGroupMonsterInformations(this, input);
            this.nbWaves = input.readByte();
            if (this.nbWaves < 0) {
                throw new Error("Forbidden value (" + this.nbWaves + ") on element of GameRolePlayGroupMonsterWaveInformations.nbWaves.");
            }
            var _alternativesLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _alternativesLen; _i2++) {
                _id2 = input.readUnsignedShort();
                _item2 = ProtocolTypeManager.getInstance(GroupMonsterStaticInformations, _id2);
                _item2.deserialize(input);
                this.alternatives.push(_item2);
            }
        };
        GameRolePlayGroupMonsterWaveInformations.ID = 7041;
        return GameRolePlayGroupMonsterWaveInformations;
    })(GameRolePlayGroupMonsterInformations);
    Protocol.GameRolePlayGroupMonsterWaveInformations = GameRolePlayGroupMonsterWaveInformations;
    var GameRolePlayMerchantInformations = (function(_super) {
        __extends(GameRolePlayMerchantInformations, _super);

        function GameRolePlayMerchantInformations() {
            this.sellType = 0;
            this.options = [];
            _super.call(this)
        }
        GameRolePlayMerchantInformations.prototype.getMessageId = function() {
            return GameRolePlayMerchantInformations.ID;
        };
        GameRolePlayMerchantInformations.prototype.reset = function() {
            this.sellType = 0;
            this.options = [];
        };
        GameRolePlayMerchantInformations.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayMerchantInformations(output);
        };
        GameRolePlayMerchantInformations.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayMerchantInformations(input);
        };
        GameRolePlayMerchantInformations.prototype.serializeAs_GameRolePlayMerchantInformations = function(output) {
            _super.prototype.serializeAs_GameRolePlayNamedActorInformations(this, output);
            if (this.sellType < 0) {
                throw new Error("Forbidden value (" + this.sellType + ") on element sellType.");
            }
            output.writeByte(this.sellType);
            output.writeShort(this.options.length);
            for (var _i2 = 0; _i2 < this.options.length; _i2++) {
                output.writeShort((this.options[_i2]).getTypeId());
                (this.options[_i2]).serialize(output);
            }
        };
        GameRolePlayMerchantInformations.prototype.deserializeAs_GameRolePlayMerchantInformations = function(input) {
            var _id2 = 0;
            var _item2 = null;
            _super.prototype.deserializeGameRolePlayNamedActorInformations(this, input);
            this.sellType = input.readByte();
            if (this.sellType < 0) {
                throw new Error("Forbidden value (" + this.sellType + ") on element of GameRolePlayMerchantInformations.sellType.");
            }
            var _optionsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _optionsLen; _i2++) {
                _id2 = input.readUnsignedShort();
                _item2 = ProtocolTypeManager.getInstance(HumanOption, _id2);
                _item2.deserialize(input);
                this.options.push(_item2);
            }
        };
        GameRolePlayMerchantInformations.ID = 1204;
        return GameRolePlayMerchantInformations;
    })(GameRolePlayNamedActorInformations);
    Protocol.GameRolePlayMerchantInformations = GameRolePlayMerchantInformations;
    var GameRolePlayMountInformations = (function(_super) {
        __extends(GameRolePlayMountInformations, _super);

        function GameRolePlayMountInformations() {
            this.ownerName = "";
            this.level = 0;
            _super.call(this)
        }
        GameRolePlayMountInformations.prototype.getMessageId = function() {
            return GameRolePlayMountInformations.ID;
        };
        GameRolePlayMountInformations.prototype.reset = function() {
            this.ownerName = "";
            this.level = 0;
        };
        GameRolePlayMountInformations.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayMountInformations(output);
        };
        GameRolePlayMountInformations.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayMountInformations(input);
        };
        GameRolePlayMountInformations.prototype.serializeAs_GameRolePlayMountInformations = function(output) {
            _super.prototype.serializeAs_GameRolePlayNamedActorInformations(this, output);
            output.writeUTF(this.ownerName);
            if (this.level < 0 || this.level > 255) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeByte(this.level);
        };
        GameRolePlayMountInformations.prototype.deserializeAs_GameRolePlayMountInformations = function(input) {
            _super.prototype.deserializeGameRolePlayNamedActorInformations(this, input);
            this.ownerName = input.readUTF();
            this.level = input.readUnsignedByte();
            if (this.level < 0 || this.level > 255) {
                throw new Error("Forbidden value (" + this.level + ") on element of GameRolePlayMountInformations.level.");
            }
        };
        GameRolePlayMountInformations.ID = 4944;
        return GameRolePlayMountInformations;
    })(GameRolePlayNamedActorInformations);
    Protocol.GameRolePlayMountInformations = GameRolePlayMountInformations;
    var GameRolePlayMutantInformations = (function(_super) {
        __extends(GameRolePlayMutantInformations, _super);

        function GameRolePlayMutantInformations() {
            this.monsterId = 0;
            this.powerLevel = 0;
            _super.call(this)
        }
        GameRolePlayMutantInformations.prototype.getMessageId = function() {
            return GameRolePlayMutantInformations.ID;
        };
        GameRolePlayMutantInformations.prototype.reset = function() {
            this.monsterId = 0;
            this.powerLevel = 0;
        };
        GameRolePlayMutantInformations.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayMutantInformations(output);
        };
        GameRolePlayMutantInformations.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayMutantInformations(input);
        };
        GameRolePlayMutantInformations.prototype.serializeAs_GameRolePlayMutantInformations = function(output) {
            _super.prototype.serializeAs_GameRolePlayHumanoidInformations(this, output);
            if (this.monsterId < 0) {
                throw new Error("Forbidden value (" + this.monsterId + ") on element monsterId.");
            }
            output.writeVarShort(this.monsterId);
            output.writeByte(this.powerLevel);
        };
        GameRolePlayMutantInformations.prototype.deserializeAs_GameRolePlayMutantInformations = function(input) {
            _super.prototype.deserializeGameRolePlayHumanoidInformations(this, input);
            this.monsterId = input.readVarUhShort();
            if (this.monsterId < 0) {
                throw new Error("Forbidden value (" + this.monsterId + ") on element of GameRolePlayMutantInformations.monsterId.");
            }
            this.powerLevel = input.readByte();
        };
        GameRolePlayMutantInformations.ID = 8271;
        return GameRolePlayMutantInformations;
    })(GameRolePlayHumanoidInformations);
    Protocol.GameRolePlayMutantInformations = GameRolePlayMutantInformations;
    var GameRolePlayNpcInformations = (function(_super) {
        __extends(GameRolePlayNpcInformations, _super);

        function GameRolePlayNpcInformations() {
            this.npcId = 0;
            this.sex = false;
            this.specialArtworkId = 0;
            _super.call(this)
        }
        GameRolePlayNpcInformations.prototype.getMessageId = function() {
            return GameRolePlayNpcInformations.ID;
        };
        GameRolePlayNpcInformations.prototype.reset = function() {
            this.npcId = 0;
            this.sex = false;
            this.specialArtworkId = 0;
        };
        GameRolePlayNpcInformations.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayNpcInformations(output);
        };
        GameRolePlayNpcInformations.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayNpcInformations(input);
        };
        GameRolePlayNpcInformations.prototype.serializeAs_GameRolePlayNpcInformations = function(output) {
            _super.prototype.serializeAs_GameRolePlayActorInformations(this, output);
            if (this.npcId < 0) {
                throw new Error("Forbidden value (" + this.npcId + ") on element npcId.");
            }
            output.writeVarShort(this.npcId);
            output.writeBoolean(this.sex);
            if (this.specialArtworkId < 0) {
                throw new Error("Forbidden value (" + this.specialArtworkId + ") on element specialArtworkId.");
            }
            output.writeVarShort(this.specialArtworkId);
        };
        GameRolePlayNpcInformations.prototype.deserializeAs_GameRolePlayNpcInformations = function(input) {
            _super.prototype.deserializeGameRolePlayActorInformations(this, input);
            this.npcId = input.readVarUhShort();
            if (this.npcId < 0) {
                throw new Error("Forbidden value (" + this.npcId + ") on element of GameRolePlayNpcInformations.npcId.");
            }
            this.sex = input.readBoolean();
            this.specialArtworkId = input.readVarUhShort();
            if (this.specialArtworkId < 0) {
                throw new Error("Forbidden value (" + this.specialArtworkId + ") on element of GameRolePlayNpcInformations.specialArtworkId.");
            }
        };
        GameRolePlayNpcInformations.ID = 8307;
        return GameRolePlayNpcInformations;
    })(GameRolePlayActorInformations);
    Protocol.GameRolePlayNpcInformations = GameRolePlayNpcInformations;
    var GameRolePlayNpcWithQuestInformations = (function(_super) {
        __extends(GameRolePlayNpcWithQuestInformations, _super);

        function GameRolePlayNpcWithQuestInformations() {
            this.questFlag = new GameRolePlayNpcQuestFlag();
            _super.call(this)
        }
        GameRolePlayNpcWithQuestInformations.prototype.getMessageId = function() {
            return GameRolePlayNpcWithQuestInformations.ID;
        };
        GameRolePlayNpcWithQuestInformations.prototype.reset = function() {
            this.questFlag = new GameRolePlayNpcQuestFlag();
        };
        GameRolePlayNpcWithQuestInformations.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayNpcWithQuestInformations(output);
        };
        GameRolePlayNpcWithQuestInformations.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayNpcWithQuestInformations(input);
        };
        GameRolePlayNpcWithQuestInformations.prototype.serializeAs_GameRolePlayNpcWithQuestInformations = function(output) {
            _super.prototype.serializeAs_GameRolePlayNpcInformations(this, output);
            this.questFlag.serializeAs_GameRolePlayNpcQuestFlag(output);
        };
        GameRolePlayNpcWithQuestInformations.prototype.deserializeAs_GameRolePlayNpcWithQuestInformations = function(input) {
            _super.prototype.deserializeGameRolePlayNpcInformations(this, input);
            this.questFlag = new GameRolePlayNpcQuestFlag();
            this.questFlag.deserialize(input);
        };
        GameRolePlayNpcWithQuestInformations.ID = 5968;
        return GameRolePlayNpcWithQuestInformations;
    })(GameRolePlayNpcInformations);
    Protocol.GameRolePlayNpcWithQuestInformations = GameRolePlayNpcWithQuestInformations;
    var GameRolePlayPortalInformations = (function(_super) {
        __extends(GameRolePlayPortalInformations, _super);

        function GameRolePlayPortalInformations() {
            this.portal = new PortalInformation();
            _super.call(this)
        }
        GameRolePlayPortalInformations.prototype.getMessageId = function() {
            return GameRolePlayPortalInformations.ID;
        };
        GameRolePlayPortalInformations.prototype.reset = function() {
            this.portal = new PortalInformation();
        };
        GameRolePlayPortalInformations.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayPortalInformations(output);
        };
        GameRolePlayPortalInformations.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayPortalInformations(input);
        };
        GameRolePlayPortalInformations.prototype.serializeAs_GameRolePlayPortalInformations = function(output) {
            _super.prototype.serializeAs_GameRolePlayActorInformations(this, output);
            output.writeShort(this.portal.getTypeId());
            this.portal.serialize(output);
        };
        GameRolePlayPortalInformations.prototype.deserializeAs_GameRolePlayPortalInformations = function(input) {
            _super.prototype.deserializeGameRolePlayActorInformations(this, input);
            var _id1 = input.readUnsignedShort();
            this.portal = ProtocolTypeManager.getInstance(PortalInformation, _id1);
            this.portal.deserialize(input);
        };
        GameRolePlayPortalInformations.ID = 6138;
        return GameRolePlayPortalInformations;
    })(GameRolePlayActorInformations);
    Protocol.GameRolePlayPortalInformations = GameRolePlayPortalInformations;
    var GameRolePlayPrismInformations = (function(_super) {
        __extends(GameRolePlayPrismInformations, _super);

        function GameRolePlayPrismInformations() {
            this.prism = new PrismInformation();
            _super.call(this)
        }
        GameRolePlayPrismInformations.prototype.getMessageId = function() {
            return GameRolePlayPrismInformations.ID;
        };
        GameRolePlayPrismInformations.prototype.reset = function() {
            this.prism = new PrismInformation();
        };
        GameRolePlayPrismInformations.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayPrismInformations(output);
        };
        GameRolePlayPrismInformations.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayPrismInformations(input);
        };
        GameRolePlayPrismInformations.prototype.serializeAs_GameRolePlayPrismInformations = function(output) {
            _super.prototype.serializeAs_GameRolePlayActorInformations(this, output);
            output.writeShort(this.prism.getTypeId());
            this.prism.serialize(output);
        };
        GameRolePlayPrismInformations.prototype.deserializeAs_GameRolePlayPrismInformations = function(input) {
            _super.prototype.deserializeGameRolePlayActorInformations(this, input);
            var _id1 = input.readUnsignedShort();
            this.prism = ProtocolTypeManager.getInstance(PrismInformation, _id1);
            this.prism.deserialize(input);
        };
        GameRolePlayPrismInformations.ID = 7;
        return GameRolePlayPrismInformations;
    })(GameRolePlayActorInformations);
    Protocol.GameRolePlayPrismInformations = GameRolePlayPrismInformations;
    var GameRolePlayTreasureHintInformations = (function(_super) {
        __extends(GameRolePlayTreasureHintInformations, _super);

        function GameRolePlayTreasureHintInformations() {
            this.npcId = 0;
            _super.call(this)
        }
        GameRolePlayTreasureHintInformations.prototype.getMessageId = function() {
            return GameRolePlayTreasureHintInformations.ID;
        };
        GameRolePlayTreasureHintInformations.prototype.reset = function() {
            this.npcId = 0;
        };
        GameRolePlayTreasureHintInformations.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayTreasureHintInformations(output);
        };
        GameRolePlayTreasureHintInformations.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayTreasureHintInformations(input);
        };
        GameRolePlayTreasureHintInformations.prototype.serializeAs_GameRolePlayTreasureHintInformations = function(output) {
            _super.prototype.serializeAs_GameRolePlayActorInformations(this, output);
            if (this.npcId < 0) {
                throw new Error("Forbidden value (" + this.npcId + ") on element npcId.");
            }
            output.writeVarShort(this.npcId);
        };
        GameRolePlayTreasureHintInformations.prototype.deserializeAs_GameRolePlayTreasureHintInformations = function(input) {
            _super.prototype.deserializeGameRolePlayActorInformations(this, input);
            this.npcId = input.readVarUhShort();
            if (this.npcId < 0) {
                throw new Error("Forbidden value (" + this.npcId + ") on element of GameRolePlayTreasureHintInformations.npcId.");
            }
        };
        GameRolePlayTreasureHintInformations.ID = 5073;
        return GameRolePlayTreasureHintInformations;
    })(GameRolePlayActorInformations);
    Protocol.GameRolePlayTreasureHintInformations = GameRolePlayTreasureHintInformations;
    var GroupMonsterStaticInformations = (function() {

        function GroupMonsterStaticInformations() {
            this.mainCreatureLightInfos = new MonsterInGroupLightInformations();
            this.underlings = [];

        }
        GroupMonsterStaticInformations.prototype.getMessageId = function() {
            return GroupMonsterStaticInformations.ID;
        };
        GroupMonsterStaticInformations.prototype.reset = function() {
            this.mainCreatureLightInfos = new MonsterInGroupLightInformations();
            this.underlings = [];
        };
        GroupMonsterStaticInformations.prototype.serialize = function(output) {
            this.serializeAs_GroupMonsterStaticInformations(output);
        };
        GroupMonsterStaticInformations.prototype.deserialize = function(input) {
            this.deserializeAs_GroupMonsterStaticInformations(input);
        };
        GroupMonsterStaticInformations.prototype.serializeAs_GroupMonsterStaticInformations = function(output) {
            this.mainCreatureLightInfos.serializeAs_MonsterInGroupLightInformations(output);
            output.writeShort(this.underlings.length);
            for (var _i2 = 0; _i2 < this.underlings.length; _i2++) {
                (this.underlings[_i2]).serializeAs_MonsterInGroupInformations(output);
            }
        };
        GroupMonsterStaticInformations.prototype.deserializeAs_GroupMonsterStaticInformations = function(input) {
            var _item2 = null;
            this.mainCreatureLightInfos = new MonsterInGroupLightInformations();
            this.mainCreatureLightInfos.deserialize(input);
            var _underlingsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _underlingsLen; _i2++) {
                _item2 = new MonsterInGroupInformations();
                _item2.deserialize(input);
                this.underlings.push(_item2);
            }
        };
        GroupMonsterStaticInformations.ID = 4311;
        return GroupMonsterStaticInformations;
    })();
    Protocol.GroupMonsterStaticInformations = GroupMonsterStaticInformations;
    var GroupMonsterStaticInformationsWithAlternatives = (function(_super) {
        __extends(GroupMonsterStaticInformationsWithAlternatives, _super);

        function GroupMonsterStaticInformationsWithAlternatives() {
            this.alternatives = [];
            _super.call(this)
        }
        GroupMonsterStaticInformationsWithAlternatives.prototype.getMessageId = function() {
            return GroupMonsterStaticInformationsWithAlternatives.ID;
        };
        GroupMonsterStaticInformationsWithAlternatives.prototype.reset = function() {
            this.alternatives = [];
        };
        GroupMonsterStaticInformationsWithAlternatives.prototype.serialize = function(output) {
            this.serializeAs_GroupMonsterStaticInformationsWithAlternatives(output);
        };
        GroupMonsterStaticInformationsWithAlternatives.prototype.deserialize = function(input) {
            this.deserializeAs_GroupMonsterStaticInformationsWithAlternatives(input);
        };
        GroupMonsterStaticInformationsWithAlternatives.prototype.serializeAs_GroupMonsterStaticInformationsWithAlternatives = function(output) {
            _super.prototype.serializeAs_GroupMonsterStaticInformations(this, output);
            output.writeShort(this.alternatives.length);
            for (var _i1 = 0; _i1 < this.alternatives.length; _i1++) {
                (this.alternatives[_i1]).serializeAs_AlternativeMonstersInGroupLightInformations(output);
            }
        };
        GroupMonsterStaticInformationsWithAlternatives.prototype.deserializeAs_GroupMonsterStaticInformationsWithAlternatives = function(input) {
            var _item1 = null;
            _super.prototype.deserializeGroupMonsterStaticInformations(this, input);
            var _alternativesLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _alternativesLen; _i1++) {
                _item1 = new AlternativeMonstersInGroupLightInformations();
                _item1.deserialize(input);
                this.alternatives.push(_item1);
            }
        };
        GroupMonsterStaticInformationsWithAlternatives.ID = 8629;
        return GroupMonsterStaticInformationsWithAlternatives;
    })(GroupMonsterStaticInformations);
    Protocol.GroupMonsterStaticInformationsWithAlternatives = GroupMonsterStaticInformationsWithAlternatives;
    var GuildInformations = (function(_super) {
        __extends(GuildInformations, _super);

        function GuildInformations() {
            this.guildEmblem = new GuildEmblem();
            _super.call(this)
        }
        GuildInformations.prototype.getMessageId = function() {
            return GuildInformations.ID;
        };
        GuildInformations.prototype.reset = function() {
            this.guildEmblem = new GuildEmblem();
        };
        GuildInformations.prototype.serialize = function(output) {
            this.serializeAs_GuildInformations(output);
        };
        GuildInformations.prototype.deserialize = function(input) {
            this.deserializeAs_GuildInformations(input);
        };
        GuildInformations.prototype.serializeAs_GuildInformations = function(output) {
            _super.prototype.serializeAs_BasicGuildInformations(this, output);
            this.guildEmblem.serializeAs_GuildEmblem(output);
        };
        GuildInformations.prototype.deserializeAs_GuildInformations = function(input) {
            _super.prototype.deserializeBasicGuildInformations(this, input);
            this.guildEmblem = new GuildEmblem();
            this.guildEmblem.deserialize(input);
        };
        GuildInformations.ID = 6928;
        return GuildInformations;
    })(BasicGuildInformations);
    Protocol.GuildInformations = GuildInformations;
    var GuildInAllianceInformations = (function(_super) {
        __extends(GuildInAllianceInformations, _super);

        function GuildInAllianceInformations() {
            this.nbMembers = 0;
            this.joinDate = 0;
            _super.call(this)
        }
        GuildInAllianceInformations.prototype.getMessageId = function() {
            return GuildInAllianceInformations.ID;
        };
        GuildInAllianceInformations.prototype.reset = function() {
            this.nbMembers = 0;
            this.joinDate = 0;
        };
        GuildInAllianceInformations.prototype.serialize = function(output) {
            this.serializeAs_GuildInAllianceInformations(output);
        };
        GuildInAllianceInformations.prototype.deserialize = function(input) {
            this.deserializeAs_GuildInAllianceInformations(input);
        };
        GuildInAllianceInformations.prototype.serializeAs_GuildInAllianceInformations = function(output) {
            _super.prototype.serializeAs_GuildInformations(this, output);
            if (this.nbMembers < 1 || this.nbMembers > 240) {
                throw new Error("Forbidden value (" + this.nbMembers + ") on element nbMembers.");
            }
            output.writeByte(this.nbMembers);
            if (this.joinDate < 0) {
                throw new Error("Forbidden value (" + this.joinDate + ") on element joinDate.");
            }
            output.writeInt(this.joinDate);
        };
        GuildInAllianceInformations.prototype.deserializeAs_GuildInAllianceInformations = function(input) {
            _super.prototype.deserializeGuildInformations(this, input);
            this.nbMembers = input.readUnsignedByte();
            if (this.nbMembers < 1 || this.nbMembers > 240) {
                throw new Error("Forbidden value (" + this.nbMembers + ") on element of GuildInAllianceInformations.nbMembers.");
            }
            this.joinDate = input.readInt();
            if (this.joinDate < 0) {
                throw new Error("Forbidden value (" + this.joinDate + ") on element of GuildInAllianceInformations.joinDate.");
            }
        };
        GuildInAllianceInformations.ID = 8268;
        return GuildInAllianceInformations;
    })(GuildInformations);
    Protocol.GuildInAllianceInformations = GuildInAllianceInformations;
    var HumanInformations = (function() {

        function HumanInformations() {
            this.restrictions = new ActorRestrictionsInformations();
            this.sex = false;
            this.options = [];

        }
        HumanInformations.prototype.getMessageId = function() {
            return HumanInformations.ID;
        };
        HumanInformations.prototype.reset = function() {
            this.restrictions = new ActorRestrictionsInformations();
            this.sex = false;
            this.options = [];
        };
        HumanInformations.prototype.serialize = function(output) {
            this.serializeAs_HumanInformations(output);
        };
        HumanInformations.prototype.deserialize = function(input) {
            this.deserializeAs_HumanInformations(input);
        };
        HumanInformations.prototype.serializeAs_HumanInformations = function(output) {
            this.restrictions.serializeAs_ActorRestrictionsInformations(output);
            output.writeBoolean(this.sex);
            output.writeShort(this.options.length);
            for (var _i3 = 0; _i3 < this.options.length; _i3++) {
                output.writeShort((this.options[_i3]).getTypeId());
                (this.options[_i3]).serialize(output);
            }
        };
        HumanInformations.prototype.deserializeAs_HumanInformations = function(input) {
            var _id3 = 0;
            var _item3 = null;
            this.restrictions = new ActorRestrictionsInformations();
            this.restrictions.deserialize(input);
            this.sex = input.readBoolean();
            var _optionsLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _optionsLen; _i3++) {
                _id3 = input.readUnsignedShort();
                _item3 = ProtocolTypeManager.getInstance(HumanOption, _id3);
                _item3.deserialize(input);
                this.options.push(_item3);
            }
        };
        HumanInformations.ID = 5831;
        return HumanInformations;
    })();
    Protocol.HumanInformations = HumanInformations;
    var HumanOption = (function() {

        function HumanOption() {


        }
        HumanOption.prototype.getMessageId = function() {
            return HumanOption.ID;
        };
        HumanOption.prototype.reset = function() {

        };
        HumanOption.prototype.serialize = function(output) {
            this.serializeAs_HumanOption(output);
        };
        HumanOption.prototype.deserialize = function(input) {
            this.deserializeAs_HumanOption(input);
        };
        HumanOption.prototype.serializeAs_HumanOption = function(output) {

        };
        HumanOption.prototype.deserializeAs_HumanOption = function(input) {

        };
        HumanOption.ID = 6272;
        return HumanOption;
    })();
    Protocol.HumanOption = HumanOption;
    var HumanOptionAlliance = (function(_super) {
        __extends(HumanOptionAlliance, _super);

        function HumanOptionAlliance() {
            this.allianceInformations = new AllianceInformations();
            this.aggressable = 0;
            _super.call(this)
        }
        HumanOptionAlliance.prototype.getMessageId = function() {
            return HumanOptionAlliance.ID;
        };
        HumanOptionAlliance.prototype.reset = function() {
            this.allianceInformations = new AllianceInformations();
            this.aggressable = 0;
        };
        HumanOptionAlliance.prototype.serialize = function(output) {
            this.serializeAs_HumanOptionAlliance(output);
        };
        HumanOptionAlliance.prototype.deserialize = function(input) {
            this.deserializeAs_HumanOptionAlliance(input);
        };
        HumanOptionAlliance.prototype.serializeAs_HumanOptionAlliance = function(output) {
            _super.prototype.serializeAs_HumanOption(this, output);
            this.allianceInformations.serializeAs_AllianceInformations(output);
            output.writeByte(this.aggressable);
        };
        HumanOptionAlliance.prototype.deserializeAs_HumanOptionAlliance = function(input) {
            _super.prototype.deserializeHumanOption(this, input);
            this.allianceInformations = new AllianceInformations();
            this.allianceInformations.deserialize(input);
            this.aggressable = input.readByte();
            if (this.aggressable < 0) {
                throw new Error("Forbidden value (" + this.aggressable + ") on element of HumanOptionAlliance.aggressable.");
            }
        };
        HumanOptionAlliance.ID = 374;
        return HumanOptionAlliance;
    })(HumanOption);
    Protocol.HumanOptionAlliance = HumanOptionAlliance;
    var HumanOptionEmote = (function(_super) {
        __extends(HumanOptionEmote, _super);

        function HumanOptionEmote() {
            this.emoteId = 0;
            this.emoteStartTime = 0;
            _super.call(this)
        }
        HumanOptionEmote.prototype.getMessageId = function() {
            return HumanOptionEmote.ID;
        };
        HumanOptionEmote.prototype.reset = function() {
            this.emoteId = 0;
            this.emoteStartTime = 0;
        };
        HumanOptionEmote.prototype.serialize = function(output) {
            this.serializeAs_HumanOptionEmote(output);
        };
        HumanOptionEmote.prototype.deserialize = function(input) {
            this.deserializeAs_HumanOptionEmote(input);
        };
        HumanOptionEmote.prototype.serializeAs_HumanOptionEmote = function(output) {
            _super.prototype.serializeAs_HumanOption(this, output);
            if (this.emoteId < 0 || this.emoteId > 255) {
                throw new Error("Forbidden value (" + this.emoteId + ") on element emoteId.");
            }
            output.writeByte(this.emoteId);
            if (this.emoteStartTime < -9007199254740990 || this.emoteStartTime > 9007199254740990) {
                throw new Error("Forbidden value (" + this.emoteStartTime + ") on element emoteStartTime.");
            }
            output.writeDouble(this.emoteStartTime);
        };
        HumanOptionEmote.prototype.deserializeAs_HumanOptionEmote = function(input) {
            _super.prototype.deserializeHumanOption(this, input);
            this.emoteId = input.readUnsignedByte();
            if (this.emoteId < 0 || this.emoteId > 255) {
                throw new Error("Forbidden value (" + this.emoteId + ") on element of HumanOptionEmote.emoteId.");
            }
            this.emoteStartTime = input.readDouble();
            if (this.emoteStartTime < -9007199254740990 || this.emoteStartTime > 9007199254740990) {
                throw new Error("Forbidden value (" + this.emoteStartTime + ") on element of HumanOptionEmote.emoteStartTime.");
            }
        };
        HumanOptionEmote.ID = 7370;
        return HumanOptionEmote;
    })(HumanOption);
    Protocol.HumanOptionEmote = HumanOptionEmote;
    var HumanOptionFollowers = (function(_super) {
        __extends(HumanOptionFollowers, _super);

        function HumanOptionFollowers() {
            this.followingCharactersLook = [];
            _super.call(this)
        }
        HumanOptionFollowers.prototype.getMessageId = function() {
            return HumanOptionFollowers.ID;
        };
        HumanOptionFollowers.prototype.reset = function() {
            this.followingCharactersLook = [];
        };
        HumanOptionFollowers.prototype.serialize = function(output) {
            this.serializeAs_HumanOptionFollowers(output);
        };
        HumanOptionFollowers.prototype.deserialize = function(input) {
            this.deserializeAs_HumanOptionFollowers(input);
        };
        HumanOptionFollowers.prototype.serializeAs_HumanOptionFollowers = function(output) {
            _super.prototype.serializeAs_HumanOption(this, output);
            output.writeShort(this.followingCharactersLook.length);
            for (var _i1 = 0; _i1 < this.followingCharactersLook.length; _i1++) {
                (this.followingCharactersLook[_i1]).serializeAs_IndexedEntityLook(output);
            }
        };
        HumanOptionFollowers.prototype.deserializeAs_HumanOptionFollowers = function(input) {
            var _item1 = null;
            _super.prototype.deserializeHumanOption(this, input);
            var _followingCharactersLookLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _followingCharactersLookLen; _i1++) {
                _item1 = new IndexedEntityLook();
                _item1.deserialize(input);
                this.followingCharactersLook.push(_item1);
            }
        };
        HumanOptionFollowers.ID = 2856;
        return HumanOptionFollowers;
    })(HumanOption);
    Protocol.HumanOptionFollowers = HumanOptionFollowers;
    var HumanOptionGuild = (function(_super) {
        __extends(HumanOptionGuild, _super);

        function HumanOptionGuild() {
            this.guildInformations = new GuildInformations();
            _super.call(this)
        }
        HumanOptionGuild.prototype.getMessageId = function() {
            return HumanOptionGuild.ID;
        };
        HumanOptionGuild.prototype.reset = function() {
            this.guildInformations = new GuildInformations();
        };
        HumanOptionGuild.prototype.serialize = function(output) {
            this.serializeAs_HumanOptionGuild(output);
        };
        HumanOptionGuild.prototype.deserialize = function(input) {
            this.deserializeAs_HumanOptionGuild(input);
        };
        HumanOptionGuild.prototype.serializeAs_HumanOptionGuild = function(output) {
            _super.prototype.serializeAs_HumanOption(this, output);
            this.guildInformations.serializeAs_GuildInformations(output);
        };
        HumanOptionGuild.prototype.deserializeAs_HumanOptionGuild = function(input) {
            _super.prototype.deserializeHumanOption(this, input);
            this.guildInformations = new GuildInformations();
            this.guildInformations.deserialize(input);
        };
        HumanOptionGuild.ID = 7229;
        return HumanOptionGuild;
    })(HumanOption);
    Protocol.HumanOptionGuild = HumanOptionGuild;
    var HumanOptionObjectUse = (function(_super) {
        __extends(HumanOptionObjectUse, _super);

        function HumanOptionObjectUse() {
            this.delayTypeId = 0;
            this.delayEndTime = 0;
            this.objectGID = 0;
            _super.call(this)
        }
        HumanOptionObjectUse.prototype.getMessageId = function() {
            return HumanOptionObjectUse.ID;
        };
        HumanOptionObjectUse.prototype.reset = function() {
            this.delayTypeId = 0;
            this.delayEndTime = 0;
            this.objectGID = 0;
        };
        HumanOptionObjectUse.prototype.serialize = function(output) {
            this.serializeAs_HumanOptionObjectUse(output);
        };
        HumanOptionObjectUse.prototype.deserialize = function(input) {
            this.deserializeAs_HumanOptionObjectUse(input);
        };
        HumanOptionObjectUse.prototype.serializeAs_HumanOptionObjectUse = function(output) {
            _super.prototype.serializeAs_HumanOption(this, output);
            output.writeByte(this.delayTypeId);
            if (this.delayEndTime < 0 || this.delayEndTime > 9007199254740990) {
                throw new Error("Forbidden value (" + this.delayEndTime + ") on element delayEndTime.");
            }
            output.writeDouble(this.delayEndTime);
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element objectGID.");
            }
            output.writeVarShort(this.objectGID);
        };
        HumanOptionObjectUse.prototype.deserializeAs_HumanOptionObjectUse = function(input) {
            _super.prototype.deserializeHumanOption(this, input);
            this.delayTypeId = input.readByte();
            if (this.delayTypeId < 0) {
                throw new Error("Forbidden value (" + this.delayTypeId + ") on element of HumanOptionObjectUse.delayTypeId.");
            }
            this.delayEndTime = input.readDouble();
            if (this.delayEndTime < 0 || this.delayEndTime > 9007199254740990) {
                throw new Error("Forbidden value (" + this.delayEndTime + ") on element of HumanOptionObjectUse.delayEndTime.");
            }
            this.objectGID = input.readVarUhShort();
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element of HumanOptionObjectUse.objectGID.");
            }
        };
        HumanOptionObjectUse.ID = 2440;
        return HumanOptionObjectUse;
    })(HumanOption);
    Protocol.HumanOptionObjectUse = HumanOptionObjectUse;
    var HumanOptionOrnament = (function(_super) {
        __extends(HumanOptionOrnament, _super);

        function HumanOptionOrnament() {
            this.ornamentId = 0;
            this.level = 0;
            this.leagueId = 0;
            this.ladderPosition = 0;
            _super.call(this)
        }
        HumanOptionOrnament.prototype.getMessageId = function() {
            return HumanOptionOrnament.ID;
        };
        HumanOptionOrnament.prototype.reset = function() {
            this.ornamentId = 0;
            this.level = 0;
            this.leagueId = 0;
            this.ladderPosition = 0;
        };
        HumanOptionOrnament.prototype.serialize = function(output) {
            this.serializeAs_HumanOptionOrnament(output);
        };
        HumanOptionOrnament.prototype.deserialize = function(input) {
            this.deserializeAs_HumanOptionOrnament(input);
        };
        HumanOptionOrnament.prototype.serializeAs_HumanOptionOrnament = function(output) {
            _super.prototype.serializeAs_HumanOption(this, output);
            if (this.ornamentId < 0) {
                throw new Error("Forbidden value (" + this.ornamentId + ") on element ornamentId.");
            }
            output.writeVarShort(this.ornamentId);
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeVarShort(this.level);
            output.writeVarShort(this.leagueId);
            output.writeInt(this.ladderPosition);
        };
        HumanOptionOrnament.prototype.deserializeAs_HumanOptionOrnament = function(input) {
            _super.prototype.deserializeHumanOption(this, input);
            this.ornamentId = input.readVarUhShort();
            if (this.ornamentId < 0) {
                throw new Error("Forbidden value (" + this.ornamentId + ") on element of HumanOptionOrnament.ornamentId.");
            }
            this.level = input.readVarUhShort();
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element of HumanOptionOrnament.level.");
            }
            this.leagueId = input.readVarShort();
            this.ladderPosition = input.readInt();
        };
        HumanOptionOrnament.ID = 5651;
        return HumanOptionOrnament;
    })(HumanOption);
    Protocol.HumanOptionOrnament = HumanOptionOrnament;
    var HumanOptionSkillUse = (function(_super) {
        __extends(HumanOptionSkillUse, _super);

        function HumanOptionSkillUse() {
            this.elementId = 0;
            this.skillId = 0;
            this.skillEndTime = 0;
            _super.call(this)
        }
        HumanOptionSkillUse.prototype.getMessageId = function() {
            return HumanOptionSkillUse.ID;
        };
        HumanOptionSkillUse.prototype.reset = function() {
            this.elementId = 0;
            this.skillId = 0;
            this.skillEndTime = 0;
        };
        HumanOptionSkillUse.prototype.serialize = function(output) {
            this.serializeAs_HumanOptionSkillUse(output);
        };
        HumanOptionSkillUse.prototype.deserialize = function(input) {
            this.deserializeAs_HumanOptionSkillUse(input);
        };
        HumanOptionSkillUse.prototype.serializeAs_HumanOptionSkillUse = function(output) {
            _super.prototype.serializeAs_HumanOption(this, output);
            if (this.elementId < 0) {
                throw new Error("Forbidden value (" + this.elementId + ") on element elementId.");
            }
            output.writeVarInt(this.elementId);
            if (this.skillId < 0) {
                throw new Error("Forbidden value (" + this.skillId + ") on element skillId.");
            }
            output.writeVarShort(this.skillId);
            if (this.skillEndTime < -9007199254740990 || this.skillEndTime > 9007199254740990) {
                throw new Error("Forbidden value (" + this.skillEndTime + ") on element skillEndTime.");
            }
            output.writeDouble(this.skillEndTime);
        };
        HumanOptionSkillUse.prototype.deserializeAs_HumanOptionSkillUse = function(input) {
            _super.prototype.deserializeHumanOption(this, input);
            this.elementId = input.readVarUhInt();
            if (this.elementId < 0) {
                throw new Error("Forbidden value (" + this.elementId + ") on element of HumanOptionSkillUse.elementId.");
            }
            this.skillId = input.readVarUhShort();
            if (this.skillId < 0) {
                throw new Error("Forbidden value (" + this.skillId + ") on element of HumanOptionSkillUse.skillId.");
            }
            this.skillEndTime = input.readDouble();
            if (this.skillEndTime < -9007199254740990 || this.skillEndTime > 9007199254740990) {
                throw new Error("Forbidden value (" + this.skillEndTime + ") on element of HumanOptionSkillUse.skillEndTime.");
            }
        };
        HumanOptionSkillUse.ID = 4888;
        return HumanOptionSkillUse;
    })(HumanOption);
    Protocol.HumanOptionSkillUse = HumanOptionSkillUse;
    var HumanOptionTitle = (function(_super) {
        __extends(HumanOptionTitle, _super);

        function HumanOptionTitle() {
            this.titleId = 0;
            this.titleParam = "";
            _super.call(this)
        }
        HumanOptionTitle.prototype.getMessageId = function() {
            return HumanOptionTitle.ID;
        };
        HumanOptionTitle.prototype.reset = function() {
            this.titleId = 0;
            this.titleParam = "";
        };
        HumanOptionTitle.prototype.serialize = function(output) {
            this.serializeAs_HumanOptionTitle(output);
        };
        HumanOptionTitle.prototype.deserialize = function(input) {
            this.deserializeAs_HumanOptionTitle(input);
        };
        HumanOptionTitle.prototype.serializeAs_HumanOptionTitle = function(output) {
            _super.prototype.serializeAs_HumanOption(this, output);
            if (this.titleId < 0) {
                throw new Error("Forbidden value (" + this.titleId + ") on element titleId.");
            }
            output.writeVarShort(this.titleId);
            output.writeUTF(this.titleParam);
        };
        HumanOptionTitle.prototype.deserializeAs_HumanOptionTitle = function(input) {
            _super.prototype.deserializeHumanOption(this, input);
            this.titleId = input.readVarUhShort();
            if (this.titleId < 0) {
                throw new Error("Forbidden value (" + this.titleId + ") on element of HumanOptionTitle.titleId.");
            }
            this.titleParam = input.readUTF();
        };
        HumanOptionTitle.ID = 6451;
        return HumanOptionTitle;
    })(HumanOption);
    Protocol.HumanOptionTitle = HumanOptionTitle;
    var DecraftedItemStackInfo = (function() {

        function DecraftedItemStackInfo() {
            this.objectUID = 0;
            this.bonusMin = 0;
            this.bonusMax = 0;
            this.runesId = [];
            this.runesQty = [];

        }
        DecraftedItemStackInfo.prototype.getMessageId = function() {
            return DecraftedItemStackInfo.ID;
        };
        DecraftedItemStackInfo.prototype.reset = function() {
            this.objectUID = 0;
            this.bonusMin = 0;
            this.bonusMax = 0;
            this.runesId = [];
            this.runesQty = [];
        };
        DecraftedItemStackInfo.prototype.serialize = function(output) {
            this.serializeAs_DecraftedItemStackInfo(output);
        };
        DecraftedItemStackInfo.prototype.deserialize = function(input) {
            this.deserializeAs_DecraftedItemStackInfo(input);
        };
        DecraftedItemStackInfo.prototype.serializeAs_DecraftedItemStackInfo = function(output) {
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
            }
            output.writeVarInt(this.objectUID);
            output.writeFloat(this.bonusMin);
            output.writeFloat(this.bonusMax);
            output.writeShort(this.runesId.length);
            for (var _i4 = 0; _i4 < this.runesId.length; _i4++) {
                if (this.runesId[_i4] < 0) {
                    throw new Error("Forbidden value (" + this.runesId[_i4] + ") on element 4 (starting at 1) of runesId.");
                }
                output.writeVarShort(this.runesId[_i4]);
            }
            output.writeShort(this.runesQty.length);
            for (var _i5 = 0; _i5 < this.runesQty.length; _i5++) {
                if (this.runesQty[_i5] < 0) {
                    throw new Error("Forbidden value (" + this.runesQty[_i5] + ") on element 5 (starting at 1) of runesQty.");
                }
                output.writeVarInt(this.runesQty[_i5]);
            }
        };
        DecraftedItemStackInfo.prototype.deserializeAs_DecraftedItemStackInfo = function(input) {
            var _val4 = 0;
            var _val5 = 0;
            this.objectUID = input.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element of DecraftedItemStackInfo.objectUID.");
            }
            this.bonusMin = input.readFloat();
            this.bonusMax = input.readFloat();
            var _runesIdLen = input.readUnsignedShort();
            for (var _i4 = 0; _i4 < _runesIdLen; _i4++) {
                _val4 = input.readVarUhShort();
                if (_val4 < 0) {
                    throw new Error("Forbidden value (" + _val4 + ") on elements of runesId.");
                }
                this.runesId.push(_val4);
            }
            var _runesQtyLen = input.readUnsignedShort();
            for (var _i5 = 0; _i5 < _runesQtyLen; _i5++) {
                _val5 = input.readVarUhInt();
                if (_val5 < 0) {
                    throw new Error("Forbidden value (" + _val5 + ") on elements of runesQty.");
                }
                this.runesQty.push(_val5);
            }
        };
        DecraftedItemStackInfo.ID = 3237;
        return DecraftedItemStackInfo;
    })();
    Protocol.DecraftedItemStackInfo = DecraftedItemStackInfo;
    var JobBookSubscription = (function() {

        function JobBookSubscription() {
            this.jobId = 0;
            this.subscribed = false;

        }
        JobBookSubscription.prototype.getMessageId = function() {
            return JobBookSubscription.ID;
        };
        JobBookSubscription.prototype.reset = function() {
            this.jobId = 0;
            this.subscribed = false;
        };
        JobBookSubscription.prototype.serialize = function(output) {
            this.serializeAs_JobBookSubscription(output);
        };
        JobBookSubscription.prototype.deserialize = function(input) {
            this.deserializeAs_JobBookSubscription(input);
        };
        JobBookSubscription.prototype.serializeAs_JobBookSubscription = function(output) {
            if (this.jobId < 0) {
                throw new Error("Forbidden value (" + this.jobId + ") on element jobId.");
            }
            output.writeByte(this.jobId);
            output.writeBoolean(this.subscribed);
        };
        JobBookSubscription.prototype.deserializeAs_JobBookSubscription = function(input) {
            this.jobId = input.readByte();
            if (this.jobId < 0) {
                throw new Error("Forbidden value (" + this.jobId + ") on element of JobBookSubscription.jobId.");
            }
            this.subscribed = input.readBoolean();
        };
        JobBookSubscription.ID = 8818;
        return JobBookSubscription;
    })();
    Protocol.JobBookSubscription = JobBookSubscription;
    var JobCrafterDirectoryEntryJobInfo = (function() {

        function JobCrafterDirectoryEntryJobInfo() {
            this.jobId = 0;
            this.jobLevel = 0;
            this.free = false;
            this.minLevel = 0;

        }
        JobCrafterDirectoryEntryJobInfo.prototype.getMessageId = function() {
            return JobCrafterDirectoryEntryJobInfo.ID;
        };
        JobCrafterDirectoryEntryJobInfo.prototype.reset = function() {
            this.jobId = 0;
            this.jobLevel = 0;
            this.free = false;
            this.minLevel = 0;
        };
        JobCrafterDirectoryEntryJobInfo.prototype.serialize = function(output) {
            this.serializeAs_JobCrafterDirectoryEntryJobInfo(output);
        };
        JobCrafterDirectoryEntryJobInfo.prototype.deserialize = function(input) {
            this.deserializeAs_JobCrafterDirectoryEntryJobInfo(input);
        };
        JobCrafterDirectoryEntryJobInfo.prototype.serializeAs_JobCrafterDirectoryEntryJobInfo = function(output) {
            if (this.jobId < 0) {
                throw new Error("Forbidden value (" + this.jobId + ") on element jobId.");
            }
            output.writeByte(this.jobId);
            if (this.jobLevel < 1 || this.jobLevel > 200) {
                throw new Error("Forbidden value (" + this.jobLevel + ") on element jobLevel.");
            }
            output.writeByte(this.jobLevel);
            output.writeBoolean(this.free);
            if (this.minLevel < 0 || this.minLevel > 255) {
                throw new Error("Forbidden value (" + this.minLevel + ") on element minLevel.");
            }
            output.writeByte(this.minLevel);
        };
        JobCrafterDirectoryEntryJobInfo.prototype.deserializeAs_JobCrafterDirectoryEntryJobInfo = function(input) {
            this.jobId = input.readByte();
            if (this.jobId < 0) {
                throw new Error("Forbidden value (" + this.jobId + ") on element of JobCrafterDirectoryEntryJobInfo.jobId.");
            }
            this.jobLevel = input.readUnsignedByte();
            if (this.jobLevel < 1 || this.jobLevel > 200) {
                throw new Error("Forbidden value (" + this.jobLevel + ") on element of JobCrafterDirectoryEntryJobInfo.jobLevel.");
            }
            this.free = input.readBoolean();
            this.minLevel = input.readUnsignedByte();
            if (this.minLevel < 0 || this.minLevel > 255) {
                throw new Error("Forbidden value (" + this.minLevel + ") on element of JobCrafterDirectoryEntryJobInfo.minLevel.");
            }
        };
        JobCrafterDirectoryEntryJobInfo.ID = 3458;
        return JobCrafterDirectoryEntryJobInfo;
    })();
    Protocol.JobCrafterDirectoryEntryJobInfo = JobCrafterDirectoryEntryJobInfo;
    var JobCrafterDirectoryEntryPlayerInfo = (function() {

        function JobCrafterDirectoryEntryPlayerInfo() {
            this.playerId = 0;
            this.playerName = "";
            this.alignmentSide = 0;
            this.breed = 0;
            this.sex = false;
            this.isInWorkshop = false;
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.canCraftLegendary = false;
            this.status = new PlayerStatus();

        }
        JobCrafterDirectoryEntryPlayerInfo.prototype.getMessageId = function() {
            return JobCrafterDirectoryEntryPlayerInfo.ID;
        };
        JobCrafterDirectoryEntryPlayerInfo.prototype.reset = function() {
            this.playerId = 0;
            this.playerName = "";
            this.alignmentSide = 0;
            this.breed = 0;
            this.sex = false;
            this.isInWorkshop = false;
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.canCraftLegendary = false;
            this.status = new PlayerStatus();
        };
        JobCrafterDirectoryEntryPlayerInfo.prototype.serialize = function(output) {
            this.serializeAs_JobCrafterDirectoryEntryPlayerInfo(output);
        };
        JobCrafterDirectoryEntryPlayerInfo.prototype.deserialize = function(input) {
            this.deserializeAs_JobCrafterDirectoryEntryPlayerInfo(input);
        };
        JobCrafterDirectoryEntryPlayerInfo.prototype.serializeAs_JobCrafterDirectoryEntryPlayerInfo = function(output) {
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
            output.writeUTF(this.playerName);
            output.writeByte(this.alignmentSide);
            output.writeByte(this.breed);
            output.writeBoolean(this.sex);
            output.writeBoolean(this.isInWorkshop);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
            }
            output.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
            }
            output.writeShort(this.worldY);
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
            output.writeBoolean(this.canCraftLegendary);
            output.writeShort(this.status.getTypeId());
            this.status.serialize(output);
        };
        JobCrafterDirectoryEntryPlayerInfo.prototype.deserializeAs_JobCrafterDirectoryEntryPlayerInfo = function(input) {
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of JobCrafterDirectoryEntryPlayerInfo.playerId.");
            }
            this.playerName = input.readUTF();
            this.alignmentSide = input.readByte();
            this.breed = input.readByte();
            if (this.breed < PlayableBreedEnum.Feca || this.breed > PlayableBreedEnum.Ouginak) {
                throw new Error("Forbidden value (" + this.breed + ") on element of JobCrafterDirectoryEntryPlayerInfo.breed.");
            }
            this.sex = input.readBoolean();
            this.isInWorkshop = input.readBoolean();
            this.worldX = input.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element of JobCrafterDirectoryEntryPlayerInfo.worldX.");
            }
            this.worldY = input.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element of JobCrafterDirectoryEntryPlayerInfo.worldY.");
            }
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of JobCrafterDirectoryEntryPlayerInfo.mapId.");
            }
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of JobCrafterDirectoryEntryPlayerInfo.subAreaId.");
            }
            this.canCraftLegendary = input.readBoolean();
            var _id12 = input.readUnsignedShort();
            this.status = ProtocolTypeManager.getInstance(PlayerStatus, _id12);
            this.status.deserialize(input);
        };
        JobCrafterDirectoryEntryPlayerInfo.ID = 8534;
        return JobCrafterDirectoryEntryPlayerInfo;
    })();
    Protocol.JobCrafterDirectoryEntryPlayerInfo = JobCrafterDirectoryEntryPlayerInfo;
    var JobCrafterDirectoryListEntry = (function() {

        function JobCrafterDirectoryListEntry() {
            this.playerInfo = new JobCrafterDirectoryEntryPlayerInfo();
            this.jobInfo = new JobCrafterDirectoryEntryJobInfo();

        }
        JobCrafterDirectoryListEntry.prototype.getMessageId = function() {
            return JobCrafterDirectoryListEntry.ID;
        };
        JobCrafterDirectoryListEntry.prototype.reset = function() {
            this.playerInfo = new JobCrafterDirectoryEntryPlayerInfo();
            this.jobInfo = new JobCrafterDirectoryEntryJobInfo();
        };
        JobCrafterDirectoryListEntry.prototype.serialize = function(output) {
            this.serializeAs_JobCrafterDirectoryListEntry(output);
        };
        JobCrafterDirectoryListEntry.prototype.deserialize = function(input) {
            this.deserializeAs_JobCrafterDirectoryListEntry(input);
        };
        JobCrafterDirectoryListEntry.prototype.serializeAs_JobCrafterDirectoryListEntry = function(output) {
            this.playerInfo.serializeAs_JobCrafterDirectoryEntryPlayerInfo(output);
            this.jobInfo.serializeAs_JobCrafterDirectoryEntryJobInfo(output);
        };
        JobCrafterDirectoryListEntry.prototype.deserializeAs_JobCrafterDirectoryListEntry = function(input) {
            this.playerInfo = new JobCrafterDirectoryEntryPlayerInfo();
            this.playerInfo.deserialize(input);
            this.jobInfo = new JobCrafterDirectoryEntryJobInfo();
            this.jobInfo.deserialize(input);
        };
        JobCrafterDirectoryListEntry.ID = 1757;
        return JobCrafterDirectoryListEntry;
    })();
    Protocol.JobCrafterDirectoryListEntry = JobCrafterDirectoryListEntry;
    var JobCrafterDirectorySettings = (function() {

        function JobCrafterDirectorySettings() {
            this.jobId = 0;
            this.minLevel = 0;
            this.free = false;

        }
        JobCrafterDirectorySettings.prototype.getMessageId = function() {
            return JobCrafterDirectorySettings.ID;
        };
        JobCrafterDirectorySettings.prototype.reset = function() {
            this.jobId = 0;
            this.minLevel = 0;
            this.free = false;
        };
        JobCrafterDirectorySettings.prototype.serialize = function(output) {
            this.serializeAs_JobCrafterDirectorySettings(output);
        };
        JobCrafterDirectorySettings.prototype.deserialize = function(input) {
            this.deserializeAs_JobCrafterDirectorySettings(input);
        };
        JobCrafterDirectorySettings.prototype.serializeAs_JobCrafterDirectorySettings = function(output) {
            if (this.jobId < 0) {
                throw new Error("Forbidden value (" + this.jobId + ") on element jobId.");
            }
            output.writeByte(this.jobId);
            if (this.minLevel < 0 || this.minLevel > 255) {
                throw new Error("Forbidden value (" + this.minLevel + ") on element minLevel.");
            }
            output.writeByte(this.minLevel);
            output.writeBoolean(this.free);
        };
        JobCrafterDirectorySettings.prototype.deserializeAs_JobCrafterDirectorySettings = function(input) {
            this.jobId = input.readByte();
            if (this.jobId < 0) {
                throw new Error("Forbidden value (" + this.jobId + ") on element of JobCrafterDirectorySettings.jobId.");
            }
            this.minLevel = input.readUnsignedByte();
            if (this.minLevel < 0 || this.minLevel > 255) {
                throw new Error("Forbidden value (" + this.minLevel + ") on element of JobCrafterDirectorySettings.minLevel.");
            }
            this.free = input.readBoolean();
        };
        JobCrafterDirectorySettings.ID = 6554;
        return JobCrafterDirectorySettings;
    })();
    Protocol.JobCrafterDirectorySettings = JobCrafterDirectorySettings;
    var JobDescription = (function() {

        function JobDescription() {
            this.jobId = 0;
            this.skills = [];

        }
        JobDescription.prototype.getMessageId = function() {
            return JobDescription.ID;
        };
        JobDescription.prototype.reset = function() {
            this.jobId = 0;
            this.skills = [];
        };
        JobDescription.prototype.serialize = function(output) {
            this.serializeAs_JobDescription(output);
        };
        JobDescription.prototype.deserialize = function(input) {
            this.deserializeAs_JobDescription(input);
        };
        JobDescription.prototype.serializeAs_JobDescription = function(output) {
            if (this.jobId < 0) {
                throw new Error("Forbidden value (" + this.jobId + ") on element jobId.");
            }
            output.writeByte(this.jobId);
            output.writeShort(this.skills.length);
            for (var _i2 = 0; _i2 < this.skills.length; _i2++) {
                output.writeShort((this.skills[_i2]).getTypeId());
                (this.skills[_i2]).serialize(output);
            }
        };
        JobDescription.prototype.deserializeAs_JobDescription = function(input) {
            var _id2 = 0;
            var _item2 = null;
            this.jobId = input.readByte();
            if (this.jobId < 0) {
                throw new Error("Forbidden value (" + this.jobId + ") on element of JobDescription.jobId.");
            }
            var _skillsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _skillsLen; _i2++) {
                _id2 = input.readUnsignedShort();
                _item2 = ProtocolTypeManager.getInstance(SkillActionDescription, _id2);
                _item2.deserialize(input);
                this.skills.push(_item2);
            }
        };
        JobDescription.ID = 557;
        return JobDescription;
    })();
    Protocol.JobDescription = JobDescription;
    var JobExperience = (function() {

        function JobExperience() {
            this.jobId = 0;
            this.jobLevel = 0;
            this.jobXP = 0;
            this.jobXpLevelFloor = 0;
            this.jobXpNextLevelFloor = 0;

        }
        JobExperience.prototype.getMessageId = function() {
            return JobExperience.ID;
        };
        JobExperience.prototype.reset = function() {
            this.jobId = 0;
            this.jobLevel = 0;
            this.jobXP = 0;
            this.jobXpLevelFloor = 0;
            this.jobXpNextLevelFloor = 0;
        };
        JobExperience.prototype.serialize = function(output) {
            this.serializeAs_JobExperience(output);
        };
        JobExperience.prototype.deserialize = function(input) {
            this.deserializeAs_JobExperience(input);
        };
        JobExperience.prototype.serializeAs_JobExperience = function(output) {
            if (this.jobId < 0) {
                throw new Error("Forbidden value (" + this.jobId + ") on element jobId.");
            }
            output.writeByte(this.jobId);
            if (this.jobLevel < 0 || this.jobLevel > 255) {
                throw new Error("Forbidden value (" + this.jobLevel + ") on element jobLevel.");
            }
            output.writeByte(this.jobLevel);
            if (this.jobXP < 0 || this.jobXP > 9007199254740990) {
                throw new Error("Forbidden value (" + this.jobXP + ") on element jobXP.");
            }
            output.writeVarLong(this.jobXP);
            if (this.jobXpLevelFloor < 0 || this.jobXpLevelFloor > 9007199254740990) {
                throw new Error("Forbidden value (" + this.jobXpLevelFloor + ") on element jobXpLevelFloor.");
            }
            output.writeVarLong(this.jobXpLevelFloor);
            if (this.jobXpNextLevelFloor < 0 || this.jobXpNextLevelFloor > 9007199254740990) {
                throw new Error("Forbidden value (" + this.jobXpNextLevelFloor + ") on element jobXpNextLevelFloor.");
            }
            output.writeVarLong(this.jobXpNextLevelFloor);
        };
        JobExperience.prototype.deserializeAs_JobExperience = function(input) {
            this.jobId = input.readByte();
            if (this.jobId < 0) {
                throw new Error("Forbidden value (" + this.jobId + ") on element of JobExperience.jobId.");
            }
            this.jobLevel = input.readUnsignedByte();
            if (this.jobLevel < 0 || this.jobLevel > 255) {
                throw new Error("Forbidden value (" + this.jobLevel + ") on element of JobExperience.jobLevel.");
            }
            this.jobXP = input.readVarUhLong();
            if (this.jobXP < 0 || this.jobXP > 9007199254740990) {
                throw new Error("Forbidden value (" + this.jobXP + ") on element of JobExperience.jobXP.");
            }
            this.jobXpLevelFloor = input.readVarUhLong();
            if (this.jobXpLevelFloor < 0 || this.jobXpLevelFloor > 9007199254740990) {
                throw new Error("Forbidden value (" + this.jobXpLevelFloor + ") on element of JobExperience.jobXpLevelFloor.");
            }
            this.jobXpNextLevelFloor = input.readVarUhLong();
            if (this.jobXpNextLevelFloor < 0 || this.jobXpNextLevelFloor > 9007199254740990) {
                throw new Error("Forbidden value (" + this.jobXpNextLevelFloor + ") on element of JobExperience.jobXpNextLevelFloor.");
            }
        };
        JobExperience.ID = 1449;
        return JobExperience;
    })();
    Protocol.JobExperience = JobExperience;
    var MonsterBoosts = (function() {

        function MonsterBoosts() {
            this.id = 0;
            this.xpBoost = 0;
            this.dropBoost = 0;

        }
        MonsterBoosts.prototype.getMessageId = function() {
            return MonsterBoosts.ID;
        };
        MonsterBoosts.prototype.reset = function() {
            this.id = 0;
            this.xpBoost = 0;
            this.dropBoost = 0;
        };
        MonsterBoosts.prototype.serialize = function(output) {
            this.serializeAs_MonsterBoosts(output);
        };
        MonsterBoosts.prototype.deserialize = function(input) {
            this.deserializeAs_MonsterBoosts(input);
        };
        MonsterBoosts.prototype.serializeAs_MonsterBoosts = function(output) {
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarInt(this.id);
            if (this.xpBoost < 0) {
                throw new Error("Forbidden value (" + this.xpBoost + ") on element xpBoost.");
            }
            output.writeVarShort(this.xpBoost);
            if (this.dropBoost < 0) {
                throw new Error("Forbidden value (" + this.dropBoost + ") on element dropBoost.");
            }
            output.writeVarShort(this.dropBoost);
        };
        MonsterBoosts.prototype.deserializeAs_MonsterBoosts = function(input) {
            this.id = input.readVarUhInt();
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element of MonsterBoosts.id.");
            }
            this.xpBoost = input.readVarUhShort();
            if (this.xpBoost < 0) {
                throw new Error("Forbidden value (" + this.xpBoost + ") on element of MonsterBoosts.xpBoost.");
            }
            this.dropBoost = input.readVarUhShort();
            if (this.dropBoost < 0) {
                throw new Error("Forbidden value (" + this.dropBoost + ") on element of MonsterBoosts.dropBoost.");
            }
        };
        MonsterBoosts.ID = 4497;
        return MonsterBoosts;
    })();
    Protocol.MonsterBoosts = MonsterBoosts;
    var MonsterInGroupLightInformations = (function() {

        function MonsterInGroupLightInformations() {
            this.genericId = 0;
            this.grade = 0;
            this.level = 0;

        }
        MonsterInGroupLightInformations.prototype.getMessageId = function() {
            return MonsterInGroupLightInformations.ID;
        };
        MonsterInGroupLightInformations.prototype.reset = function() {
            this.genericId = 0;
            this.grade = 0;
            this.level = 0;
        };
        MonsterInGroupLightInformations.prototype.serialize = function(output) {
            this.serializeAs_MonsterInGroupLightInformations(output);
        };
        MonsterInGroupLightInformations.prototype.deserialize = function(input) {
            this.deserializeAs_MonsterInGroupLightInformations(input);
        };
        MonsterInGroupLightInformations.prototype.serializeAs_MonsterInGroupLightInformations = function(output) {
            output.writeInt(this.genericId);
            if (this.grade < 0) {
                throw new Error("Forbidden value (" + this.grade + ") on element grade.");
            }
            output.writeByte(this.grade);
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeShort(this.level);
        };
        MonsterInGroupLightInformations.prototype.deserializeAs_MonsterInGroupLightInformations = function(input) {
            this.genericId = input.readInt();
            this.grade = input.readByte();
            if (this.grade < 0) {
                throw new Error("Forbidden value (" + this.grade + ") on element of MonsterInGroupLightInformations.grade.");
            }
            this.level = input.readShort();
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element of MonsterInGroupLightInformations.level.");
            }
        };
        MonsterInGroupLightInformations.ID = 7146;
        return MonsterInGroupLightInformations;
    })();
    Protocol.MonsterInGroupLightInformations = MonsterInGroupLightInformations;
    var MonsterInGroupInformations = (function(_super) {
        __extends(MonsterInGroupInformations, _super);

        function MonsterInGroupInformations() {
            this.look = new EntityLook();
            _super.call(this)
        }
        MonsterInGroupInformations.prototype.getMessageId = function() {
            return MonsterInGroupInformations.ID;
        };
        MonsterInGroupInformations.prototype.reset = function() {
            this.look = new EntityLook();
        };
        MonsterInGroupInformations.prototype.serialize = function(output) {
            this.serializeAs_MonsterInGroupInformations(output);
        };
        MonsterInGroupInformations.prototype.deserialize = function(input) {
            this.deserializeAs_MonsterInGroupInformations(input);
        };
        MonsterInGroupInformations.prototype.serializeAs_MonsterInGroupInformations = function(output) {
            _super.prototype.serializeAs_MonsterInGroupLightInformations(this, output);
            this.look.serializeAs_EntityLook(output);
        };
        MonsterInGroupInformations.prototype.deserializeAs_MonsterInGroupInformations = function(input) {
            _super.prototype.deserializeMonsterInGroupLightInformations(this, input);
            this.look = new EntityLook();
            this.look.deserialize(input);
        };
        MonsterInGroupInformations.ID = 3232;
        return MonsterInGroupInformations;
    })(MonsterInGroupLightInformations);
    Protocol.MonsterInGroupInformations = MonsterInGroupInformations;
    var ObjectItemInRolePlay = (function() {

        function ObjectItemInRolePlay() {
            this.cellId = 0;
            this.objectGID = 0;

        }
        ObjectItemInRolePlay.prototype.getMessageId = function() {
            return ObjectItemInRolePlay.ID;
        };
        ObjectItemInRolePlay.prototype.reset = function() {
            this.cellId = 0;
            this.objectGID = 0;
        };
        ObjectItemInRolePlay.prototype.serialize = function(output) {
            this.serializeAs_ObjectItemInRolePlay(output);
        };
        ObjectItemInRolePlay.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectItemInRolePlay(input);
        };
        ObjectItemInRolePlay.prototype.serializeAs_ObjectItemInRolePlay = function(output) {
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
            }
            output.writeVarShort(this.cellId);
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element objectGID.");
            }
            output.writeVarShort(this.objectGID);
        };
        ObjectItemInRolePlay.prototype.deserializeAs_ObjectItemInRolePlay = function(input) {
            this.cellId = input.readVarUhShort();
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element of ObjectItemInRolePlay.cellId.");
            }
            this.objectGID = input.readVarUhShort();
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element of ObjectItemInRolePlay.objectGID.");
            }
        };
        ObjectItemInRolePlay.ID = 9311;
        return ObjectItemInRolePlay;
    })();
    Protocol.ObjectItemInRolePlay = ObjectItemInRolePlay;
    var DungeonPartyFinderPlayer = (function() {

        function DungeonPartyFinderPlayer() {
            this.playerId = 0;
            this.playerName = "";
            this.breed = 0;
            this.sex = false;
            this.level = 0;

        }
        DungeonPartyFinderPlayer.prototype.getMessageId = function() {
            return DungeonPartyFinderPlayer.ID;
        };
        DungeonPartyFinderPlayer.prototype.reset = function() {
            this.playerId = 0;
            this.playerName = "";
            this.breed = 0;
            this.sex = false;
            this.level = 0;
        };
        DungeonPartyFinderPlayer.prototype.serialize = function(output) {
            this.serializeAs_DungeonPartyFinderPlayer(output);
        };
        DungeonPartyFinderPlayer.prototype.deserialize = function(input) {
            this.deserializeAs_DungeonPartyFinderPlayer(input);
        };
        DungeonPartyFinderPlayer.prototype.serializeAs_DungeonPartyFinderPlayer = function(output) {
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
            output.writeUTF(this.playerName);
            output.writeByte(this.breed);
            output.writeBoolean(this.sex);
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeVarShort(this.level);
        };
        DungeonPartyFinderPlayer.prototype.deserializeAs_DungeonPartyFinderPlayer = function(input) {
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of DungeonPartyFinderPlayer.playerId.");
            }
            this.playerName = input.readUTF();
            this.breed = input.readByte();
            if (this.breed < PlayableBreedEnum.Feca || this.breed > PlayableBreedEnum.Ouginak) {
                throw new Error("Forbidden value (" + this.breed + ") on element of DungeonPartyFinderPlayer.breed.");
            }
            this.sex = input.readBoolean();
            this.level = input.readVarUhShort();
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element of DungeonPartyFinderPlayer.level.");
            }
        };
        DungeonPartyFinderPlayer.ID = 8707;
        return DungeonPartyFinderPlayer;
    })();
    Protocol.DungeonPartyFinderPlayer = DungeonPartyFinderPlayer;
    var PartyEntityBaseInformation = (function() {

        function PartyEntityBaseInformation() {
            this.indexId = 0;
            this.entityModelId = 0;
            this.entityLook = new EntityLook();

        }
        PartyEntityBaseInformation.prototype.getMessageId = function() {
            return PartyEntityBaseInformation.ID;
        };
        PartyEntityBaseInformation.prototype.reset = function() {
            this.indexId = 0;
            this.entityModelId = 0;
            this.entityLook = new EntityLook();
        };
        PartyEntityBaseInformation.prototype.serialize = function(output) {
            this.serializeAs_PartyEntityBaseInformation(output);
        };
        PartyEntityBaseInformation.prototype.deserialize = function(input) {
            this.deserializeAs_PartyEntityBaseInformation(input);
        };
        PartyEntityBaseInformation.prototype.serializeAs_PartyEntityBaseInformation = function(output) {
            if (this.indexId < 0) {
                throw new Error("Forbidden value (" + this.indexId + ") on element indexId.");
            }
            output.writeByte(this.indexId);
            if (this.entityModelId < 0) {
                throw new Error("Forbidden value (" + this.entityModelId + ") on element entityModelId.");
            }
            output.writeByte(this.entityModelId);
            this.entityLook.serializeAs_EntityLook(output);
        };
        PartyEntityBaseInformation.prototype.deserializeAs_PartyEntityBaseInformation = function(input) {
            this.indexId = input.readByte();
            if (this.indexId < 0) {
                throw new Error("Forbidden value (" + this.indexId + ") on element of PartyEntityBaseInformation.indexId.");
            }
            this.entityModelId = input.readByte();
            if (this.entityModelId < 0) {
                throw new Error("Forbidden value (" + this.entityModelId + ") on element of PartyEntityBaseInformation.entityModelId.");
            }
            this.entityLook = new EntityLook();
            this.entityLook.deserialize(input);
        };
        PartyEntityBaseInformation.ID = 4252;
        return PartyEntityBaseInformation;
    })();
    Protocol.PartyEntityBaseInformation = PartyEntityBaseInformation;
    var PartyEntityMemberInformation = (function(_super) {
        __extends(PartyEntityMemberInformation, _super);

        function PartyEntityMemberInformation() {
            this.initiative = 0;
            this.lifePoints = 0;
            this.maxLifePoints = 0;
            this.prospecting = 0;
            this.regenRate = 0;
            _super.call(this)
        }
        PartyEntityMemberInformation.prototype.getMessageId = function() {
            return PartyEntityMemberInformation.ID;
        };
        PartyEntityMemberInformation.prototype.reset = function() {
            this.initiative = 0;
            this.lifePoints = 0;
            this.maxLifePoints = 0;
            this.prospecting = 0;
            this.regenRate = 0;
        };
        PartyEntityMemberInformation.prototype.serialize = function(output) {
            this.serializeAs_PartyEntityMemberInformation(output);
        };
        PartyEntityMemberInformation.prototype.deserialize = function(input) {
            this.deserializeAs_PartyEntityMemberInformation(input);
        };
        PartyEntityMemberInformation.prototype.serializeAs_PartyEntityMemberInformation = function(output) {
            _super.prototype.serializeAs_PartyEntityBaseInformation(this, output);
            if (this.initiative < 0) {
                throw new Error("Forbidden value (" + this.initiative + ") on element initiative.");
            }
            output.writeVarShort(this.initiative);
            if (this.lifePoints < 0) {
                throw new Error("Forbidden value (" + this.lifePoints + ") on element lifePoints.");
            }
            output.writeVarInt(this.lifePoints);
            if (this.maxLifePoints < 0) {
                throw new Error("Forbidden value (" + this.maxLifePoints + ") on element maxLifePoints.");
            }
            output.writeVarInt(this.maxLifePoints);
            if (this.prospecting < 0) {
                throw new Error("Forbidden value (" + this.prospecting + ") on element prospecting.");
            }
            output.writeVarShort(this.prospecting);
            if (this.regenRate < 0 || this.regenRate > 255) {
                throw new Error("Forbidden value (" + this.regenRate + ") on element regenRate.");
            }
            output.writeByte(this.regenRate);
        };
        PartyEntityMemberInformation.prototype.deserializeAs_PartyEntityMemberInformation = function(input) {
            _super.prototype.deserializePartyEntityBaseInformation(this, input);
            this.initiative = input.readVarUhShort();
            if (this.initiative < 0) {
                throw new Error("Forbidden value (" + this.initiative + ") on element of PartyEntityMemberInformation.initiative.");
            }
            this.lifePoints = input.readVarUhInt();
            if (this.lifePoints < 0) {
                throw new Error("Forbidden value (" + this.lifePoints + ") on element of PartyEntityMemberInformation.lifePoints.");
            }
            this.maxLifePoints = input.readVarUhInt();
            if (this.maxLifePoints < 0) {
                throw new Error("Forbidden value (" + this.maxLifePoints + ") on element of PartyEntityMemberInformation.maxLifePoints.");
            }
            this.prospecting = input.readVarUhShort();
            if (this.prospecting < 0) {
                throw new Error("Forbidden value (" + this.prospecting + ") on element of PartyEntityMemberInformation.prospecting.");
            }
            this.regenRate = input.readUnsignedByte();
            if (this.regenRate < 0 || this.regenRate > 255) {
                throw new Error("Forbidden value (" + this.regenRate + ") on element of PartyEntityMemberInformation.regenRate.");
            }
        };
        PartyEntityMemberInformation.ID = 4347;
        return PartyEntityMemberInformation;
    })(PartyEntityBaseInformation);
    Protocol.PartyEntityMemberInformation = PartyEntityMemberInformation;
    var NamedPartyTeam = (function() {

        function NamedPartyTeam() {
            this.teamId = 2;
            this.partyName = "";

        }
        NamedPartyTeam.prototype.getMessageId = function() {
            return NamedPartyTeam.ID;
        };
        NamedPartyTeam.prototype.reset = function() {
            this.teamId = 2;
            this.partyName = "";
        };
        NamedPartyTeam.prototype.serialize = function(output) {
            this.serializeAs_NamedPartyTeam(output);
        };
        NamedPartyTeam.prototype.deserialize = function(input) {
            this.deserializeAs_NamedPartyTeam(input);
        };
        NamedPartyTeam.prototype.serializeAs_NamedPartyTeam = function(output) {
            output.writeByte(this.teamId);
            output.writeUTF(this.partyName);
        };
        NamedPartyTeam.prototype.deserializeAs_NamedPartyTeam = function(input) {
            this.teamId = input.readByte();
            if (this.teamId < 0) {
                throw new Error("Forbidden value (" + this.teamId + ") on element of NamedPartyTeam.teamId.");
            }
            this.partyName = input.readUTF();
        };
        NamedPartyTeam.ID = 644;
        return NamedPartyTeam;
    })();
    Protocol.NamedPartyTeam = NamedPartyTeam;
    var NamedPartyTeamWithOutcome = (function() {

        function NamedPartyTeamWithOutcome() {
            this.team = new NamedPartyTeam();
            this.outcome = 0;

        }
        NamedPartyTeamWithOutcome.prototype.getMessageId = function() {
            return NamedPartyTeamWithOutcome.ID;
        };
        NamedPartyTeamWithOutcome.prototype.reset = function() {
            this.team = new NamedPartyTeam();
            this.outcome = 0;
        };
        NamedPartyTeamWithOutcome.prototype.serialize = function(output) {
            this.serializeAs_NamedPartyTeamWithOutcome(output);
        };
        NamedPartyTeamWithOutcome.prototype.deserialize = function(input) {
            this.deserializeAs_NamedPartyTeamWithOutcome(input);
        };
        NamedPartyTeamWithOutcome.prototype.serializeAs_NamedPartyTeamWithOutcome = function(output) {
            this.team.serializeAs_NamedPartyTeam(output);
            output.writeVarShort(this.outcome);
        };
        NamedPartyTeamWithOutcome.prototype.deserializeAs_NamedPartyTeamWithOutcome = function(input) {
            this.team = new NamedPartyTeam();
            this.team.deserialize(input);
            this.outcome = input.readVarUhShort();
            if (this.outcome < 0) {
                throw new Error("Forbidden value (" + this.outcome + ") on element of NamedPartyTeamWithOutcome.outcome.");
            }
        };
        NamedPartyTeamWithOutcome.ID = 8513;
        return NamedPartyTeamWithOutcome;
    })();
    Protocol.NamedPartyTeamWithOutcome = NamedPartyTeamWithOutcome;
    var PartyGuestInformations = (function() {

        function PartyGuestInformations() {
            this.guestId = 0;
            this.hostId = 0;
            this.name = "";
            this.guestLook = new EntityLook();
            this.breed = 0;
            this.sex = false;
            this.status = new PlayerStatus();
            this.entities = [];

        }
        PartyGuestInformations.prototype.getMessageId = function() {
            return PartyGuestInformations.ID;
        };
        PartyGuestInformations.prototype.reset = function() {
            this.guestId = 0;
            this.hostId = 0;
            this.name = "";
            this.guestLook = new EntityLook();
            this.breed = 0;
            this.sex = false;
            this.status = new PlayerStatus();
            this.entities = [];
        };
        PartyGuestInformations.prototype.serialize = function(output) {
            this.serializeAs_PartyGuestInformations(output);
        };
        PartyGuestInformations.prototype.deserialize = function(input) {
            this.deserializeAs_PartyGuestInformations(input);
        };
        PartyGuestInformations.prototype.serializeAs_PartyGuestInformations = function(output) {
            if (this.guestId < 0 || this.guestId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.guestId + ") on element guestId.");
            }
            output.writeVarLong(this.guestId);
            if (this.hostId < 0 || this.hostId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.hostId + ") on element hostId.");
            }
            output.writeVarLong(this.hostId);
            output.writeUTF(this.name);
            this.guestLook.serializeAs_EntityLook(output);
            output.writeByte(this.breed);
            output.writeBoolean(this.sex);
            output.writeShort(this.status.getTypeId());
            this.status.serialize(output);
            output.writeShort(this.entities.length);
            for (var _i8 = 0; _i8 < this.entities.length; _i8++) {
                (this.entities[_i8]).serializeAs_PartyEntityBaseInformation(output);
            }
        };
        PartyGuestInformations.prototype.deserializeAs_PartyGuestInformations = function(input) {
            var _item8 = null;
            this.guestId = input.readVarUhLong();
            if (this.guestId < 0 || this.guestId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.guestId + ") on element of PartyGuestInformations.guestId.");
            }
            this.hostId = input.readVarUhLong();
            if (this.hostId < 0 || this.hostId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.hostId + ") on element of PartyGuestInformations.hostId.");
            }
            this.name = input.readUTF();
            this.guestLook = new EntityLook();
            this.guestLook.deserialize(input);
            this.breed = input.readByte();
            this.sex = input.readBoolean();
            var _id7 = input.readUnsignedShort();
            this.status = ProtocolTypeManager.getInstance(PlayerStatus, _id7);
            this.status.deserialize(input);
            var _entitiesLen = input.readUnsignedShort();
            for (var _i8 = 0; _i8 < _entitiesLen; _i8++) {
                _item8 = new PartyEntityBaseInformation();
                _item8.deserialize(input);
                this.entities.push(_item8);
            }
        };
        PartyGuestInformations.ID = 9468;
        return PartyGuestInformations;
    })();
    Protocol.PartyGuestInformations = PartyGuestInformations;
    var PartyInvitationMemberInformations = (function(_super) {
        __extends(PartyInvitationMemberInformations, _super);

        function PartyInvitationMemberInformations() {
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.entities = [];
            _super.call(this)
        }
        PartyInvitationMemberInformations.prototype.getMessageId = function() {
            return PartyInvitationMemberInformations.ID;
        };
        PartyInvitationMemberInformations.prototype.reset = function() {
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.entities = [];
        };
        PartyInvitationMemberInformations.prototype.serialize = function(output) {
            this.serializeAs_PartyInvitationMemberInformations(output);
        };
        PartyInvitationMemberInformations.prototype.deserialize = function(input) {
            this.deserializeAs_PartyInvitationMemberInformations(input);
        };
        PartyInvitationMemberInformations.prototype.serializeAs_PartyInvitationMemberInformations = function(output) {
            _super.prototype.serializeAs_CharacterBaseInformations(this, output);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
            }
            output.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
            }
            output.writeShort(this.worldY);
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
            output.writeShort(this.entities.length);
            for (var _i5 = 0; _i5 < this.entities.length; _i5++) {
                (this.entities[_i5]).serializeAs_PartyEntityBaseInformation(output);
            }
        };
        PartyInvitationMemberInformations.prototype.deserializeAs_PartyInvitationMemberInformations = function(input) {
            var _item5 = null;
            _super.prototype.deserializeCharacterBaseInformations(this, input);
            this.worldX = input.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element of PartyInvitationMemberInformations.worldX.");
            }
            this.worldY = input.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element of PartyInvitationMemberInformations.worldY.");
            }
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of PartyInvitationMemberInformations.mapId.");
            }
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of PartyInvitationMemberInformations.subAreaId.");
            }
            var _entitiesLen = input.readUnsignedShort();
            for (var _i5 = 0; _i5 < _entitiesLen; _i5++) {
                _item5 = new PartyEntityBaseInformation();
                _item5.deserialize(input);
                this.entities.push(_item5);
            }
        };
        PartyInvitationMemberInformations.ID = 7145;
        return PartyInvitationMemberInformations;
    })(CharacterBaseInformations);
    Protocol.PartyInvitationMemberInformations = PartyInvitationMemberInformations;
    var PartyMemberInformations = (function(_super) {
        __extends(PartyMemberInformations, _super);

        function PartyMemberInformations() {
            this.lifePoints = 0;
            this.maxLifePoints = 0;
            this.prospecting = 0;
            this.regenRate = 0;
            this.initiative = 0;
            this.alignmentSide = 0;
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.status = new PlayerStatus();
            this.entities = [];
            _super.call(this)
        }
        PartyMemberInformations.prototype.getMessageId = function() {
            return PartyMemberInformations.ID;
        };
        PartyMemberInformations.prototype.reset = function() {
            this.lifePoints = 0;
            this.maxLifePoints = 0;
            this.prospecting = 0;
            this.regenRate = 0;
            this.initiative = 0;
            this.alignmentSide = 0;
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.status = new PlayerStatus();
            this.entities = [];
        };
        PartyMemberInformations.prototype.serialize = function(output) {
            this.serializeAs_PartyMemberInformations(output);
        };
        PartyMemberInformations.prototype.deserialize = function(input) {
            this.deserializeAs_PartyMemberInformations(input);
        };
        PartyMemberInformations.prototype.serializeAs_PartyMemberInformations = function(output) {
            _super.prototype.serializeAs_CharacterBaseInformations(this, output);
            if (this.lifePoints < 0) {
                throw new Error("Forbidden value (" + this.lifePoints + ") on element lifePoints.");
            }
            output.writeVarInt(this.lifePoints);
            if (this.maxLifePoints < 0) {
                throw new Error("Forbidden value (" + this.maxLifePoints + ") on element maxLifePoints.");
            }
            output.writeVarInt(this.maxLifePoints);
            if (this.prospecting < 0) {
                throw new Error("Forbidden value (" + this.prospecting + ") on element prospecting.");
            }
            output.writeVarShort(this.prospecting);
            if (this.regenRate < 0 || this.regenRate > 255) {
                throw new Error("Forbidden value (" + this.regenRate + ") on element regenRate.");
            }
            output.writeByte(this.regenRate);
            if (this.initiative < 0) {
                throw new Error("Forbidden value (" + this.initiative + ") on element initiative.");
            }
            output.writeVarShort(this.initiative);
            output.writeByte(this.alignmentSide);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
            }
            output.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
            }
            output.writeShort(this.worldY);
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
            output.writeShort(this.status.getTypeId());
            this.status.serialize(output);
            output.writeShort(this.entities.length);
            for (var _i12 = 0; _i12 < this.entities.length; _i12++) {
                output.writeShort((this.entities[_i12]).getTypeId());
                (this.entities[_i12]).serialize(output);
            }
        };
        PartyMemberInformations.prototype.deserializeAs_PartyMemberInformations = function(input) {
            var _id12 = 0;
            var _item12 = null;
            _super.prototype.deserializeCharacterBaseInformations(this, input);
            this.lifePoints = input.readVarUhInt();
            if (this.lifePoints < 0) {
                throw new Error("Forbidden value (" + this.lifePoints + ") on element of PartyMemberInformations.lifePoints.");
            }
            this.maxLifePoints = input.readVarUhInt();
            if (this.maxLifePoints < 0) {
                throw new Error("Forbidden value (" + this.maxLifePoints + ") on element of PartyMemberInformations.maxLifePoints.");
            }
            this.prospecting = input.readVarUhShort();
            if (this.prospecting < 0) {
                throw new Error("Forbidden value (" + this.prospecting + ") on element of PartyMemberInformations.prospecting.");
            }
            this.regenRate = input.readUnsignedByte();
            if (this.regenRate < 0 || this.regenRate > 255) {
                throw new Error("Forbidden value (" + this.regenRate + ") on element of PartyMemberInformations.regenRate.");
            }
            this.initiative = input.readVarUhShort();
            if (this.initiative < 0) {
                throw new Error("Forbidden value (" + this.initiative + ") on element of PartyMemberInformations.initiative.");
            }
            this.alignmentSide = input.readByte();
            this.worldX = input.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element of PartyMemberInformations.worldX.");
            }
            this.worldY = input.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element of PartyMemberInformations.worldY.");
            }
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of PartyMemberInformations.mapId.");
            }
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of PartyMemberInformations.subAreaId.");
            }
            var _id11 = input.readUnsignedShort();
            this.status = ProtocolTypeManager.getInstance(PlayerStatus, _id11);
            this.status.deserialize(input);
            var _entitiesLen = input.readUnsignedShort();
            for (var _i12 = 0; _i12 < _entitiesLen; _i12++) {
                _id12 = input.readUnsignedShort();
                _item12 = ProtocolTypeManager.getInstance(PartyEntityBaseInformation, _id12);
                _item12.deserialize(input);
                this.entities.push(_item12);
            }
        };
        PartyMemberInformations.ID = 8246;
        return PartyMemberInformations;
    })(CharacterBaseInformations);
    Protocol.PartyMemberInformations = PartyMemberInformations;
    var PartyMemberArenaInformations = (function(_super) {
        __extends(PartyMemberArenaInformations, _super);

        function PartyMemberArenaInformations() {
            this.rank = 0;
            _super.call(this)
        }
        PartyMemberArenaInformations.prototype.getMessageId = function() {
            return PartyMemberArenaInformations.ID;
        };
        PartyMemberArenaInformations.prototype.reset = function() {
            this.rank = 0;
        };
        PartyMemberArenaInformations.prototype.serialize = function(output) {
            this.serializeAs_PartyMemberArenaInformations(output);
        };
        PartyMemberArenaInformations.prototype.deserialize = function(input) {
            this.deserializeAs_PartyMemberArenaInformations(input);
        };
        PartyMemberArenaInformations.prototype.serializeAs_PartyMemberArenaInformations = function(output) {
            _super.prototype.serializeAs_PartyMemberInformations(this, output);
            if (this.rank < 0 || this.rank > 20000) {
                throw new Error("Forbidden value (" + this.rank + ") on element rank.");
            }
            output.writeVarShort(this.rank);
        };
        PartyMemberArenaInformations.prototype.deserializeAs_PartyMemberArenaInformations = function(input) {
            _super.prototype.deserializePartyMemberInformations(this, input);
            this.rank = input.readVarUhShort();
            if (this.rank < 0 || this.rank > 20000) {
                throw new Error("Forbidden value (" + this.rank + ") on element of PartyMemberArenaInformations.rank.");
            }
        };
        PartyMemberArenaInformations.ID = 1101;
        return PartyMemberArenaInformations;
    })(PartyMemberInformations);
    Protocol.PartyMemberArenaInformations = PartyMemberArenaInformations;
    var PartyMemberGeoPosition = (function() {

        function PartyMemberGeoPosition() {
            this.memberId = 0;
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;

        }
        PartyMemberGeoPosition.prototype.getMessageId = function() {
            return PartyMemberGeoPosition.ID;
        };
        PartyMemberGeoPosition.prototype.reset = function() {
            this.memberId = 0;
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
        };
        PartyMemberGeoPosition.prototype.serialize = function(output) {
            this.serializeAs_PartyMemberGeoPosition(output);
        };
        PartyMemberGeoPosition.prototype.deserialize = function(input) {
            this.deserializeAs_PartyMemberGeoPosition(input);
        };
        PartyMemberGeoPosition.prototype.serializeAs_PartyMemberGeoPosition = function(output) {
            if (this.memberId < 0) {
                throw new Error("Forbidden value (" + this.memberId + ") on element memberId.");
            }
            output.writeInt(this.memberId);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
            }
            output.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
            }
            output.writeShort(this.worldY);
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
        };
        PartyMemberGeoPosition.prototype.deserializeAs_PartyMemberGeoPosition = function(input) {
            this.memberId = input.readInt();
            if (this.memberId < 0) {
                throw new Error("Forbidden value (" + this.memberId + ") on element of PartyMemberGeoPosition.memberId.");
            }
            this.worldX = input.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element of PartyMemberGeoPosition.worldX.");
            }
            this.worldY = input.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element of PartyMemberGeoPosition.worldY.");
            }
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of PartyMemberGeoPosition.mapId.");
            }
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of PartyMemberGeoPosition.subAreaId.");
            }
        };
        PartyMemberGeoPosition.ID = 6428;
        return PartyMemberGeoPosition;
    })();
    Protocol.PartyMemberGeoPosition = PartyMemberGeoPosition;
    var GameRolePlayNpcQuestFlag = (function() {

        function GameRolePlayNpcQuestFlag() {
            this.questsToValidId = [];
            this.questsToStartId = [];

        }
        GameRolePlayNpcQuestFlag.prototype.getMessageId = function() {
            return GameRolePlayNpcQuestFlag.ID;
        };
        GameRolePlayNpcQuestFlag.prototype.reset = function() {
            this.questsToValidId = [];
            this.questsToStartId = [];
        };
        GameRolePlayNpcQuestFlag.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayNpcQuestFlag(output);
        };
        GameRolePlayNpcQuestFlag.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayNpcQuestFlag(input);
        };
        GameRolePlayNpcQuestFlag.prototype.serializeAs_GameRolePlayNpcQuestFlag = function(output) {
            output.writeShort(this.questsToValidId.length);
            for (var _i1 = 0; _i1 < this.questsToValidId.length; _i1++) {
                if (this.questsToValidId[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.questsToValidId[_i1] + ") on element 1 (starting at 1) of questsToValidId.");
                }
                output.writeVarShort(this.questsToValidId[_i1]);
            }
            output.writeShort(this.questsToStartId.length);
            for (var _i2 = 0; _i2 < this.questsToStartId.length; _i2++) {
                if (this.questsToStartId[_i2] < 0) {
                    throw new Error("Forbidden value (" + this.questsToStartId[_i2] + ") on element 2 (starting at 1) of questsToStartId.");
                }
                output.writeVarShort(this.questsToStartId[_i2]);
            }
        };
        GameRolePlayNpcQuestFlag.prototype.deserializeAs_GameRolePlayNpcQuestFlag = function(input) {
            var _val1 = 0;
            var _val2 = 0;
            var _questsToValidIdLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _questsToValidIdLen; _i1++) {
                _val1 = input.readVarUhShort();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of questsToValidId.");
                }
                this.questsToValidId.push(_val1);
            }
            var _questsToStartIdLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _questsToStartIdLen; _i2++) {
                _val2 = input.readVarUhShort();
                if (_val2 < 0) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of questsToStartId.");
                }
                this.questsToStartId.push(_val2);
            }
        };
        GameRolePlayNpcQuestFlag.ID = 9023;
        return GameRolePlayNpcQuestFlag;
    })();
    Protocol.GameRolePlayNpcQuestFlag = GameRolePlayNpcQuestFlag;
    var QuestActiveInformations = (function() {

        function QuestActiveInformations() {
            this.questId = 0;

        }
        QuestActiveInformations.prototype.getMessageId = function() {
            return QuestActiveInformations.ID;
        };
        QuestActiveInformations.prototype.reset = function() {
            this.questId = 0;
        };
        QuestActiveInformations.prototype.serialize = function(output) {
            this.serializeAs_QuestActiveInformations(output);
        };
        QuestActiveInformations.prototype.deserialize = function(input) {
            this.deserializeAs_QuestActiveInformations(input);
        };
        QuestActiveInformations.prototype.serializeAs_QuestActiveInformations = function(output) {
            if (this.questId < 0) {
                throw new Error("Forbidden value (" + this.questId + ") on element questId.");
            }
            output.writeVarShort(this.questId);
        };
        QuestActiveInformations.prototype.deserializeAs_QuestActiveInformations = function(input) {
            this.questId = input.readVarUhShort();
            if (this.questId < 0) {
                throw new Error("Forbidden value (" + this.questId + ") on element of QuestActiveInformations.questId.");
            }
        };
        QuestActiveInformations.ID = 2513;
        return QuestActiveInformations;
    })();
    Protocol.QuestActiveInformations = QuestActiveInformations;
    var QuestActiveDetailedInformations = (function(_super) {
        __extends(QuestActiveDetailedInformations, _super);

        function QuestActiveDetailedInformations() {
            this.stepId = 0;
            this.objectives = [];
            _super.call(this)
        }
        QuestActiveDetailedInformations.prototype.getMessageId = function() {
            return QuestActiveDetailedInformations.ID;
        };
        QuestActiveDetailedInformations.prototype.reset = function() {
            this.stepId = 0;
            this.objectives = [];
        };
        QuestActiveDetailedInformations.prototype.serialize = function(output) {
            this.serializeAs_QuestActiveDetailedInformations(output);
        };
        QuestActiveDetailedInformations.prototype.deserialize = function(input) {
            this.deserializeAs_QuestActiveDetailedInformations(input);
        };
        QuestActiveDetailedInformations.prototype.serializeAs_QuestActiveDetailedInformations = function(output) {
            _super.prototype.serializeAs_QuestActiveInformations(this, output);
            if (this.stepId < 0) {
                throw new Error("Forbidden value (" + this.stepId + ") on element stepId.");
            }
            output.writeVarShort(this.stepId);
            output.writeShort(this.objectives.length);
            for (var _i2 = 0; _i2 < this.objectives.length; _i2++) {
                output.writeShort((this.objectives[_i2]).getTypeId());
                (this.objectives[_i2]).serialize(output);
            }
        };
        QuestActiveDetailedInformations.prototype.deserializeAs_QuestActiveDetailedInformations = function(input) {
            var _id2 = 0;
            var _item2 = null;
            _super.prototype.deserializeQuestActiveInformations(this, input);
            this.stepId = input.readVarUhShort();
            if (this.stepId < 0) {
                throw new Error("Forbidden value (" + this.stepId + ") on element of QuestActiveDetailedInformations.stepId.");
            }
            var _objectivesLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _objectivesLen; _i2++) {
                _id2 = input.readUnsignedShort();
                _item2 = ProtocolTypeManager.getInstance(QuestObjectiveInformations, _id2);
                _item2.deserialize(input);
                this.objectives.push(_item2);
            }
        };
        QuestActiveDetailedInformations.ID = 3438;
        return QuestActiveDetailedInformations;
    })(QuestActiveInformations);
    Protocol.QuestActiveDetailedInformations = QuestActiveDetailedInformations;
    var QuestObjectiveInformations = (function() {

        function QuestObjectiveInformations() {
            this.objectiveId = 0;
            this.objectiveStatus = false;
            this.dialogParams = [];

        }
        QuestObjectiveInformations.prototype.getMessageId = function() {
            return QuestObjectiveInformations.ID;
        };
        QuestObjectiveInformations.prototype.reset = function() {
            this.objectiveId = 0;
            this.objectiveStatus = false;
            this.dialogParams = [];
        };
        QuestObjectiveInformations.prototype.serialize = function(output) {
            this.serializeAs_QuestObjectiveInformations(output);
        };
        QuestObjectiveInformations.prototype.deserialize = function(input) {
            this.deserializeAs_QuestObjectiveInformations(input);
        };
        QuestObjectiveInformations.prototype.serializeAs_QuestObjectiveInformations = function(output) {
            if (this.objectiveId < 0) {
                throw new Error("Forbidden value (" + this.objectiveId + ") on element objectiveId.");
            }
            output.writeVarShort(this.objectiveId);
            output.writeBoolean(this.objectiveStatus);
            output.writeShort(this.dialogParams.length);
            for (var _i3 = 0; _i3 < this.dialogParams.length; _i3++) {
                output.writeUTF(this.dialogParams[_i3]);
            }
        };
        QuestObjectiveInformations.prototype.deserializeAs_QuestObjectiveInformations = function(input) {
            var _val3 = null;
            this.objectiveId = input.readVarUhShort();
            if (this.objectiveId < 0) {
                throw new Error("Forbidden value (" + this.objectiveId + ") on element of QuestObjectiveInformations.objectiveId.");
            }
            this.objectiveStatus = input.readBoolean();
            var _dialogParamsLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _dialogParamsLen; _i3++) {
                _val3 = input.readUTF();
                this.dialogParams.push(_val3);
            }
        };
        QuestObjectiveInformations.ID = 8695;
        return QuestObjectiveInformations;
    })();
    Protocol.QuestObjectiveInformations = QuestObjectiveInformations;
    var QuestObjectiveInformationsWithCompletion = (function(_super) {
        __extends(QuestObjectiveInformationsWithCompletion, _super);

        function QuestObjectiveInformationsWithCompletion() {
            this.curCompletion = 0;
            this.maxCompletion = 0;
            _super.call(this)
        }
        QuestObjectiveInformationsWithCompletion.prototype.getMessageId = function() {
            return QuestObjectiveInformationsWithCompletion.ID;
        };
        QuestObjectiveInformationsWithCompletion.prototype.reset = function() {
            this.curCompletion = 0;
            this.maxCompletion = 0;
        };
        QuestObjectiveInformationsWithCompletion.prototype.serialize = function(output) {
            this.serializeAs_QuestObjectiveInformationsWithCompletion(output);
        };
        QuestObjectiveInformationsWithCompletion.prototype.deserialize = function(input) {
            this.deserializeAs_QuestObjectiveInformationsWithCompletion(input);
        };
        QuestObjectiveInformationsWithCompletion.prototype.serializeAs_QuestObjectiveInformationsWithCompletion = function(output) {
            _super.prototype.serializeAs_QuestObjectiveInformations(this, output);
            if (this.curCompletion < 0) {
                throw new Error("Forbidden value (" + this.curCompletion + ") on element curCompletion.");
            }
            output.writeVarShort(this.curCompletion);
            if (this.maxCompletion < 0) {
                throw new Error("Forbidden value (" + this.maxCompletion + ") on element maxCompletion.");
            }
            output.writeVarShort(this.maxCompletion);
        };
        QuestObjectiveInformationsWithCompletion.prototype.deserializeAs_QuestObjectiveInformationsWithCompletion = function(input) {
            _super.prototype.deserializeQuestObjectiveInformations(this, input);
            this.curCompletion = input.readVarUhShort();
            if (this.curCompletion < 0) {
                throw new Error("Forbidden value (" + this.curCompletion + ") on element of QuestObjectiveInformationsWithCompletion.curCompletion.");
            }
            this.maxCompletion = input.readVarUhShort();
            if (this.maxCompletion < 0) {
                throw new Error("Forbidden value (" + this.maxCompletion + ") on element of QuestObjectiveInformationsWithCompletion.maxCompletion.");
            }
        };
        QuestObjectiveInformationsWithCompletion.ID = 5778;
        return QuestObjectiveInformationsWithCompletion;
    })(QuestObjectiveInformations);
    Protocol.QuestObjectiveInformationsWithCompletion = QuestObjectiveInformationsWithCompletion;
    var PortalInformation = (function() {

        function PortalInformation() {
            this.portalId = 0;
            this.areaId = 0;

        }
        PortalInformation.prototype.getMessageId = function() {
            return PortalInformation.ID;
        };
        PortalInformation.prototype.reset = function() {
            this.portalId = 0;
            this.areaId = 0;
        };
        PortalInformation.prototype.serialize = function(output) {
            this.serializeAs_PortalInformation(output);
        };
        PortalInformation.prototype.deserialize = function(input) {
            this.deserializeAs_PortalInformation(input);
        };
        PortalInformation.prototype.serializeAs_PortalInformation = function(output) {
            output.writeInt(this.portalId);
            output.writeShort(this.areaId);
        };
        PortalInformation.prototype.deserializeAs_PortalInformation = function(input) {
            this.portalId = input.readInt();
            this.areaId = input.readShort();
        };
        PortalInformation.ID = 1367;
        return PortalInformation;
    })();
    Protocol.PortalInformation = PortalInformation;
    var TreasureHuntFlag = (function() {

        function TreasureHuntFlag() {
            this.mapId = 0;
            this.state = 0;

        }
        TreasureHuntFlag.prototype.getMessageId = function() {
            return TreasureHuntFlag.ID;
        };
        TreasureHuntFlag.prototype.reset = function() {
            this.mapId = 0;
            this.state = 0;
        };
        TreasureHuntFlag.prototype.serialize = function(output) {
            this.serializeAs_TreasureHuntFlag(output);
        };
        TreasureHuntFlag.prototype.deserialize = function(input) {
            this.deserializeAs_TreasureHuntFlag(input);
        };
        TreasureHuntFlag.prototype.serializeAs_TreasureHuntFlag = function(output) {
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            output.writeByte(this.state);
        };
        TreasureHuntFlag.prototype.deserializeAs_TreasureHuntFlag = function(input) {
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of TreasureHuntFlag.mapId.");
            }
            this.state = input.readByte();
            if (this.state < 0) {
                throw new Error("Forbidden value (" + this.state + ") on element of TreasureHuntFlag.state.");
            }
        };
        TreasureHuntFlag.ID = 2701;
        return TreasureHuntFlag;
    })();
    Protocol.TreasureHuntFlag = TreasureHuntFlag;
    var TreasureHuntStep = (function() {

        function TreasureHuntStep() {


        }
        TreasureHuntStep.prototype.getMessageId = function() {
            return TreasureHuntStep.ID;
        };
        TreasureHuntStep.prototype.reset = function() {

        };
        TreasureHuntStep.prototype.serialize = function(output) {
            this.serializeAs_TreasureHuntStep(output);
        };
        TreasureHuntStep.prototype.deserialize = function(input) {
            this.deserializeAs_TreasureHuntStep(input);
        };
        TreasureHuntStep.prototype.serializeAs_TreasureHuntStep = function(output) {

        };
        TreasureHuntStep.prototype.deserializeAs_TreasureHuntStep = function(input) {

        };
        TreasureHuntStep.ID = 5041;
        return TreasureHuntStep;
    })();
    Protocol.TreasureHuntStep = TreasureHuntStep;
    var TreasureHuntStepDig = (function(_super) {
        __extends(TreasureHuntStepDig, _super);

        function TreasureHuntStepDig() {

            _super.call(this)
        }
        TreasureHuntStepDig.prototype.getMessageId = function() {
            return TreasureHuntStepDig.ID;
        };
        TreasureHuntStepDig.prototype.reset = function() {

        };
        TreasureHuntStepDig.prototype.serialize = function(output) {
            this.serializeAs_TreasureHuntStepDig(output);
        };
        TreasureHuntStepDig.prototype.deserialize = function(input) {
            this.deserializeAs_TreasureHuntStepDig(input);
        };
        TreasureHuntStepDig.prototype.serializeAs_TreasureHuntStepDig = function(output) {

        };
        TreasureHuntStepDig.prototype.deserializeAs_TreasureHuntStepDig = function(input) {

        };
        TreasureHuntStepDig.ID = 3298;
        return TreasureHuntStepDig;
    })(TreasureHuntStep);
    Protocol.TreasureHuntStepDig = TreasureHuntStepDig;
    var TreasureHuntStepFight = (function(_super) {
        __extends(TreasureHuntStepFight, _super);

        function TreasureHuntStepFight() {

            _super.call(this)
        }
        TreasureHuntStepFight.prototype.getMessageId = function() {
            return TreasureHuntStepFight.ID;
        };
        TreasureHuntStepFight.prototype.reset = function() {

        };
        TreasureHuntStepFight.prototype.serialize = function(output) {
            this.serializeAs_TreasureHuntStepFight(output);
        };
        TreasureHuntStepFight.prototype.deserialize = function(input) {
            this.deserializeAs_TreasureHuntStepFight(input);
        };
        TreasureHuntStepFight.prototype.serializeAs_TreasureHuntStepFight = function(output) {

        };
        TreasureHuntStepFight.prototype.deserializeAs_TreasureHuntStepFight = function(input) {

        };
        TreasureHuntStepFight.ID = 6367;
        return TreasureHuntStepFight;
    })(TreasureHuntStep);
    Protocol.TreasureHuntStepFight = TreasureHuntStepFight;
    var TreasureHuntStepFollowDirection = (function(_super) {
        __extends(TreasureHuntStepFollowDirection, _super);

        function TreasureHuntStepFollowDirection() {
            this.direction = 1;
            this.mapCount = 0;
            _super.call(this)
        }
        TreasureHuntStepFollowDirection.prototype.getMessageId = function() {
            return TreasureHuntStepFollowDirection.ID;
        };
        TreasureHuntStepFollowDirection.prototype.reset = function() {
            this.direction = 1;
            this.mapCount = 0;
        };
        TreasureHuntStepFollowDirection.prototype.serialize = function(output) {
            this.serializeAs_TreasureHuntStepFollowDirection(output);
        };
        TreasureHuntStepFollowDirection.prototype.deserialize = function(input) {
            this.deserializeAs_TreasureHuntStepFollowDirection(input);
        };
        TreasureHuntStepFollowDirection.prototype.serializeAs_TreasureHuntStepFollowDirection = function(output) {
            _super.prototype.serializeAs_TreasureHuntStep(this, output);
            output.writeByte(this.direction);
            if (this.mapCount < 0) {
                throw new Error("Forbidden value (" + this.mapCount + ") on element mapCount.");
            }
            output.writeVarShort(this.mapCount);
        };
        TreasureHuntStepFollowDirection.prototype.deserializeAs_TreasureHuntStepFollowDirection = function(input) {
            _super.prototype.deserializeTreasureHuntStep(this, input);
            this.direction = input.readByte();
            if (this.direction < 0) {
                throw new Error("Forbidden value (" + this.direction + ") on element of TreasureHuntStepFollowDirection.direction.");
            }
            this.mapCount = input.readVarUhShort();
            if (this.mapCount < 0) {
                throw new Error("Forbidden value (" + this.mapCount + ") on element of TreasureHuntStepFollowDirection.mapCount.");
            }
        };
        TreasureHuntStepFollowDirection.ID = 1881;
        return TreasureHuntStepFollowDirection;
    })(TreasureHuntStep);
    Protocol.TreasureHuntStepFollowDirection = TreasureHuntStepFollowDirection;
    var TreasureHuntStepFollowDirectionToHint = (function(_super) {
        __extends(TreasureHuntStepFollowDirectionToHint, _super);

        function TreasureHuntStepFollowDirectionToHint() {
            this.direction = 1;
            this.npcId = 0;
            _super.call(this)
        }
        TreasureHuntStepFollowDirectionToHint.prototype.getMessageId = function() {
            return TreasureHuntStepFollowDirectionToHint.ID;
        };
        TreasureHuntStepFollowDirectionToHint.prototype.reset = function() {
            this.direction = 1;
            this.npcId = 0;
        };
        TreasureHuntStepFollowDirectionToHint.prototype.serialize = function(output) {
            this.serializeAs_TreasureHuntStepFollowDirectionToHint(output);
        };
        TreasureHuntStepFollowDirectionToHint.prototype.deserialize = function(input) {
            this.deserializeAs_TreasureHuntStepFollowDirectionToHint(input);
        };
        TreasureHuntStepFollowDirectionToHint.prototype.serializeAs_TreasureHuntStepFollowDirectionToHint = function(output) {
            _super.prototype.serializeAs_TreasureHuntStep(this, output);
            output.writeByte(this.direction);
            if (this.npcId < 0) {
                throw new Error("Forbidden value (" + this.npcId + ") on element npcId.");
            }
            output.writeVarShort(this.npcId);
        };
        TreasureHuntStepFollowDirectionToHint.prototype.deserializeAs_TreasureHuntStepFollowDirectionToHint = function(input) {
            _super.prototype.deserializeTreasureHuntStep(this, input);
            this.direction = input.readByte();
            if (this.direction < 0) {
                throw new Error("Forbidden value (" + this.direction + ") on element of TreasureHuntStepFollowDirectionToHint.direction.");
            }
            this.npcId = input.readVarUhShort();
            if (this.npcId < 0) {
                throw new Error("Forbidden value (" + this.npcId + ") on element of TreasureHuntStepFollowDirectionToHint.npcId.");
            }
        };
        TreasureHuntStepFollowDirectionToHint.ID = 5721;
        return TreasureHuntStepFollowDirectionToHint;
    })(TreasureHuntStep);
    Protocol.TreasureHuntStepFollowDirectionToHint = TreasureHuntStepFollowDirectionToHint;
    var TreasureHuntStepFollowDirectionToPOI = (function(_super) {
        __extends(TreasureHuntStepFollowDirectionToPOI, _super);

        function TreasureHuntStepFollowDirectionToPOI() {
            this.direction = 1;
            this.poiLabelId = 0;
            _super.call(this)
        }
        TreasureHuntStepFollowDirectionToPOI.prototype.getMessageId = function() {
            return TreasureHuntStepFollowDirectionToPOI.ID;
        };
        TreasureHuntStepFollowDirectionToPOI.prototype.reset = function() {
            this.direction = 1;
            this.poiLabelId = 0;
        };
        TreasureHuntStepFollowDirectionToPOI.prototype.serialize = function(output) {
            this.serializeAs_TreasureHuntStepFollowDirectionToPOI(output);
        };
        TreasureHuntStepFollowDirectionToPOI.prototype.deserialize = function(input) {
            this.deserializeAs_TreasureHuntStepFollowDirectionToPOI(input);
        };
        TreasureHuntStepFollowDirectionToPOI.prototype.serializeAs_TreasureHuntStepFollowDirectionToPOI = function(output) {
            _super.prototype.serializeAs_TreasureHuntStep(this, output);
            output.writeByte(this.direction);
            if (this.poiLabelId < 0) {
                throw new Error("Forbidden value (" + this.poiLabelId + ") on element poiLabelId.");
            }
            output.writeVarShort(this.poiLabelId);
        };
        TreasureHuntStepFollowDirectionToPOI.prototype.deserializeAs_TreasureHuntStepFollowDirectionToPOI = function(input) {
            _super.prototype.deserializeTreasureHuntStep(this, input);
            this.direction = input.readByte();
            if (this.direction < 0) {
                throw new Error("Forbidden value (" + this.direction + ") on element of TreasureHuntStepFollowDirectionToPOI.direction.");
            }
            this.poiLabelId = input.readVarUhShort();
            if (this.poiLabelId < 0) {
                throw new Error("Forbidden value (" + this.poiLabelId + ") on element of TreasureHuntStepFollowDirectionToPOI.poiLabelId.");
            }
        };
        TreasureHuntStepFollowDirectionToPOI.ID = 7951;
        return TreasureHuntStepFollowDirectionToPOI;
    })(TreasureHuntStep);
    Protocol.TreasureHuntStepFollowDirectionToPOI = TreasureHuntStepFollowDirectionToPOI;
    var TaxCollectorStaticInformations = (function() {

        function TaxCollectorStaticInformations() {
            this.firstNameId = 0;
            this.lastNameId = 0;
            this.guildIdentity = new GuildInformations();
            this.callerId = 0;

        }
        TaxCollectorStaticInformations.prototype.getMessageId = function() {
            return TaxCollectorStaticInformations.ID;
        };
        TaxCollectorStaticInformations.prototype.reset = function() {
            this.firstNameId = 0;
            this.lastNameId = 0;
            this.guildIdentity = new GuildInformations();
            this.callerId = 0;
        };
        TaxCollectorStaticInformations.prototype.serialize = function(output) {
            this.serializeAs_TaxCollectorStaticInformations(output);
        };
        TaxCollectorStaticInformations.prototype.deserialize = function(input) {
            this.deserializeAs_TaxCollectorStaticInformations(input);
        };
        TaxCollectorStaticInformations.prototype.serializeAs_TaxCollectorStaticInformations = function(output) {
            if (this.firstNameId < 0) {
                throw new Error("Forbidden value (" + this.firstNameId + ") on element firstNameId.");
            }
            output.writeVarShort(this.firstNameId);
            if (this.lastNameId < 0) {
                throw new Error("Forbidden value (" + this.lastNameId + ") on element lastNameId.");
            }
            output.writeVarShort(this.lastNameId);
            this.guildIdentity.serializeAs_GuildInformations(output);
            if (this.callerId < 0 || this.callerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.callerId + ") on element callerId.");
            }
            output.writeVarLong(this.callerId);
        };
        TaxCollectorStaticInformations.prototype.deserializeAs_TaxCollectorStaticInformations = function(input) {
            this.firstNameId = input.readVarUhShort();
            if (this.firstNameId < 0) {
                throw new Error("Forbidden value (" + this.firstNameId + ") on element of TaxCollectorStaticInformations.firstNameId.");
            }
            this.lastNameId = input.readVarUhShort();
            if (this.lastNameId < 0) {
                throw new Error("Forbidden value (" + this.lastNameId + ") on element of TaxCollectorStaticInformations.lastNameId.");
            }
            this.guildIdentity = new GuildInformations();
            this.guildIdentity.deserialize(input);
            this.callerId = input.readVarUhLong();
            if (this.callerId < 0 || this.callerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.callerId + ") on element of TaxCollectorStaticInformations.callerId.");
            }
        };
        TaxCollectorStaticInformations.ID = 2842;
        return TaxCollectorStaticInformations;
    })();
    Protocol.TaxCollectorStaticInformations = TaxCollectorStaticInformations;
    var TaxCollectorStaticExtendedInformations = (function(_super) {
        __extends(TaxCollectorStaticExtendedInformations, _super);

        function TaxCollectorStaticExtendedInformations() {
            this.allianceIdentity = new AllianceInformations();
            _super.call(this)
        }
        TaxCollectorStaticExtendedInformations.prototype.getMessageId = function() {
            return TaxCollectorStaticExtendedInformations.ID;
        };
        TaxCollectorStaticExtendedInformations.prototype.reset = function() {
            this.allianceIdentity = new AllianceInformations();
        };
        TaxCollectorStaticExtendedInformations.prototype.serialize = function(output) {
            this.serializeAs_TaxCollectorStaticExtendedInformations(output);
        };
        TaxCollectorStaticExtendedInformations.prototype.deserialize = function(input) {
            this.deserializeAs_TaxCollectorStaticExtendedInformations(input);
        };
        TaxCollectorStaticExtendedInformations.prototype.serializeAs_TaxCollectorStaticExtendedInformations = function(output) {
            _super.prototype.serializeAs_TaxCollectorStaticInformations(this, output);
            this.allianceIdentity.serializeAs_AllianceInformations(output);
        };
        TaxCollectorStaticExtendedInformations.prototype.deserializeAs_TaxCollectorStaticExtendedInformations = function(input) {
            _super.prototype.deserializeTaxCollectorStaticInformations(this, input);
            this.allianceIdentity = new AllianceInformations();
            this.allianceIdentity.deserialize(input);
        };
        TaxCollectorStaticExtendedInformations.ID = 6436;
        return TaxCollectorStaticExtendedInformations;
    })(TaxCollectorStaticInformations);
    Protocol.TaxCollectorStaticExtendedInformations = TaxCollectorStaticExtendedInformations;
    var BidExchangerObjectInfo = (function() {

        function BidExchangerObjectInfo() {
            this.objectUID = 0;
            this.objectGID = 0;
            this.objectType = 0;
            this.effects = [];
            this.prices = [];

        }
        BidExchangerObjectInfo.prototype.getMessageId = function() {
            return BidExchangerObjectInfo.ID;
        };
        BidExchangerObjectInfo.prototype.reset = function() {
            this.objectUID = 0;
            this.objectGID = 0;
            this.objectType = 0;
            this.effects = [];
            this.prices = [];
        };
        BidExchangerObjectInfo.prototype.serialize = function(output) {
            this.serializeAs_BidExchangerObjectInfo(output);
        };
        BidExchangerObjectInfo.prototype.deserialize = function(input) {
            this.deserializeAs_BidExchangerObjectInfo(input);
        };
        BidExchangerObjectInfo.prototype.serializeAs_BidExchangerObjectInfo = function(output) {
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
            }
            output.writeVarInt(this.objectUID);
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element objectGID.");
            }
            output.writeVarShort(this.objectGID);
            if (this.objectType < 0) {
                throw new Error("Forbidden value (" + this.objectType + ") on element objectType.");
            }
            output.writeInt(this.objectType);
            output.writeShort(this.effects.length);
            for (var _i4 = 0; _i4 < this.effects.length; _i4++) {
                output.writeShort((this.effects[_i4]).getTypeId());
                (this.effects[_i4]).serialize(output);
            }
            output.writeShort(this.prices.length);
            for (var _i5 = 0; _i5 < this.prices.length; _i5++) {
                if (this.prices[_i5] < 0 || this.prices[_i5] > 9007199254740990) {
                    throw new Error("Forbidden value (" + this.prices[_i5] + ") on element 5 (starting at 1) of prices.");
                }
                output.writeVarLong(this.prices[_i5]);
            }
        };
        BidExchangerObjectInfo.prototype.deserializeAs_BidExchangerObjectInfo = function(input) {
            var _id4 = 0;
            var _item4 = null;
            var _val5 = NaN;
            this.objectUID = input.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element of BidExchangerObjectInfo.objectUID.");
            }
            this.objectGID = input.readVarUhShort();
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element of BidExchangerObjectInfo.objectGID.");
            }
            this.objectType = input.readInt();
            if (this.objectType < 0) {
                throw new Error("Forbidden value (" + this.objectType + ") on element of BidExchangerObjectInfo.objectType.");
            }
            var _effectsLen = input.readUnsignedShort();
            for (var _i4 = 0; _i4 < _effectsLen; _i4++) {
                _id4 = input.readUnsignedShort();
                _item4 = ProtocolTypeManager.getInstance(ObjectEffect, _id4);
                _item4.deserialize(input);
                this.effects.push(_item4);
            }
            var _pricesLen = input.readUnsignedShort();
            for (var _i5 = 0; _i5 < _pricesLen; _i5++) {
                _val5 = input.readVarUhLong();
                if (_val5 < 0 || _val5 > 9007199254740990) {
                    throw new Error("Forbidden value (" + _val5 + ") on elements of prices.");
                }
                this.prices.push(_val5);
            }
        };
        BidExchangerObjectInfo.ID = 9234;
        return BidExchangerObjectInfo;
    })();
    Protocol.BidExchangerObjectInfo = BidExchangerObjectInfo;
    var ObjectEffect = (function() {

        function ObjectEffect() {
            this.actionId = 0;

        }
        ObjectEffect.prototype.getMessageId = function() {
            return ObjectEffect.ID;
        };
        ObjectEffect.prototype.reset = function() {
            this.actionId = 0;
        };
        ObjectEffect.prototype.serialize = function(output) {
            this.serializeAs_ObjectEffect(output);
        };
        ObjectEffect.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectEffect(input);
        };
        ObjectEffect.prototype.serializeAs_ObjectEffect = function(output) {
            if (this.actionId < 0) {
                throw new Error("Forbidden value (" + this.actionId + ") on element actionId.");
            }
            output.writeVarShort(this.actionId);
        };
        ObjectEffect.prototype.deserializeAs_ObjectEffect = function(input) {
            this.actionId = input.readVarUhShort();
            if (this.actionId < 0) {
                throw new Error("Forbidden value (" + this.actionId + ") on element of ObjectEffect.actionId.");
            }
        };
        ObjectEffect.ID = 6577;
        return ObjectEffect;
    })();
    Protocol.ObjectEffect = ObjectEffect;
    var ObjectEffectCreature = (function(_super) {
        __extends(ObjectEffectCreature, _super);

        function ObjectEffectCreature() {
            this.monsterFamilyId = 0;
            _super.call(this)
        }
        ObjectEffectCreature.prototype.getMessageId = function() {
            return ObjectEffectCreature.ID;
        };
        ObjectEffectCreature.prototype.reset = function() {
            this.monsterFamilyId = 0;
        };
        ObjectEffectCreature.prototype.serialize = function(output) {
            this.serializeAs_ObjectEffectCreature(output);
        };
        ObjectEffectCreature.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectEffectCreature(input);
        };
        ObjectEffectCreature.prototype.serializeAs_ObjectEffectCreature = function(output) {
            _super.prototype.serializeAs_ObjectEffect(this, output);
            if (this.monsterFamilyId < 0) {
                throw new Error("Forbidden value (" + this.monsterFamilyId + ") on element monsterFamilyId.");
            }
            output.writeVarShort(this.monsterFamilyId);
        };
        ObjectEffectCreature.prototype.deserializeAs_ObjectEffectCreature = function(input) {
            _super.prototype.deserializeObjectEffect(this, input);
            this.monsterFamilyId = input.readVarUhShort();
            if (this.monsterFamilyId < 0) {
                throw new Error("Forbidden value (" + this.monsterFamilyId + ") on element of ObjectEffectCreature.monsterFamilyId.");
            }
        };
        ObjectEffectCreature.ID = 9295;
        return ObjectEffectCreature;
    })(ObjectEffect);
    Protocol.ObjectEffectCreature = ObjectEffectCreature;
    var ObjectEffectDate = (function(_super) {
        __extends(ObjectEffectDate, _super);

        function ObjectEffectDate() {
            this.year = 0;
            this.month = 0;
            this.day = 0;
            this.hour = 0;
            this.minute = 0;
            _super.call(this)
        }
        ObjectEffectDate.prototype.getMessageId = function() {
            return ObjectEffectDate.ID;
        };
        ObjectEffectDate.prototype.reset = function() {
            this.year = 0;
            this.month = 0;
            this.day = 0;
            this.hour = 0;
            this.minute = 0;
        };
        ObjectEffectDate.prototype.serialize = function(output) {
            this.serializeAs_ObjectEffectDate(output);
        };
        ObjectEffectDate.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectEffectDate(input);
        };
        ObjectEffectDate.prototype.serializeAs_ObjectEffectDate = function(output) {
            _super.prototype.serializeAs_ObjectEffect(this, output);
            if (this.year < 0) {
                throw new Error("Forbidden value (" + this.year + ") on element year.");
            }
            output.writeVarShort(this.year);
            if (this.month < 0) {
                throw new Error("Forbidden value (" + this.month + ") on element month.");
            }
            output.writeByte(this.month);
            if (this.day < 0) {
                throw new Error("Forbidden value (" + this.day + ") on element day.");
            }
            output.writeByte(this.day);
            if (this.hour < 0) {
                throw new Error("Forbidden value (" + this.hour + ") on element hour.");
            }
            output.writeByte(this.hour);
            if (this.minute < 0) {
                throw new Error("Forbidden value (" + this.minute + ") on element minute.");
            }
            output.writeByte(this.minute);
        };
        ObjectEffectDate.prototype.deserializeAs_ObjectEffectDate = function(input) {
            _super.prototype.deserializeObjectEffect(this, input);
            this.year = input.readVarUhShort();
            if (this.year < 0) {
                throw new Error("Forbidden value (" + this.year + ") on element of ObjectEffectDate.year.");
            }
            this.month = input.readByte();
            if (this.month < 0) {
                throw new Error("Forbidden value (" + this.month + ") on element of ObjectEffectDate.month.");
            }
            this.day = input.readByte();
            if (this.day < 0) {
                throw new Error("Forbidden value (" + this.day + ") on element of ObjectEffectDate.day.");
            }
            this.hour = input.readByte();
            if (this.hour < 0) {
                throw new Error("Forbidden value (" + this.hour + ") on element of ObjectEffectDate.hour.");
            }
            this.minute = input.readByte();
            if (this.minute < 0) {
                throw new Error("Forbidden value (" + this.minute + ") on element of ObjectEffectDate.minute.");
            }
        };
        ObjectEffectDate.ID = 2036;
        return ObjectEffectDate;
    })(ObjectEffect);
    Protocol.ObjectEffectDate = ObjectEffectDate;
    var ObjectEffectDice = (function(_super) {
        __extends(ObjectEffectDice, _super);

        function ObjectEffectDice() {
            this.diceNum = 0;
            this.diceSide = 0;
            this.diceConst = 0;
            _super.call(this)
        }
        ObjectEffectDice.prototype.getMessageId = function() {
            return ObjectEffectDice.ID;
        };
        ObjectEffectDice.prototype.reset = function() {
            this.diceNum = 0;
            this.diceSide = 0;
            this.diceConst = 0;
        };
        ObjectEffectDice.prototype.serialize = function(output) {
            this.serializeAs_ObjectEffectDice(output);
        };
        ObjectEffectDice.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectEffectDice(input);
        };
        ObjectEffectDice.prototype.serializeAs_ObjectEffectDice = function(output) {
            _super.prototype.serializeAs_ObjectEffect(this, output);
            if (this.diceNum < 0) {
                throw new Error("Forbidden value (" + this.diceNum + ") on element diceNum.");
            }
            output.writeVarInt(this.diceNum);
            if (this.diceSide < 0) {
                throw new Error("Forbidden value (" + this.diceSide + ") on element diceSide.");
            }
            output.writeVarInt(this.diceSide);
            if (this.diceConst < 0) {
                throw new Error("Forbidden value (" + this.diceConst + ") on element diceConst.");
            }
            output.writeVarInt(this.diceConst);
        };
        ObjectEffectDice.prototype.deserializeAs_ObjectEffectDice = function(input) {
            _super.prototype.deserializeObjectEffect(this, input);
            this.diceNum = input.readVarUhInt();
            if (this.diceNum < 0) {
                throw new Error("Forbidden value (" + this.diceNum + ") on element of ObjectEffectDice.diceNum.");
            }
            this.diceSide = input.readVarUhInt();
            if (this.diceSide < 0) {
                throw new Error("Forbidden value (" + this.diceSide + ") on element of ObjectEffectDice.diceSide.");
            }
            this.diceConst = input.readVarUhInt();
            if (this.diceConst < 0) {
                throw new Error("Forbidden value (" + this.diceConst + ") on element of ObjectEffectDice.diceConst.");
            }
        };
        ObjectEffectDice.ID = 9512;
        return ObjectEffectDice;
    })(ObjectEffect);
    Protocol.ObjectEffectDice = ObjectEffectDice;
    var ObjectEffectDuration = (function(_super) {
        __extends(ObjectEffectDuration, _super);

        function ObjectEffectDuration() {
            this.days = 0;
            this.hours = 0;
            this.minutes = 0;
            _super.call(this)
        }
        ObjectEffectDuration.prototype.getMessageId = function() {
            return ObjectEffectDuration.ID;
        };
        ObjectEffectDuration.prototype.reset = function() {
            this.days = 0;
            this.hours = 0;
            this.minutes = 0;
        };
        ObjectEffectDuration.prototype.serialize = function(output) {
            this.serializeAs_ObjectEffectDuration(output);
        };
        ObjectEffectDuration.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectEffectDuration(input);
        };
        ObjectEffectDuration.prototype.serializeAs_ObjectEffectDuration = function(output) {
            _super.prototype.serializeAs_ObjectEffect(this, output);
            if (this.days < 0) {
                throw new Error("Forbidden value (" + this.days + ") on element days.");
            }
            output.writeVarShort(this.days);
            if (this.hours < 0) {
                throw new Error("Forbidden value (" + this.hours + ") on element hours.");
            }
            output.writeByte(this.hours);
            if (this.minutes < 0) {
                throw new Error("Forbidden value (" + this.minutes + ") on element minutes.");
            }
            output.writeByte(this.minutes);
        };
        ObjectEffectDuration.prototype.deserializeAs_ObjectEffectDuration = function(input) {
            _super.prototype.deserializeObjectEffect(this, input);
            this.days = input.readVarUhShort();
            if (this.days < 0) {
                throw new Error("Forbidden value (" + this.days + ") on element of ObjectEffectDuration.days.");
            }
            this.hours = input.readByte();
            if (this.hours < 0) {
                throw new Error("Forbidden value (" + this.hours + ") on element of ObjectEffectDuration.hours.");
            }
            this.minutes = input.readByte();
            if (this.minutes < 0) {
                throw new Error("Forbidden value (" + this.minutes + ") on element of ObjectEffectDuration.minutes.");
            }
        };
        ObjectEffectDuration.ID = 7748;
        return ObjectEffectDuration;
    })(ObjectEffect);
    Protocol.ObjectEffectDuration = ObjectEffectDuration;
    var ObjectEffectInteger = (function(_super) {
        __extends(ObjectEffectInteger, _super);

        function ObjectEffectInteger() {
            this.value = 0;
            _super.call(this)
        }
        ObjectEffectInteger.prototype.getMessageId = function() {
            return ObjectEffectInteger.ID;
        };
        ObjectEffectInteger.prototype.reset = function() {
            this.value = 0;
        };
        ObjectEffectInteger.prototype.serialize = function(output) {
            this.serializeAs_ObjectEffectInteger(output);
        };
        ObjectEffectInteger.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectEffectInteger(input);
        };
        ObjectEffectInteger.prototype.serializeAs_ObjectEffectInteger = function(output) {
            _super.prototype.serializeAs_ObjectEffect(this, output);
            if (this.value < 0) {
                throw new Error("Forbidden value (" + this.value + ") on element value.");
            }
            output.writeVarInt(this.value);
        };
        ObjectEffectInteger.prototype.deserializeAs_ObjectEffectInteger = function(input) {
            _super.prototype.deserializeObjectEffect(this, input);
            this.value = input.readVarUhInt();
            if (this.value < 0) {
                throw new Error("Forbidden value (" + this.value + ") on element of ObjectEffectInteger.value.");
            }
        };
        ObjectEffectInteger.ID = 9369;
        return ObjectEffectInteger;
    })(ObjectEffect);
    Protocol.ObjectEffectInteger = ObjectEffectInteger;
    var ObjectEffectLadder = (function(_super) {
        __extends(ObjectEffectLadder, _super);

        function ObjectEffectLadder() {
            this.monsterCount = 0;
            _super.call(this)
        }
        ObjectEffectLadder.prototype.getMessageId = function() {
            return ObjectEffectLadder.ID;
        };
        ObjectEffectLadder.prototype.reset = function() {
            this.monsterCount = 0;
        };
        ObjectEffectLadder.prototype.serialize = function(output) {
            this.serializeAs_ObjectEffectLadder(output);
        };
        ObjectEffectLadder.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectEffectLadder(input);
        };
        ObjectEffectLadder.prototype.serializeAs_ObjectEffectLadder = function(output) {
            _super.prototype.serializeAs_ObjectEffectCreature(this, output);
            if (this.monsterCount < 0) {
                throw new Error("Forbidden value (" + this.monsterCount + ") on element monsterCount.");
            }
            output.writeVarInt(this.monsterCount);
        };
        ObjectEffectLadder.prototype.deserializeAs_ObjectEffectLadder = function(input) {
            _super.prototype.deserializeObjectEffectCreature(this, input);
            this.monsterCount = input.readVarUhInt();
            if (this.monsterCount < 0) {
                throw new Error("Forbidden value (" + this.monsterCount + ") on element of ObjectEffectLadder.monsterCount.");
            }
        };
        ObjectEffectLadder.ID = 6916;
        return ObjectEffectLadder;
    })(ObjectEffectCreature);
    Protocol.ObjectEffectLadder = ObjectEffectLadder;
    var ObjectEffectMinMax = (function(_super) {
        __extends(ObjectEffectMinMax, _super);

        function ObjectEffectMinMax() {
            this.min = 0;
            this.max = 0;
            _super.call(this)
        }
        ObjectEffectMinMax.prototype.getMessageId = function() {
            return ObjectEffectMinMax.ID;
        };
        ObjectEffectMinMax.prototype.reset = function() {
            this.min = 0;
            this.max = 0;
        };
        ObjectEffectMinMax.prototype.serialize = function(output) {
            this.serializeAs_ObjectEffectMinMax(output);
        };
        ObjectEffectMinMax.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectEffectMinMax(input);
        };
        ObjectEffectMinMax.prototype.serializeAs_ObjectEffectMinMax = function(output) {
            _super.prototype.serializeAs_ObjectEffect(this, output);
            if (this.min < 0) {
                throw new Error("Forbidden value (" + this.min + ") on element min.");
            }
            output.writeVarInt(this.min);
            if (this.max < 0) {
                throw new Error("Forbidden value (" + this.max + ") on element max.");
            }
            output.writeVarInt(this.max);
        };
        ObjectEffectMinMax.prototype.deserializeAs_ObjectEffectMinMax = function(input) {
            _super.prototype.deserializeObjectEffect(this, input);
            this.min = input.readVarUhInt();
            if (this.min < 0) {
                throw new Error("Forbidden value (" + this.min + ") on element of ObjectEffectMinMax.min.");
            }
            this.max = input.readVarUhInt();
            if (this.max < 0) {
                throw new Error("Forbidden value (" + this.max + ") on element of ObjectEffectMinMax.max.");
            }
        };
        ObjectEffectMinMax.ID = 9076;
        return ObjectEffectMinMax;
    })(ObjectEffect);
    Protocol.ObjectEffectMinMax = ObjectEffectMinMax;
    var ObjectEffectMount = (function(_super) {
        __extends(ObjectEffectMount, _super);

        function ObjectEffectMount() {
            this.id = 0;
            this.expirationDate = 0;
            this.model = 0;
            this.name = "";
            this.owner = "";
            this.level = 0;
            this.sex = false;
            this.isRideable = false;
            this.isFeconded = false;
            this.isFecondationReady = false;
            this.reproductionCount = 0;
            this.reproductionCountMax = 0;
            this.effects = [];
            this.capacities = [];
            _super.call(this)
        }
        ObjectEffectMount.prototype.getMessageId = function() {
            return ObjectEffectMount.ID;
        };
        ObjectEffectMount.prototype.reset = function() {
            this.id = 0;
            this.expirationDate = 0;
            this.model = 0;
            this.name = "";
            this.owner = "";
            this.level = 0;
            this.sex = false;
            this.isRideable = false;
            this.isFeconded = false;
            this.isFecondationReady = false;
            this.reproductionCount = 0;
            this.reproductionCountMax = 0;
            this.effects = [];
            this.capacities = [];
        };
        ObjectEffectMount.prototype.serialize = function(output) {
            this.serializeAs_ObjectEffectMount(output);
        };
        ObjectEffectMount.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectEffectMount(input);
        };
        ObjectEffectMount.prototype.serializeAs_ObjectEffectMount = function(output) {
            _super.prototype.serializeAs_ObjectEffect(this, output);
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.sex);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.isRideable);
            _box0 = BooleanByteWrapper.setFlag(_box0, 2, this.isFeconded);
            _box0 = BooleanByteWrapper.setFlag(_box0, 3, this.isFecondationReady);
            output.writeByte(_box0);
            if (this.id < 0 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarLong(this.id);
            if (this.expirationDate < 0 || this.expirationDate > 9007199254740990) {
                throw new Error("Forbidden value (" + this.expirationDate + ") on element expirationDate.");
            }
            output.writeVarLong(this.expirationDate);
            if (this.model < 0) {
                throw new Error("Forbidden value (" + this.model + ") on element model.");
            }
            output.writeVarInt(this.model);
            output.writeUTF(this.name);
            output.writeUTF(this.owner);
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeByte(this.level);
            output.writeVarInt(this.reproductionCount);
            if (this.reproductionCountMax < 0) {
                throw new Error("Forbidden value (" + this.reproductionCountMax + ") on element reproductionCountMax.");
            }
            output.writeVarInt(this.reproductionCountMax);
            output.writeShort(this.effects.length);
            for (var _i13 = 0; _i13 < this.effects.length; _i13++) {
                (this.effects[_i13]).serializeAs_ObjectEffectInteger(output);
            }
            output.writeShort(this.capacities.length);
            for (var _i14 = 0; _i14 < this.capacities.length; _i14++) {
                if (this.capacities[_i14] < 0) {
                    throw new Error("Forbidden value (" + this.capacities[_i14] + ") on element 14 (starting at 1) of capacities.");
                }
                output.writeVarInt(this.capacities[_i14]);
            }
        };
        ObjectEffectMount.prototype.deserializeAs_ObjectEffectMount = function(input) {
            var _item13 = null;
            var _val14 = 0;
            _super.prototype.deserializeObjectEffect(this, input);
            this.deserializeByteBoxes(input);
            this.id = input.readVarUhLong();
            if (this.id < 0 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element of ObjectEffectMount.id.");
            }
            this.expirationDate = input.readVarUhLong();
            if (this.expirationDate < 0 || this.expirationDate > 9007199254740990) {
                throw new Error("Forbidden value (" + this.expirationDate + ") on element of ObjectEffectMount.expirationDate.");
            }
            this.model = input.readVarUhInt();
            if (this.model < 0) {
                throw new Error("Forbidden value (" + this.model + ") on element of ObjectEffectMount.model.");
            }
            this.name = input.readUTF();
            this.owner = input.readUTF();
            this.level = input.readByte();
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element of ObjectEffectMount.level.");
            }
            this.reproductionCount = input.readVarInt();
            this.reproductionCountMax = input.readVarUhInt();
            if (this.reproductionCountMax < 0) {
                throw new Error("Forbidden value (" + this.reproductionCountMax + ") on element of ObjectEffectMount.reproductionCountMax.");
            }
            var _effectsLen = input.readUnsignedShort();
            for (var _i13 = 0; _i13 < _effectsLen; _i13++) {
                _item13 = new ObjectEffectInteger();
                _item13.deserialize(input);
                this.effects.push(_item13);
            }
            var _capacitiesLen = input.readUnsignedShort();
            for (var _i14 = 0; _i14 < _capacitiesLen; _i14++) {
                _val14 = input.readVarUhInt();
                if (_val14 < 0) {
                    throw new Error("Forbidden value (" + _val14 + ") on elements of capacities.");
                }
                this.capacities.push(_val14);
            }
        };
        ObjectEffectMount.ID = 8688;
        return ObjectEffectMount;
    })(ObjectEffect);
    Protocol.ObjectEffectMount = ObjectEffectMount;
    var ObjectEffectString = (function(_super) {
        __extends(ObjectEffectString, _super);

        function ObjectEffectString() {
            this.value = "";
            _super.call(this)
        }
        ObjectEffectString.prototype.getMessageId = function() {
            return ObjectEffectString.ID;
        };
        ObjectEffectString.prototype.reset = function() {
            this.value = "";
        };
        ObjectEffectString.prototype.serialize = function(output) {
            this.serializeAs_ObjectEffectString(output);
        };
        ObjectEffectString.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectEffectString(input);
        };
        ObjectEffectString.prototype.serializeAs_ObjectEffectString = function(output) {
            _super.prototype.serializeAs_ObjectEffect(this, output);
            output.writeUTF(this.value);
        };
        ObjectEffectString.prototype.deserializeAs_ObjectEffectString = function(input) {
            _super.prototype.deserializeObjectEffect(this, input);
            this.value = input.readUTF();
        };
        ObjectEffectString.ID = 2216;
        return ObjectEffectString;
    })(ObjectEffect);
    Protocol.ObjectEffectString = ObjectEffectString;
    var Item = (function() {

        function Item() {


        }
        Item.prototype.getMessageId = function() {
            return Item.ID;
        };
        Item.prototype.reset = function() {

        };
        Item.prototype.serialize = function(output) {
            this.serializeAs_Item(output);
        };
        Item.prototype.deserialize = function(input) {
            this.deserializeAs_Item(input);
        };
        Item.prototype.serializeAs_Item = function(output) {

        };
        Item.prototype.deserializeAs_Item = function(input) {

        };
        Item.ID = 2202;
        return Item;
    })();
    Protocol.Item = Item;
    var SpellItem = (function(_super) {
        __extends(SpellItem, _super);

        function SpellItem() {
            this.spellId = 0;
            this.spellLevel = 0;
            _super.call(this)
        }
        SpellItem.prototype.getMessageId = function() {
            return SpellItem.ID;
        };
        SpellItem.prototype.reset = function() {
            this.spellId = 0;
            this.spellLevel = 0;
        };
        SpellItem.prototype.serialize = function(output) {
            this.serializeAs_SpellItem(output);
        };
        SpellItem.prototype.deserialize = function(input) {
            this.deserializeAs_SpellItem(input);
        };
        SpellItem.prototype.serializeAs_SpellItem = function(output) {
            _super.prototype.serializeAs_Item(this, output);
            output.writeInt(this.spellId);
            if (this.spellLevel < 1 || this.spellLevel > 32767) {
                throw new Error("Forbidden value (" + this.spellLevel + ") on element spellLevel.");
            }
            output.writeShort(this.spellLevel);
        };
        SpellItem.prototype.deserializeAs_SpellItem = function(input) {
            _super.prototype.deserializeItem(this, input);
            this.spellId = input.readInt();
            this.spellLevel = input.readShort();
            if (this.spellLevel < 1 || this.spellLevel > 32767) {
                throw new Error("Forbidden value (" + this.spellLevel + ") on element of SpellItem.spellLevel.");
            }
        };
        SpellItem.ID = 1759;
        return SpellItem;
    })(Item);
    Protocol.SpellItem = SpellItem;
    var ForgettableSpellItem = (function(_super) {
        __extends(ForgettableSpellItem, _super);

        function ForgettableSpellItem() {
            this.available = false;
            _super.call(this)
        }
        ForgettableSpellItem.prototype.getMessageId = function() {
            return ForgettableSpellItem.ID;
        };
        ForgettableSpellItem.prototype.reset = function() {
            this.available = false;
        };
        ForgettableSpellItem.prototype.serialize = function(output) {
            this.serializeAs_ForgettableSpellItem(output);
        };
        ForgettableSpellItem.prototype.deserialize = function(input) {
            this.deserializeAs_ForgettableSpellItem(input);
        };
        ForgettableSpellItem.prototype.serializeAs_ForgettableSpellItem = function(output) {
            _super.prototype.serializeAs_SpellItem(this, output);
            output.writeBoolean(this.available);
        };
        ForgettableSpellItem.prototype.deserializeAs_ForgettableSpellItem = function(input) {
            _super.prototype.deserializeSpellItem(this, input);
            this.available = input.readBoolean();
        };
        ForgettableSpellItem.ID = 6454;
        return ForgettableSpellItem;
    })(SpellItem);
    Protocol.ForgettableSpellItem = ForgettableSpellItem;
    var GoldItem = (function(_super) {
        __extends(GoldItem, _super);

        function GoldItem() {
            this.sum = 0;
            _super.call(this)
        }
        GoldItem.prototype.getMessageId = function() {
            return GoldItem.ID;
        };
        GoldItem.prototype.reset = function() {
            this.sum = 0;
        };
        GoldItem.prototype.serialize = function(output) {
            this.serializeAs_GoldItem(output);
        };
        GoldItem.prototype.deserialize = function(input) {
            this.deserializeAs_GoldItem(input);
        };
        GoldItem.prototype.serializeAs_GoldItem = function(output) {
            _super.prototype.serializeAs_Item(this, output);
            if (this.sum < 0 || this.sum > 9007199254740990) {
                throw new Error("Forbidden value (" + this.sum + ") on element sum.");
            }
            output.writeVarLong(this.sum);
        };
        GoldItem.prototype.deserializeAs_GoldItem = function(input) {
            _super.prototype.deserializeItem(this, input);
            this.sum = input.readVarUhLong();
            if (this.sum < 0 || this.sum > 9007199254740990) {
                throw new Error("Forbidden value (" + this.sum + ") on element of GoldItem.sum.");
            }
        };
        GoldItem.ID = 4296;
        return GoldItem;
    })(Item);
    Protocol.GoldItem = GoldItem;
    var ObjectEffects = (function() {

        function ObjectEffects() {
            this.effects = [];

        }
        ObjectEffects.prototype.getMessageId = function() {
            return ObjectEffects.ID;
        };
        ObjectEffects.prototype.reset = function() {
            this.effects = [];
        };
        ObjectEffects.prototype.serialize = function(output) {
            this.serializeAs_ObjectEffects(output);
        };
        ObjectEffects.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectEffects(input);
        };
        ObjectEffects.prototype.serializeAs_ObjectEffects = function(output) {
            output.writeShort(this.effects.length);
            for (var _i1 = 0; _i1 < this.effects.length; _i1++) {
                output.writeShort((this.effects[_i1]).getTypeId());
                (this.effects[_i1]).serialize(output);
            }
        };
        ObjectEffects.prototype.deserializeAs_ObjectEffects = function(input) {
            var _id1 = 0;
            var _item1 = null;
            var _effectsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _effectsLen; _i1++) {
                _id1 = input.readUnsignedShort();
                _item1 = ProtocolTypeManager.getInstance(ObjectEffect, _id1);
                _item1.deserialize(input);
                this.effects.push(_item1);
            }
        };
        ObjectEffects.ID = 4843;
        return ObjectEffects;
    })();
    Protocol.ObjectEffects = ObjectEffects;
    var ObjectItem = (function(_super) {
        __extends(ObjectItem, _super);

        function ObjectItem() {
            this.position = 63;
            this.objectGID = 0;
            this.effects = [];
            this.objectUID = 0;
            this.quantity = 0;
            _super.call(this)
        }
        ObjectItem.prototype.getMessageId = function() {
            return ObjectItem.ID;
        };
        ObjectItem.prototype.reset = function() {
            this.position = 63;
            this.objectGID = 0;
            this.effects = [];
            this.objectUID = 0;
            this.quantity = 0;
        };
        ObjectItem.prototype.serialize = function(output) {
            this.serializeAs_ObjectItem(output);
        };
        ObjectItem.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectItem(input);
        };
        ObjectItem.prototype.serializeAs_ObjectItem = function(output) {
            _super.prototype.serializeAs_Item(this, output);
            output.writeShort(this.position);
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element objectGID.");
            }
            output.writeVarShort(this.objectGID);
            output.writeShort(this.effects.length);
            for (var _i3 = 0; _i3 < this.effects.length; _i3++) {
                output.writeShort((this.effects[_i3]).getTypeId());
                (this.effects[_i3]).serialize(output);
            }
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
            }
            output.writeVarInt(this.objectUID);
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
            }
            output.writeVarInt(this.quantity);
        };
        ObjectItem.prototype.deserializeAs_ObjectItem = function(input) {
            var _id3 = 0;
            var _item3 = null;
            _super.prototype.deserializeItem(this, input);
            this.position = input.readShort();
            if (this.position < 0) {
                throw new Error("Forbidden value (" + this.position + ") on element of ObjectItem.position.");
            }
            this.objectGID = input.readVarUhShort();
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element of ObjectItem.objectGID.");
            }
            var _effectsLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _effectsLen; _i3++) {
                _id3 = input.readUnsignedShort();
                _item3 = ProtocolTypeManager.getInstance(ObjectEffect, _id3);
                _item3.deserialize(input);
                this.effects.push(_item3);
            }
            this.objectUID = input.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element of ObjectItem.objectUID.");
            }
            this.quantity = input.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element of ObjectItem.quantity.");
            }
        };
        ObjectItem.ID = 5598;
        return ObjectItem;
    })(Item);
    Protocol.ObjectItem = ObjectItem;
    var ObjectItemGenericQuantity = (function(_super) {
        __extends(ObjectItemGenericQuantity, _super);

        function ObjectItemGenericQuantity() {
            this.objectGID = 0;
            this.quantity = 0;
            _super.call(this)
        }
        ObjectItemGenericQuantity.prototype.getMessageId = function() {
            return ObjectItemGenericQuantity.ID;
        };
        ObjectItemGenericQuantity.prototype.reset = function() {
            this.objectGID = 0;
            this.quantity = 0;
        };
        ObjectItemGenericQuantity.prototype.serialize = function(output) {
            this.serializeAs_ObjectItemGenericQuantity(output);
        };
        ObjectItemGenericQuantity.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectItemGenericQuantity(input);
        };
        ObjectItemGenericQuantity.prototype.serializeAs_ObjectItemGenericQuantity = function(output) {
            _super.prototype.serializeAs_Item(this, output);
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element objectGID.");
            }
            output.writeVarShort(this.objectGID);
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
            }
            output.writeVarInt(this.quantity);
        };
        ObjectItemGenericQuantity.prototype.deserializeAs_ObjectItemGenericQuantity = function(input) {
            _super.prototype.deserializeItem(this, input);
            this.objectGID = input.readVarUhShort();
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element of ObjectItemGenericQuantity.objectGID.");
            }
            this.quantity = input.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element of ObjectItemGenericQuantity.quantity.");
            }
        };
        ObjectItemGenericQuantity.ID = 9440;
        return ObjectItemGenericQuantity;
    })(Item);
    Protocol.ObjectItemGenericQuantity = ObjectItemGenericQuantity;
    var ObjectItemMinimalInformation = (function(_super) {
        __extends(ObjectItemMinimalInformation, _super);

        function ObjectItemMinimalInformation() {
            this.objectGID = 0;
            this.effects = [];
            _super.call(this)
        }
        ObjectItemMinimalInformation.prototype.getMessageId = function() {
            return ObjectItemMinimalInformation.ID;
        };
        ObjectItemMinimalInformation.prototype.reset = function() {
            this.objectGID = 0;
            this.effects = [];
        };
        ObjectItemMinimalInformation.prototype.serialize = function(output) {
            this.serializeAs_ObjectItemMinimalInformation(output);
        };
        ObjectItemMinimalInformation.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectItemMinimalInformation(input);
        };
        ObjectItemMinimalInformation.prototype.serializeAs_ObjectItemMinimalInformation = function(output) {
            _super.prototype.serializeAs_Item(this, output);
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element objectGID.");
            }
            output.writeVarShort(this.objectGID);
            output.writeShort(this.effects.length);
            for (var _i2 = 0; _i2 < this.effects.length; _i2++) {
                output.writeShort((this.effects[_i2]).getTypeId());
                (this.effects[_i2]).serialize(output);
            }
        };
        ObjectItemMinimalInformation.prototype.deserializeAs_ObjectItemMinimalInformation = function(input) {
            var _id2 = 0;
            var _item2 = null;
            _super.prototype.deserializeItem(this, input);
            this.objectGID = input.readVarUhShort();
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element of ObjectItemMinimalInformation.objectGID.");
            }
            var _effectsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _effectsLen; _i2++) {
                _id2 = input.readUnsignedShort();
                _item2 = ProtocolTypeManager.getInstance(ObjectEffect, _id2);
                _item2.deserialize(input);
                this.effects.push(_item2);
            }
        };
        ObjectItemMinimalInformation.ID = 4416;
        return ObjectItemMinimalInformation;
    })(Item);
    Protocol.ObjectItemMinimalInformation = ObjectItemMinimalInformation;
    var ObjectItemInformationWithQuantity = (function(_super) {
        __extends(ObjectItemInformationWithQuantity, _super);

        function ObjectItemInformationWithQuantity() {
            this.quantity = 0;
            _super.call(this)
        }
        ObjectItemInformationWithQuantity.prototype.getMessageId = function() {
            return ObjectItemInformationWithQuantity.ID;
        };
        ObjectItemInformationWithQuantity.prototype.reset = function() {
            this.quantity = 0;
        };
        ObjectItemInformationWithQuantity.prototype.serialize = function(output) {
            this.serializeAs_ObjectItemInformationWithQuantity(output);
        };
        ObjectItemInformationWithQuantity.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectItemInformationWithQuantity(input);
        };
        ObjectItemInformationWithQuantity.prototype.serializeAs_ObjectItemInformationWithQuantity = function(output) {
            _super.prototype.serializeAs_ObjectItemMinimalInformation(this, output);
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
            }
            output.writeVarInt(this.quantity);
        };
        ObjectItemInformationWithQuantity.prototype.deserializeAs_ObjectItemInformationWithQuantity = function(input) {
            _super.prototype.deserializeObjectItemMinimalInformation(this, input);
            this.quantity = input.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element of ObjectItemInformationWithQuantity.quantity.");
            }
        };
        ObjectItemInformationWithQuantity.ID = 6404;
        return ObjectItemInformationWithQuantity;
    })(ObjectItemMinimalInformation);
    Protocol.ObjectItemInformationWithQuantity = ObjectItemInformationWithQuantity;
    var ObjectItemNotInContainer = (function(_super) {
        __extends(ObjectItemNotInContainer, _super);

        function ObjectItemNotInContainer() {
            this.objectGID = 0;
            this.effects = [];
            this.objectUID = 0;
            this.quantity = 0;
            _super.call(this)
        }
        ObjectItemNotInContainer.prototype.getMessageId = function() {
            return ObjectItemNotInContainer.ID;
        };
        ObjectItemNotInContainer.prototype.reset = function() {
            this.objectGID = 0;
            this.effects = [];
            this.objectUID = 0;
            this.quantity = 0;
        };
        ObjectItemNotInContainer.prototype.serialize = function(output) {
            this.serializeAs_ObjectItemNotInContainer(output);
        };
        ObjectItemNotInContainer.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectItemNotInContainer(input);
        };
        ObjectItemNotInContainer.prototype.serializeAs_ObjectItemNotInContainer = function(output) {
            _super.prototype.serializeAs_Item(this, output);
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element objectGID.");
            }
            output.writeVarShort(this.objectGID);
            output.writeShort(this.effects.length);
            for (var _i2 = 0; _i2 < this.effects.length; _i2++) {
                output.writeShort((this.effects[_i2]).getTypeId());
                (this.effects[_i2]).serialize(output);
            }
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
            }
            output.writeVarInt(this.objectUID);
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
            }
            output.writeVarInt(this.quantity);
        };
        ObjectItemNotInContainer.prototype.deserializeAs_ObjectItemNotInContainer = function(input) {
            var _id2 = 0;
            var _item2 = null;
            _super.prototype.deserializeItem(this, input);
            this.objectGID = input.readVarUhShort();
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element of ObjectItemNotInContainer.objectGID.");
            }
            var _effectsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _effectsLen; _i2++) {
                _id2 = input.readUnsignedShort();
                _item2 = ProtocolTypeManager.getInstance(ObjectEffect, _id2);
                _item2.deserialize(input);
                this.effects.push(_item2);
            }
            this.objectUID = input.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element of ObjectItemNotInContainer.objectUID.");
            }
            this.quantity = input.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element of ObjectItemNotInContainer.quantity.");
            }
        };
        ObjectItemNotInContainer.ID = 2313;
        return ObjectItemNotInContainer;
    })(Item);
    Protocol.ObjectItemNotInContainer = ObjectItemNotInContainer;
    var ObjectItemQuantity = (function(_super) {
        __extends(ObjectItemQuantity, _super);

        function ObjectItemQuantity() {
            this.objectUID = 0;
            this.quantity = 0;
            _super.call(this)
        }
        ObjectItemQuantity.prototype.getMessageId = function() {
            return ObjectItemQuantity.ID;
        };
        ObjectItemQuantity.prototype.reset = function() {
            this.objectUID = 0;
            this.quantity = 0;
        };
        ObjectItemQuantity.prototype.serialize = function(output) {
            this.serializeAs_ObjectItemQuantity(output);
        };
        ObjectItemQuantity.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectItemQuantity(input);
        };
        ObjectItemQuantity.prototype.serializeAs_ObjectItemQuantity = function(output) {
            _super.prototype.serializeAs_Item(this, output);
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
            }
            output.writeVarInt(this.objectUID);
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
            }
            output.writeVarInt(this.quantity);
        };
        ObjectItemQuantity.prototype.deserializeAs_ObjectItemQuantity = function(input) {
            _super.prototype.deserializeItem(this, input);
            this.objectUID = input.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element of ObjectItemQuantity.objectUID.");
            }
            this.quantity = input.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element of ObjectItemQuantity.quantity.");
            }
        };
        ObjectItemQuantity.ID = 9732;
        return ObjectItemQuantity;
    })(Item);
    Protocol.ObjectItemQuantity = ObjectItemQuantity;
    var ObjectItemQuantityPriceDateEffects = (function(_super) {
        __extends(ObjectItemQuantityPriceDateEffects, _super);

        function ObjectItemQuantityPriceDateEffects() {
            this.price = 0;
            this.effects = new ObjectEffects();
            this.date = 0;
            _super.call(this)
        }
        ObjectItemQuantityPriceDateEffects.prototype.getMessageId = function() {
            return ObjectItemQuantityPriceDateEffects.ID;
        };
        ObjectItemQuantityPriceDateEffects.prototype.reset = function() {
            this.price = 0;
            this.effects = new ObjectEffects();
            this.date = 0;
        };
        ObjectItemQuantityPriceDateEffects.prototype.serialize = function(output) {
            this.serializeAs_ObjectItemQuantityPriceDateEffects(output);
        };
        ObjectItemQuantityPriceDateEffects.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectItemQuantityPriceDateEffects(input);
        };
        ObjectItemQuantityPriceDateEffects.prototype.serializeAs_ObjectItemQuantityPriceDateEffects = function(output) {
            _super.prototype.serializeAs_ObjectItemGenericQuantity(this, output);
            if (this.price < 0 || this.price > 9007199254740990) {
                throw new Error("Forbidden value (" + this.price + ") on element price.");
            }
            output.writeVarLong(this.price);
            this.effects.serializeAs_ObjectEffects(output);
            if (this.date < 0) {
                throw new Error("Forbidden value (" + this.date + ") on element date.");
            }
            output.writeInt(this.date);
        };
        ObjectItemQuantityPriceDateEffects.prototype.deserializeAs_ObjectItemQuantityPriceDateEffects = function(input) {
            _super.prototype.deserializeObjectItemGenericQuantity(this, input);
            this.price = input.readVarUhLong();
            if (this.price < 0 || this.price > 9007199254740990) {
                throw new Error("Forbidden value (" + this.price + ") on element of ObjectItemQuantityPriceDateEffects.price.");
            }
            this.effects = new ObjectEffects();
            this.effects.deserialize(input);
            this.date = input.readInt();
            if (this.date < 0) {
                throw new Error("Forbidden value (" + this.date + ") on element of ObjectItemQuantityPriceDateEffects.date.");
            }
        };
        ObjectItemQuantityPriceDateEffects.ID = 6659;
        return ObjectItemQuantityPriceDateEffects;
    })(ObjectItemGenericQuantity);
    Protocol.ObjectItemQuantityPriceDateEffects = ObjectItemQuantityPriceDateEffects;
    var ObjectItemToSell = (function(_super) {
        __extends(ObjectItemToSell, _super);

        function ObjectItemToSell() {
            this.objectGID = 0;
            this.effects = [];
            this.objectUID = 0;
            this.quantity = 0;
            this.objectPrice = 0;
            _super.call(this)
        }
        ObjectItemToSell.prototype.getMessageId = function() {
            return ObjectItemToSell.ID;
        };
        ObjectItemToSell.prototype.reset = function() {
            this.objectGID = 0;
            this.effects = [];
            this.objectUID = 0;
            this.quantity = 0;
            this.objectPrice = 0;
        };
        ObjectItemToSell.prototype.serialize = function(output) {
            this.serializeAs_ObjectItemToSell(output);
        };
        ObjectItemToSell.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectItemToSell(input);
        };
        ObjectItemToSell.prototype.serializeAs_ObjectItemToSell = function(output) {
            _super.prototype.serializeAs_Item(this, output);
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element objectGID.");
            }
            output.writeVarShort(this.objectGID);
            output.writeShort(this.effects.length);
            for (var _i2 = 0; _i2 < this.effects.length; _i2++) {
                output.writeShort((this.effects[_i2]).getTypeId());
                (this.effects[_i2]).serialize(output);
            }
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
            }
            output.writeVarInt(this.objectUID);
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
            }
            output.writeVarInt(this.quantity);
            if (this.objectPrice < 0 || this.objectPrice > 9007199254740990) {
                throw new Error("Forbidden value (" + this.objectPrice + ") on element objectPrice.");
            }
            output.writeVarLong(this.objectPrice);
        };
        ObjectItemToSell.prototype.deserializeAs_ObjectItemToSell = function(input) {
            var _id2 = 0;
            var _item2 = null;
            _super.prototype.deserializeItem(this, input);
            this.objectGID = input.readVarUhShort();
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element of ObjectItemToSell.objectGID.");
            }
            var _effectsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _effectsLen; _i2++) {
                _id2 = input.readUnsignedShort();
                _item2 = ProtocolTypeManager.getInstance(ObjectEffect, _id2);
                _item2.deserialize(input);
                this.effects.push(_item2);
            }
            this.objectUID = input.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element of ObjectItemToSell.objectUID.");
            }
            this.quantity = input.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element of ObjectItemToSell.quantity.");
            }
            this.objectPrice = input.readVarUhLong();
            if (this.objectPrice < 0 || this.objectPrice > 9007199254740990) {
                throw new Error("Forbidden value (" + this.objectPrice + ") on element of ObjectItemToSell.objectPrice.");
            }
        };
        ObjectItemToSell.ID = 446;
        return ObjectItemToSell;
    })(Item);
    Protocol.ObjectItemToSell = ObjectItemToSell;
    var ObjectItemToSellInBid = (function(_super) {
        __extends(ObjectItemToSellInBid, _super);

        function ObjectItemToSellInBid() {
            this.unsoldDelay = 0;
            _super.call(this)
        }
        ObjectItemToSellInBid.prototype.getMessageId = function() {
            return ObjectItemToSellInBid.ID;
        };
        ObjectItemToSellInBid.prototype.reset = function() {
            this.unsoldDelay = 0;
        };
        ObjectItemToSellInBid.prototype.serialize = function(output) {
            this.serializeAs_ObjectItemToSellInBid(output);
        };
        ObjectItemToSellInBid.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectItemToSellInBid(input);
        };
        ObjectItemToSellInBid.prototype.serializeAs_ObjectItemToSellInBid = function(output) {
            _super.prototype.serializeAs_ObjectItemToSell(this, output);
            if (this.unsoldDelay < 0) {
                throw new Error("Forbidden value (" + this.unsoldDelay + ") on element unsoldDelay.");
            }
            output.writeInt(this.unsoldDelay);
        };
        ObjectItemToSellInBid.prototype.deserializeAs_ObjectItemToSellInBid = function(input) {
            _super.prototype.deserializeObjectItemToSell(this, input);
            this.unsoldDelay = input.readInt();
            if (this.unsoldDelay < 0) {
                throw new Error("Forbidden value (" + this.unsoldDelay + ") on element of ObjectItemToSellInBid.unsoldDelay.");
            }
        };
        ObjectItemToSellInBid.ID = 4082;
        return ObjectItemToSellInBid;
    })(ObjectItemToSell);
    Protocol.ObjectItemToSellInBid = ObjectItemToSellInBid;
    var ObjectItemToSellInHumanVendorShop = (function(_super) {
        __extends(ObjectItemToSellInHumanVendorShop, _super);

        function ObjectItemToSellInHumanVendorShop() {
            this.objectGID = 0;
            this.effects = [];
            this.objectUID = 0;
            this.quantity = 0;
            this.objectPrice = 0;
            this.Price = 0;
            _super.call(this)
        }
        ObjectItemToSellInHumanVendorShop.prototype.getMessageId = function() {
            return ObjectItemToSellInHumanVendorShop.ID;
        };
        ObjectItemToSellInHumanVendorShop.prototype.reset = function() {
            this.objectGID = 0;
            this.effects = [];
            this.objectUID = 0;
            this.quantity = 0;
            this.objectPrice = 0;
            this.Price = 0;
        };
        ObjectItemToSellInHumanVendorShop.prototype.serialize = function(output) {
            this.serializeAs_ObjectItemToSellInHumanVendorShop(output);
        };
        ObjectItemToSellInHumanVendorShop.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectItemToSellInHumanVendorShop(input);
        };
        ObjectItemToSellInHumanVendorShop.prototype.serializeAs_ObjectItemToSellInHumanVendorShop = function(output) {
            _super.prototype.serializeAs_Item(this, output);
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element objectGID.");
            }
            output.writeVarShort(this.objectGID);
            output.writeShort(this.effects.length);
            for (var _i2 = 0; _i2 < this.effects.length; _i2++) {
                output.writeShort((this.effects[_i2]).getTypeId());
                (this.effects[_i2]).serialize(output);
            }
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
            }
            output.writeVarInt(this.objectUID);
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
            }
            output.writeVarInt(this.quantity);
            if (this.objectPrice < 0 || this.objectPrice > 9007199254740990) {
                throw new Error("Forbidden value (" + this.objectPrice + ") on element objectPrice.");
            }
            output.writeVarLong(this.objectPrice);
            if (this.publicPrice < 0 || this.publicPrice > 9007199254740990) {
                throw new Error("Forbidden value (" + this.publicPrice + ") on element publicPrice.");
            }
            output.writeVarLong(this.publicPrice);
        };
        ObjectItemToSellInHumanVendorShop.prototype.deserializeAs_ObjectItemToSellInHumanVendorShop = function(input) {
            var _id2 = 0;
            var _item2 = null;
            _super.prototype.deserializeItem(this, input);
            this.objectGID = input.readVarUhShort();
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element of ObjectItemToSellInHumanVendorShop.objectGID.");
            }
            var _effectsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _effectsLen; _i2++) {
                _id2 = input.readUnsignedShort();
                _item2 = ProtocolTypeManager.getInstance(ObjectEffect, _id2);
                _item2.deserialize(input);
                this.effects.push(_item2);
            }
            this.objectUID = input.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element of ObjectItemToSellInHumanVendorShop.objectUID.");
            }
            this.quantity = input.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element of ObjectItemToSellInHumanVendorShop.quantity.");
            }
            this.objectPrice = input.readVarUhLong();
            if (this.objectPrice < 0 || this.objectPrice > 9007199254740990) {
                throw new Error("Forbidden value (" + this.objectPrice + ") on element of ObjectItemToSellInHumanVendorShop.objectPrice.");
            }
            this.publicPrice = input.readVarUhLong();
            if (this.publicPrice < 0 || this.publicPrice > 9007199254740990) {
                throw new Error("Forbidden value (" + this.publicPrice + ") on element of ObjectItemToSellInHumanVendorShop.publicPrice.");
            }
        };
        ObjectItemToSellInHumanVendorShop.ID = 8040;
        return ObjectItemToSellInHumanVendorShop;
    })(Item);
    Protocol.ObjectItemToSellInHumanVendorShop = ObjectItemToSellInHumanVendorShop;
    var ObjectItemToSellInNpcShop = (function(_super) {
        __extends(ObjectItemToSellInNpcShop, _super);

        function ObjectItemToSellInNpcShop() {
            this.objectPrice = 0;
            this.buyCriterion = "";
            _super.call(this)
        }
        ObjectItemToSellInNpcShop.prototype.getMessageId = function() {
            return ObjectItemToSellInNpcShop.ID;
        };
        ObjectItemToSellInNpcShop.prototype.reset = function() {
            this.objectPrice = 0;
            this.buyCriterion = "";
        };
        ObjectItemToSellInNpcShop.prototype.serialize = function(output) {
            this.serializeAs_ObjectItemToSellInNpcShop(output);
        };
        ObjectItemToSellInNpcShop.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectItemToSellInNpcShop(input);
        };
        ObjectItemToSellInNpcShop.prototype.serializeAs_ObjectItemToSellInNpcShop = function(output) {
            _super.prototype.serializeAs_ObjectItemMinimalInformation(this, output);
            if (this.objectPrice < 0 || this.objectPrice > 9007199254740990) {
                throw new Error("Forbidden value (" + this.objectPrice + ") on element objectPrice.");
            }
            output.writeVarLong(this.objectPrice);
            output.writeUTF(this.buyCriterion);
        };
        ObjectItemToSellInNpcShop.prototype.deserializeAs_ObjectItemToSellInNpcShop = function(input) {
            _super.prototype.deserializeObjectItemMinimalInformation(this, input);
            this.objectPrice = input.readVarUhLong();
            if (this.objectPrice < 0 || this.objectPrice > 9007199254740990) {
                throw new Error("Forbidden value (" + this.objectPrice + ") on element of ObjectItemToSellInNpcShop.objectPrice.");
            }
            this.buyCriterion = input.readUTF();
        };
        ObjectItemToSellInNpcShop.ID = 2852;
        return ObjectItemToSellInNpcShop;
    })(ObjectItemMinimalInformation);
    Protocol.ObjectItemToSellInNpcShop = ObjectItemToSellInNpcShop;
    var SellerBuyerDescriptor = (function() {

        function SellerBuyerDescriptor() {
            this.quantities = [];
            this.types = [];
            this.taxPercentage = 0;
            this.taxModificationPercentage = 0;
            this.maxItemLevel = 0;
            this.maxItemPerAccount = 0;
            this.npcContextualId = 0;
            this.unsoldDelay = 0;

        }
        SellerBuyerDescriptor.prototype.getMessageId = function() {
            return SellerBuyerDescriptor.ID;
        };
        SellerBuyerDescriptor.prototype.reset = function() {
            this.quantities = [];
            this.types = [];
            this.taxPercentage = 0;
            this.taxModificationPercentage = 0;
            this.maxItemLevel = 0;
            this.maxItemPerAccount = 0;
            this.npcContextualId = 0;
            this.unsoldDelay = 0;
        };
        SellerBuyerDescriptor.prototype.serialize = function(output) {
            this.serializeAs_SellerBuyerDescriptor(output);
        };
        SellerBuyerDescriptor.prototype.deserialize = function(input) {
            this.deserializeAs_SellerBuyerDescriptor(input);
        };
        SellerBuyerDescriptor.prototype.serializeAs_SellerBuyerDescriptor = function(output) {
            output.writeShort(this.quantities.length);
            for (var _i1 = 0; _i1 < this.quantities.length; _i1++) {
                if (this.quantities[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.quantities[_i1] + ") on element 1 (starting at 1) of quantities.");
                }
                output.writeVarInt(this.quantities[_i1]);
            }
            output.writeShort(this.types.length);
            for (var _i2 = 0; _i2 < this.types.length; _i2++) {
                if (this.types[_i2] < 0) {
                    throw new Error("Forbidden value (" + this.types[_i2] + ") on element 2 (starting at 1) of types.");
                }
                output.writeVarInt(this.types[_i2]);
            }
            output.writeFloat(this.taxPercentage);
            output.writeFloat(this.taxModificationPercentage);
            if (this.maxItemLevel < 0 || this.maxItemLevel > 255) {
                throw new Error("Forbidden value (" + this.maxItemLevel + ") on element maxItemLevel.");
            }
            output.writeByte(this.maxItemLevel);
            if (this.maxItemPerAccount < 0) {
                throw new Error("Forbidden value (" + this.maxItemPerAccount + ") on element maxItemPerAccount.");
            }
            output.writeVarInt(this.maxItemPerAccount);
            output.writeInt(this.npcContextualId);
            if (this.unsoldDelay < 0) {
                throw new Error("Forbidden value (" + this.unsoldDelay + ") on element unsoldDelay.");
            }
            output.writeVarShort(this.unsoldDelay);
        };
        SellerBuyerDescriptor.prototype.deserializeAs_SellerBuyerDescriptor = function(input) {
            var _val1 = 0;
            var _val2 = 0;
            var _quantitiesLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _quantitiesLen; _i1++) {
                _val1 = input.readVarUhInt();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of quantities.");
                }
                this.quantities.push(_val1);
            }
            var _typesLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _typesLen; _i2++) {
                _val2 = input.readVarUhInt();
                if (_val2 < 0) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of types.");
                }
                this.types.push(_val2);
            }
            this.taxPercentage = input.readFloat();
            this.taxModificationPercentage = input.readFloat();
            this.maxItemLevel = input.readUnsignedByte();
            if (this.maxItemLevel < 0 || this.maxItemLevel > 255) {
                throw new Error("Forbidden value (" + this.maxItemLevel + ") on element of SellerBuyerDescriptor.maxItemLevel.");
            }
            this.maxItemPerAccount = input.readVarUhInt();
            if (this.maxItemPerAccount < 0) {
                throw new Error("Forbidden value (" + this.maxItemPerAccount + ") on element of SellerBuyerDescriptor.maxItemPerAccount.");
            }
            this.npcContextualId = input.readInt();
            this.unsoldDelay = input.readVarUhShort();
            if (this.unsoldDelay < 0) {
                throw new Error("Forbidden value (" + this.unsoldDelay + ") on element of SellerBuyerDescriptor.unsoldDelay.");
            }
        };
        SellerBuyerDescriptor.ID = 7048;
        return SellerBuyerDescriptor;
    })();
    Protocol.SellerBuyerDescriptor = SellerBuyerDescriptor;
    var EntityInformation = (function() {

        function EntityInformation() {
            this.id = 0;
            this.experience = 0;
            this.status = false;

        }
        EntityInformation.prototype.getMessageId = function() {
            return EntityInformation.ID;
        };
        EntityInformation.prototype.reset = function() {
            this.id = 0;
            this.experience = 0;
            this.status = false;
        };
        EntityInformation.prototype.serialize = function(output) {
            this.serializeAs_EntityInformation(output);
        };
        EntityInformation.prototype.deserialize = function(input) {
            this.deserializeAs_EntityInformation(input);
        };
        EntityInformation.prototype.serializeAs_EntityInformation = function(output) {
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarShort(this.id);
            if (this.experience < 0) {
                throw new Error("Forbidden value (" + this.experience + ") on element experience.");
            }
            output.writeVarInt(this.experience);
            output.writeBoolean(this.status);
        };
        EntityInformation.prototype.deserializeAs_EntityInformation = function(input) {
            this.id = input.readVarUhShort();
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element of EntityInformation.id.");
            }
            this.experience = input.readVarUhInt();
            if (this.experience < 0) {
                throw new Error("Forbidden value (" + this.experience + ") on element of EntityInformation.experience.");
            }
            this.status = input.readBoolean();
        };
        EntityInformation.ID = 6556;
        return EntityInformation;
    })();
    Protocol.EntityInformation = EntityInformation;
    var ProtectedEntityWaitingForHelpInfo = (function() {

        function ProtectedEntityWaitingForHelpInfo() {
            this.timeLeftBeforeFight = 0;
            this.waitTimeForPlacement = 0;
            this.nbPositionForDefensors = 0;

        }
        ProtectedEntityWaitingForHelpInfo.prototype.getMessageId = function() {
            return ProtectedEntityWaitingForHelpInfo.ID;
        };
        ProtectedEntityWaitingForHelpInfo.prototype.reset = function() {
            this.timeLeftBeforeFight = 0;
            this.waitTimeForPlacement = 0;
            this.nbPositionForDefensors = 0;
        };
        ProtectedEntityWaitingForHelpInfo.prototype.serialize = function(output) {
            this.serializeAs_ProtectedEntityWaitingForHelpInfo(output);
        };
        ProtectedEntityWaitingForHelpInfo.prototype.deserialize = function(input) {
            this.deserializeAs_ProtectedEntityWaitingForHelpInfo(input);
        };
        ProtectedEntityWaitingForHelpInfo.prototype.serializeAs_ProtectedEntityWaitingForHelpInfo = function(output) {
            output.writeInt(this.timeLeftBeforeFight);
            output.writeInt(this.waitTimeForPlacement);
            if (this.nbPositionForDefensors < 0) {
                throw new Error("Forbidden value (" + this.nbPositionForDefensors + ") on element nbPositionForDefensors.");
            }
            output.writeByte(this.nbPositionForDefensors);
        };
        ProtectedEntityWaitingForHelpInfo.prototype.deserializeAs_ProtectedEntityWaitingForHelpInfo = function(input) {
            this.timeLeftBeforeFight = input.readInt();
            this.waitTimeForPlacement = input.readInt();
            this.nbPositionForDefensors = input.readByte();
            if (this.nbPositionForDefensors < 0) {
                throw new Error("Forbidden value (" + this.nbPositionForDefensors + ") on element of ProtectedEntityWaitingForHelpInfo.nbPositionForDefensors.");
            }
        };
        ProtectedEntityWaitingForHelpInfo.ID = 6130;
        return ProtectedEntityWaitingForHelpInfo;
    })();
    Protocol.ProtectedEntityWaitingForHelpInfo = ProtectedEntityWaitingForHelpInfo;
    var FinishMoveInformations = (function() {

        function FinishMoveInformations() {
            this.finishMoveId = 0;
            this.finishMoveState = false;

        }
        FinishMoveInformations.prototype.getMessageId = function() {
            return FinishMoveInformations.ID;
        };
        FinishMoveInformations.prototype.reset = function() {
            this.finishMoveId = 0;
            this.finishMoveState = false;
        };
        FinishMoveInformations.prototype.serialize = function(output) {
            this.serializeAs_FinishMoveInformations(output);
        };
        FinishMoveInformations.prototype.deserialize = function(input) {
            this.deserializeAs_FinishMoveInformations(input);
        };
        FinishMoveInformations.prototype.serializeAs_FinishMoveInformations = function(output) {
            if (this.finishMoveId < 0) {
                throw new Error("Forbidden value (" + this.finishMoveId + ") on element finishMoveId.");
            }
            output.writeInt(this.finishMoveId);
            output.writeBoolean(this.finishMoveState);
        };
        FinishMoveInformations.prototype.deserializeAs_FinishMoveInformations = function(input) {
            this.finishMoveId = input.readInt();
            if (this.finishMoveId < 0) {
                throw new Error("Forbidden value (" + this.finishMoveId + ") on element of FinishMoveInformations.finishMoveId.");
            }
            this.finishMoveState = input.readBoolean();
        };
        FinishMoveInformations.ID = 7837;
        return FinishMoveInformations;
    })();
    Protocol.FinishMoveInformations = FinishMoveInformations;
    var AcquaintanceInformation = (function(_super) {
        __extends(AcquaintanceInformation, _super);

        function AcquaintanceInformation() {
            this.playerState = 99;
            _super.call(this)
        }
        AcquaintanceInformation.prototype.getMessageId = function() {
            return AcquaintanceInformation.ID;
        };
        AcquaintanceInformation.prototype.reset = function() {
            this.playerState = 99;
        };
        AcquaintanceInformation.prototype.serialize = function(output) {
            this.serializeAs_AcquaintanceInformation(output);
        };
        AcquaintanceInformation.prototype.deserialize = function(input) {
            this.deserializeAs_AcquaintanceInformation(input);
        };
        AcquaintanceInformation.prototype.serializeAs_AcquaintanceInformation = function(output) {
            _super.prototype.serializeAs_AbstractContactInformations(this, output);
            output.writeByte(this.playerState);
        };
        AcquaintanceInformation.prototype.deserializeAs_AcquaintanceInformation = function(input) {
            _super.prototype.deserializeAbstractContactInformations(this, input);
            this.playerState = input.readByte();
            if (this.playerState < 0) {
                throw new Error("Forbidden value (" + this.playerState + ") on element of AcquaintanceInformation.playerState.");
            }
        };
        AcquaintanceInformation.ID = 4492;
        return AcquaintanceInformation;
    })(AbstractContactInformations);
    Protocol.AcquaintanceInformation = AcquaintanceInformation;
    var AcquaintanceOnlineInformation = (function(_super) {
        __extends(AcquaintanceOnlineInformation, _super);

        function AcquaintanceOnlineInformation() {
            this.playerId = 0;
            this.playerName = "";
            this.moodSmileyId = 0;
            this.status = new PlayerStatus();
            _super.call(this)
        }
        AcquaintanceOnlineInformation.prototype.getMessageId = function() {
            return AcquaintanceOnlineInformation.ID;
        };
        AcquaintanceOnlineInformation.prototype.reset = function() {
            this.playerId = 0;
            this.playerName = "";
            this.moodSmileyId = 0;
            this.status = new PlayerStatus();
        };
        AcquaintanceOnlineInformation.prototype.serialize = function(output) {
            this.serializeAs_AcquaintanceOnlineInformation(output);
        };
        AcquaintanceOnlineInformation.prototype.deserialize = function(input) {
            this.deserializeAs_AcquaintanceOnlineInformation(input);
        };
        AcquaintanceOnlineInformation.prototype.serializeAs_AcquaintanceOnlineInformation = function(output) {
            _super.prototype.serializeAs_AcquaintanceInformation(this, output);
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
            output.writeUTF(this.playerName);
            if (this.moodSmileyId < 0) {
                throw new Error("Forbidden value (" + this.moodSmileyId + ") on element moodSmileyId.");
            }
            output.writeVarShort(this.moodSmileyId);
            output.writeShort(this.status.getTypeId());
            this.status.serialize(output);
        };
        AcquaintanceOnlineInformation.prototype.deserializeAs_AcquaintanceOnlineInformation = function(input) {
            _super.prototype.deserializeAcquaintanceInformation(this, input);
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of AcquaintanceOnlineInformation.playerId.");
            }
            this.playerName = input.readUTF();
            this.moodSmileyId = input.readVarUhShort();
            if (this.moodSmileyId < 0) {
                throw new Error("Forbidden value (" + this.moodSmileyId + ") on element of AcquaintanceOnlineInformation.moodSmileyId.");
            }
            var _id4 = input.readUnsignedShort();
            this.status = ProtocolTypeManager.getInstance(PlayerStatus, _id4);
            this.status.deserialize(input);
        };
        AcquaintanceOnlineInformation.ID = 5184;
        return AcquaintanceOnlineInformation;
    })(AcquaintanceInformation);
    Protocol.AcquaintanceOnlineInformation = AcquaintanceOnlineInformation;
    var FriendInformations = (function(_super) {
        __extends(FriendInformations, _super);

        function FriendInformations() {
            this.playerState = 99;
            this.lastConnection = 0;
            this.achievementPoints = 0;
            this.leagueId = 0;
            this.ladderPosition = 0;
            _super.call(this)
        }
        FriendInformations.prototype.getMessageId = function() {
            return FriendInformations.ID;
        };
        FriendInformations.prototype.reset = function() {
            this.playerState = 99;
            this.lastConnection = 0;
            this.achievementPoints = 0;
            this.leagueId = 0;
            this.ladderPosition = 0;
        };
        FriendInformations.prototype.serialize = function(output) {
            this.serializeAs_FriendInformations(output);
        };
        FriendInformations.prototype.deserialize = function(input) {
            this.deserializeAs_FriendInformations(input);
        };
        FriendInformations.prototype.serializeAs_FriendInformations = function(output) {
            _super.prototype.serializeAs_AbstractContactInformations(this, output);
            output.writeByte(this.playerState);
            if (this.lastConnection < 0) {
                throw new Error("Forbidden value (" + this.lastConnection + ") on element lastConnection.");
            }
            output.writeVarShort(this.lastConnection);
            output.writeInt(this.achievementPoints);
            output.writeVarShort(this.leagueId);
            output.writeInt(this.ladderPosition);
        };
        FriendInformations.prototype.deserializeAs_FriendInformations = function(input) {
            _super.prototype.deserializeAbstractContactInformations(this, input);
            this.playerState = input.readByte();
            if (this.playerState < 0) {
                throw new Error("Forbidden value (" + this.playerState + ") on element of FriendInformations.playerState.");
            }
            this.lastConnection = input.readVarUhShort();
            if (this.lastConnection < 0) {
                throw new Error("Forbidden value (" + this.lastConnection + ") on element of FriendInformations.lastConnection.");
            }
            this.achievementPoints = input.readInt();
            this.leagueId = input.readVarShort();
            this.ladderPosition = input.readInt();
        };
        FriendInformations.ID = 3453;
        return FriendInformations;
    })(AbstractContactInformations);
    Protocol.FriendInformations = FriendInformations;
    var FriendOnlineInformations = (function(_super) {
        __extends(FriendOnlineInformations, _super);

        function FriendOnlineInformations() {
            this.playerId = 0;
            this.playerName = "";
            this.level = 0;
            this.alignmentSide = 0;
            this.breed = 0;
            this.sex = false;
            this.guildInfo = new GuildInformations();
            this.moodSmileyId = 0;
            this.status = new PlayerStatus();
            this.havenBagShared = false;
            _super.call(this)
        }
        FriendOnlineInformations.prototype.getMessageId = function() {
            return FriendOnlineInformations.ID;
        };
        FriendOnlineInformations.prototype.reset = function() {
            this.playerId = 0;
            this.playerName = "";
            this.level = 0;
            this.alignmentSide = 0;
            this.breed = 0;
            this.sex = false;
            this.guildInfo = new GuildInformations();
            this.moodSmileyId = 0;
            this.status = new PlayerStatus();
            this.havenBagShared = false;
        };
        FriendOnlineInformations.prototype.serialize = function(output) {
            this.serializeAs_FriendOnlineInformations(output);
        };
        FriendOnlineInformations.prototype.deserialize = function(input) {
            this.deserializeAs_FriendOnlineInformations(input);
        };
        FriendOnlineInformations.prototype.serializeAs_FriendOnlineInformations = function(output) {
            _super.prototype.serializeAs_FriendInformations(this, output);
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.sex);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.havenBagShared);
            output.writeByte(_box0);
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
            output.writeUTF(this.playerName);
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeVarShort(this.level);
            output.writeByte(this.alignmentSide);
            output.writeByte(this.breed);
            this.guildInfo.serializeAs_GuildInformations(output);
            if (this.moodSmileyId < 0) {
                throw new Error("Forbidden value (" + this.moodSmileyId + ") on element moodSmileyId.");
            }
            output.writeVarShort(this.moodSmileyId);
            output.writeShort(this.status.getTypeId());
            this.status.serialize(output);
        };
        FriendOnlineInformations.prototype.deserializeAs_FriendOnlineInformations = function(input) {
            _super.prototype.deserializeFriendInformations(this, input);
            this.deserializeByteBoxes(input);
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of FriendOnlineInformations.playerId.");
            }
            this.playerName = input.readUTF();
            this.level = input.readVarUhShort();
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element of FriendOnlineInformations.level.");
            }
            this.alignmentSide = input.readByte();
            this.breed = input.readByte();
            if (this.breed < PlayableBreedEnum.Feca || this.breed > PlayableBreedEnum.Ouginak) {
                throw new Error("Forbidden value (" + this.breed + ") on element of FriendOnlineInformations.breed.");
            }
            this.guildInfo = new GuildInformations();
            this.guildInfo.deserialize(input);
            this.moodSmileyId = input.readVarUhShort();
            if (this.moodSmileyId < 0) {
                throw new Error("Forbidden value (" + this.moodSmileyId + ") on element of FriendOnlineInformations.moodSmileyId.");
            }
            var _id9 = input.readUnsignedShort();
            this.status = ProtocolTypeManager.getInstance(PlayerStatus, _id9);
            this.status.deserialize(input);
        };
        FriendOnlineInformations.ID = 450;
        return FriendOnlineInformations;
    })(FriendInformations);
    Protocol.FriendOnlineInformations = FriendOnlineInformations;
    var FriendSpouseInformations = (function() {

        function FriendSpouseInformations() {
            this.spouseAccountId = 0;
            this.spouseId = 0;
            this.spouseName = "";
            this.spouseLevel = 0;
            this.breed = 0;
            this.sex = 0;
            this.spouseEntityLook = new EntityLook();
            this.guildInfo = new GuildInformations();
            this.alignmentSide = 0;

        }
        FriendSpouseInformations.prototype.getMessageId = function() {
            return FriendSpouseInformations.ID;
        };
        FriendSpouseInformations.prototype.reset = function() {
            this.spouseAccountId = 0;
            this.spouseId = 0;
            this.spouseName = "";
            this.spouseLevel = 0;
            this.breed = 0;
            this.sex = 0;
            this.spouseEntityLook = new EntityLook();
            this.guildInfo = new GuildInformations();
            this.alignmentSide = 0;
        };
        FriendSpouseInformations.prototype.serialize = function(output) {
            this.serializeAs_FriendSpouseInformations(output);
        };
        FriendSpouseInformations.prototype.deserialize = function(input) {
            this.deserializeAs_FriendSpouseInformations(input);
        };
        FriendSpouseInformations.prototype.serializeAs_FriendSpouseInformations = function(output) {
            if (this.spouseAccountId < 0) {
                throw new Error("Forbidden value (" + this.spouseAccountId + ") on element spouseAccountId.");
            }
            output.writeInt(this.spouseAccountId);
            if (this.spouseId < 0 || this.spouseId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.spouseId + ") on element spouseId.");
            }
            output.writeVarLong(this.spouseId);
            output.writeUTF(this.spouseName);
            if (this.spouseLevel < 0) {
                throw new Error("Forbidden value (" + this.spouseLevel + ") on element spouseLevel.");
            }
            output.writeVarShort(this.spouseLevel);
            output.writeByte(this.breed);
            output.writeByte(this.sex);
            this.spouseEntityLook.serializeAs_EntityLook(output);
            this.guildInfo.serializeAs_GuildInformations(output);
            output.writeByte(this.alignmentSide);
        };
        FriendSpouseInformations.prototype.deserializeAs_FriendSpouseInformations = function(input) {
            this.spouseAccountId = input.readInt();
            if (this.spouseAccountId < 0) {
                throw new Error("Forbidden value (" + this.spouseAccountId + ") on element of FriendSpouseInformations.spouseAccountId.");
            }
            this.spouseId = input.readVarUhLong();
            if (this.spouseId < 0 || this.spouseId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.spouseId + ") on element of FriendSpouseInformations.spouseId.");
            }
            this.spouseName = input.readUTF();
            this.spouseLevel = input.readVarUhShort();
            if (this.spouseLevel < 0) {
                throw new Error("Forbidden value (" + this.spouseLevel + ") on element of FriendSpouseInformations.spouseLevel.");
            }
            this.breed = input.readByte();
            this.sex = input.readByte();
            this.spouseEntityLook = new EntityLook();
            this.spouseEntityLook.deserialize(input);
            this.guildInfo = new GuildInformations();
            this.guildInfo.deserialize(input);
            this.alignmentSide = input.readByte();
        };
        FriendSpouseInformations.ID = 4533;
        return FriendSpouseInformations;
    })();
    Protocol.FriendSpouseInformations = FriendSpouseInformations;
    var FriendSpouseOnlineInformations = (function(_super) {
        __extends(FriendSpouseOnlineInformations, _super);

        function FriendSpouseOnlineInformations() {
            this.mapId = 0;
            this.subAreaId = 0;
            this.inFight = false;
            this.followSpouse = false;
            _super.call(this)
        }
        FriendSpouseOnlineInformations.prototype.getMessageId = function() {
            return FriendSpouseOnlineInformations.ID;
        };
        FriendSpouseOnlineInformations.prototype.reset = function() {
            this.mapId = 0;
            this.subAreaId = 0;
            this.inFight = false;
            this.followSpouse = false;
        };
        FriendSpouseOnlineInformations.prototype.serialize = function(output) {
            this.serializeAs_FriendSpouseOnlineInformations(output);
        };
        FriendSpouseOnlineInformations.prototype.deserialize = function(input) {
            this.deserializeAs_FriendSpouseOnlineInformations(input);
        };
        FriendSpouseOnlineInformations.prototype.serializeAs_FriendSpouseOnlineInformations = function(output) {
            _super.prototype.serializeAs_FriendSpouseInformations(this, output);
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.inFight);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.followSpouse);
            output.writeByte(_box0);
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
        };
        FriendSpouseOnlineInformations.prototype.deserializeAs_FriendSpouseOnlineInformations = function(input) {
            _super.prototype.deserializeFriendSpouseInformations(this, input);
            this.deserializeByteBoxes(input);
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of FriendSpouseOnlineInformations.mapId.");
            }
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of FriendSpouseOnlineInformations.subAreaId.");
            }
        };
        FriendSpouseOnlineInformations.ID = 7417;
        return FriendSpouseOnlineInformations;
    })(FriendSpouseInformations);
    Protocol.FriendSpouseOnlineInformations = FriendSpouseOnlineInformations;
    var IgnoredInformations = (function(_super) {
        __extends(IgnoredInformations, _super);

        function IgnoredInformations() {

            _super.call(this)
        }
        IgnoredInformations.prototype.getMessageId = function() {
            return IgnoredInformations.ID;
        };
        IgnoredInformations.prototype.reset = function() {

        };
        IgnoredInformations.prototype.serialize = function(output) {
            this.serializeAs_IgnoredInformations(output);
        };
        IgnoredInformations.prototype.deserialize = function(input) {
            this.deserializeAs_IgnoredInformations(input);
        };
        IgnoredInformations.prototype.serializeAs_IgnoredInformations = function(output) {
            _super.prototype.serializeAs_AbstractContactInformations(this, output);
        };
        IgnoredInformations.prototype.deserializeAs_IgnoredInformations = function(input) {
            _super.prototype.deserializeAbstractContactInformations(this, input);
        };
        IgnoredInformations.ID = 4160;
        return IgnoredInformations;
    })(AbstractContactInformations);
    Protocol.IgnoredInformations = IgnoredInformations;
    var IgnoredOnlineInformations = (function(_super) {
        __extends(IgnoredOnlineInformations, _super);

        function IgnoredOnlineInformations() {
            this.playerId = 0;
            this.playerName = "";
            this.breed = 0;
            this.sex = false;
            _super.call(this)
        }
        IgnoredOnlineInformations.prototype.getMessageId = function() {
            return IgnoredOnlineInformations.ID;
        };
        IgnoredOnlineInformations.prototype.reset = function() {
            this.playerId = 0;
            this.playerName = "";
            this.breed = 0;
            this.sex = false;
        };
        IgnoredOnlineInformations.prototype.serialize = function(output) {
            this.serializeAs_IgnoredOnlineInformations(output);
        };
        IgnoredOnlineInformations.prototype.deserialize = function(input) {
            this.deserializeAs_IgnoredOnlineInformations(input);
        };
        IgnoredOnlineInformations.prototype.serializeAs_IgnoredOnlineInformations = function(output) {
            _super.prototype.serializeAs_IgnoredInformations(this, output);
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
            output.writeUTF(this.playerName);
            output.writeByte(this.breed);
            output.writeBoolean(this.sex);
        };
        IgnoredOnlineInformations.prototype.deserializeAs_IgnoredOnlineInformations = function(input) {
            _super.prototype.deserializeIgnoredInformations(this, input);
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of IgnoredOnlineInformations.playerId.");
            }
            this.playerName = input.readUTF();
            this.breed = input.readByte();
            if (this.breed < PlayableBreedEnum.Feca || this.breed > PlayableBreedEnum.Ouginak) {
                throw new Error("Forbidden value (" + this.breed + ") on element of IgnoredOnlineInformations.breed.");
            }
            this.sex = input.readBoolean();
        };
        IgnoredOnlineInformations.ID = 5101;
        return IgnoredOnlineInformations;
    })(IgnoredInformations);
    Protocol.IgnoredOnlineInformations = IgnoredOnlineInformations;
    var GuildEmblem = (function() {

        function GuildEmblem() {
            this.symbolShape = 0;
            this.symbolColor = 0;
            this.backgroundShape = 0;
            this.backgroundColor = 0;

        }
        GuildEmblem.prototype.getMessageId = function() {
            return GuildEmblem.ID;
        };
        GuildEmblem.prototype.reset = function() {
            this.symbolShape = 0;
            this.symbolColor = 0;
            this.backgroundShape = 0;
            this.backgroundColor = 0;
        };
        GuildEmblem.prototype.serialize = function(output) {
            this.serializeAs_GuildEmblem(output);
        };
        GuildEmblem.prototype.deserialize = function(input) {
            this.deserializeAs_GuildEmblem(input);
        };
        GuildEmblem.prototype.serializeAs_GuildEmblem = function(output) {
            if (this.symbolShape < 0) {
                throw new Error("Forbidden value (" + this.symbolShape + ") on element symbolShape.");
            }
            output.writeVarShort(this.symbolShape);
            output.writeInt(this.symbolColor);
            if (this.backgroundShape < 0) {
                throw new Error("Forbidden value (" + this.backgroundShape + ") on element backgroundShape.");
            }
            output.writeByte(this.backgroundShape);
            output.writeInt(this.backgroundColor);
        };
        GuildEmblem.prototype.deserializeAs_GuildEmblem = function(input) {
            this.symbolShape = input.readVarUhShort();
            if (this.symbolShape < 0) {
                throw new Error("Forbidden value (" + this.symbolShape + ") on element of GuildEmblem.symbolShape.");
            }
            this.symbolColor = input.readInt();
            this.backgroundShape = input.readByte();
            if (this.backgroundShape < 0) {
                throw new Error("Forbidden value (" + this.backgroundShape + ") on element of GuildEmblem.backgroundShape.");
            }
            this.backgroundColor = input.readInt();
        };
        GuildEmblem.ID = 6377;
        return GuildEmblem;
    })();
    Protocol.GuildEmblem = GuildEmblem;
    var GuildMember = (function(_super) {
        __extends(GuildMember, _super);

        function GuildMember() {
            this.breed = 0;
            this.sex = false;
            this.rank = 0;
            this.givenExperience = 0;
            this.experienceGivenPercent = 0;
            this.rights = 0;
            this.connected = 99;
            this.alignmentSide = 0;
            this.hoursSinceLastConnection = 0;
            this.moodSmileyId = 0;
            this.accountId = 0;
            this.achievementPoints = 0;
            this.status = new PlayerStatus();
            this.havenBagShared = false;
            _super.call(this)
        }
        GuildMember.prototype.getMessageId = function() {
            return GuildMember.ID;
        };
        GuildMember.prototype.reset = function() {
            this.breed = 0;
            this.sex = false;
            this.rank = 0;
            this.givenExperience = 0;
            this.experienceGivenPercent = 0;
            this.rights = 0;
            this.connected = 99;
            this.alignmentSide = 0;
            this.hoursSinceLastConnection = 0;
            this.moodSmileyId = 0;
            this.accountId = 0;
            this.achievementPoints = 0;
            this.status = new PlayerStatus();
            this.havenBagShared = false;
        };
        GuildMember.prototype.serialize = function(output) {
            this.serializeAs_GuildMember(output);
        };
        GuildMember.prototype.deserialize = function(input) {
            this.deserializeAs_GuildMember(input);
        };
        GuildMember.prototype.serializeAs_GuildMember = function(output) {
            _super.prototype.serializeAs_CharacterMinimalInformations(this, output);
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.sex);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.havenBagShared);
            output.writeByte(_box0);
            output.writeByte(this.breed);
            if (this.rank < 0) {
                throw new Error("Forbidden value (" + this.rank + ") on element rank.");
            }
            output.writeVarShort(this.rank);
            if (this.givenExperience < 0 || this.givenExperience > 9007199254740990) {
                throw new Error("Forbidden value (" + this.givenExperience + ") on element givenExperience.");
            }
            output.writeVarLong(this.givenExperience);
            if (this.experienceGivenPercent < 0 || this.experienceGivenPercent > 100) {
                throw new Error("Forbidden value (" + this.experienceGivenPercent + ") on element experienceGivenPercent.");
            }
            output.writeByte(this.experienceGivenPercent);
            if (this.rights < 0) {
                throw new Error("Forbidden value (" + this.rights + ") on element rights.");
            }
            output.writeVarInt(this.rights);
            output.writeByte(this.connected);
            output.writeByte(this.alignmentSide);
            if (this.hoursSinceLastConnection < 0 || this.hoursSinceLastConnection > 65535) {
                throw new Error("Forbidden value (" + this.hoursSinceLastConnection + ") on element hoursSinceLastConnection.");
            }
            output.writeShort(this.hoursSinceLastConnection);
            if (this.moodSmileyId < 0) {
                throw new Error("Forbidden value (" + this.moodSmileyId + ") on element moodSmileyId.");
            }
            output.writeVarShort(this.moodSmileyId);
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element accountId.");
            }
            output.writeInt(this.accountId);
            output.writeInt(this.achievementPoints);
            output.writeShort(this.status.getTypeId());
            this.status.serialize(output);
        };
        GuildMember.prototype.deserializeAs_GuildMember = function(input) {
            _super.prototype.deserializeCharacterMinimalInformations(this, input);
            this.deserializeByteBoxes(input);
            this.breed = input.readByte();
            this.rank = input.readVarUhShort();
            if (this.rank < 0) {
                throw new Error("Forbidden value (" + this.rank + ") on element of GuildMember.rank.");
            }
            this.givenExperience = input.readVarUhLong();
            if (this.givenExperience < 0 || this.givenExperience > 9007199254740990) {
                throw new Error("Forbidden value (" + this.givenExperience + ") on element of GuildMember.givenExperience.");
            }
            this.experienceGivenPercent = input.readByte();
            if (this.experienceGivenPercent < 0 || this.experienceGivenPercent > 100) {
                throw new Error("Forbidden value (" + this.experienceGivenPercent + ") on element of GuildMember.experienceGivenPercent.");
            }
            this.rights = input.readVarUhInt();
            if (this.rights < 0) {
                throw new Error("Forbidden value (" + this.rights + ") on element of GuildMember.rights.");
            }
            this.connected = input.readByte();
            if (this.connected < 0) {
                throw new Error("Forbidden value (" + this.connected + ") on element of GuildMember.connected.");
            }
            this.alignmentSide = input.readByte();
            this.hoursSinceLastConnection = input.readUnsignedShort();
            if (this.hoursSinceLastConnection < 0 || this.hoursSinceLastConnection > 65535) {
                throw new Error("Forbidden value (" + this.hoursSinceLastConnection + ") on element of GuildMember.hoursSinceLastConnection.");
            }
            this.moodSmileyId = input.readVarUhShort();
            if (this.moodSmileyId < 0) {
                throw new Error("Forbidden value (" + this.moodSmileyId + ") on element of GuildMember.moodSmileyId.");
            }
            this.accountId = input.readInt();
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element of GuildMember.accountId.");
            }
            this.achievementPoints = input.readInt();
            var _id13 = input.readUnsignedShort();
            this.status = ProtocolTypeManager.getInstance(PlayerStatus, _id13);
            this.status.deserialize(input);
        };
        GuildMember.ID = 8512;
        return GuildMember;
    })(CharacterMinimalInformations);
    Protocol.GuildMember = GuildMember;
    var HavenBagFurnitureInformation = (function() {

        function HavenBagFurnitureInformation() {
            this.cellId = 0;
            this.funitureId = 0;
            this.orientation = 0;

        }
        HavenBagFurnitureInformation.prototype.getMessageId = function() {
            return HavenBagFurnitureInformation.ID;
        };
        HavenBagFurnitureInformation.prototype.reset = function() {
            this.cellId = 0;
            this.funitureId = 0;
            this.orientation = 0;
        };
        HavenBagFurnitureInformation.prototype.serialize = function(output) {
            this.serializeAs_HavenBagFurnitureInformation(output);
        };
        HavenBagFurnitureInformation.prototype.deserialize = function(input) {
            this.deserializeAs_HavenBagFurnitureInformation(input);
        };
        HavenBagFurnitureInformation.prototype.serializeAs_HavenBagFurnitureInformation = function(output) {
            if (this.cellId < 0) {
                throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
            }
            output.writeVarShort(this.cellId);
            output.writeInt(this.funitureId);
            if (this.orientation < 0) {
                throw new Error("Forbidden value (" + this.orientation + ") on element orientation.");
            }
            output.writeByte(this.orientation);
        };
        HavenBagFurnitureInformation.prototype.deserializeAs_HavenBagFurnitureInformation = function(input) {
            this.cellId = input.readVarUhShort();
            if (this.cellId < 0) {
                throw new Error("Forbidden value (" + this.cellId + ") on element of HavenBagFurnitureInformation.cellId.");
            }
            this.funitureId = input.readInt();
            this.orientation = input.readByte();
            if (this.orientation < 0) {
                throw new Error("Forbidden value (" + this.orientation + ") on element of HavenBagFurnitureInformation.orientation.");
            }
        };
        HavenBagFurnitureInformation.ID = 6102;
        return HavenBagFurnitureInformation;
    })();
    Protocol.HavenBagFurnitureInformation = HavenBagFurnitureInformation;
    var AdditionalTaxCollectorInformations = (function() {

        function AdditionalTaxCollectorInformations() {
            this.collectorCallerName = "";
            this.date = 0;

        }
        AdditionalTaxCollectorInformations.prototype.getMessageId = function() {
            return AdditionalTaxCollectorInformations.ID;
        };
        AdditionalTaxCollectorInformations.prototype.reset = function() {
            this.collectorCallerName = "";
            this.date = 0;
        };
        AdditionalTaxCollectorInformations.prototype.serialize = function(output) {
            this.serializeAs_AdditionalTaxCollectorInformations(output);
        };
        AdditionalTaxCollectorInformations.prototype.deserialize = function(input) {
            this.deserializeAs_AdditionalTaxCollectorInformations(input);
        };
        AdditionalTaxCollectorInformations.prototype.serializeAs_AdditionalTaxCollectorInformations = function(output) {
            output.writeUTF(this.collectorCallerName);
            if (this.date < 0) {
                throw new Error("Forbidden value (" + this.date + ") on element date.");
            }
            output.writeInt(this.date);
        };
        AdditionalTaxCollectorInformations.prototype.deserializeAs_AdditionalTaxCollectorInformations = function(input) {
            this.collectorCallerName = input.readUTF();
            this.date = input.readInt();
            if (this.date < 0) {
                throw new Error("Forbidden value (" + this.date + ") on element of AdditionalTaxCollectorInformations.date.");
            }
        };
        AdditionalTaxCollectorInformations.ID = 9191;
        return AdditionalTaxCollectorInformations;
    })();
    Protocol.AdditionalTaxCollectorInformations = AdditionalTaxCollectorInformations;
    var TaxCollectorBasicInformations = (function() {

        function TaxCollectorBasicInformations() {
            this.firstNameId = 0;
            this.lastNameId = 0;
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;

        }
        TaxCollectorBasicInformations.prototype.getMessageId = function() {
            return TaxCollectorBasicInformations.ID;
        };
        TaxCollectorBasicInformations.prototype.reset = function() {
            this.firstNameId = 0;
            this.lastNameId = 0;
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
        };
        TaxCollectorBasicInformations.prototype.serialize = function(output) {
            this.serializeAs_TaxCollectorBasicInformations(output);
        };
        TaxCollectorBasicInformations.prototype.deserialize = function(input) {
            this.deserializeAs_TaxCollectorBasicInformations(input);
        };
        TaxCollectorBasicInformations.prototype.serializeAs_TaxCollectorBasicInformations = function(output) {
            if (this.firstNameId < 0) {
                throw new Error("Forbidden value (" + this.firstNameId + ") on element firstNameId.");
            }
            output.writeVarShort(this.firstNameId);
            if (this.lastNameId < 0) {
                throw new Error("Forbidden value (" + this.lastNameId + ") on element lastNameId.");
            }
            output.writeVarShort(this.lastNameId);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
            }
            output.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
            }
            output.writeShort(this.worldY);
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
        };
        TaxCollectorBasicInformations.prototype.deserializeAs_TaxCollectorBasicInformations = function(input) {
            this.firstNameId = input.readVarUhShort();
            if (this.firstNameId < 0) {
                throw new Error("Forbidden value (" + this.firstNameId + ") on element of TaxCollectorBasicInformations.firstNameId.");
            }
            this.lastNameId = input.readVarUhShort();
            if (this.lastNameId < 0) {
                throw new Error("Forbidden value (" + this.lastNameId + ") on element of TaxCollectorBasicInformations.lastNameId.");
            }
            this.worldX = input.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element of TaxCollectorBasicInformations.worldX.");
            }
            this.worldY = input.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element of TaxCollectorBasicInformations.worldY.");
            }
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of TaxCollectorBasicInformations.mapId.");
            }
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of TaxCollectorBasicInformations.subAreaId.");
            }
        };
        TaxCollectorBasicInformations.ID = 7137;
        return TaxCollectorBasicInformations;
    })();
    Protocol.TaxCollectorBasicInformations = TaxCollectorBasicInformations;
    var TaxCollectorComplementaryInformations = (function() {

        function TaxCollectorComplementaryInformations() {


        }
        TaxCollectorComplementaryInformations.prototype.getMessageId = function() {
            return TaxCollectorComplementaryInformations.ID;
        };
        TaxCollectorComplementaryInformations.prototype.reset = function() {

        };
        TaxCollectorComplementaryInformations.prototype.serialize = function(output) {
            this.serializeAs_TaxCollectorComplementaryInformations(output);
        };
        TaxCollectorComplementaryInformations.prototype.deserialize = function(input) {
            this.deserializeAs_TaxCollectorComplementaryInformations(input);
        };
        TaxCollectorComplementaryInformations.prototype.serializeAs_TaxCollectorComplementaryInformations = function(output) {

        };
        TaxCollectorComplementaryInformations.prototype.deserializeAs_TaxCollectorComplementaryInformations = function(input) {

        };
        TaxCollectorComplementaryInformations.ID = 1561;
        return TaxCollectorComplementaryInformations;
    })();
    Protocol.TaxCollectorComplementaryInformations = TaxCollectorComplementaryInformations;
    var TaxCollectorFightersInformation = (function() {

        function TaxCollectorFightersInformation() {
            this.collectorId = 0;
            this.allyCharactersInformations = [];
            this.enemyCharactersInformations = [];

        }
        TaxCollectorFightersInformation.prototype.getMessageId = function() {
            return TaxCollectorFightersInformation.ID;
        };
        TaxCollectorFightersInformation.prototype.reset = function() {
            this.collectorId = 0;
            this.allyCharactersInformations = [];
            this.enemyCharactersInformations = [];
        };
        TaxCollectorFightersInformation.prototype.serialize = function(output) {
            this.serializeAs_TaxCollectorFightersInformation(output);
        };
        TaxCollectorFightersInformation.prototype.deserialize = function(input) {
            this.deserializeAs_TaxCollectorFightersInformation(input);
        };
        TaxCollectorFightersInformation.prototype.serializeAs_TaxCollectorFightersInformation = function(output) {
            if (this.collectorId < 0 || this.collectorId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.collectorId + ") on element collectorId.");
            }
            output.writeDouble(this.collectorId);
            output.writeShort(this.allyCharactersInformations.length);
            for (var _i2 = 0; _i2 < this.allyCharactersInformations.length; _i2++) {
                output.writeShort((this.allyCharactersInformations[_i2]).getTypeId());
                (this.allyCharactersInformations[_i2]).serialize(output);
            }
            output.writeShort(this.enemyCharactersInformations.length);
            for (var _i3 = 0; _i3 < this.enemyCharactersInformations.length; _i3++) {
                output.writeShort((this.enemyCharactersInformations[_i3]).getTypeId());
                (this.enemyCharactersInformations[_i3]).serialize(output);
            }
        };
        TaxCollectorFightersInformation.prototype.deserializeAs_TaxCollectorFightersInformation = function(input) {
            var _id2 = 0;
            var _item2 = null;
            var _id3 = 0;
            var _item3 = null;
            this.collectorId = input.readDouble();
            if (this.collectorId < 0 || this.collectorId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.collectorId + ") on element of TaxCollectorFightersInformation.collectorId.");
            }
            var _allyCharactersInformationsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _allyCharactersInformationsLen; _i2++) {
                _id2 = input.readUnsignedShort();
                _item2 = ProtocolTypeManager.getInstance(CharacterMinimalPlusLookInformations, _id2);
                _item2.deserialize(input);
                this.allyCharactersInformations.push(_item2);
            }
            var _enemyCharactersInformationsLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _enemyCharactersInformationsLen; _i3++) {
                _id3 = input.readUnsignedShort();
                _item3 = ProtocolTypeManager.getInstance(CharacterMinimalPlusLookInformations, _id3);
                _item3.deserialize(input);
                this.enemyCharactersInformations.push(_item3);
            }
        };
        TaxCollectorFightersInformation.ID = 2594;
        return TaxCollectorFightersInformation;
    })();
    Protocol.TaxCollectorFightersInformation = TaxCollectorFightersInformation;
    var TaxCollectorGuildInformations = (function(_super) {
        __extends(TaxCollectorGuildInformations, _super);

        function TaxCollectorGuildInformations() {
            this.guild = new BasicGuildInformations();
            _super.call(this)
        }
        TaxCollectorGuildInformations.prototype.getMessageId = function() {
            return TaxCollectorGuildInformations.ID;
        };
        TaxCollectorGuildInformations.prototype.reset = function() {
            this.guild = new BasicGuildInformations();
        };
        TaxCollectorGuildInformations.prototype.serialize = function(output) {
            this.serializeAs_TaxCollectorGuildInformations(output);
        };
        TaxCollectorGuildInformations.prototype.deserialize = function(input) {
            this.deserializeAs_TaxCollectorGuildInformations(input);
        };
        TaxCollectorGuildInformations.prototype.serializeAs_TaxCollectorGuildInformations = function(output) {
            _super.prototype.serializeAs_TaxCollectorComplementaryInformations(this, output);
            this.guild.serializeAs_BasicGuildInformations(output);
        };
        TaxCollectorGuildInformations.prototype.deserializeAs_TaxCollectorGuildInformations = function(input) {
            _super.prototype.deserializeTaxCollectorComplementaryInformations(this, input);
            this.guild = new BasicGuildInformations();
            this.guild.deserialize(input);
        };
        TaxCollectorGuildInformations.ID = 343;
        return TaxCollectorGuildInformations;
    })(TaxCollectorComplementaryInformations);
    Protocol.TaxCollectorGuildInformations = TaxCollectorGuildInformations;
    var TaxCollectorInformations = (function() {

        function TaxCollectorInformations() {
            this.uniqueId = 0;
            this.firtNameId = 0;
            this.lastNameId = 0;
            this.additionalInfos = new AdditionalTaxCollectorInformations();
            this.worldX = 0;
            this.worldY = 0;
            this.subAreaId = 0;
            this.state = 0;
            this.look = new EntityLook();
            this.complements = [];

        }
        TaxCollectorInformations.prototype.getMessageId = function() {
            return TaxCollectorInformations.ID;
        };
        TaxCollectorInformations.prototype.reset = function() {
            this.uniqueId = 0;
            this.firtNameId = 0;
            this.lastNameId = 0;
            this.additionalInfos = new AdditionalTaxCollectorInformations();
            this.worldX = 0;
            this.worldY = 0;
            this.subAreaId = 0;
            this.state = 0;
            this.look = new EntityLook();
            this.complements = [];
        };
        TaxCollectorInformations.prototype.serialize = function(output) {
            this.serializeAs_TaxCollectorInformations(output);
        };
        TaxCollectorInformations.prototype.deserialize = function(input) {
            this.deserializeAs_TaxCollectorInformations(input);
        };
        TaxCollectorInformations.prototype.serializeAs_TaxCollectorInformations = function(output) {
            if (this.uniqueId < 0 || this.uniqueId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.uniqueId + ") on element uniqueId.");
            }
            output.writeDouble(this.uniqueId);
            if (this.firtNameId < 0) {
                throw new Error("Forbidden value (" + this.firtNameId + ") on element firtNameId.");
            }
            output.writeVarShort(this.firtNameId);
            if (this.lastNameId < 0) {
                throw new Error("Forbidden value (" + this.lastNameId + ") on element lastNameId.");
            }
            output.writeVarShort(this.lastNameId);
            this.additionalInfos.serializeAs_AdditionalTaxCollectorInformations(output);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
            }
            output.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
            }
            output.writeShort(this.worldY);
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
            output.writeByte(this.state);
            this.look.serializeAs_EntityLook(output);
            output.writeShort(this.complements.length);
            for (var _i10 = 0; _i10 < this.complements.length; _i10++) {
                output.writeShort((this.complements[_i10]).getTypeId());
                (this.complements[_i10]).serialize(output);
            }
        };
        TaxCollectorInformations.prototype.deserializeAs_TaxCollectorInformations = function(input) {
            var _id10 = 0;
            var _item10 = null;
            this.uniqueId = input.readDouble();
            if (this.uniqueId < 0 || this.uniqueId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.uniqueId + ") on element of TaxCollectorInformations.uniqueId.");
            }
            this.firtNameId = input.readVarUhShort();
            if (this.firtNameId < 0) {
                throw new Error("Forbidden value (" + this.firtNameId + ") on element of TaxCollectorInformations.firtNameId.");
            }
            this.lastNameId = input.readVarUhShort();
            if (this.lastNameId < 0) {
                throw new Error("Forbidden value (" + this.lastNameId + ") on element of TaxCollectorInformations.lastNameId.");
            }
            this.additionalInfos = new AdditionalTaxCollectorInformations();
            this.additionalInfos.deserialize(input);
            this.worldX = input.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element of TaxCollectorInformations.worldX.");
            }
            this.worldY = input.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element of TaxCollectorInformations.worldY.");
            }
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of TaxCollectorInformations.subAreaId.");
            }
            this.state = input.readByte();
            if (this.state < 0) {
                throw new Error("Forbidden value (" + this.state + ") on element of TaxCollectorInformations.state.");
            }
            this.look = new EntityLook();
            this.look.deserialize(input);
            var _complementsLen = input.readUnsignedShort();
            for (var _i10 = 0; _i10 < _complementsLen; _i10++) {
                _id10 = input.readUnsignedShort();
                _item10 = ProtocolTypeManager.getInstance(TaxCollectorComplementaryInformations, _id10);
                _item10.deserialize(input);
                this.complements.push(_item10);
            }
        };
        TaxCollectorInformations.ID = 5151;
        return TaxCollectorInformations;
    })();
    Protocol.TaxCollectorInformations = TaxCollectorInformations;
    var TaxCollectorLootInformations = (function(_super) {
        __extends(TaxCollectorLootInformations, _super);

        function TaxCollectorLootInformations() {
            this.kamas = 0;
            this.experience = 0;
            this.pods = 0;
            this.itemsValue = 0;
            _super.call(this)
        }
        TaxCollectorLootInformations.prototype.getMessageId = function() {
            return TaxCollectorLootInformations.ID;
        };
        TaxCollectorLootInformations.prototype.reset = function() {
            this.kamas = 0;
            this.experience = 0;
            this.pods = 0;
            this.itemsValue = 0;
        };
        TaxCollectorLootInformations.prototype.serialize = function(output) {
            this.serializeAs_TaxCollectorLootInformations(output);
        };
        TaxCollectorLootInformations.prototype.deserialize = function(input) {
            this.deserializeAs_TaxCollectorLootInformations(input);
        };
        TaxCollectorLootInformations.prototype.serializeAs_TaxCollectorLootInformations = function(output) {
            _super.prototype.serializeAs_TaxCollectorComplementaryInformations(this, output);
            if (this.kamas < 0 || this.kamas > 9007199254740990) {
                throw new Error("Forbidden value (" + this.kamas + ") on element kamas.");
            }
            output.writeVarLong(this.kamas);
            if (this.experience < 0 || this.experience > 9007199254740990) {
                throw new Error("Forbidden value (" + this.experience + ") on element experience.");
            }
            output.writeVarLong(this.experience);
            if (this.pods < 0) {
                throw new Error("Forbidden value (" + this.pods + ") on element pods.");
            }
            output.writeVarInt(this.pods);
            if (this.itemsValue < 0 || this.itemsValue > 9007199254740990) {
                throw new Error("Forbidden value (" + this.itemsValue + ") on element itemsValue.");
            }
            output.writeVarLong(this.itemsValue);
        };
        TaxCollectorLootInformations.prototype.deserializeAs_TaxCollectorLootInformations = function(input) {
            _super.prototype.deserializeTaxCollectorComplementaryInformations(this, input);
            this.kamas = input.readVarUhLong();
            if (this.kamas < 0 || this.kamas > 9007199254740990) {
                throw new Error("Forbidden value (" + this.kamas + ") on element of TaxCollectorLootInformations.kamas.");
            }
            this.experience = input.readVarUhLong();
            if (this.experience < 0 || this.experience > 9007199254740990) {
                throw new Error("Forbidden value (" + this.experience + ") on element of TaxCollectorLootInformations.experience.");
            }
            this.pods = input.readVarUhInt();
            if (this.pods < 0) {
                throw new Error("Forbidden value (" + this.pods + ") on element of TaxCollectorLootInformations.pods.");
            }
            this.itemsValue = input.readVarUhLong();
            if (this.itemsValue < 0 || this.itemsValue > 9007199254740990) {
                throw new Error("Forbidden value (" + this.itemsValue + ") on element of TaxCollectorLootInformations.itemsValue.");
            }
        };
        TaxCollectorLootInformations.ID = 4070;
        return TaxCollectorLootInformations;
    })(TaxCollectorComplementaryInformations);
    Protocol.TaxCollectorLootInformations = TaxCollectorLootInformations;
    var TaxCollectorMovement = (function() {

        function TaxCollectorMovement() {
            this.movementType = 0;
            this.basicInfos = new TaxCollectorBasicInformations();
            this.playerId = 0;
            this.playerName = "";

        }
        TaxCollectorMovement.prototype.getMessageId = function() {
            return TaxCollectorMovement.ID;
        };
        TaxCollectorMovement.prototype.reset = function() {
            this.movementType = 0;
            this.basicInfos = new TaxCollectorBasicInformations();
            this.playerId = 0;
            this.playerName = "";
        };
        TaxCollectorMovement.prototype.serialize = function(output) {
            this.serializeAs_TaxCollectorMovement(output);
        };
        TaxCollectorMovement.prototype.deserialize = function(input) {
            this.deserializeAs_TaxCollectorMovement(input);
        };
        TaxCollectorMovement.prototype.serializeAs_TaxCollectorMovement = function(output) {
            output.writeByte(this.movementType);
            this.basicInfos.serializeAs_TaxCollectorBasicInformations(output);
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
            output.writeUTF(this.playerName);
        };
        TaxCollectorMovement.prototype.deserializeAs_TaxCollectorMovement = function(input) {
            this.movementType = input.readByte();
            if (this.movementType < 0) {
                throw new Error("Forbidden value (" + this.movementType + ") on element of TaxCollectorMovement.movementType.");
            }
            this.basicInfos = new TaxCollectorBasicInformations();
            this.basicInfos.deserialize(input);
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of TaxCollectorMovement.playerId.");
            }
            this.playerName = input.readUTF();
        };
        TaxCollectorMovement.ID = 9466;
        return TaxCollectorMovement;
    })();
    Protocol.TaxCollectorMovement = TaxCollectorMovement;
    var TaxCollectorWaitingForHelpInformations = (function(_super) {
        __extends(TaxCollectorWaitingForHelpInformations, _super);

        function TaxCollectorWaitingForHelpInformations() {
            this.waitingForHelpInfo = new ProtectedEntityWaitingForHelpInfo();
            _super.call(this)
        }
        TaxCollectorWaitingForHelpInformations.prototype.getMessageId = function() {
            return TaxCollectorWaitingForHelpInformations.ID;
        };
        TaxCollectorWaitingForHelpInformations.prototype.reset = function() {
            this.waitingForHelpInfo = new ProtectedEntityWaitingForHelpInfo();
        };
        TaxCollectorWaitingForHelpInformations.prototype.serialize = function(output) {
            this.serializeAs_TaxCollectorWaitingForHelpInformations(output);
        };
        TaxCollectorWaitingForHelpInformations.prototype.deserialize = function(input) {
            this.deserializeAs_TaxCollectorWaitingForHelpInformations(input);
        };
        TaxCollectorWaitingForHelpInformations.prototype.serializeAs_TaxCollectorWaitingForHelpInformations = function(output) {
            _super.prototype.serializeAs_TaxCollectorComplementaryInformations(this, output);
            this.waitingForHelpInfo.serializeAs_ProtectedEntityWaitingForHelpInfo(output);
        };
        TaxCollectorWaitingForHelpInformations.prototype.deserializeAs_TaxCollectorWaitingForHelpInformations = function(input) {
            _super.prototype.deserializeTaxCollectorComplementaryInformations(this, input);
            this.waitingForHelpInfo = new ProtectedEntityWaitingForHelpInfo();
            this.waitingForHelpInfo.deserialize(input);
        };
        TaxCollectorWaitingForHelpInformations.ID = 3744;
        return TaxCollectorWaitingForHelpInformations;
    })(TaxCollectorComplementaryInformations);
    Protocol.TaxCollectorWaitingForHelpInformations = TaxCollectorWaitingForHelpInformations;
    var HavenBagRoomPreviewInformation = (function() {

        function HavenBagRoomPreviewInformation() {
            this.roomId = 0;
            this.themeId = 0;

        }
        HavenBagRoomPreviewInformation.prototype.getMessageId = function() {
            return HavenBagRoomPreviewInformation.ID;
        };
        HavenBagRoomPreviewInformation.prototype.reset = function() {
            this.roomId = 0;
            this.themeId = 0;
        };
        HavenBagRoomPreviewInformation.prototype.serialize = function(output) {
            this.serializeAs_HavenBagRoomPreviewInformation(output);
        };
        HavenBagRoomPreviewInformation.prototype.deserialize = function(input) {
            this.deserializeAs_HavenBagRoomPreviewInformation(input);
        };
        HavenBagRoomPreviewInformation.prototype.serializeAs_HavenBagRoomPreviewInformation = function(output) {
            if (this.roomId < 0 || this.roomId > 255) {
                throw new Error("Forbidden value (" + this.roomId + ") on element roomId.");
            }
            output.writeByte(this.roomId);
            output.writeByte(this.themeId);
        };
        HavenBagRoomPreviewInformation.prototype.deserializeAs_HavenBagRoomPreviewInformation = function(input) {
            this.roomId = input.readUnsignedByte();
            if (this.roomId < 0 || this.roomId > 255) {
                throw new Error("Forbidden value (" + this.roomId + ") on element of HavenBagRoomPreviewInformation.roomId.");
            }
            this.themeId = input.readByte();
        };
        HavenBagRoomPreviewInformation.ID = 7542;
        return HavenBagRoomPreviewInformation;
    })();
    Protocol.HavenBagRoomPreviewInformation = HavenBagRoomPreviewInformation;
    var HouseInformations = (function() {

        function HouseInformations() {
            this.houseId = 0;
            this.modelId = 0;

        }
        HouseInformations.prototype.getMessageId = function() {
            return HouseInformations.ID;
        };
        HouseInformations.prototype.reset = function() {
            this.houseId = 0;
            this.modelId = 0;
        };
        HouseInformations.prototype.serialize = function(output) {
            this.serializeAs_HouseInformations(output);
        };
        HouseInformations.prototype.deserialize = function(input) {
            this.deserializeAs_HouseInformations(input);
        };
        HouseInformations.prototype.serializeAs_HouseInformations = function(output) {
            if (this.houseId < 0) {
                throw new Error("Forbidden value (" + this.houseId + ") on element houseId.");
            }
            output.writeVarInt(this.houseId);
            if (this.modelId < 0) {
                throw new Error("Forbidden value (" + this.modelId + ") on element modelId.");
            }
            output.writeVarShort(this.modelId);
        };
        HouseInformations.prototype.deserializeAs_HouseInformations = function(input) {
            this.houseId = input.readVarUhInt();
            if (this.houseId < 0) {
                throw new Error("Forbidden value (" + this.houseId + ") on element of HouseInformations.houseId.");
            }
            this.modelId = input.readVarUhShort();
            if (this.modelId < 0) {
                throw new Error("Forbidden value (" + this.modelId + ") on element of HouseInformations.modelId.");
            }
        };
        HouseInformations.ID = 5826;
        return HouseInformations;
    })();
    Protocol.HouseInformations = HouseInformations;
    var AccountHouseInformations = (function(_super) {
        __extends(AccountHouseInformations, _super);

        function AccountHouseInformations() {
            this.houseInfos = new HouseInstanceInformations();
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            _super.call(this)
        }
        AccountHouseInformations.prototype.getMessageId = function() {
            return AccountHouseInformations.ID;
        };
        AccountHouseInformations.prototype.reset = function() {
            this.houseInfos = new HouseInstanceInformations();
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
        };
        AccountHouseInformations.prototype.serialize = function(output) {
            this.serializeAs_AccountHouseInformations(output);
        };
        AccountHouseInformations.prototype.deserialize = function(input) {
            this.deserializeAs_AccountHouseInformations(input);
        };
        AccountHouseInformations.prototype.serializeAs_AccountHouseInformations = function(output) {
            _super.prototype.serializeAs_HouseInformations(this, output);
            output.writeShort(this.houseInfos.getTypeId());
            this.houseInfos.serialize(output);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
            }
            output.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
            }
            output.writeShort(this.worldY);
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
        };
        AccountHouseInformations.prototype.deserializeAs_AccountHouseInformations = function(input) {
            _super.prototype.deserializeHouseInformations(this, input);
            var _id1 = input.readUnsignedShort();
            this.houseInfos = ProtocolTypeManager.getInstance(HouseInstanceInformations, _id1);
            this.houseInfos.deserialize(input);
            this.worldX = input.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element of AccountHouseInformations.worldX.");
            }
            this.worldY = input.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element of AccountHouseInformations.worldY.");
            }
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of AccountHouseInformations.mapId.");
            }
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of AccountHouseInformations.subAreaId.");
            }
        };
        AccountHouseInformations.ID = 8916;
        return AccountHouseInformations;
    })(HouseInformations);
    Protocol.AccountHouseInformations = AccountHouseInformations;
    var HouseInstanceInformations = (function() {

        function HouseInstanceInformations() {
            this.instanceId = 0;
            this.secondHand = false;
            this.isLocked = false;
            this.ownerName = "";
            this.price = 0;
            this.isSaleLocked = false;

        }
        HouseInstanceInformations.prototype.getMessageId = function() {
            return HouseInstanceInformations.ID;
        };
        HouseInstanceInformations.prototype.reset = function() {
            this.instanceId = 0;
            this.secondHand = false;
            this.isLocked = false;
            this.ownerName = "";
            this.price = 0;
            this.isSaleLocked = false;
        };
        HouseInstanceInformations.prototype.serialize = function(output) {
            this.serializeAs_HouseInstanceInformations(output);
        };
        HouseInstanceInformations.prototype.deserialize = function(input) {
            this.deserializeAs_HouseInstanceInformations(input);
        };
        HouseInstanceInformations.prototype.serializeAs_HouseInstanceInformations = function(output) {
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.secondHand);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.isLocked);
            _box0 = BooleanByteWrapper.setFlag(_box0, 2, this.isSaleLocked);
            output.writeByte(_box0);
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element instanceId.");
            }
            output.writeInt(this.instanceId);
            output.writeUTF(this.ownerName);
            if (this.price < -9007199254740990 || this.price > 9007199254740990) {
                throw new Error("Forbidden value (" + this.price + ") on element price.");
            }
            output.writeVarLong(this.price);
        };
        HouseInstanceInformations.prototype.deserializeAs_HouseInstanceInformations = function(input) {
            this.deserializeByteBoxes(input);
            this.instanceId = input.readInt();
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element of HouseInstanceInformations.instanceId.");
            }
            this.ownerName = input.readUTF();
            this.price = input.readVarLong();
            if (this.price < -9007199254740990 || this.price > 9007199254740990) {
                throw new Error("Forbidden value (" + this.price + ") on element of HouseInstanceInformations.price.");
            }
        };
        HouseInstanceInformations.ID = 9271;
        return HouseInstanceInformations;
    })();
    Protocol.HouseInstanceInformations = HouseInstanceInformations;
    var HouseGuildedInformations = (function(_super) {
        __extends(HouseGuildedInformations, _super);

        function HouseGuildedInformations() {
            this.guildInfo = new GuildInformations();
            _super.call(this)
        }
        HouseGuildedInformations.prototype.getMessageId = function() {
            return HouseGuildedInformations.ID;
        };
        HouseGuildedInformations.prototype.reset = function() {
            this.guildInfo = new GuildInformations();
        };
        HouseGuildedInformations.prototype.serialize = function(output) {
            this.serializeAs_HouseGuildedInformations(output);
        };
        HouseGuildedInformations.prototype.deserialize = function(input) {
            this.deserializeAs_HouseGuildedInformations(input);
        };
        HouseGuildedInformations.prototype.serializeAs_HouseGuildedInformations = function(output) {
            _super.prototype.serializeAs_HouseInstanceInformations(this, output);
            this.guildInfo.serializeAs_GuildInformations(output);
        };
        HouseGuildedInformations.prototype.deserializeAs_HouseGuildedInformations = function(input) {
            _super.prototype.deserializeHouseInstanceInformations(this, input);
            this.guildInfo = new GuildInformations();
            this.guildInfo.deserialize(input);
        };
        HouseGuildedInformations.ID = 2823;
        return HouseGuildedInformations;
    })(HouseInstanceInformations);
    Protocol.HouseGuildedInformations = HouseGuildedInformations;
    var HouseInformationsForGuild = (function(_super) {
        __extends(HouseInformationsForGuild, _super);

        function HouseInformationsForGuild() {
            this.instanceId = 0;
            this.secondHand = false;
            this.ownerName = "";
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.skillListIds = [];
            this.guildshareParams = 0;
            _super.call(this)
        }
        HouseInformationsForGuild.prototype.getMessageId = function() {
            return HouseInformationsForGuild.ID;
        };
        HouseInformationsForGuild.prototype.reset = function() {
            this.instanceId = 0;
            this.secondHand = false;
            this.ownerName = "";
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.skillListIds = [];
            this.guildshareParams = 0;
        };
        HouseInformationsForGuild.prototype.serialize = function(output) {
            this.serializeAs_HouseInformationsForGuild(output);
        };
        HouseInformationsForGuild.prototype.deserialize = function(input) {
            this.deserializeAs_HouseInformationsForGuild(input);
        };
        HouseInformationsForGuild.prototype.serializeAs_HouseInformationsForGuild = function(output) {
            _super.prototype.serializeAs_HouseInformations(this, output);
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element instanceId.");
            }
            output.writeInt(this.instanceId);
            output.writeBoolean(this.secondHand);
            output.writeUTF(this.ownerName);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
            }
            output.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
            }
            output.writeShort(this.worldY);
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
            output.writeShort(this.skillListIds.length);
            for (var _i8 = 0; _i8 < this.skillListIds.length; _i8++) {
                output.writeInt(this.skillListIds[_i8]);
            }
            if (this.guildshareParams < 0) {
                throw new Error("Forbidden value (" + this.guildshareParams + ") on element guildshareParams.");
            }
            output.writeVarInt(this.guildshareParams);
        };
        HouseInformationsForGuild.prototype.deserializeAs_HouseInformationsForGuild = function(input) {
            var _val8 = 0;
            _super.prototype.deserializeHouseInformations(this, input);
            this.instanceId = input.readInt();
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element of HouseInformationsForGuild.instanceId.");
            }
            this.secondHand = input.readBoolean();
            this.ownerName = input.readUTF();
            this.worldX = input.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element of HouseInformationsForGuild.worldX.");
            }
            this.worldY = input.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element of HouseInformationsForGuild.worldY.");
            }
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of HouseInformationsForGuild.mapId.");
            }
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of HouseInformationsForGuild.subAreaId.");
            }
            var _skillListIdsLen = input.readUnsignedShort();
            for (var _i8 = 0; _i8 < _skillListIdsLen; _i8++) {
                _val8 = input.readInt();
                this.skillListIds.push(_val8);
            }
            this.guildshareParams = input.readVarUhInt();
            if (this.guildshareParams < 0) {
                throw new Error("Forbidden value (" + this.guildshareParams + ") on element of HouseInformationsForGuild.guildshareParams.");
            }
        };
        HouseInformationsForGuild.ID = 6667;
        return HouseInformationsForGuild;
    })(HouseInformations);
    Protocol.HouseInformationsForGuild = HouseInformationsForGuild;
    var HouseInformationsForSell = (function() {

        function HouseInformationsForSell() {
            this.instanceId = 0;
            this.secondHand = false;
            this.modelId = 0;
            this.ownerAccountId = 0;
            this.ownerName = "";
            this.ownerCharacterName = "";
            this.worldX = 0;
            this.worldY = 0;
            this.subAreaId = 0;
            this.nbRoom = 0;
            this.nbChest = 0;
            this.skillListIds = [];
            this.isLocked = false;
            this.price = 0;

        }
        HouseInformationsForSell.prototype.getMessageId = function() {
            return HouseInformationsForSell.ID;
        };
        HouseInformationsForSell.prototype.reset = function() {
            this.instanceId = 0;
            this.secondHand = false;
            this.modelId = 0;
            this.ownerAccountId = 0;
            this.ownerName = "";
            this.ownerCharacterName = "";
            this.worldX = 0;
            this.worldY = 0;
            this.subAreaId = 0;
            this.nbRoom = 0;
            this.nbChest = 0;
            this.skillListIds = [];
            this.isLocked = false;
            this.price = 0;
        };
        HouseInformationsForSell.prototype.serialize = function(output) {
            this.serializeAs_HouseInformationsForSell(output);
        };
        HouseInformationsForSell.prototype.deserialize = function(input) {
            this.deserializeAs_HouseInformationsForSell(input);
        };
        HouseInformationsForSell.prototype.serializeAs_HouseInformationsForSell = function(output) {
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element instanceId.");
            }
            output.writeInt(this.instanceId);
            output.writeBoolean(this.secondHand);
            if (this.modelId < 0) {
                throw new Error("Forbidden value (" + this.modelId + ") on element modelId.");
            }
            output.writeVarInt(this.modelId);
            if (this.ownerAccountId < 0) {
                throw new Error("Forbidden value (" + this.ownerAccountId + ") on element ownerAccountId.");
            }
            output.writeInt(this.ownerAccountId);
            output.writeUTF(this.ownerName);
            output.writeUTF(this.ownerCharacterName);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
            }
            output.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
            }
            output.writeShort(this.worldY);
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
            output.writeByte(this.nbRoom);
            output.writeByte(this.nbChest);
            output.writeShort(this.skillListIds.length);
            for (var _i12 = 0; _i12 < this.skillListIds.length; _i12++) {
                output.writeInt(this.skillListIds[_i12]);
            }
            output.writeBoolean(this.isLocked);
            if (this.price < 0 || this.price > 9007199254740990) {
                throw new Error("Forbidden value (" + this.price + ") on element price.");
            }
            output.writeVarLong(this.price);
        };
        HouseInformationsForSell.prototype.deserializeAs_HouseInformationsForSell = function(input) {
            var _val12 = 0;
            this.instanceId = input.readInt();
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element of HouseInformationsForSell.instanceId.");
            }
            this.secondHand = input.readBoolean();
            this.modelId = input.readVarUhInt();
            if (this.modelId < 0) {
                throw new Error("Forbidden value (" + this.modelId + ") on element of HouseInformationsForSell.modelId.");
            }
            this.ownerAccountId = input.readInt();
            if (this.ownerAccountId < 0) {
                throw new Error("Forbidden value (" + this.ownerAccountId + ") on element of HouseInformationsForSell.ownerAccountId.");
            }
            this.ownerName = input.readUTF();
            this.ownerCharacterName = input.readUTF();
            this.worldX = input.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element of HouseInformationsForSell.worldX.");
            }
            this.worldY = input.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element of HouseInformationsForSell.worldY.");
            }
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of HouseInformationsForSell.subAreaId.");
            }
            this.nbRoom = input.readByte();
            this.nbChest = input.readByte();
            var _skillListIdsLen = input.readUnsignedShort();
            for (var _i12 = 0; _i12 < _skillListIdsLen; _i12++) {
                _val12 = input.readInt();
                this.skillListIds.push(_val12);
            }
            this.isLocked = input.readBoolean();
            this.price = input.readVarUhLong();
            if (this.price < 0 || this.price > 9007199254740990) {
                throw new Error("Forbidden value (" + this.price + ") on element of HouseInformationsForSell.price.");
            }
        };
        HouseInformationsForSell.ID = 8489;
        return HouseInformationsForSell;
    })();
    Protocol.HouseInformationsForSell = HouseInformationsForSell;
    var HouseInformationsInside = (function(_super) {
        __extends(HouseInformationsInside, _super);

        function HouseInformationsInside() {
            this.houseInfos = new HouseInstanceInformations();
            this.worldX = 0;
            this.worldY = 0;
            _super.call(this)
        }
        HouseInformationsInside.prototype.getMessageId = function() {
            return HouseInformationsInside.ID;
        };
        HouseInformationsInside.prototype.reset = function() {
            this.houseInfos = new HouseInstanceInformations();
            this.worldX = 0;
            this.worldY = 0;
        };
        HouseInformationsInside.prototype.serialize = function(output) {
            this.serializeAs_HouseInformationsInside(output);
        };
        HouseInformationsInside.prototype.deserialize = function(input) {
            this.deserializeAs_HouseInformationsInside(input);
        };
        HouseInformationsInside.prototype.serializeAs_HouseInformationsInside = function(output) {
            _super.prototype.serializeAs_HouseInformations(this, output);
            output.writeShort(this.houseInfos.getTypeId());
            this.houseInfos.serialize(output);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
            }
            output.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
            }
            output.writeShort(this.worldY);
        };
        HouseInformationsInside.prototype.deserializeAs_HouseInformationsInside = function(input) {
            _super.prototype.deserializeHouseInformations(this, input);
            var _id1 = input.readUnsignedShort();
            this.houseInfos = ProtocolTypeManager.getInstance(HouseInstanceInformations, _id1);
            this.houseInfos.deserialize(input);
            this.worldX = input.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element of HouseInformationsInside.worldX.");
            }
            this.worldY = input.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element of HouseInformationsInside.worldY.");
            }
        };
        HouseInformationsInside.ID = 2751;
        return HouseInformationsInside;
    })(HouseInformations);
    Protocol.HouseInformationsInside = HouseInformationsInside;
    var HouseOnMapInformations = (function(_super) {
        __extends(HouseOnMapInformations, _super);

        function HouseOnMapInformations() {
            this.doorsOnMap = [];
            this.houseInstances = [];
            _super.call(this)
        }
        HouseOnMapInformations.prototype.getMessageId = function() {
            return HouseOnMapInformations.ID;
        };
        HouseOnMapInformations.prototype.reset = function() {
            this.doorsOnMap = [];
            this.houseInstances = [];
        };
        HouseOnMapInformations.prototype.serialize = function(output) {
            this.serializeAs_HouseOnMapInformations(output);
        };
        HouseOnMapInformations.prototype.deserialize = function(input) {
            this.deserializeAs_HouseOnMapInformations(input);
        };
        HouseOnMapInformations.prototype.serializeAs_HouseOnMapInformations = function(output) {
            _super.prototype.serializeAs_HouseInformations(this, output);
            output.writeShort(this.doorsOnMap.length);
            for (var _i1 = 0; _i1 < this.doorsOnMap.length; _i1++) {
                if (this.doorsOnMap[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.doorsOnMap[_i1] + ") on element 1 (starting at 1) of doorsOnMap.");
                }
                output.writeInt(this.doorsOnMap[_i1]);
            }
            output.writeShort(this.houseInstances.length);
            for (var _i2 = 0; _i2 < this.houseInstances.length; _i2++) {
                (this.houseInstances[_i2]).serializeAs_HouseInstanceInformations(output);
            }
        };
        HouseOnMapInformations.prototype.deserializeAs_HouseOnMapInformations = function(input) {
            var _val1 = 0;
            var _item2 = null;
            _super.prototype.deserializeHouseInformations(this, input);
            var _doorsOnMapLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _doorsOnMapLen; _i1++) {
                _val1 = input.readInt();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of doorsOnMap.");
                }
                this.doorsOnMap.push(_val1);
            }
            var _houseInstancesLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _houseInstancesLen; _i2++) {
                _item2 = new HouseInstanceInformations();
                _item2.deserialize(input);
                this.houseInstances.push(_item2);
            }
        };
        HouseOnMapInformations.ID = 8830;
        return HouseOnMapInformations;
    })(HouseInformations);
    Protocol.HouseOnMapInformations = HouseOnMapInformations;
    var Idol = (function() {

        function Idol() {
            this.id = 0;
            this.xpBonusPercent = 0;
            this.dropBonusPercent = 0;

        }
        Idol.prototype.getMessageId = function() {
            return Idol.ID;
        };
        Idol.prototype.reset = function() {
            this.id = 0;
            this.xpBonusPercent = 0;
            this.dropBonusPercent = 0;
        };
        Idol.prototype.serialize = function(output) {
            this.serializeAs_Idol(output);
        };
        Idol.prototype.deserialize = function(input) {
            this.deserializeAs_Idol(input);
        };
        Idol.prototype.serializeAs_Idol = function(output) {
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarShort(this.id);
            if (this.xpBonusPercent < 0) {
                throw new Error("Forbidden value (" + this.xpBonusPercent + ") on element xpBonusPercent.");
            }
            output.writeVarShort(this.xpBonusPercent);
            if (this.dropBonusPercent < 0) {
                throw new Error("Forbidden value (" + this.dropBonusPercent + ") on element dropBonusPercent.");
            }
            output.writeVarShort(this.dropBonusPercent);
        };
        Idol.prototype.deserializeAs_Idol = function(input) {
            this.id = input.readVarUhShort();
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element of Idol.id.");
            }
            this.xpBonusPercent = input.readVarUhShort();
            if (this.xpBonusPercent < 0) {
                throw new Error("Forbidden value (" + this.xpBonusPercent + ") on element of Idol.xpBonusPercent.");
            }
            this.dropBonusPercent = input.readVarUhShort();
            if (this.dropBonusPercent < 0) {
                throw new Error("Forbidden value (" + this.dropBonusPercent + ") on element of Idol.dropBonusPercent.");
            }
        };
        Idol.ID = 5752;
        return Idol;
    })();
    Protocol.Idol = Idol;
    var PartyIdol = (function(_super) {
        __extends(PartyIdol, _super);

        function PartyIdol() {
            this.ownersIds = [];
            _super.call(this)
        }
        PartyIdol.prototype.getMessageId = function() {
            return PartyIdol.ID;
        };
        PartyIdol.prototype.reset = function() {
            this.ownersIds = [];
        };
        PartyIdol.prototype.serialize = function(output) {
            this.serializeAs_PartyIdol(output);
        };
        PartyIdol.prototype.deserialize = function(input) {
            this.deserializeAs_PartyIdol(input);
        };
        PartyIdol.prototype.serializeAs_PartyIdol = function(output) {
            _super.prototype.serializeAs_Idol(this, output);
            output.writeShort(this.ownersIds.length);
            for (var _i1 = 0; _i1 < this.ownersIds.length; _i1++) {
                if (this.ownersIds[_i1] < 0 || this.ownersIds[_i1] > 9007199254740990) {
                    throw new Error("Forbidden value (" + this.ownersIds[_i1] + ") on element 1 (starting at 1) of ownersIds.");
                }
                output.writeVarLong(this.ownersIds[_i1]);
            }
        };
        PartyIdol.prototype.deserializeAs_PartyIdol = function(input) {
            var _val1 = NaN;
            _super.prototype.deserializeIdol(this, input);
            var _ownersIdsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _ownersIdsLen; _i1++) {
                _val1 = input.readVarUhLong();
                if (_val1 < 0 || _val1 > 9007199254740990) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of ownersIds.");
                }
                this.ownersIds.push(_val1);
            }
        };
        PartyIdol.ID = 5714;
        return PartyIdol;
    })(Idol);
    Protocol.PartyIdol = PartyIdol;
    var InteractiveElement = (function() {

        function InteractiveElement() {
            this.elementId = 0;
            this.elementTypeId = 0;
            this.enabledSkills = [];
            this.disabledSkills = [];
            this.onCurrentMap = false;

        }
        InteractiveElement.prototype.getMessageId = function() {
            return InteractiveElement.ID;
        };
        InteractiveElement.prototype.reset = function() {
            this.elementId = 0;
            this.elementTypeId = 0;
            this.enabledSkills = [];
            this.disabledSkills = [];
            this.onCurrentMap = false;
        };
        InteractiveElement.prototype.serialize = function(output) {
            this.serializeAs_InteractiveElement(output);
        };
        InteractiveElement.prototype.deserialize = function(input) {
            this.deserializeAs_InteractiveElement(input);
        };
        InteractiveElement.prototype.serializeAs_InteractiveElement = function(output) {
            if (this.elementId < 0) {
                throw new Error("Forbidden value (" + this.elementId + ") on element elementId.");
            }
            output.writeInt(this.elementId);
            output.writeInt(this.elementTypeId);
            output.writeShort(this.enabledSkills.length);
            for (var _i3 = 0; _i3 < this.enabledSkills.length; _i3++) {
                output.writeShort((this.enabledSkills[_i3]).getTypeId());
                (this.enabledSkills[_i3]).serialize(output);
            }
            output.writeShort(this.disabledSkills.length);
            for (var _i4 = 0; _i4 < this.disabledSkills.length; _i4++) {
                output.writeShort((this.disabledSkills[_i4]).getTypeId());
                (this.disabledSkills[_i4]).serialize(output);
            }
            output.writeBoolean(this.onCurrentMap);
        };
        InteractiveElement.prototype.deserializeAs_InteractiveElement = function(input) {
            var _id3 = 0;
            var _item3 = null;
            var _id4 = 0;
            var _item4 = null;
            this.elementId = input.readInt();
            if (this.elementId < 0) {
                throw new Error("Forbidden value (" + this.elementId + ") on element of InteractiveElement.elementId.");
            }
            this.elementTypeId = input.readInt();
            var _enabledSkillsLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _enabledSkillsLen; _i3++) {
                _id3 = input.readUnsignedShort();
                _item3 = ProtocolTypeManager.getInstance(InteractiveElementSkill, _id3);
                _item3.deserialize(input);
                this.enabledSkills.push(_item3);
            }
            var _disabledSkillsLen = input.readUnsignedShort();
            for (var _i4 = 0; _i4 < _disabledSkillsLen; _i4++) {
                _id4 = input.readUnsignedShort();
                _item4 = ProtocolTypeManager.getInstance(InteractiveElementSkill, _id4);
                _item4.deserialize(input);
                this.disabledSkills.push(_item4);
            }
            this.onCurrentMap = input.readBoolean();
        };
        InteractiveElement.ID = 2401;
        return InteractiveElement;
    })();
    Protocol.InteractiveElement = InteractiveElement;
    var InteractiveElementSkill = (function() {

        function InteractiveElementSkill() {
            this.skillId = 0;
            this.skillInstanceUid = 0;

        }
        InteractiveElementSkill.prototype.getMessageId = function() {
            return InteractiveElementSkill.ID;
        };
        InteractiveElementSkill.prototype.reset = function() {
            this.skillId = 0;
            this.skillInstanceUid = 0;
        };
        InteractiveElementSkill.prototype.serialize = function(output) {
            this.serializeAs_InteractiveElementSkill(output);
        };
        InteractiveElementSkill.prototype.deserialize = function(input) {
            this.deserializeAs_InteractiveElementSkill(input);
        };
        InteractiveElementSkill.prototype.serializeAs_InteractiveElementSkill = function(output) {
            if (this.skillId < 0) {
                throw new Error("Forbidden value (" + this.skillId + ") on element skillId.");
            }
            output.writeVarInt(this.skillId);
            if (this.skillInstanceUid < 0) {
                throw new Error("Forbidden value (" + this.skillInstanceUid + ") on element skillInstanceUid.");
            }
            output.writeInt(this.skillInstanceUid);
        };
        InteractiveElementSkill.prototype.deserializeAs_InteractiveElementSkill = function(input) {
            this.skillId = input.readVarUhInt();
            if (this.skillId < 0) {
                throw new Error("Forbidden value (" + this.skillId + ") on element of InteractiveElementSkill.skillId.");
            }
            this.skillInstanceUid = input.readInt();
            if (this.skillInstanceUid < 0) {
                throw new Error("Forbidden value (" + this.skillInstanceUid + ") on element of InteractiveElementSkill.skillInstanceUid.");
            }
        };
        InteractiveElementSkill.ID = 6462;
        return InteractiveElementSkill;
    })();
    Protocol.InteractiveElementSkill = InteractiveElementSkill;
    var InteractiveElementNamedSkill = (function(_super) {
        __extends(InteractiveElementNamedSkill, _super);

        function InteractiveElementNamedSkill() {
            this.nameId = 0;
            _super.call(this)
        }
        InteractiveElementNamedSkill.prototype.getMessageId = function() {
            return InteractiveElementNamedSkill.ID;
        };
        InteractiveElementNamedSkill.prototype.reset = function() {
            this.nameId = 0;
        };
        InteractiveElementNamedSkill.prototype.serialize = function(output) {
            this.serializeAs_InteractiveElementNamedSkill(output);
        };
        InteractiveElementNamedSkill.prototype.deserialize = function(input) {
            this.deserializeAs_InteractiveElementNamedSkill(input);
        };
        InteractiveElementNamedSkill.prototype.serializeAs_InteractiveElementNamedSkill = function(output) {
            _super.prototype.serializeAs_InteractiveElementSkill(this, output);
            if (this.nameId < 0) {
                throw new Error("Forbidden value (" + this.nameId + ") on element nameId.");
            }
            output.writeVarInt(this.nameId);
        };
        InteractiveElementNamedSkill.prototype.deserializeAs_InteractiveElementNamedSkill = function(input) {
            _super.prototype.deserializeInteractiveElementSkill(this, input);
            this.nameId = input.readVarUhInt();
            if (this.nameId < 0) {
                throw new Error("Forbidden value (" + this.nameId + ") on element of InteractiveElementNamedSkill.nameId.");
            }
        };
        InteractiveElementNamedSkill.ID = 3347;
        return InteractiveElementNamedSkill;
    })(InteractiveElementSkill);
    Protocol.InteractiveElementNamedSkill = InteractiveElementNamedSkill;
    var InteractiveElementWithAgeBonus = (function(_super) {
        __extends(InteractiveElementWithAgeBonus, _super);

        function InteractiveElementWithAgeBonus() {
            this.ageBonus = 0;
            _super.call(this)
        }
        InteractiveElementWithAgeBonus.prototype.getMessageId = function() {
            return InteractiveElementWithAgeBonus.ID;
        };
        InteractiveElementWithAgeBonus.prototype.reset = function() {
            this.ageBonus = 0;
        };
        InteractiveElementWithAgeBonus.prototype.serialize = function(output) {
            this.serializeAs_InteractiveElementWithAgeBonus(output);
        };
        InteractiveElementWithAgeBonus.prototype.deserialize = function(input) {
            this.deserializeAs_InteractiveElementWithAgeBonus(input);
        };
        InteractiveElementWithAgeBonus.prototype.serializeAs_InteractiveElementWithAgeBonus = function(output) {
            _super.prototype.serializeAs_InteractiveElement(this, output);
            if (this.ageBonus < -1 || this.ageBonus > 1000) {
                throw new Error("Forbidden value (" + this.ageBonus + ") on element ageBonus.");
            }
            output.writeShort(this.ageBonus);
        };
        InteractiveElementWithAgeBonus.prototype.deserializeAs_InteractiveElementWithAgeBonus = function(input) {
            _super.prototype.deserializeInteractiveElement(this, input);
            this.ageBonus = input.readShort();
            if (this.ageBonus < -1 || this.ageBonus > 1000) {
                throw new Error("Forbidden value (" + this.ageBonus + ") on element of InteractiveElementWithAgeBonus.ageBonus.");
            }
        };
        InteractiveElementWithAgeBonus.ID = 1662;
        return InteractiveElementWithAgeBonus;
    })(InteractiveElement);
    Protocol.InteractiveElementWithAgeBonus = InteractiveElementWithAgeBonus;
    var MapObstacle = (function() {

        function MapObstacle() {
            this.obstacleCellId = 0;
            this.state = 0;

        }
        MapObstacle.prototype.getMessageId = function() {
            return MapObstacle.ID;
        };
        MapObstacle.prototype.reset = function() {
            this.obstacleCellId = 0;
            this.state = 0;
        };
        MapObstacle.prototype.serialize = function(output) {
            this.serializeAs_MapObstacle(output);
        };
        MapObstacle.prototype.deserialize = function(input) {
            this.deserializeAs_MapObstacle(input);
        };
        MapObstacle.prototype.serializeAs_MapObstacle = function(output) {
            if (this.obstacleCellId < 0 || this.obstacleCellId > 559) {
                throw new Error("Forbidden value (" + this.obstacleCellId + ") on element obstacleCellId.");
            }
            output.writeVarShort(this.obstacleCellId);
            output.writeByte(this.state);
        };
        MapObstacle.prototype.deserializeAs_MapObstacle = function(input) {
            this.obstacleCellId = input.readVarUhShort();
            if (this.obstacleCellId < 0 || this.obstacleCellId > 559) {
                throw new Error("Forbidden value (" + this.obstacleCellId + ") on element of MapObstacle.obstacleCellId.");
            }
            this.state = input.readByte();
            if (this.state < 0) {
                throw new Error("Forbidden value (" + this.state + ") on element of MapObstacle.state.");
            }
        };
        MapObstacle.ID = 2651;
        return MapObstacle;
    })();
    Protocol.MapObstacle = MapObstacle;
    var SkillActionDescription = (function() {

        function SkillActionDescription() {
            this.skillId = 0;

        }
        SkillActionDescription.prototype.getMessageId = function() {
            return SkillActionDescription.ID;
        };
        SkillActionDescription.prototype.reset = function() {
            this.skillId = 0;
        };
        SkillActionDescription.prototype.serialize = function(output) {
            this.serializeAs_SkillActionDescription(output);
        };
        SkillActionDescription.prototype.deserialize = function(input) {
            this.deserializeAs_SkillActionDescription(input);
        };
        SkillActionDescription.prototype.serializeAs_SkillActionDescription = function(output) {
            if (this.skillId < 0) {
                throw new Error("Forbidden value (" + this.skillId + ") on element skillId.");
            }
            output.writeVarShort(this.skillId);
        };
        SkillActionDescription.prototype.deserializeAs_SkillActionDescription = function(input) {
            this.skillId = input.readVarUhShort();
            if (this.skillId < 0) {
                throw new Error("Forbidden value (" + this.skillId + ") on element of SkillActionDescription.skillId.");
            }
        };
        SkillActionDescription.ID = 4405;
        return SkillActionDescription;
    })();
    Protocol.SkillActionDescription = SkillActionDescription;
    var SkillActionDescriptionTimed = (function(_super) {
        __extends(SkillActionDescriptionTimed, _super);

        function SkillActionDescriptionTimed() {
            this.time = 0;
            _super.call(this)
        }
        SkillActionDescriptionTimed.prototype.getMessageId = function() {
            return SkillActionDescriptionTimed.ID;
        };
        SkillActionDescriptionTimed.prototype.reset = function() {
            this.time = 0;
        };
        SkillActionDescriptionTimed.prototype.serialize = function(output) {
            this.serializeAs_SkillActionDescriptionTimed(output);
        };
        SkillActionDescriptionTimed.prototype.deserialize = function(input) {
            this.deserializeAs_SkillActionDescriptionTimed(input);
        };
        SkillActionDescriptionTimed.prototype.serializeAs_SkillActionDescriptionTimed = function(output) {
            _super.prototype.serializeAs_SkillActionDescription(this, output);
            if (this.time < 0 || this.time > 255) {
                throw new Error("Forbidden value (" + this.time + ") on element time.");
            }
            output.writeByte(this.time);
        };
        SkillActionDescriptionTimed.prototype.deserializeAs_SkillActionDescriptionTimed = function(input) {
            _super.prototype.deserializeSkillActionDescription(this, input);
            this.time = input.readUnsignedByte();
            if (this.time < 0 || this.time > 255) {
                throw new Error("Forbidden value (" + this.time + ") on element of SkillActionDescriptionTimed.time.");
            }
        };
        SkillActionDescriptionTimed.ID = 263;
        return SkillActionDescriptionTimed;
    })(SkillActionDescription);
    Protocol.SkillActionDescriptionTimed = SkillActionDescriptionTimed;
    var SkillActionDescriptionCollect = (function(_super) {
        __extends(SkillActionDescriptionCollect, _super);

        function SkillActionDescriptionCollect() {
            this.min = 0;
            this.max = 0;
            _super.call(this)
        }
        SkillActionDescriptionCollect.prototype.getMessageId = function() {
            return SkillActionDescriptionCollect.ID;
        };
        SkillActionDescriptionCollect.prototype.reset = function() {
            this.min = 0;
            this.max = 0;
        };
        SkillActionDescriptionCollect.prototype.serialize = function(output) {
            this.serializeAs_SkillActionDescriptionCollect(output);
        };
        SkillActionDescriptionCollect.prototype.deserialize = function(input) {
            this.deserializeAs_SkillActionDescriptionCollect(input);
        };
        SkillActionDescriptionCollect.prototype.serializeAs_SkillActionDescriptionCollect = function(output) {
            _super.prototype.serializeAs_SkillActionDescriptionTimed(this, output);
            if (this.min < 0) {
                throw new Error("Forbidden value (" + this.min + ") on element min.");
            }
            output.writeVarShort(this.min);
            if (this.max < 0) {
                throw new Error("Forbidden value (" + this.max + ") on element max.");
            }
            output.writeVarShort(this.max);
        };
        SkillActionDescriptionCollect.prototype.deserializeAs_SkillActionDescriptionCollect = function(input) {
            _super.prototype.deserializeSkillActionDescriptionTimed(this, input);
            this.min = input.readVarUhShort();
            if (this.min < 0) {
                throw new Error("Forbidden value (" + this.min + ") on element of SkillActionDescriptionCollect.min.");
            }
            this.max = input.readVarUhShort();
            if (this.max < 0) {
                throw new Error("Forbidden value (" + this.max + ") on element of SkillActionDescriptionCollect.max.");
            }
        };
        SkillActionDescriptionCollect.ID = 6581;
        return SkillActionDescriptionCollect;
    })(SkillActionDescriptionTimed);
    Protocol.SkillActionDescriptionCollect = SkillActionDescriptionCollect;
    var SkillActionDescriptionCraft = (function(_super) {
        __extends(SkillActionDescriptionCraft, _super);

        function SkillActionDescriptionCraft() {
            this.probability = 0;
            _super.call(this)
        }
        SkillActionDescriptionCraft.prototype.getMessageId = function() {
            return SkillActionDescriptionCraft.ID;
        };
        SkillActionDescriptionCraft.prototype.reset = function() {
            this.probability = 0;
        };
        SkillActionDescriptionCraft.prototype.serialize = function(output) {
            this.serializeAs_SkillActionDescriptionCraft(output);
        };
        SkillActionDescriptionCraft.prototype.deserialize = function(input) {
            this.deserializeAs_SkillActionDescriptionCraft(input);
        };
        SkillActionDescriptionCraft.prototype.serializeAs_SkillActionDescriptionCraft = function(output) {
            _super.prototype.serializeAs_SkillActionDescription(this, output);
            if (this.probability < 0) {
                throw new Error("Forbidden value (" + this.probability + ") on element probability.");
            }
            output.writeByte(this.probability);
        };
        SkillActionDescriptionCraft.prototype.deserializeAs_SkillActionDescriptionCraft = function(input) {
            _super.prototype.deserializeSkillActionDescription(this, input);
            this.probability = input.readByte();
            if (this.probability < 0) {
                throw new Error("Forbidden value (" + this.probability + ") on element of SkillActionDescriptionCraft.probability.");
            }
        };
        SkillActionDescriptionCraft.ID = 8967;
        return SkillActionDescriptionCraft;
    })(SkillActionDescription);
    Protocol.SkillActionDescriptionCraft = SkillActionDescriptionCraft;
    var StatedElement = (function() {

        function StatedElement() {
            this.elementId = 0;
            this.elementCellId = 0;
            this.elementState = 0;
            this.onCurrentMap = false;

        }
        StatedElement.prototype.getMessageId = function() {
            return StatedElement.ID;
        };
        StatedElement.prototype.reset = function() {
            this.elementId = 0;
            this.elementCellId = 0;
            this.elementState = 0;
            this.onCurrentMap = false;
        };
        StatedElement.prototype.serialize = function(output) {
            this.serializeAs_StatedElement(output);
        };
        StatedElement.prototype.deserialize = function(input) {
            this.deserializeAs_StatedElement(input);
        };
        StatedElement.prototype.serializeAs_StatedElement = function(output) {
            if (this.elementId < 0) {
                throw new Error("Forbidden value (" + this.elementId + ") on element elementId.");
            }
            output.writeInt(this.elementId);
            if (this.elementCellId < 0 || this.elementCellId > 559) {
                throw new Error("Forbidden value (" + this.elementCellId + ") on element elementCellId.");
            }
            output.writeVarShort(this.elementCellId);
            if (this.elementState < 0) {
                throw new Error("Forbidden value (" + this.elementState + ") on element elementState.");
            }
            output.writeVarInt(this.elementState);
            output.writeBoolean(this.onCurrentMap);
        };
        StatedElement.prototype.deserializeAs_StatedElement = function(input) {
            this.elementId = input.readInt();
            if (this.elementId < 0) {
                throw new Error("Forbidden value (" + this.elementId + ") on element of StatedElement.elementId.");
            }
            this.elementCellId = input.readVarUhShort();
            if (this.elementCellId < 0 || this.elementCellId > 559) {
                throw new Error("Forbidden value (" + this.elementCellId + ") on element of StatedElement.elementCellId.");
            }
            this.elementState = input.readVarUhInt();
            if (this.elementState < 0) {
                throw new Error("Forbidden value (" + this.elementState + ") on element of StatedElement.elementState.");
            }
            this.onCurrentMap = input.readBoolean();
        };
        StatedElement.ID = 8031;
        return StatedElement;
    })();
    Protocol.StatedElement = StatedElement;
    var TeleportDestination = (function() {

        function TeleportDestination() {
            this.type = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.level = 0;
            this.cost = 0;

        }
        TeleportDestination.prototype.getMessageId = function() {
            return TeleportDestination.ID;
        };
        TeleportDestination.prototype.reset = function() {
            this.type = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.level = 0;
            this.cost = 0;
        };
        TeleportDestination.prototype.serialize = function(output) {
            this.serializeAs_TeleportDestination(output);
        };
        TeleportDestination.prototype.deserialize = function(input) {
            this.deserializeAs_TeleportDestination(input);
        };
        TeleportDestination.prototype.serializeAs_TeleportDestination = function(output) {
            output.writeByte(this.type);
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeVarShort(this.level);
            if (this.cost < 0) {
                throw new Error("Forbidden value (" + this.cost + ") on element cost.");
            }
            output.writeVarShort(this.cost);
        };
        TeleportDestination.prototype.deserializeAs_TeleportDestination = function(input) {
            this.type = input.readByte();
            if (this.type < 0) {
                throw new Error("Forbidden value (" + this.type + ") on element of TeleportDestination.type.");
            }
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of TeleportDestination.mapId.");
            }
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of TeleportDestination.subAreaId.");
            }
            this.level = input.readVarUhShort();
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element of TeleportDestination.level.");
            }
            this.cost = input.readVarUhShort();
            if (this.cost < 0) {
                throw new Error("Forbidden value (" + this.cost + ") on element of TeleportDestination.cost.");
            }
        };
        TeleportDestination.ID = 3911;
        return TeleportDestination;
    })();
    Protocol.TeleportDestination = TeleportDestination;
    var RecycledItem = (function() {

        function RecycledItem() {
            this.id = 0;
            this.qty = 0;

        }
        RecycledItem.prototype.getMessageId = function() {
            return RecycledItem.ID;
        };
        RecycledItem.prototype.reset = function() {
            this.id = 0;
            this.qty = 0;
        };
        RecycledItem.prototype.serialize = function(output) {
            this.serializeAs_RecycledItem(output);
        };
        RecycledItem.prototype.deserialize = function(input) {
            this.deserializeAs_RecycledItem(input);
        };
        RecycledItem.prototype.serializeAs_RecycledItem = function(output) {
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarShort(this.id);
            if (this.qty < 0 || this.qty > 4294967295) {
                throw new Error("Forbidden value (" + this.qty + ") on element qty.");
            }
            output.writeUnsignedInt(this.qty);
        };
        RecycledItem.prototype.deserializeAs_RecycledItem = function(input) {
            this.id = input.readVarUhShort();
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element of RecycledItem.id.");
            }
            this.qty = input.readUnsignedInt();
            if (this.qty < 0 || this.qty > 4294967295) {
                throw new Error("Forbidden value (" + this.qty + ") on element of RecycledItem.qty.");
            }
        };
        RecycledItem.ID = 3630;
        return RecycledItem;
    })();
    Protocol.RecycledItem = RecycledItem;
    var EntityLook = (function() {

        function EntityLook() {
            this.bonesId = 0;
            this.skins = [];
            this.indexedColors = [];
            this.scales = [];
            this.subentities = [];

        }
        EntityLook.prototype.getMessageId = function() {
            return EntityLook.ID;
        };
        EntityLook.prototype.reset = function() {
            this.bonesId = 0;
            this.skins = [];
            this.indexedColors = [];
            this.scales = [];
            this.subentities = [];
        };
        EntityLook.prototype.serialize = function(output) {
            this.serializeAs_EntityLook(output);
        };
        EntityLook.prototype.deserialize = function(input) {
            this.deserializeAs_EntityLook(input);
        };
        EntityLook.prototype.serializeAs_EntityLook = function(output) {
            if (this.bonesId < 0) {
                throw new Error("Forbidden value (" + this.bonesId + ") on element bonesId.");
            }
            output.writeVarShort(this.bonesId);
            output.writeShort(this.skins.length);
            for (var _i2 = 0; _i2 < this.skins.length; _i2++) {
                if (this.skins[_i2] < 0) {
                    throw new Error("Forbidden value (" + this.skins[_i2] + ") on element 2 (starting at 1) of skins.");
                }
                output.writeVarShort(this.skins[_i2]);
            }
            output.writeShort(this.indexedColors.length);
            for (var _i3 = 0; _i3 < this.indexedColors.length; _i3++) {
                output.writeInt(this.indexedColors[_i3]);
            }
            output.writeShort(this.scales.length);
            for (var _i4 = 0; _i4 < this.scales.length; _i4++) {
                output.writeVarShort(this.scales[_i4]);
            }
            output.writeShort(this.subentities.length);
            for (var _i5 = 0; _i5 < this.subentities.length; _i5++) {
                (this.subentities[_i5]).serializeAs_SubEntity(output);
            }
        };
        EntityLook.prototype.deserializeAs_EntityLook = function(input) {
            var _val2 = 0;
            var _val3 = 0;
            var _val4 = 0;
            var _item5 = null;
            this.bonesId = input.readVarUhShort();
            if (this.bonesId < 0) {
                throw new Error("Forbidden value (" + this.bonesId + ") on element of EntityLook.bonesId.");
            }
            var _skinsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _skinsLen; _i2++) {
                _val2 = input.readVarUhShort();
                if (_val2 < 0) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of skins.");
                }
                this.skins.push(_val2);
            }
            var _indexedColorsLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _indexedColorsLen; _i3++) {
                _val3 = input.readInt();
                this.indexedColors.push(_val3);
            }
            var _scalesLen = input.readUnsignedShort();
            for (var _i4 = 0; _i4 < _scalesLen; _i4++) {
                _val4 = input.readVarShort();
                this.scales.push(_val4);
            }
            var _subentitiesLen = input.readUnsignedShort();
            for (var _i5 = 0; _i5 < _subentitiesLen; _i5++) {
                _item5 = new SubEntity();
                _item5.deserialize(input);
                this.subentities.push(_item5);
            }
        };
        EntityLook.ID = 2892;
        return EntityLook;
    })();
    Protocol.EntityLook = EntityLook;
    var IndexedEntityLook = (function() {

        function IndexedEntityLook() {
            this.look = new EntityLook();
            this.index = 0;

        }
        IndexedEntityLook.prototype.getMessageId = function() {
            return IndexedEntityLook.ID;
        };
        IndexedEntityLook.prototype.reset = function() {
            this.look = new EntityLook();
            this.index = 0;
        };
        IndexedEntityLook.prototype.serialize = function(output) {
            this.serializeAs_IndexedEntityLook(output);
        };
        IndexedEntityLook.prototype.deserialize = function(input) {
            this.deserializeAs_IndexedEntityLook(input);
        };
        IndexedEntityLook.prototype.serializeAs_IndexedEntityLook = function(output) {
            this.look.serializeAs_EntityLook(output);
            if (this.index < 0) {
                throw new Error("Forbidden value (" + this.index + ") on element index.");
            }
            output.writeByte(this.index);
        };
        IndexedEntityLook.prototype.deserializeAs_IndexedEntityLook = function(input) {
            this.look = new EntityLook();
            this.look.deserialize(input);
            this.index = input.readByte();
            if (this.index < 0) {
                throw new Error("Forbidden value (" + this.index + ") on element of IndexedEntityLook.index.");
            }
        };
        IndexedEntityLook.ID = 2950;
        return IndexedEntityLook;
    })();
    Protocol.IndexedEntityLook = IndexedEntityLook;
    var SubEntity = (function() {

        function SubEntity() {
            this.bindingPointCategory = 0;
            this.bindingPointIndex = 0;
            this.subEntityLook = new EntityLook();

        }
        SubEntity.prototype.getMessageId = function() {
            return SubEntity.ID;
        };
        SubEntity.prototype.reset = function() {
            this.bindingPointCategory = 0;
            this.bindingPointIndex = 0;
            this.subEntityLook = new EntityLook();
        };
        SubEntity.prototype.serialize = function(output) {
            this.serializeAs_SubEntity(output);
        };
        SubEntity.prototype.deserialize = function(input) {
            this.deserializeAs_SubEntity(input);
        };
        SubEntity.prototype.serializeAs_SubEntity = function(output) {
            output.writeByte(this.bindingPointCategory);
            if (this.bindingPointIndex < 0) {
                throw new Error("Forbidden value (" + this.bindingPointIndex + ") on element bindingPointIndex.");
            }
            output.writeByte(this.bindingPointIndex);
            this.subEntityLook.serializeAs_EntityLook(output);
        };
        SubEntity.prototype.deserializeAs_SubEntity = function(input) {
            this.bindingPointCategory = input.readByte();
            if (this.bindingPointCategory < 0) {
                throw new Error("Forbidden value (" + this.bindingPointCategory + ") on element of SubEntity.bindingPointCategory.");
            }
            this.bindingPointIndex = input.readByte();
            if (this.bindingPointIndex < 0) {
                throw new Error("Forbidden value (" + this.bindingPointIndex + ") on element of SubEntity.bindingPointIndex.");
            }
            this.subEntityLook = new EntityLook();
            this.subEntityLook.deserialize(input);
        };
        SubEntity.ID = 5174;
        return SubEntity;
    })();
    Protocol.SubEntity = SubEntity;
    var ItemDurability = (function() {

        function ItemDurability() {
            this.durability = 0;
            this.durabilityMax = 0;

        }
        ItemDurability.prototype.getMessageId = function() {
            return ItemDurability.ID;
        };
        ItemDurability.prototype.reset = function() {
            this.durability = 0;
            this.durabilityMax = 0;
        };
        ItemDurability.prototype.serialize = function(output) {
            this.serializeAs_ItemDurability(output);
        };
        ItemDurability.prototype.deserialize = function(input) {
            this.deserializeAs_ItemDurability(input);
        };
        ItemDurability.prototype.serializeAs_ItemDurability = function(output) {
            output.writeShort(this.durability);
            output.writeShort(this.durabilityMax);
        };
        ItemDurability.prototype.deserializeAs_ItemDurability = function(input) {
            this.durability = input.readShort();
            this.durabilityMax = input.readShort();
        };
        ItemDurability.ID = 5623;
        return ItemDurability;
    })();
    Protocol.ItemDurability = ItemDurability;
    var MountClientData = (function() {

        function MountClientData() {
            this.id = 0;
            this.model = 0;
            this.ancestor = [];
            this.behaviors = [];
            this.name = "";
            this.sex = false;
            this.ownerId = 0;
            this.experience = 0;
            this.experienceForLevel = 0;
            this.experienceForNextLevel = 0;
            this.level = 0;
            this.isRideable = false;
            this.maxPods = 0;
            this.isWild = false;
            this.stamina = 0;
            this.staminaMax = 0;
            this.maturity = 0;
            this.maturityForAdult = 0;
            this.energy = 0;
            this.energyMax = 0;
            this.serenity = 0;
            this.aggressivityMax = 0;
            this.serenityMax = 0;
            this.love = 0;
            this.loveMax = 0;
            this.fecondationTime = 0;
            this.isFecondationReady = false;
            this.boostLimiter = 0;
            this.boostMax = 0;
            this.reproductionCount = 0;
            this.reproductionCountMax = 0;
            this.harnessGID = 0;
            this.useHarnessColors = false;
            this.effectList = [];

        }
        MountClientData.prototype.getMessageId = function() {
            return MountClientData.ID;
        };
        MountClientData.prototype.reset = function() {
            this.id = 0;
            this.model = 0;
            this.ancestor = [];
            this.behaviors = [];
            this.name = "";
            this.sex = false;
            this.ownerId = 0;
            this.experience = 0;
            this.experienceForLevel = 0;
            this.experienceForNextLevel = 0;
            this.level = 0;
            this.isRideable = false;
            this.maxPods = 0;
            this.isWild = false;
            this.stamina = 0;
            this.staminaMax = 0;
            this.maturity = 0;
            this.maturityForAdult = 0;
            this.energy = 0;
            this.energyMax = 0;
            this.serenity = 0;
            this.aggressivityMax = 0;
            this.serenityMax = 0;
            this.love = 0;
            this.loveMax = 0;
            this.fecondationTime = 0;
            this.isFecondationReady = false;
            this.boostLimiter = 0;
            this.boostMax = 0;
            this.reproductionCount = 0;
            this.reproductionCountMax = 0;
            this.harnessGID = 0;
            this.useHarnessColors = false;
            this.effectList = [];
        };
        MountClientData.prototype.serialize = function(output) {
            this.serializeAs_MountClientData(output);
        };
        MountClientData.prototype.deserialize = function(input) {
            this.deserializeAs_MountClientData(input);
        };
        MountClientData.prototype.serializeAs_MountClientData = function(output) {
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.sex);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.isRideable);
            _box0 = BooleanByteWrapper.setFlag(_box0, 2, this.isWild);
            _box0 = BooleanByteWrapper.setFlag(_box0, 3, this.isFecondationReady);
            _box0 = BooleanByteWrapper.setFlag(_box0, 4, this.useHarnessColors);
            output.writeByte(_box0);
            if (this.id < -9007199254740990 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeDouble(this.id);
            if (this.model < 0) {
                throw new Error("Forbidden value (" + this.model + ") on element model.");
            }
            output.writeVarInt(this.model);
            output.writeShort(this.ancestor.length);
            for (var _i3 = 0; _i3 < this.ancestor.length; _i3++) {
                if (this.ancestor[_i3] < 0) {
                    throw new Error("Forbidden value (" + this.ancestor[_i3] + ") on element 3 (starting at 1) of ancestor.");
                }
                output.writeInt(this.ancestor[_i3]);
            }
            output.writeShort(this.behaviors.length);
            for (var _i4 = 0; _i4 < this.behaviors.length; _i4++) {
                if (this.behaviors[_i4] < 0) {
                    throw new Error("Forbidden value (" + this.behaviors[_i4] + ") on element 4 (starting at 1) of behaviors.");
                }
                output.writeInt(this.behaviors[_i4]);
            }
            output.writeUTF(this.name);
            if (this.ownerId < 0) {
                throw new Error("Forbidden value (" + this.ownerId + ") on element ownerId.");
            }
            output.writeInt(this.ownerId);
            if (this.experience < 0 || this.experience > 9007199254740990) {
                throw new Error("Forbidden value (" + this.experience + ") on element experience.");
            }
            output.writeVarLong(this.experience);
            if (this.experienceForLevel < 0 || this.experienceForLevel > 9007199254740990) {
                throw new Error("Forbidden value (" + this.experienceForLevel + ") on element experienceForLevel.");
            }
            output.writeVarLong(this.experienceForLevel);
            if (this.experienceForNextLevel < -9007199254740990 || this.experienceForNextLevel > 9007199254740990) {
                throw new Error("Forbidden value (" + this.experienceForNextLevel + ") on element experienceForNextLevel.");
            }
            output.writeDouble(this.experienceForNextLevel);
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeByte(this.level);
            if (this.maxPods < 0) {
                throw new Error("Forbidden value (" + this.maxPods + ") on element maxPods.");
            }
            output.writeVarInt(this.maxPods);
            if (this.stamina < 0) {
                throw new Error("Forbidden value (" + this.stamina + ") on element stamina.");
            }
            output.writeVarInt(this.stamina);
            if (this.staminaMax < 0) {
                throw new Error("Forbidden value (" + this.staminaMax + ") on element staminaMax.");
            }
            output.writeVarInt(this.staminaMax);
            if (this.maturity < 0) {
                throw new Error("Forbidden value (" + this.maturity + ") on element maturity.");
            }
            output.writeVarInt(this.maturity);
            if (this.maturityForAdult < 0) {
                throw new Error("Forbidden value (" + this.maturityForAdult + ") on element maturityForAdult.");
            }
            output.writeVarInt(this.maturityForAdult);
            if (this.energy < 0) {
                throw new Error("Forbidden value (" + this.energy + ") on element energy.");
            }
            output.writeVarInt(this.energy);
            if (this.energyMax < 0) {
                throw new Error("Forbidden value (" + this.energyMax + ") on element energyMax.");
            }
            output.writeVarInt(this.energyMax);
            output.writeInt(this.serenity);
            output.writeInt(this.aggressivityMax);
            if (this.serenityMax < 0) {
                throw new Error("Forbidden value (" + this.serenityMax + ") on element serenityMax.");
            }
            output.writeVarInt(this.serenityMax);
            if (this.love < 0) {
                throw new Error("Forbidden value (" + this.love + ") on element love.");
            }
            output.writeVarInt(this.love);
            if (this.loveMax < 0) {
                throw new Error("Forbidden value (" + this.loveMax + ") on element loveMax.");
            }
            output.writeVarInt(this.loveMax);
            output.writeInt(this.fecondationTime);
            if (this.boostLimiter < 0) {
                throw new Error("Forbidden value (" + this.boostLimiter + ") on element boostLimiter.");
            }
            output.writeInt(this.boostLimiter);
            if (this.boostMax < -9007199254740990 || this.boostMax > 9007199254740990) {
                throw new Error("Forbidden value (" + this.boostMax + ") on element boostMax.");
            }
            output.writeDouble(this.boostMax);
            output.writeInt(this.reproductionCount);
            if (this.reproductionCountMax < 0) {
                throw new Error("Forbidden value (" + this.reproductionCountMax + ") on element reproductionCountMax.");
            }
            output.writeVarInt(this.reproductionCountMax);
            if (this.harnessGID < 0) {
                throw new Error("Forbidden value (" + this.harnessGID + ") on element harnessGID.");
            }
            output.writeVarShort(this.harnessGID);
            output.writeShort(this.effectList.length);
            for (var _i34 = 0; _i34 < this.effectList.length; _i34++) {
                (this.effectList[_i34]).serializeAs_ObjectEffectInteger(output);
            }
        };
        MountClientData.prototype.deserializeAs_MountClientData = function(input) {
            var _val3 = 0;
            var _val4 = 0;
            var _item34 = null;
            this.deserializeByteBoxes(input);
            this.id = input.readDouble();
            if (this.id < -9007199254740990 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element of MountClientData.id.");
            }
            this.model = input.readVarUhInt();
            if (this.model < 0) {
                throw new Error("Forbidden value (" + this.model + ") on element of MountClientData.model.");
            }
            var _ancestorLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _ancestorLen; _i3++) {
                _val3 = input.readInt();
                if (_val3 < 0) {
                    throw new Error("Forbidden value (" + _val3 + ") on elements of ancestor.");
                }
                this.ancestor.push(_val3);
            }
            var _behaviorsLen = input.readUnsignedShort();
            for (var _i4 = 0; _i4 < _behaviorsLen; _i4++) {
                _val4 = input.readInt();
                if (_val4 < 0) {
                    throw new Error("Forbidden value (" + _val4 + ") on elements of behaviors.");
                }
                this.behaviors.push(_val4);
            }
            this.name = input.readUTF();
            this.ownerId = input.readInt();
            if (this.ownerId < 0) {
                throw new Error("Forbidden value (" + this.ownerId + ") on element of MountClientData.ownerId.");
            }
            this.experience = input.readVarUhLong();
            if (this.experience < 0 || this.experience > 9007199254740990) {
                throw new Error("Forbidden value (" + this.experience + ") on element of MountClientData.experience.");
            }
            this.experienceForLevel = input.readVarUhLong();
            if (this.experienceForLevel < 0 || this.experienceForLevel > 9007199254740990) {
                throw new Error("Forbidden value (" + this.experienceForLevel + ") on element of MountClientData.experienceForLevel.");
            }
            this.experienceForNextLevel = input.readDouble();
            if (this.experienceForNextLevel < -9007199254740990 || this.experienceForNextLevel > 9007199254740990) {
                throw new Error("Forbidden value (" + this.experienceForNextLevel + ") on element of MountClientData.experienceForNextLevel.");
            }
            this.level = input.readByte();
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element of MountClientData.level.");
            }
            this.maxPods = input.readVarUhInt();
            if (this.maxPods < 0) {
                throw new Error("Forbidden value (" + this.maxPods + ") on element of MountClientData.maxPods.");
            }
            this.stamina = input.readVarUhInt();
            if (this.stamina < 0) {
                throw new Error("Forbidden value (" + this.stamina + ") on element of MountClientData.stamina.");
            }
            this.staminaMax = input.readVarUhInt();
            if (this.staminaMax < 0) {
                throw new Error("Forbidden value (" + this.staminaMax + ") on element of MountClientData.staminaMax.");
            }
            this.maturity = input.readVarUhInt();
            if (this.maturity < 0) {
                throw new Error("Forbidden value (" + this.maturity + ") on element of MountClientData.maturity.");
            }
            this.maturityForAdult = input.readVarUhInt();
            if (this.maturityForAdult < 0) {
                throw new Error("Forbidden value (" + this.maturityForAdult + ") on element of MountClientData.maturityForAdult.");
            }
            this.energy = input.readVarUhInt();
            if (this.energy < 0) {
                throw new Error("Forbidden value (" + this.energy + ") on element of MountClientData.energy.");
            }
            this.energyMax = input.readVarUhInt();
            if (this.energyMax < 0) {
                throw new Error("Forbidden value (" + this.energyMax + ") on element of MountClientData.energyMax.");
            }
            this.serenity = input.readInt();
            this.aggressivityMax = input.readInt();
            this.serenityMax = input.readVarUhInt();
            if (this.serenityMax < 0) {
                throw new Error("Forbidden value (" + this.serenityMax + ") on element of MountClientData.serenityMax.");
            }
            this.love = input.readVarUhInt();
            if (this.love < 0) {
                throw new Error("Forbidden value (" + this.love + ") on element of MountClientData.love.");
            }
            this.loveMax = input.readVarUhInt();
            if (this.loveMax < 0) {
                throw new Error("Forbidden value (" + this.loveMax + ") on element of MountClientData.loveMax.");
            }
            this.fecondationTime = input.readInt();
            this.boostLimiter = input.readInt();
            if (this.boostLimiter < 0) {
                throw new Error("Forbidden value (" + this.boostLimiter + ") on element of MountClientData.boostLimiter.");
            }
            this.boostMax = input.readDouble();
            if (this.boostMax < -9007199254740990 || this.boostMax > 9007199254740990) {
                throw new Error("Forbidden value (" + this.boostMax + ") on element of MountClientData.boostMax.");
            }
            this.reproductionCount = input.readInt();
            this.reproductionCountMax = input.readVarUhInt();
            if (this.reproductionCountMax < 0) {
                throw new Error("Forbidden value (" + this.reproductionCountMax + ") on element of MountClientData.reproductionCountMax.");
            }
            this.harnessGID = input.readVarUhShort();
            if (this.harnessGID < 0) {
                throw new Error("Forbidden value (" + this.harnessGID + ") on element of MountClientData.harnessGID.");
            }
            var _effectListLen = input.readUnsignedShort();
            for (var _i34 = 0; _i34 < _effectListLen; _i34++) {
                _item34 = new ObjectEffectInteger();
                _item34.deserialize(input);
                this.effectList.push(_item34);
            }
        };
        MountClientData.ID = 3510;
        return MountClientData;
    })();
    Protocol.MountClientData = MountClientData;
    var UpdateMountCharacteristic = (function() {

        function UpdateMountCharacteristic() {
            this.type = 0;

        }
        UpdateMountCharacteristic.prototype.getMessageId = function() {
            return UpdateMountCharacteristic.ID;
        };
        UpdateMountCharacteristic.prototype.reset = function() {
            this.type = 0;
        };
        UpdateMountCharacteristic.prototype.serialize = function(output) {
            this.serializeAs_UpdateMountCharacteristic(output);
        };
        UpdateMountCharacteristic.prototype.deserialize = function(input) {
            this.deserializeAs_UpdateMountCharacteristic(input);
        };
        UpdateMountCharacteristic.prototype.serializeAs_UpdateMountCharacteristic = function(output) {
            output.writeByte(this.type);
        };
        UpdateMountCharacteristic.prototype.deserializeAs_UpdateMountCharacteristic = function(input) {
            this.type = input.readByte();
            if (this.type < 0) {
                throw new Error("Forbidden value (" + this.type + ") on element of UpdateMountCharacteristic.type.");
            }
        };
        UpdateMountCharacteristic.ID = 3205;
        return UpdateMountCharacteristic;
    })();
    Protocol.UpdateMountCharacteristic = UpdateMountCharacteristic;
    var UpdateMountBooleanCharacteristic = (function(_super) {
        __extends(UpdateMountBooleanCharacteristic, _super);

        function UpdateMountBooleanCharacteristic() {
            this.value = false;
            _super.call(this)
        }
        UpdateMountBooleanCharacteristic.prototype.getMessageId = function() {
            return UpdateMountBooleanCharacteristic.ID;
        };
        UpdateMountBooleanCharacteristic.prototype.reset = function() {
            this.value = false;
        };
        UpdateMountBooleanCharacteristic.prototype.serialize = function(output) {
            this.serializeAs_UpdateMountBooleanCharacteristic(output);
        };
        UpdateMountBooleanCharacteristic.prototype.deserialize = function(input) {
            this.deserializeAs_UpdateMountBooleanCharacteristic(input);
        };
        UpdateMountBooleanCharacteristic.prototype.serializeAs_UpdateMountBooleanCharacteristic = function(output) {
            _super.prototype.serializeAs_UpdateMountCharacteristic(this, output);
            output.writeBoolean(this.value);
        };
        UpdateMountBooleanCharacteristic.prototype.deserializeAs_UpdateMountBooleanCharacteristic = function(input) {
            _super.prototype.deserializeUpdateMountCharacteristic(this, input);
            this.value = input.readBoolean();
        };
        UpdateMountBooleanCharacteristic.ID = 4340;
        return UpdateMountBooleanCharacteristic;
    })(UpdateMountCharacteristic);
    Protocol.UpdateMountBooleanCharacteristic = UpdateMountBooleanCharacteristic;
    var UpdateMountIntegerCharacteristic = (function(_super) {
        __extends(UpdateMountIntegerCharacteristic, _super);

        function UpdateMountIntegerCharacteristic() {
            this.value = 0;
            _super.call(this)
        }
        UpdateMountIntegerCharacteristic.prototype.getMessageId = function() {
            return UpdateMountIntegerCharacteristic.ID;
        };
        UpdateMountIntegerCharacteristic.prototype.reset = function() {
            this.value = 0;
        };
        UpdateMountIntegerCharacteristic.prototype.serialize = function(output) {
            this.serializeAs_UpdateMountIntegerCharacteristic(output);
        };
        UpdateMountIntegerCharacteristic.prototype.deserialize = function(input) {
            this.deserializeAs_UpdateMountIntegerCharacteristic(input);
        };
        UpdateMountIntegerCharacteristic.prototype.serializeAs_UpdateMountIntegerCharacteristic = function(output) {
            _super.prototype.serializeAs_UpdateMountCharacteristic(this, output);
            output.writeInt(this.value);
        };
        UpdateMountIntegerCharacteristic.prototype.deserializeAs_UpdateMountIntegerCharacteristic = function(input) {
            _super.prototype.deserializeUpdateMountCharacteristic(this, input);
            this.value = input.readInt();
        };
        UpdateMountIntegerCharacteristic.ID = 4162;
        return UpdateMountIntegerCharacteristic;
    })(UpdateMountCharacteristic);
    Protocol.UpdateMountIntegerCharacteristic = UpdateMountIntegerCharacteristic;
    var MountInformationsForPaddock = (function() {

        function MountInformationsForPaddock() {
            this.modelId = 0;
            this.name = "";
            this.ownerName = "";

        }
        MountInformationsForPaddock.prototype.getMessageId = function() {
            return MountInformationsForPaddock.ID;
        };
        MountInformationsForPaddock.prototype.reset = function() {
            this.modelId = 0;
            this.name = "";
            this.ownerName = "";
        };
        MountInformationsForPaddock.prototype.serialize = function(output) {
            this.serializeAs_MountInformationsForPaddock(output);
        };
        MountInformationsForPaddock.prototype.deserialize = function(input) {
            this.deserializeAs_MountInformationsForPaddock(input);
        };
        MountInformationsForPaddock.prototype.serializeAs_MountInformationsForPaddock = function(output) {
            if (this.modelId < 0) {
                throw new Error("Forbidden value (" + this.modelId + ") on element modelId.");
            }
            output.writeVarShort(this.modelId);
            output.writeUTF(this.name);
            output.writeUTF(this.ownerName);
        };
        MountInformationsForPaddock.prototype.deserializeAs_MountInformationsForPaddock = function(input) {
            this.modelId = input.readVarUhShort();
            if (this.modelId < 0) {
                throw new Error("Forbidden value (" + this.modelId + ") on element of MountInformationsForPaddock.modelId.");
            }
            this.name = input.readUTF();
            this.ownerName = input.readUTF();
        };
        MountInformationsForPaddock.ID = 4454;
        return MountInformationsForPaddock;
    })();
    Protocol.MountInformationsForPaddock = MountInformationsForPaddock;
    var PaddockBuyableInformations = (function() {

        function PaddockBuyableInformations() {
            this.price = 0;
            this.locked = false;

        }
        PaddockBuyableInformations.prototype.getMessageId = function() {
            return PaddockBuyableInformations.ID;
        };
        PaddockBuyableInformations.prototype.reset = function() {
            this.price = 0;
            this.locked = false;
        };
        PaddockBuyableInformations.prototype.serialize = function(output) {
            this.serializeAs_PaddockBuyableInformations(output);
        };
        PaddockBuyableInformations.prototype.deserialize = function(input) {
            this.deserializeAs_PaddockBuyableInformations(input);
        };
        PaddockBuyableInformations.prototype.serializeAs_PaddockBuyableInformations = function(output) {
            if (this.price < 0 || this.price > 9007199254740990) {
                throw new Error("Forbidden value (" + this.price + ") on element price.");
            }
            output.writeVarLong(this.price);
            output.writeBoolean(this.locked);
        };
        PaddockBuyableInformations.prototype.deserializeAs_PaddockBuyableInformations = function(input) {
            this.price = input.readVarUhLong();
            if (this.price < 0 || this.price > 9007199254740990) {
                throw new Error("Forbidden value (" + this.price + ") on element of PaddockBuyableInformations.price.");
            }
            this.locked = input.readBoolean();
        };
        PaddockBuyableInformations.ID = 4662;
        return PaddockBuyableInformations;
    })();
    Protocol.PaddockBuyableInformations = PaddockBuyableInformations;
    var PaddockInformations = (function() {

        function PaddockInformations() {
            this.maxOutdoorMount = 0;
            this.maxItems = 0;

        }
        PaddockInformations.prototype.getMessageId = function() {
            return PaddockInformations.ID;
        };
        PaddockInformations.prototype.reset = function() {
            this.maxOutdoorMount = 0;
            this.maxItems = 0;
        };
        PaddockInformations.prototype.serialize = function(output) {
            this.serializeAs_PaddockInformations(output);
        };
        PaddockInformations.prototype.deserialize = function(input) {
            this.deserializeAs_PaddockInformations(input);
        };
        PaddockInformations.prototype.serializeAs_PaddockInformations = function(output) {
            if (this.maxOutdoorMount < 0) {
                throw new Error("Forbidden value (" + this.maxOutdoorMount + ") on element maxOutdoorMount.");
            }
            output.writeVarShort(this.maxOutdoorMount);
            if (this.maxItems < 0) {
                throw new Error("Forbidden value (" + this.maxItems + ") on element maxItems.");
            }
            output.writeVarShort(this.maxItems);
        };
        PaddockInformations.prototype.deserializeAs_PaddockInformations = function(input) {
            this.maxOutdoorMount = input.readVarUhShort();
            if (this.maxOutdoorMount < 0) {
                throw new Error("Forbidden value (" + this.maxOutdoorMount + ") on element of PaddockInformations.maxOutdoorMount.");
            }
            this.maxItems = input.readVarUhShort();
            if (this.maxItems < 0) {
                throw new Error("Forbidden value (" + this.maxItems + ") on element of PaddockInformations.maxItems.");
            }
        };
        PaddockInformations.ID = 1824;
        return PaddockInformations;
    })();
    Protocol.PaddockInformations = PaddockInformations;
    var PaddockContentInformations = (function(_super) {
        __extends(PaddockContentInformations, _super);

        function PaddockContentInformations() {
            this.paddockId = 0;
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.abandonned = false;
            this.mountsInformations = [];
            _super.call(this)
        }
        PaddockContentInformations.prototype.getMessageId = function() {
            return PaddockContentInformations.ID;
        };
        PaddockContentInformations.prototype.reset = function() {
            this.paddockId = 0;
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.abandonned = false;
            this.mountsInformations = [];
        };
        PaddockContentInformations.prototype.serialize = function(output) {
            this.serializeAs_PaddockContentInformations(output);
        };
        PaddockContentInformations.prototype.deserialize = function(input) {
            this.deserializeAs_PaddockContentInformations(input);
        };
        PaddockContentInformations.prototype.serializeAs_PaddockContentInformations = function(output) {
            _super.prototype.serializeAs_PaddockInformations(this, output);
            if (this.paddockId < 0 || this.paddockId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.paddockId + ") on element paddockId.");
            }
            output.writeDouble(this.paddockId);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
            }
            output.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
            }
            output.writeShort(this.worldY);
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
            output.writeBoolean(this.abandonned);
            output.writeShort(this.mountsInformations.length);
            for (var _i7 = 0; _i7 < this.mountsInformations.length; _i7++) {
                (this.mountsInformations[_i7]).serializeAs_MountInformationsForPaddock(output);
            }
        };
        PaddockContentInformations.prototype.deserializeAs_PaddockContentInformations = function(input) {
            var _item7 = null;
            _super.prototype.deserializePaddockInformations(this, input);
            this.paddockId = input.readDouble();
            if (this.paddockId < 0 || this.paddockId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.paddockId + ") on element of PaddockContentInformations.paddockId.");
            }
            this.worldX = input.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element of PaddockContentInformations.worldX.");
            }
            this.worldY = input.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element of PaddockContentInformations.worldY.");
            }
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of PaddockContentInformations.mapId.");
            }
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of PaddockContentInformations.subAreaId.");
            }
            this.abandonned = input.readBoolean();
            var _mountsInformationsLen = input.readUnsignedShort();
            for (var _i7 = 0; _i7 < _mountsInformationsLen; _i7++) {
                _item7 = new MountInformationsForPaddock();
                _item7.deserialize(input);
                this.mountsInformations.push(_item7);
            }
        };
        PaddockContentInformations.ID = 4735;
        return PaddockContentInformations;
    })(PaddockInformations);
    Protocol.PaddockContentInformations = PaddockContentInformations;
    var PaddockGuildedInformations = (function(_super) {
        __extends(PaddockGuildedInformations, _super);

        function PaddockGuildedInformations() {
            this.deserted = false;
            this.guildInfo = new GuildInformations();
            _super.call(this)
        }
        PaddockGuildedInformations.prototype.getMessageId = function() {
            return PaddockGuildedInformations.ID;
        };
        PaddockGuildedInformations.prototype.reset = function() {
            this.deserted = false;
            this.guildInfo = new GuildInformations();
        };
        PaddockGuildedInformations.prototype.serialize = function(output) {
            this.serializeAs_PaddockGuildedInformations(output);
        };
        PaddockGuildedInformations.prototype.deserialize = function(input) {
            this.deserializeAs_PaddockGuildedInformations(input);
        };
        PaddockGuildedInformations.prototype.serializeAs_PaddockGuildedInformations = function(output) {
            _super.prototype.serializeAs_PaddockBuyableInformations(this, output);
            output.writeBoolean(this.deserted);
            this.guildInfo.serializeAs_GuildInformations(output);
        };
        PaddockGuildedInformations.prototype.deserializeAs_PaddockGuildedInformations = function(input) {
            _super.prototype.deserializePaddockBuyableInformations(this, input);
            this.deserted = input.readBoolean();
            this.guildInfo = new GuildInformations();
            this.guildInfo.deserialize(input);
        };
        PaddockGuildedInformations.ID = 5112;
        return PaddockGuildedInformations;
    })(PaddockBuyableInformations);
    Protocol.PaddockGuildedInformations = PaddockGuildedInformations;
    var PaddockInformationsForSell = (function() {

        function PaddockInformationsForSell() {
            this.guildOwner = "";
            this.worldX = 0;
            this.worldY = 0;
            this.subAreaId = 0;
            this.nbMount = 0;
            this.nbObject = 0;
            this.price = 0;

        }
        PaddockInformationsForSell.prototype.getMessageId = function() {
            return PaddockInformationsForSell.ID;
        };
        PaddockInformationsForSell.prototype.reset = function() {
            this.guildOwner = "";
            this.worldX = 0;
            this.worldY = 0;
            this.subAreaId = 0;
            this.nbMount = 0;
            this.nbObject = 0;
            this.price = 0;
        };
        PaddockInformationsForSell.prototype.serialize = function(output) {
            this.serializeAs_PaddockInformationsForSell(output);
        };
        PaddockInformationsForSell.prototype.deserialize = function(input) {
            this.deserializeAs_PaddockInformationsForSell(input);
        };
        PaddockInformationsForSell.prototype.serializeAs_PaddockInformationsForSell = function(output) {
            output.writeUTF(this.guildOwner);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
            }
            output.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
            }
            output.writeShort(this.worldY);
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
            output.writeByte(this.nbMount);
            output.writeByte(this.nbObject);
            if (this.price < 0 || this.price > 9007199254740990) {
                throw new Error("Forbidden value (" + this.price + ") on element price.");
            }
            output.writeVarLong(this.price);
        };
        PaddockInformationsForSell.prototype.deserializeAs_PaddockInformationsForSell = function(input) {
            this.guildOwner = input.readUTF();
            this.worldX = input.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element of PaddockInformationsForSell.worldX.");
            }
            this.worldY = input.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element of PaddockInformationsForSell.worldY.");
            }
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of PaddockInformationsForSell.subAreaId.");
            }
            this.nbMount = input.readByte();
            this.nbObject = input.readByte();
            this.price = input.readVarUhLong();
            if (this.price < 0 || this.price > 9007199254740990) {
                throw new Error("Forbidden value (" + this.price + ") on element of PaddockInformationsForSell.price.");
            }
        };
        PaddockInformationsForSell.ID = 4946;
        return PaddockInformationsForSell;
    })();
    Protocol.PaddockInformationsForSell = PaddockInformationsForSell;
    var PaddockInstancesInformations = (function(_super) {
        __extends(PaddockInstancesInformations, _super);

        function PaddockInstancesInformations() {
            this.paddocks = [];
            _super.call(this)
        }
        PaddockInstancesInformations.prototype.getMessageId = function() {
            return PaddockInstancesInformations.ID;
        };
        PaddockInstancesInformations.prototype.reset = function() {
            this.paddocks = [];
        };
        PaddockInstancesInformations.prototype.serialize = function(output) {
            this.serializeAs_PaddockInstancesInformations(output);
        };
        PaddockInstancesInformations.prototype.deserialize = function(input) {
            this.deserializeAs_PaddockInstancesInformations(input);
        };
        PaddockInstancesInformations.prototype.serializeAs_PaddockInstancesInformations = function(output) {
            _super.prototype.serializeAs_PaddockInformations(this, output);
            output.writeShort(this.paddocks.length);
            for (var _i1 = 0; _i1 < this.paddocks.length; _i1++) {
                output.writeShort((this.paddocks[_i1]).getTypeId());
                (this.paddocks[_i1]).serialize(output);
            }
        };
        PaddockInstancesInformations.prototype.deserializeAs_PaddockInstancesInformations = function(input) {
            var _id1 = 0;
            var _item1 = null;
            _super.prototype.deserializePaddockInformations(this, input);
            var _paddocksLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _paddocksLen; _i1++) {
                _id1 = input.readUnsignedShort();
                _item1 = ProtocolTypeManager.getInstance(PaddockBuyableInformations, _id1);
                _item1.deserialize(input);
                this.paddocks.push(_item1);
            }
        };
        PaddockInstancesInformations.ID = 4322;
        return PaddockInstancesInformations;
    })(PaddockInformations);
    Protocol.PaddockInstancesInformations = PaddockInstancesInformations;
    var PaddockItem = (function(_super) {
        __extends(PaddockItem, _super);

        function PaddockItem() {
            this.durability = new ItemDurability();
            _super.call(this)
        }
        PaddockItem.prototype.getMessageId = function() {
            return PaddockItem.ID;
        };
        PaddockItem.prototype.reset = function() {
            this.durability = new ItemDurability();
        };
        PaddockItem.prototype.serialize = function(output) {
            this.serializeAs_PaddockItem(output);
        };
        PaddockItem.prototype.deserialize = function(input) {
            this.deserializeAs_PaddockItem(input);
        };
        PaddockItem.prototype.serializeAs_PaddockItem = function(output) {
            _super.prototype.serializeAs_ObjectItemInRolePlay(this, output);
            this.durability.serializeAs_ItemDurability(output);
        };
        PaddockItem.prototype.deserializeAs_PaddockItem = function(input) {
            _super.prototype.deserializeObjectItemInRolePlay(this, input);
            this.durability = new ItemDurability();
            this.durability.deserialize(input);
        };
        PaddockItem.ID = 5602;
        return PaddockItem;
    })(ObjectItemInRolePlay);
    Protocol.PaddockItem = PaddockItem;
    var SimpleCharacterCharacteristicForPreset = (function() {

        function SimpleCharacterCharacteristicForPreset() {
            this.keyword = "";
            this.base = 0;
            this.additionnal = 0;

        }
        SimpleCharacterCharacteristicForPreset.prototype.getMessageId = function() {
            return SimpleCharacterCharacteristicForPreset.ID;
        };
        SimpleCharacterCharacteristicForPreset.prototype.reset = function() {
            this.keyword = "";
            this.base = 0;
            this.additionnal = 0;
        };
        SimpleCharacterCharacteristicForPreset.prototype.serialize = function(output) {
            this.serializeAs_SimpleCharacterCharacteristicForPreset(output);
        };
        SimpleCharacterCharacteristicForPreset.prototype.deserialize = function(input) {
            this.deserializeAs_SimpleCharacterCharacteristicForPreset(input);
        };
        SimpleCharacterCharacteristicForPreset.prototype.serializeAs_SimpleCharacterCharacteristicForPreset = function(output) {
            output.writeUTF(this.keyword);
            output.writeVarShort(this.base);
            output.writeVarShort(this.additionnal);
        };
        SimpleCharacterCharacteristicForPreset.prototype.deserializeAs_SimpleCharacterCharacteristicForPreset = function(input) {
            this.keyword = input.readUTF();
            this.base = input.readVarShort();
            this.additionnal = input.readVarShort();
        };
        SimpleCharacterCharacteristicForPreset.ID = 1231;
        return SimpleCharacterCharacteristicForPreset;
    })();
    Protocol.SimpleCharacterCharacteristicForPreset = SimpleCharacterCharacteristicForPreset;
    var CharacterCharacteristicForPreset = (function(_super) {
        __extends(CharacterCharacteristicForPreset, _super);

        function CharacterCharacteristicForPreset() {
            this.stuff = 0;
            _super.call(this)
        }
        CharacterCharacteristicForPreset.prototype.getMessageId = function() {
            return CharacterCharacteristicForPreset.ID;
        };
        CharacterCharacteristicForPreset.prototype.reset = function() {
            this.stuff = 0;
        };
        CharacterCharacteristicForPreset.prototype.serialize = function(output) {
            this.serializeAs_CharacterCharacteristicForPreset(output);
        };
        CharacterCharacteristicForPreset.prototype.deserialize = function(input) {
            this.deserializeAs_CharacterCharacteristicForPreset(input);
        };
        CharacterCharacteristicForPreset.prototype.serializeAs_CharacterCharacteristicForPreset = function(output) {
            _super.prototype.serializeAs_SimpleCharacterCharacteristicForPreset(this, output);
            output.writeVarShort(this.stuff);
        };
        CharacterCharacteristicForPreset.prototype.deserializeAs_CharacterCharacteristicForPreset = function(input) {
            _super.prototype.deserializeSimpleCharacterCharacteristicForPreset(this, input);
            this.stuff = input.readVarShort();
        };
        CharacterCharacteristicForPreset.ID = 7508;
        return CharacterCharacteristicForPreset;
    })(SimpleCharacterCharacteristicForPreset);
    Protocol.CharacterCharacteristicForPreset = CharacterCharacteristicForPreset;
    var Preset = (function() {

        function Preset() {
            this.id = 0;

        }
        Preset.prototype.getMessageId = function() {
            return Preset.ID;
        };
        Preset.prototype.reset = function() {
            this.id = 0;
        };
        Preset.prototype.serialize = function(output) {
            this.serializeAs_Preset(output);
        };
        Preset.prototype.deserialize = function(input) {
            this.deserializeAs_Preset(input);
        };
        Preset.prototype.serializeAs_Preset = function(output) {
            output.writeShort(this.id);
        };
        Preset.prototype.deserializeAs_Preset = function(input) {
            this.id = input.readShort();
        };
        Preset.ID = 2126;
        return Preset;
    })();
    Protocol.Preset = Preset;
    var EntitiesPreset = (function(_super) {
        __extends(EntitiesPreset, _super);

        function EntitiesPreset() {
            this.iconId = 0;
            this.entityIds = [];
            _super.call(this)
        }
        EntitiesPreset.prototype.getMessageId = function() {
            return EntitiesPreset.ID;
        };
        EntitiesPreset.prototype.reset = function() {
            this.iconId = 0;
            this.entityIds = [];
        };
        EntitiesPreset.prototype.serialize = function(output) {
            this.serializeAs_EntitiesPreset(output);
        };
        EntitiesPreset.prototype.deserialize = function(input) {
            this.deserializeAs_EntitiesPreset(input);
        };
        EntitiesPreset.prototype.serializeAs_EntitiesPreset = function(output) {
            _super.prototype.serializeAs_Preset(this, output);
            if (this.iconId < 0) {
                throw new Error("Forbidden value (" + this.iconId + ") on element iconId.");
            }
            output.writeShort(this.iconId);
            output.writeShort(this.entityIds.length);
            for (var _i2 = 0; _i2 < this.entityIds.length; _i2++) {
                if (this.entityIds[_i2] < 0) {
                    throw new Error("Forbidden value (" + this.entityIds[_i2] + ") on element 2 (starting at 1) of entityIds.");
                }
                output.writeVarShort(this.entityIds[_i2]);
            }
        };
        EntitiesPreset.prototype.deserializeAs_EntitiesPreset = function(input) {
            var _val2 = 0;
            _super.prototype.deserializePreset(this, input);
            this.iconId = input.readShort();
            if (this.iconId < 0) {
                throw new Error("Forbidden value (" + this.iconId + ") on element of EntitiesPreset.iconId.");
            }
            var _entityIdsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _entityIdsLen; _i2++) {
                _val2 = input.readVarUhShort();
                if (_val2 < 0) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of entityIds.");
                }
                this.entityIds.push(_val2);
            }
        };
        EntitiesPreset.ID = 4714;
        return EntitiesPreset;
    })(Preset);
    Protocol.EntitiesPreset = EntitiesPreset;
    var ForgettableSpellsPreset = (function(_super) {
        __extends(ForgettableSpellsPreset, _super);

        function ForgettableSpellsPreset() {
            this.baseSpellsPreset = new SpellsPreset();
            this.forgettableSpells = [];
            _super.call(this)
        }
        ForgettableSpellsPreset.prototype.getMessageId = function() {
            return ForgettableSpellsPreset.ID;
        };
        ForgettableSpellsPreset.prototype.reset = function() {
            this.baseSpellsPreset = new SpellsPreset();
            this.forgettableSpells = [];
        };
        ForgettableSpellsPreset.prototype.serialize = function(output) {
            this.serializeAs_ForgettableSpellsPreset(output);
        };
        ForgettableSpellsPreset.prototype.deserialize = function(input) {
            this.deserializeAs_ForgettableSpellsPreset(input);
        };
        ForgettableSpellsPreset.prototype.serializeAs_ForgettableSpellsPreset = function(output) {
            _super.prototype.serializeAs_Preset(this, output);
            this.baseSpellsPreset.serializeAs_SpellsPreset(output);
            output.writeShort(this.forgettableSpells.length);
            for (var _i2 = 0; _i2 < this.forgettableSpells.length; _i2++) {
                (this.forgettableSpells[_i2]).serializeAs_SpellForPreset(output);
            }
        };
        ForgettableSpellsPreset.prototype.deserializeAs_ForgettableSpellsPreset = function(input) {
            var _item2 = null;
            _super.prototype.deserializePreset(this, input);
            this.baseSpellsPreset = new SpellsPreset();
            this.baseSpellsPreset.deserialize(input);
            var _forgettableSpellsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _forgettableSpellsLen; _i2++) {
                _item2 = new SpellForPreset();
                _item2.deserialize(input);
                this.forgettableSpells.push(_item2);
            }
        };
        ForgettableSpellsPreset.ID = 7096;
        return ForgettableSpellsPreset;
    })(Preset);
    Protocol.ForgettableSpellsPreset = ForgettableSpellsPreset;
    var FullStatsPreset = (function(_super) {
        __extends(FullStatsPreset, _super);

        function FullStatsPreset() {
            this.stats = [];
            _super.call(this)
        }
        FullStatsPreset.prototype.getMessageId = function() {
            return FullStatsPreset.ID;
        };
        FullStatsPreset.prototype.reset = function() {
            this.stats = [];
        };
        FullStatsPreset.prototype.serialize = function(output) {
            this.serializeAs_FullStatsPreset(output);
        };
        FullStatsPreset.prototype.deserialize = function(input) {
            this.deserializeAs_FullStatsPreset(input);
        };
        FullStatsPreset.prototype.serializeAs_FullStatsPreset = function(output) {
            _super.prototype.serializeAs_Preset(this, output);
            output.writeShort(this.stats.length);
            for (var _i1 = 0; _i1 < this.stats.length; _i1++) {
                (this.stats[_i1]).serializeAs_CharacterCharacteristicForPreset(output);
            }
        };
        FullStatsPreset.prototype.deserializeAs_FullStatsPreset = function(input) {
            var _item1 = null;
            _super.prototype.deserializePreset(this, input);
            var _statsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _statsLen; _i1++) {
                _item1 = new CharacterCharacteristicForPreset();
                _item1.deserialize(input);
                this.stats.push(_item1);
            }
        };
        FullStatsPreset.ID = 7986;
        return FullStatsPreset;
    })(Preset);
    Protocol.FullStatsPreset = FullStatsPreset;
    var PresetsContainerPreset = (function(_super) {
        __extends(PresetsContainerPreset, _super);

        function PresetsContainerPreset() {
            this.presets = [];
            _super.call(this)
        }
        PresetsContainerPreset.prototype.getMessageId = function() {
            return PresetsContainerPreset.ID;
        };
        PresetsContainerPreset.prototype.reset = function() {
            this.presets = [];
        };
        PresetsContainerPreset.prototype.serialize = function(output) {
            this.serializeAs_PresetsContainerPreset(output);
        };
        PresetsContainerPreset.prototype.deserialize = function(input) {
            this.deserializeAs_PresetsContainerPreset(input);
        };
        PresetsContainerPreset.prototype.serializeAs_PresetsContainerPreset = function(output) {
            _super.prototype.serializeAs_Preset(this, output);
            output.writeShort(this.presets.length);
            for (var _i1 = 0; _i1 < this.presets.length; _i1++) {
                output.writeShort((this.presets[_i1]).getTypeId());
                (this.presets[_i1]).serialize(output);
            }
        };
        PresetsContainerPreset.prototype.deserializeAs_PresetsContainerPreset = function(input) {
            var _id1 = 0;
            var _item1 = null;
            _super.prototype.deserializePreset(this, input);
            var _presetsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _presetsLen; _i1++) {
                _id1 = input.readUnsignedShort();
                _item1 = ProtocolTypeManager.getInstance(Preset, _id1);
                _item1.deserialize(input);
                this.presets.push(_item1);
            }
        };
        PresetsContainerPreset.ID = 2645;
        return PresetsContainerPreset;
    })(Preset);
    Protocol.PresetsContainerPreset = PresetsContainerPreset;
    var IconNamedPreset = (function(_super) {
        __extends(IconNamedPreset, _super);

        function IconNamedPreset() {
            this.iconId = 0;
            this.name = "";
            _super.call(this)
        }
        IconNamedPreset.prototype.getMessageId = function() {
            return IconNamedPreset.ID;
        };
        IconNamedPreset.prototype.reset = function() {
            this.iconId = 0;
            this.name = "";
        };
        IconNamedPreset.prototype.serialize = function(output) {
            this.serializeAs_IconNamedPreset(output);
        };
        IconNamedPreset.prototype.deserialize = function(input) {
            this.deserializeAs_IconNamedPreset(input);
        };
        IconNamedPreset.prototype.serializeAs_IconNamedPreset = function(output) {
            _super.prototype.serializeAs_PresetsContainerPreset(this, output);
            if (this.iconId < 0) {
                throw new Error("Forbidden value (" + this.iconId + ") on element iconId.");
            }
            output.writeShort(this.iconId);
            output.writeUTF(this.name);
        };
        IconNamedPreset.prototype.deserializeAs_IconNamedPreset = function(input) {
            _super.prototype.deserializePresetsContainerPreset(this, input);
            this.iconId = input.readShort();
            if (this.iconId < 0) {
                throw new Error("Forbidden value (" + this.iconId + ") on element of IconNamedPreset.iconId.");
            }
            this.name = input.readUTF();
        };
        IconNamedPreset.ID = 3146;
        return IconNamedPreset;
    })(PresetsContainerPreset);
    Protocol.IconNamedPreset = IconNamedPreset;
    var IdolsPreset = (function(_super) {
        __extends(IdolsPreset, _super);

        function IdolsPreset() {
            this.iconId = 0;
            this.idolIds = [];
            _super.call(this)
        }
        IdolsPreset.prototype.getMessageId = function() {
            return IdolsPreset.ID;
        };
        IdolsPreset.prototype.reset = function() {
            this.iconId = 0;
            this.idolIds = [];
        };
        IdolsPreset.prototype.serialize = function(output) {
            this.serializeAs_IdolsPreset(output);
        };
        IdolsPreset.prototype.deserialize = function(input) {
            this.deserializeAs_IdolsPreset(input);
        };
        IdolsPreset.prototype.serializeAs_IdolsPreset = function(output) {
            _super.prototype.serializeAs_Preset(this, output);
            if (this.iconId < 0) {
                throw new Error("Forbidden value (" + this.iconId + ") on element iconId.");
            }
            output.writeShort(this.iconId);
            output.writeShort(this.idolIds.length);
            for (var _i2 = 0; _i2 < this.idolIds.length; _i2++) {
                if (this.idolIds[_i2] < 0) {
                    throw new Error("Forbidden value (" + this.idolIds[_i2] + ") on element 2 (starting at 1) of idolIds.");
                }
                output.writeVarShort(this.idolIds[_i2]);
            }
        };
        IdolsPreset.prototype.deserializeAs_IdolsPreset = function(input) {
            var _val2 = 0;
            _super.prototype.deserializePreset(this, input);
            this.iconId = input.readShort();
            if (this.iconId < 0) {
                throw new Error("Forbidden value (" + this.iconId + ") on element of IdolsPreset.iconId.");
            }
            var _idolIdsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _idolIdsLen; _i2++) {
                _val2 = input.readVarUhShort();
                if (_val2 < 0) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of idolIds.");
                }
                this.idolIds.push(_val2);
            }
        };
        IdolsPreset.ID = 1498;
        return IdolsPreset;
    })(Preset);
    Protocol.IdolsPreset = IdolsPreset;
    var ItemForPreset = (function() {

        function ItemForPreset() {
            this.position = 63;
            this.objGid = 0;
            this.objUid = 0;

        }
        ItemForPreset.prototype.getMessageId = function() {
            return ItemForPreset.ID;
        };
        ItemForPreset.prototype.reset = function() {
            this.position = 63;
            this.objGid = 0;
            this.objUid = 0;
        };
        ItemForPreset.prototype.serialize = function(output) {
            this.serializeAs_ItemForPreset(output);
        };
        ItemForPreset.prototype.deserialize = function(input) {
            this.deserializeAs_ItemForPreset(input);
        };
        ItemForPreset.prototype.serializeAs_ItemForPreset = function(output) {
            output.writeShort(this.position);
            if (this.objGid < 0) {
                throw new Error("Forbidden value (" + this.objGid + ") on element objGid.");
            }
            output.writeVarShort(this.objGid);
            if (this.objUid < 0) {
                throw new Error("Forbidden value (" + this.objUid + ") on element objUid.");
            }
            output.writeVarInt(this.objUid);
        };
        ItemForPreset.prototype.deserializeAs_ItemForPreset = function(input) {
            this.position = input.readShort();
            if (this.position < 0) {
                throw new Error("Forbidden value (" + this.position + ") on element of ItemForPreset.position.");
            }
            this.objGid = input.readVarUhShort();
            if (this.objGid < 0) {
                throw new Error("Forbidden value (" + this.objGid + ") on element of ItemForPreset.objGid.");
            }
            this.objUid = input.readVarUhInt();
            if (this.objUid < 0) {
                throw new Error("Forbidden value (" + this.objUid + ") on element of ItemForPreset.objUid.");
            }
        };
        ItemForPreset.ID = 6103;
        return ItemForPreset;
    })();
    Protocol.ItemForPreset = ItemForPreset;
    var ItemsPreset = (function(_super) {
        __extends(ItemsPreset, _super);

        function ItemsPreset() {
            this.items = [];
            this.mountEquipped = false;
            this.look = new EntityLook();
            _super.call(this)
        }
        ItemsPreset.prototype.getMessageId = function() {
            return ItemsPreset.ID;
        };
        ItemsPreset.prototype.reset = function() {
            this.items = [];
            this.mountEquipped = false;
            this.look = new EntityLook();
        };
        ItemsPreset.prototype.serialize = function(output) {
            this.serializeAs_ItemsPreset(output);
        };
        ItemsPreset.prototype.deserialize = function(input) {
            this.deserializeAs_ItemsPreset(input);
        };
        ItemsPreset.prototype.serializeAs_ItemsPreset = function(output) {
            _super.prototype.serializeAs_Preset(this, output);
            output.writeShort(this.items.length);
            for (var _i1 = 0; _i1 < this.items.length; _i1++) {
                (this.items[_i1]).serializeAs_ItemForPreset(output);
            }
            output.writeBoolean(this.mountEquipped);
            this.look.serializeAs_EntityLook(output);
        };
        ItemsPreset.prototype.deserializeAs_ItemsPreset = function(input) {
            var _item1 = null;
            _super.prototype.deserializePreset(this, input);
            var _itemsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _itemsLen; _i1++) {
                _item1 = new ItemForPreset();
                _item1.deserialize(input);
                this.items.push(_item1);
            }
            this.mountEquipped = input.readBoolean();
            this.look = new EntityLook();
            this.look.deserialize(input);
        };
        ItemsPreset.ID = 870;
        return ItemsPreset;
    })(Preset);
    Protocol.ItemsPreset = ItemsPreset;
    var SpellForPreset = (function() {

        function SpellForPreset() {
            this.spellId = 0;
            this.shortcuts = [];

        }
        SpellForPreset.prototype.getMessageId = function() {
            return SpellForPreset.ID;
        };
        SpellForPreset.prototype.reset = function() {
            this.spellId = 0;
            this.shortcuts = [];
        };
        SpellForPreset.prototype.serialize = function(output) {
            this.serializeAs_SpellForPreset(output);
        };
        SpellForPreset.prototype.deserialize = function(input) {
            this.deserializeAs_SpellForPreset(input);
        };
        SpellForPreset.prototype.serializeAs_SpellForPreset = function(output) {
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
            }
            output.writeVarShort(this.spellId);
            output.writeShort(this.shortcuts.length);
            for (var _i2 = 0; _i2 < this.shortcuts.length; _i2++) {
                output.writeShort(this.shortcuts[_i2]);
            }
        };
        SpellForPreset.prototype.deserializeAs_SpellForPreset = function(input) {
            var _val2 = 0;
            this.spellId = input.readVarUhShort();
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element of SpellForPreset.spellId.");
            }
            var _shortcutsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _shortcutsLen; _i2++) {
                _val2 = input.readShort();
                this.shortcuts.push(_val2);
            }
        };
        SpellForPreset.ID = 6884;
        return SpellForPreset;
    })();
    Protocol.SpellForPreset = SpellForPreset;
    var SpellsPreset = (function(_super) {
        __extends(SpellsPreset, _super);

        function SpellsPreset() {
            this.spells = [];
            _super.call(this)
        }
        SpellsPreset.prototype.getMessageId = function() {
            return SpellsPreset.ID;
        };
        SpellsPreset.prototype.reset = function() {
            this.spells = [];
        };
        SpellsPreset.prototype.serialize = function(output) {
            this.serializeAs_SpellsPreset(output);
        };
        SpellsPreset.prototype.deserialize = function(input) {
            this.deserializeAs_SpellsPreset(input);
        };
        SpellsPreset.prototype.serializeAs_SpellsPreset = function(output) {
            _super.prototype.serializeAs_Preset(this, output);
            output.writeShort(this.spells.length);
            for (var _i1 = 0; _i1 < this.spells.length; _i1++) {
                (this.spells[_i1]).serializeAs_SpellForPreset(output);
            }
        };
        SpellsPreset.prototype.deserializeAs_SpellsPreset = function(input) {
            var _item1 = null;
            _super.prototype.deserializePreset(this, input);
            var _spellsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _spellsLen; _i1++) {
                _item1 = new SpellForPreset();
                _item1.deserialize(input);
                this.spells.push(_item1);
            }
        };
        SpellsPreset.ID = 3404;
        return SpellsPreset;
    })(Preset);
    Protocol.SpellsPreset = SpellsPreset;
    var StatsPreset = (function(_super) {
        __extends(StatsPreset, _super);

        function StatsPreset() {
            this.stats = [];
            _super.call(this)
        }
        StatsPreset.prototype.getMessageId = function() {
            return StatsPreset.ID;
        };
        StatsPreset.prototype.reset = function() {
            this.stats = [];
        };
        StatsPreset.prototype.serialize = function(output) {
            this.serializeAs_StatsPreset(output);
        };
        StatsPreset.prototype.deserialize = function(input) {
            this.deserializeAs_StatsPreset(input);
        };
        StatsPreset.prototype.serializeAs_StatsPreset = function(output) {
            _super.prototype.serializeAs_Preset(this, output);
            output.writeShort(this.stats.length);
            for (var _i1 = 0; _i1 < this.stats.length; _i1++) {
                (this.stats[_i1]).serializeAs_SimpleCharacterCharacteristicForPreset(output);
            }
        };
        StatsPreset.prototype.deserializeAs_StatsPreset = function(input) {
            var _item1 = null;
            _super.prototype.deserializePreset(this, input);
            var _statsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _statsLen; _i1++) {
                _item1 = new SimpleCharacterCharacteristicForPreset();
                _item1.deserialize(input);
                this.stats.push(_item1);
            }
        };
        StatsPreset.ID = 440;
        return StatsPreset;
    })(Preset);
    Protocol.StatsPreset = StatsPreset;
    var PrismInformation = (function() {

        function PrismInformation() {
            this.typeId = 0;
            this.state = 1;
            this.nextVulnerabilityDate = 0;
            this.placementDate = 0;
            this.rewardTokenCount = 0;

        }
        PrismInformation.prototype.getMessageId = function() {
            return PrismInformation.ID;
        };
        PrismInformation.prototype.reset = function() {
            this.typeId = 0;
            this.state = 1;
            this.nextVulnerabilityDate = 0;
            this.placementDate = 0;
            this.rewardTokenCount = 0;
        };
        PrismInformation.prototype.serialize = function(output) {
            this.serializeAs_PrismInformation(output);
        };
        PrismInformation.prototype.deserialize = function(input) {
            this.deserializeAs_PrismInformation(input);
        };
        PrismInformation.prototype.serializeAs_PrismInformation = function(output) {
            if (this.typeId < 0) {
                throw new Error("Forbidden value (" + this.typeId + ") on element typeId.");
            }
            output.writeByte(this.typeId);
            output.writeByte(this.state);
            if (this.nextVulnerabilityDate < 0) {
                throw new Error("Forbidden value (" + this.nextVulnerabilityDate + ") on element nextVulnerabilityDate.");
            }
            output.writeInt(this.nextVulnerabilityDate);
            if (this.placementDate < 0) {
                throw new Error("Forbidden value (" + this.placementDate + ") on element placementDate.");
            }
            output.writeInt(this.placementDate);
            if (this.rewardTokenCount < 0) {
                throw new Error("Forbidden value (" + this.rewardTokenCount + ") on element rewardTokenCount.");
            }
            output.writeVarInt(this.rewardTokenCount);
        };
        PrismInformation.prototype.deserializeAs_PrismInformation = function(input) {
            this.typeId = input.readByte();
            if (this.typeId < 0) {
                throw new Error("Forbidden value (" + this.typeId + ") on element of PrismInformation.typeId.");
            }
            this.state = input.readByte();
            if (this.state < 0) {
                throw new Error("Forbidden value (" + this.state + ") on element of PrismInformation.state.");
            }
            this.nextVulnerabilityDate = input.readInt();
            if (this.nextVulnerabilityDate < 0) {
                throw new Error("Forbidden value (" + this.nextVulnerabilityDate + ") on element of PrismInformation.nextVulnerabilityDate.");
            }
            this.placementDate = input.readInt();
            if (this.placementDate < 0) {
                throw new Error("Forbidden value (" + this.placementDate + ") on element of PrismInformation.placementDate.");
            }
            this.rewardTokenCount = input.readVarUhInt();
            if (this.rewardTokenCount < 0) {
                throw new Error("Forbidden value (" + this.rewardTokenCount + ") on element of PrismInformation.rewardTokenCount.");
            }
        };
        PrismInformation.ID = 5963;
        return PrismInformation;
    })();
    Protocol.PrismInformation = PrismInformation;
    var AllianceInsiderPrismInformation = (function(_super) {
        __extends(AllianceInsiderPrismInformation, _super);

        function AllianceInsiderPrismInformation() {
            this.lastTimeSlotModificationDate = 0;
            this.lastTimeSlotModificationAuthorGuildId = 0;
            this.lastTimeSlotModificationAuthorId = 0;
            this.lastTimeSlotModificationAuthorName = "";
            this.modulesObjects = [];
            _super.call(this)
        }
        AllianceInsiderPrismInformation.prototype.getMessageId = function() {
            return AllianceInsiderPrismInformation.ID;
        };
        AllianceInsiderPrismInformation.prototype.reset = function() {
            this.lastTimeSlotModificationDate = 0;
            this.lastTimeSlotModificationAuthorGuildId = 0;
            this.lastTimeSlotModificationAuthorId = 0;
            this.lastTimeSlotModificationAuthorName = "";
            this.modulesObjects = [];
        };
        AllianceInsiderPrismInformation.prototype.serialize = function(output) {
            this.serializeAs_AllianceInsiderPrismInformation(output);
        };
        AllianceInsiderPrismInformation.prototype.deserialize = function(input) {
            this.deserializeAs_AllianceInsiderPrismInformation(input);
        };
        AllianceInsiderPrismInformation.prototype.serializeAs_AllianceInsiderPrismInformation = function(output) {
            _super.prototype.serializeAs_PrismInformation(this, output);
            if (this.lastTimeSlotModificationDate < 0) {
                throw new Error("Forbidden value (" + this.lastTimeSlotModificationDate + ") on element lastTimeSlotModificationDate.");
            }
            output.writeInt(this.lastTimeSlotModificationDate);
            if (this.lastTimeSlotModificationAuthorGuildId < 0) {
                throw new Error("Forbidden value (" + this.lastTimeSlotModificationAuthorGuildId + ") on element lastTimeSlotModificationAuthorGuildId.");
            }
            output.writeVarInt(this.lastTimeSlotModificationAuthorGuildId);
            if (this.lastTimeSlotModificationAuthorId < 0 || this.lastTimeSlotModificationAuthorId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.lastTimeSlotModificationAuthorId + ") on element lastTimeSlotModificationAuthorId.");
            }
            output.writeVarLong(this.lastTimeSlotModificationAuthorId);
            output.writeUTF(this.lastTimeSlotModificationAuthorName);
            output.writeShort(this.modulesObjects.length);
            for (var _i5 = 0; _i5 < this.modulesObjects.length; _i5++) {
                (this.modulesObjects[_i5]).serializeAs_ObjectItem(output);
            }
        };
        AllianceInsiderPrismInformation.prototype.deserializeAs_AllianceInsiderPrismInformation = function(input) {
            var _item5 = null;
            _super.prototype.deserializePrismInformation(this, input);
            this.lastTimeSlotModificationDate = input.readInt();
            if (this.lastTimeSlotModificationDate < 0) {
                throw new Error("Forbidden value (" + this.lastTimeSlotModificationDate + ") on element of AllianceInsiderPrismInformation.lastTimeSlotModificationDate.");
            }
            this.lastTimeSlotModificationAuthorGuildId = input.readVarUhInt();
            if (this.lastTimeSlotModificationAuthorGuildId < 0) {
                throw new Error("Forbidden value (" + this.lastTimeSlotModificationAuthorGuildId + ") on element of AllianceInsiderPrismInformation.lastTimeSlotModificationAuthorGuildId.");
            }
            this.lastTimeSlotModificationAuthorId = input.readVarUhLong();
            if (this.lastTimeSlotModificationAuthorId < 0 || this.lastTimeSlotModificationAuthorId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.lastTimeSlotModificationAuthorId + ") on element of AllianceInsiderPrismInformation.lastTimeSlotModificationAuthorId.");
            }
            this.lastTimeSlotModificationAuthorName = input.readUTF();
            var _modulesObjectsLen = input.readUnsignedShort();
            for (var _i5 = 0; _i5 < _modulesObjectsLen; _i5++) {
                _item5 = new ObjectItem();
                _item5.deserialize(input);
                this.modulesObjects.push(_item5);
            }
        };
        AllianceInsiderPrismInformation.ID = 6982;
        return AllianceInsiderPrismInformation;
    })(PrismInformation);
    Protocol.AllianceInsiderPrismInformation = AllianceInsiderPrismInformation;
    var AlliancePrismInformation = (function(_super) {
        __extends(AlliancePrismInformation, _super);

        function AlliancePrismInformation() {
            this.alliance = new AllianceInformations();
            _super.call(this)
        }
        AlliancePrismInformation.prototype.getMessageId = function() {
            return AlliancePrismInformation.ID;
        };
        AlliancePrismInformation.prototype.reset = function() {
            this.alliance = new AllianceInformations();
        };
        AlliancePrismInformation.prototype.serialize = function(output) {
            this.serializeAs_AlliancePrismInformation(output);
        };
        AlliancePrismInformation.prototype.deserialize = function(input) {
            this.deserializeAs_AlliancePrismInformation(input);
        };
        AlliancePrismInformation.prototype.serializeAs_AlliancePrismInformation = function(output) {
            _super.prototype.serializeAs_PrismInformation(this, output);
            this.alliance.serializeAs_AllianceInformations(output);
        };
        AlliancePrismInformation.prototype.deserializeAs_AlliancePrismInformation = function(input) {
            _super.prototype.deserializePrismInformation(this, input);
            this.alliance = new AllianceInformations();
            this.alliance.deserialize(input);
        };
        AlliancePrismInformation.ID = 5996;
        return AlliancePrismInformation;
    })(PrismInformation);
    Protocol.AlliancePrismInformation = AlliancePrismInformation;
    var PrismFightersInformation = (function() {

        function PrismFightersInformation() {
            this.subAreaId = 0;
            this.waitingForHelpInfo = new ProtectedEntityWaitingForHelpInfo();
            this.allyCharactersInformations = [];
            this.enemyCharactersInformations = [];

        }
        PrismFightersInformation.prototype.getMessageId = function() {
            return PrismFightersInformation.ID;
        };
        PrismFightersInformation.prototype.reset = function() {
            this.subAreaId = 0;
            this.waitingForHelpInfo = new ProtectedEntityWaitingForHelpInfo();
            this.allyCharactersInformations = [];
            this.enemyCharactersInformations = [];
        };
        PrismFightersInformation.prototype.serialize = function(output) {
            this.serializeAs_PrismFightersInformation(output);
        };
        PrismFightersInformation.prototype.deserialize = function(input) {
            this.deserializeAs_PrismFightersInformation(input);
        };
        PrismFightersInformation.prototype.serializeAs_PrismFightersInformation = function(output) {
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
            this.waitingForHelpInfo.serializeAs_ProtectedEntityWaitingForHelpInfo(output);
            output.writeShort(this.allyCharactersInformations.length);
            for (var _i3 = 0; _i3 < this.allyCharactersInformations.length; _i3++) {
                output.writeShort((this.allyCharactersInformations[_i3]).getTypeId());
                (this.allyCharactersInformations[_i3]).serialize(output);
            }
            output.writeShort(this.enemyCharactersInformations.length);
            for (var _i4 = 0; _i4 < this.enemyCharactersInformations.length; _i4++) {
                output.writeShort((this.enemyCharactersInformations[_i4]).getTypeId());
                (this.enemyCharactersInformations[_i4]).serialize(output);
            }
        };
        PrismFightersInformation.prototype.deserializeAs_PrismFightersInformation = function(input) {
            var _id3 = 0;
            var _item3 = null;
            var _id4 = 0;
            var _item4 = null;
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of PrismFightersInformation.subAreaId.");
            }
            this.waitingForHelpInfo = new ProtectedEntityWaitingForHelpInfo();
            this.waitingForHelpInfo.deserialize(input);
            var _allyCharactersInformationsLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _allyCharactersInformationsLen; _i3++) {
                _id3 = input.readUnsignedShort();
                _item3 = ProtocolTypeManager.getInstance(CharacterMinimalPlusLookInformations, _id3);
                _item3.deserialize(input);
                this.allyCharactersInformations.push(_item3);
            }
            var _enemyCharactersInformationsLen = input.readUnsignedShort();
            for (var _i4 = 0; _i4 < _enemyCharactersInformationsLen; _i4++) {
                _id4 = input.readUnsignedShort();
                _item4 = ProtocolTypeManager.getInstance(CharacterMinimalPlusLookInformations, _id4);
                _item4.deserialize(input);
                this.enemyCharactersInformations.push(_item4);
            }
        };
        PrismFightersInformation.ID = 4016;
        return PrismFightersInformation;
    })();
    Protocol.PrismFightersInformation = PrismFightersInformation;
    var PrismSubareaEmptyInfo = (function() {

        function PrismSubareaEmptyInfo() {
            this.subAreaId = 0;
            this.allianceId = 0;

        }
        PrismSubareaEmptyInfo.prototype.getMessageId = function() {
            return PrismSubareaEmptyInfo.ID;
        };
        PrismSubareaEmptyInfo.prototype.reset = function() {
            this.subAreaId = 0;
            this.allianceId = 0;
        };
        PrismSubareaEmptyInfo.prototype.serialize = function(output) {
            this.serializeAs_PrismSubareaEmptyInfo(output);
        };
        PrismSubareaEmptyInfo.prototype.deserialize = function(input) {
            this.deserializeAs_PrismSubareaEmptyInfo(input);
        };
        PrismSubareaEmptyInfo.prototype.serializeAs_PrismSubareaEmptyInfo = function(output) {
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
            if (this.allianceId < 0) {
                throw new Error("Forbidden value (" + this.allianceId + ") on element allianceId.");
            }
            output.writeVarInt(this.allianceId);
        };
        PrismSubareaEmptyInfo.prototype.deserializeAs_PrismSubareaEmptyInfo = function(input) {
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of PrismSubareaEmptyInfo.subAreaId.");
            }
            this.allianceId = input.readVarUhInt();
            if (this.allianceId < 0) {
                throw new Error("Forbidden value (" + this.allianceId + ") on element of PrismSubareaEmptyInfo.allianceId.");
            }
        };
        PrismSubareaEmptyInfo.ID = 9305;
        return PrismSubareaEmptyInfo;
    })();
    Protocol.PrismSubareaEmptyInfo = PrismSubareaEmptyInfo;
    var PrismGeolocalizedInformation = (function(_super) {
        __extends(PrismGeolocalizedInformation, _super);

        function PrismGeolocalizedInformation() {
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.prism = new PrismInformation();
            _super.call(this)
        }
        PrismGeolocalizedInformation.prototype.getMessageId = function() {
            return PrismGeolocalizedInformation.ID;
        };
        PrismGeolocalizedInformation.prototype.reset = function() {
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.prism = new PrismInformation();
        };
        PrismGeolocalizedInformation.prototype.serialize = function(output) {
            this.serializeAs_PrismGeolocalizedInformation(output);
        };
        PrismGeolocalizedInformation.prototype.deserialize = function(input) {
            this.deserializeAs_PrismGeolocalizedInformation(input);
        };
        PrismGeolocalizedInformation.prototype.serializeAs_PrismGeolocalizedInformation = function(output) {
            _super.prototype.serializeAs_PrismSubareaEmptyInfo(this, output);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
            }
            output.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
            }
            output.writeShort(this.worldY);
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            output.writeShort(this.prism.getTypeId());
            this.prism.serialize(output);
        };
        PrismGeolocalizedInformation.prototype.deserializeAs_PrismGeolocalizedInformation = function(input) {
            _super.prototype.deserializePrismSubareaEmptyInfo(this, input);
            this.worldX = input.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element of PrismGeolocalizedInformation.worldX.");
            }
            this.worldY = input.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element of PrismGeolocalizedInformation.worldY.");
            }
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of PrismGeolocalizedInformation.mapId.");
            }
            var _id4 = input.readUnsignedShort();
            this.prism = ProtocolTypeManager.getInstance(PrismInformation, _id4);
            this.prism.deserialize(input);
        };
        PrismGeolocalizedInformation.ID = 8192;
        return PrismGeolocalizedInformation;
    })(PrismSubareaEmptyInfo);
    Protocol.PrismGeolocalizedInformation = PrismGeolocalizedInformation;
    var Shortcut = (function() {

        function Shortcut() {
            this.slot = 0;

        }
        Shortcut.prototype.getMessageId = function() {
            return Shortcut.ID;
        };
        Shortcut.prototype.reset = function() {
            this.slot = 0;
        };
        Shortcut.prototype.serialize = function(output) {
            this.serializeAs_Shortcut(output);
        };
        Shortcut.prototype.deserialize = function(input) {
            this.deserializeAs_Shortcut(input);
        };
        Shortcut.prototype.serializeAs_Shortcut = function(output) {
            if (this.slot < 0 || this.slot > 99) {
                throw new Error("Forbidden value (" + this.slot + ") on element slot.");
            }
            output.writeByte(this.slot);
        };
        Shortcut.prototype.deserializeAs_Shortcut = function(input) {
            this.slot = input.readByte();
            if (this.slot < 0 || this.slot > 99) {
                throw new Error("Forbidden value (" + this.slot + ") on element of Shortcut.slot.");
            }
        };
        Shortcut.ID = 5811;
        return Shortcut;
    })();
    Protocol.Shortcut = Shortcut;
    var ShortcutEmote = (function(_super) {
        __extends(ShortcutEmote, _super);

        function ShortcutEmote() {
            this.emoteId = 0;
            _super.call(this)
        }
        ShortcutEmote.prototype.getMessageId = function() {
            return ShortcutEmote.ID;
        };
        ShortcutEmote.prototype.reset = function() {
            this.emoteId = 0;
        };
        ShortcutEmote.prototype.serialize = function(output) {
            this.serializeAs_ShortcutEmote(output);
        };
        ShortcutEmote.prototype.deserialize = function(input) {
            this.deserializeAs_ShortcutEmote(input);
        };
        ShortcutEmote.prototype.serializeAs_ShortcutEmote = function(output) {
            _super.prototype.serializeAs_Shortcut(this, output);
            if (this.emoteId < 0 || this.emoteId > 255) {
                throw new Error("Forbidden value (" + this.emoteId + ") on element emoteId.");
            }
            output.writeByte(this.emoteId);
        };
        ShortcutEmote.prototype.deserializeAs_ShortcutEmote = function(input) {
            _super.prototype.deserializeShortcut(this, input);
            this.emoteId = input.readUnsignedByte();
            if (this.emoteId < 0 || this.emoteId > 255) {
                throw new Error("Forbidden value (" + this.emoteId + ") on element of ShortcutEmote.emoteId.");
            }
        };
        ShortcutEmote.ID = 702;
        return ShortcutEmote;
    })(Shortcut);
    Protocol.ShortcutEmote = ShortcutEmote;
    var ShortcutEntitiesPreset = (function(_super) {
        __extends(ShortcutEntitiesPreset, _super);

        function ShortcutEntitiesPreset() {
            this.presetId = 0;
            _super.call(this)
        }
        ShortcutEntitiesPreset.prototype.getMessageId = function() {
            return ShortcutEntitiesPreset.ID;
        };
        ShortcutEntitiesPreset.prototype.reset = function() {
            this.presetId = 0;
        };
        ShortcutEntitiesPreset.prototype.serialize = function(output) {
            this.serializeAs_ShortcutEntitiesPreset(output);
        };
        ShortcutEntitiesPreset.prototype.deserialize = function(input) {
            this.deserializeAs_ShortcutEntitiesPreset(input);
        };
        ShortcutEntitiesPreset.prototype.serializeAs_ShortcutEntitiesPreset = function(output) {
            _super.prototype.serializeAs_Shortcut(this, output);
            output.writeShort(this.presetId);
        };
        ShortcutEntitiesPreset.prototype.deserializeAs_ShortcutEntitiesPreset = function(input) {
            _super.prototype.deserializeShortcut(this, input);
            this.presetId = input.readShort();
        };
        ShortcutEntitiesPreset.ID = 6762;
        return ShortcutEntitiesPreset;
    })(Shortcut);
    Protocol.ShortcutEntitiesPreset = ShortcutEntitiesPreset;
    var ShortcutObject = (function(_super) {
        __extends(ShortcutObject, _super);

        function ShortcutObject() {

            _super.call(this)
        }
        ShortcutObject.prototype.getMessageId = function() {
            return ShortcutObject.ID;
        };
        ShortcutObject.prototype.reset = function() {

        };
        ShortcutObject.prototype.serialize = function(output) {
            this.serializeAs_ShortcutObject(output);
        };
        ShortcutObject.prototype.deserialize = function(input) {
            this.deserializeAs_ShortcutObject(input);
        };
        ShortcutObject.prototype.serializeAs_ShortcutObject = function(output) {
            _super.prototype.serializeAs_Shortcut(this, output);
        };
        ShortcutObject.prototype.deserializeAs_ShortcutObject = function(input) {
            _super.prototype.deserializeShortcut(this, input);
        };
        ShortcutObject.ID = 5832;
        return ShortcutObject;
    })(Shortcut);
    Protocol.ShortcutObject = ShortcutObject;
    var ShortcutObjectIdolsPreset = (function(_super) {
        __extends(ShortcutObjectIdolsPreset, _super);

        function ShortcutObjectIdolsPreset() {
            this.presetId = 0;
            _super.call(this)
        }
        ShortcutObjectIdolsPreset.prototype.getMessageId = function() {
            return ShortcutObjectIdolsPreset.ID;
        };
        ShortcutObjectIdolsPreset.prototype.reset = function() {
            this.presetId = 0;
        };
        ShortcutObjectIdolsPreset.prototype.serialize = function(output) {
            this.serializeAs_ShortcutObjectIdolsPreset(output);
        };
        ShortcutObjectIdolsPreset.prototype.deserialize = function(input) {
            this.deserializeAs_ShortcutObjectIdolsPreset(input);
        };
        ShortcutObjectIdolsPreset.prototype.serializeAs_ShortcutObjectIdolsPreset = function(output) {
            _super.prototype.serializeAs_ShortcutObject(this, output);
            output.writeShort(this.presetId);
        };
        ShortcutObjectIdolsPreset.prototype.deserializeAs_ShortcutObjectIdolsPreset = function(input) {
            _super.prototype.deserializeShortcutObject(this, input);
            this.presetId = input.readShort();
        };
        ShortcutObjectIdolsPreset.ID = 9809;
        return ShortcutObjectIdolsPreset;
    })(ShortcutObject);
    Protocol.ShortcutObjectIdolsPreset = ShortcutObjectIdolsPreset;
    var ShortcutObjectItem = (function(_super) {
        __extends(ShortcutObjectItem, _super);

        function ShortcutObjectItem() {
            this.itemUID = 0;
            this.itemGID = 0;
            _super.call(this)
        }
        ShortcutObjectItem.prototype.getMessageId = function() {
            return ShortcutObjectItem.ID;
        };
        ShortcutObjectItem.prototype.reset = function() {
            this.itemUID = 0;
            this.itemGID = 0;
        };
        ShortcutObjectItem.prototype.serialize = function(output) {
            this.serializeAs_ShortcutObjectItem(output);
        };
        ShortcutObjectItem.prototype.deserialize = function(input) {
            this.deserializeAs_ShortcutObjectItem(input);
        };
        ShortcutObjectItem.prototype.serializeAs_ShortcutObjectItem = function(output) {
            _super.prototype.serializeAs_ShortcutObject(this, output);
            output.writeInt(this.itemUID);
            output.writeInt(this.itemGID);
        };
        ShortcutObjectItem.prototype.deserializeAs_ShortcutObjectItem = function(input) {
            _super.prototype.deserializeShortcutObject(this, input);
            this.itemUID = input.readInt();
            this.itemGID = input.readInt();
        };
        ShortcutObjectItem.ID = 2604;
        return ShortcutObjectItem;
    })(ShortcutObject);
    Protocol.ShortcutObjectItem = ShortcutObjectItem;
    var ShortcutObjectPreset = (function(_super) {
        __extends(ShortcutObjectPreset, _super);

        function ShortcutObjectPreset() {
            this.presetId = 0;
            _super.call(this)
        }
        ShortcutObjectPreset.prototype.getMessageId = function() {
            return ShortcutObjectPreset.ID;
        };
        ShortcutObjectPreset.prototype.reset = function() {
            this.presetId = 0;
        };
        ShortcutObjectPreset.prototype.serialize = function(output) {
            this.serializeAs_ShortcutObjectPreset(output);
        };
        ShortcutObjectPreset.prototype.deserialize = function(input) {
            this.deserializeAs_ShortcutObjectPreset(input);
        };
        ShortcutObjectPreset.prototype.serializeAs_ShortcutObjectPreset = function(output) {
            _super.prototype.serializeAs_ShortcutObject(this, output);
            output.writeShort(this.presetId);
        };
        ShortcutObjectPreset.prototype.deserializeAs_ShortcutObjectPreset = function(input) {
            _super.prototype.deserializeShortcutObject(this, input);
            this.presetId = input.readShort();
        };
        ShortcutObjectPreset.ID = 1783;
        return ShortcutObjectPreset;
    })(ShortcutObject);
    Protocol.ShortcutObjectPreset = ShortcutObjectPreset;
    var ShortcutSmiley = (function(_super) {
        __extends(ShortcutSmiley, _super);

        function ShortcutSmiley() {
            this.smileyId = 0;
            _super.call(this)
        }
        ShortcutSmiley.prototype.getMessageId = function() {
            return ShortcutSmiley.ID;
        };
        ShortcutSmiley.prototype.reset = function() {
            this.smileyId = 0;
        };
        ShortcutSmiley.prototype.serialize = function(output) {
            this.serializeAs_ShortcutSmiley(output);
        };
        ShortcutSmiley.prototype.deserialize = function(input) {
            this.deserializeAs_ShortcutSmiley(input);
        };
        ShortcutSmiley.prototype.serializeAs_ShortcutSmiley = function(output) {
            _super.prototype.serializeAs_Shortcut(this, output);
            if (this.smileyId < 0) {
                throw new Error("Forbidden value (" + this.smileyId + ") on element smileyId.");
            }
            output.writeVarShort(this.smileyId);
        };
        ShortcutSmiley.prototype.deserializeAs_ShortcutSmiley = function(input) {
            _super.prototype.deserializeShortcut(this, input);
            this.smileyId = input.readVarUhShort();
            if (this.smileyId < 0) {
                throw new Error("Forbidden value (" + this.smileyId + ") on element of ShortcutSmiley.smileyId.");
            }
        };
        ShortcutSmiley.ID = 8182;
        return ShortcutSmiley;
    })(Shortcut);
    Protocol.ShortcutSmiley = ShortcutSmiley;
    var ShortcutSpell = (function(_super) {
        __extends(ShortcutSpell, _super);

        function ShortcutSpell() {
            this.spellId = 0;
            _super.call(this)
        }
        ShortcutSpell.prototype.getMessageId = function() {
            return ShortcutSpell.ID;
        };
        ShortcutSpell.prototype.reset = function() {
            this.spellId = 0;
        };
        ShortcutSpell.prototype.serialize = function(output) {
            this.serializeAs_ShortcutSpell(output);
        };
        ShortcutSpell.prototype.deserialize = function(input) {
            this.deserializeAs_ShortcutSpell(input);
        };
        ShortcutSpell.prototype.serializeAs_ShortcutSpell = function(output) {
            _super.prototype.serializeAs_Shortcut(this, output);
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
            }
            output.writeVarShort(this.spellId);
        };
        ShortcutSpell.prototype.deserializeAs_ShortcutSpell = function(input) {
            _super.prototype.deserializeShortcut(this, input);
            this.spellId = input.readVarUhShort();
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element of ShortcutSpell.spellId.");
            }
        };
        ShortcutSpell.ID = 8184;
        return ShortcutSpell;
    })(Shortcut);
    Protocol.ShortcutSpell = ShortcutSpell;
    var AlliancedGuildFactSheetInformations = (function(_super) {
        __extends(AlliancedGuildFactSheetInformations, _super);

        function AlliancedGuildFactSheetInformations() {
            this.allianceInfos = new BasicNamedAllianceInformations();
            _super.call(this)
        }
        AlliancedGuildFactSheetInformations.prototype.getMessageId = function() {
            return AlliancedGuildFactSheetInformations.ID;
        };
        AlliancedGuildFactSheetInformations.prototype.reset = function() {
            this.allianceInfos = new BasicNamedAllianceInformations();
        };
        AlliancedGuildFactSheetInformations.prototype.serialize = function(output) {
            this.serializeAs_AlliancedGuildFactSheetInformations(output);
        };
        AlliancedGuildFactSheetInformations.prototype.deserialize = function(input) {
            this.deserializeAs_AlliancedGuildFactSheetInformations(input);
        };
        AlliancedGuildFactSheetInformations.prototype.serializeAs_AlliancedGuildFactSheetInformations = function(output) {
            _super.prototype.serializeAs_GuildInformations(this, output);
            this.allianceInfos.serializeAs_BasicNamedAllianceInformations(output);
        };
        AlliancedGuildFactSheetInformations.prototype.deserializeAs_AlliancedGuildFactSheetInformations = function(input) {
            _super.prototype.deserializeGuildInformations(this, input);
            this.allianceInfos = new BasicNamedAllianceInformations();
            this.allianceInfos.deserialize(input);
        };
        AlliancedGuildFactSheetInformations.ID = 920;
        return AlliancedGuildFactSheetInformations;
    })(GuildInformations);
    Protocol.AlliancedGuildFactSheetInformations = AlliancedGuildFactSheetInformations;
    var AllianceFactSheetInformations = (function(_super) {
        __extends(AllianceFactSheetInformations, _super);

        function AllianceFactSheetInformations() {
            this.creationDate = 0;
            _super.call(this)
        }
        AllianceFactSheetInformations.prototype.getMessageId = function() {
            return AllianceFactSheetInformations.ID;
        };
        AllianceFactSheetInformations.prototype.reset = function() {
            this.creationDate = 0;
        };
        AllianceFactSheetInformations.prototype.serialize = function(output) {
            this.serializeAs_AllianceFactSheetInformations(output);
        };
        AllianceFactSheetInformations.prototype.deserialize = function(input) {
            this.deserializeAs_AllianceFactSheetInformations(input);
        };
        AllianceFactSheetInformations.prototype.serializeAs_AllianceFactSheetInformations = function(output) {
            _super.prototype.serializeAs_AllianceInformations(this, output);
            if (this.creationDate < 0) {
                throw new Error("Forbidden value (" + this.creationDate + ") on element creationDate.");
            }
            output.writeInt(this.creationDate);
        };
        AllianceFactSheetInformations.prototype.deserializeAs_AllianceFactSheetInformations = function(input) {
            _super.prototype.deserializeAllianceInformations(this, input);
            this.creationDate = input.readInt();
            if (this.creationDate < 0) {
                throw new Error("Forbidden value (" + this.creationDate + ") on element of AllianceFactSheetInformations.creationDate.");
            }
        };
        AllianceFactSheetInformations.ID = 6853;
        return AllianceFactSheetInformations;
    })(AllianceInformations);
    Protocol.AllianceFactSheetInformations = AllianceFactSheetInformations;
    var AllianceVersatileInformations = (function() {

        function AllianceVersatileInformations() {
            this.allianceId = 0;
            this.nbGuilds = 0;
            this.nbMembers = 0;
            this.nbSubarea = 0;

        }
        AllianceVersatileInformations.prototype.getMessageId = function() {
            return AllianceVersatileInformations.ID;
        };
        AllianceVersatileInformations.prototype.reset = function() {
            this.allianceId = 0;
            this.nbGuilds = 0;
            this.nbMembers = 0;
            this.nbSubarea = 0;
        };
        AllianceVersatileInformations.prototype.serialize = function(output) {
            this.serializeAs_AllianceVersatileInformations(output);
        };
        AllianceVersatileInformations.prototype.deserialize = function(input) {
            this.deserializeAs_AllianceVersatileInformations(input);
        };
        AllianceVersatileInformations.prototype.serializeAs_AllianceVersatileInformations = function(output) {
            if (this.allianceId < 0) {
                throw new Error("Forbidden value (" + this.allianceId + ") on element allianceId.");
            }
            output.writeVarInt(this.allianceId);
            if (this.nbGuilds < 0) {
                throw new Error("Forbidden value (" + this.nbGuilds + ") on element nbGuilds.");
            }
            output.writeVarShort(this.nbGuilds);
            if (this.nbMembers < 0) {
                throw new Error("Forbidden value (" + this.nbMembers + ") on element nbMembers.");
            }
            output.writeVarShort(this.nbMembers);
            if (this.nbSubarea < 0) {
                throw new Error("Forbidden value (" + this.nbSubarea + ") on element nbSubarea.");
            }
            output.writeVarShort(this.nbSubarea);
        };
        AllianceVersatileInformations.prototype.deserializeAs_AllianceVersatileInformations = function(input) {
            this.allianceId = input.readVarUhInt();
            if (this.allianceId < 0) {
                throw new Error("Forbidden value (" + this.allianceId + ") on element of AllianceVersatileInformations.allianceId.");
            }
            this.nbGuilds = input.readVarUhShort();
            if (this.nbGuilds < 0) {
                throw new Error("Forbidden value (" + this.nbGuilds + ") on element of AllianceVersatileInformations.nbGuilds.");
            }
            this.nbMembers = input.readVarUhShort();
            if (this.nbMembers < 0) {
                throw new Error("Forbidden value (" + this.nbMembers + ") on element of AllianceVersatileInformations.nbMembers.");
            }
            this.nbSubarea = input.readVarUhShort();
            if (this.nbSubarea < 0) {
                throw new Error("Forbidden value (" + this.nbSubarea + ") on element of AllianceVersatileInformations.nbSubarea.");
            }
        };
        AllianceVersatileInformations.ID = 3013;
        return AllianceVersatileInformations;
    })();
    Protocol.AllianceVersatileInformations = AllianceVersatileInformations;
    var GuildFactSheetInformations = (function(_super) {
        __extends(GuildFactSheetInformations, _super);

        function GuildFactSheetInformations() {
            this.leaderId = 0;
            this.nbMembers = 0;
            _super.call(this)
        }
        GuildFactSheetInformations.prototype.getMessageId = function() {
            return GuildFactSheetInformations.ID;
        };
        GuildFactSheetInformations.prototype.reset = function() {
            this.leaderId = 0;
            this.nbMembers = 0;
        };
        GuildFactSheetInformations.prototype.serialize = function(output) {
            this.serializeAs_GuildFactSheetInformations(output);
        };
        GuildFactSheetInformations.prototype.deserialize = function(input) {
            this.deserializeAs_GuildFactSheetInformations(input);
        };
        GuildFactSheetInformations.prototype.serializeAs_GuildFactSheetInformations = function(output) {
            _super.prototype.serializeAs_GuildInformations(this, output);
            if (this.leaderId < 0 || this.leaderId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.leaderId + ") on element leaderId.");
            }
            output.writeVarLong(this.leaderId);
            if (this.nbMembers < 0) {
                throw new Error("Forbidden value (" + this.nbMembers + ") on element nbMembers.");
            }
            output.writeVarShort(this.nbMembers);
        };
        GuildFactSheetInformations.prototype.deserializeAs_GuildFactSheetInformations = function(input) {
            _super.prototype.deserializeGuildInformations(this, input);
            this.leaderId = input.readVarUhLong();
            if (this.leaderId < 0 || this.leaderId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.leaderId + ") on element of GuildFactSheetInformations.leaderId.");
            }
            this.nbMembers = input.readVarUhShort();
            if (this.nbMembers < 0) {
                throw new Error("Forbidden value (" + this.nbMembers + ") on element of GuildFactSheetInformations.nbMembers.");
            }
        };
        GuildFactSheetInformations.ID = 5100;
        return GuildFactSheetInformations;
    })(GuildInformations);
    Protocol.GuildFactSheetInformations = GuildFactSheetInformations;
    var GuildVersatileInformations = (function() {

        function GuildVersatileInformations() {
            this.guildId = 0;
            this.leaderId = 0;
            this.guildLevel = 0;
            this.nbMembers = 0;

        }
        GuildVersatileInformations.prototype.getMessageId = function() {
            return GuildVersatileInformations.ID;
        };
        GuildVersatileInformations.prototype.reset = function() {
            this.guildId = 0;
            this.leaderId = 0;
            this.guildLevel = 0;
            this.nbMembers = 0;
        };
        GuildVersatileInformations.prototype.serialize = function(output) {
            this.serializeAs_GuildVersatileInformations(output);
        };
        GuildVersatileInformations.prototype.deserialize = function(input) {
            this.deserializeAs_GuildVersatileInformations(input);
        };
        GuildVersatileInformations.prototype.serializeAs_GuildVersatileInformations = function(output) {
            if (this.guildId < 0) {
                throw new Error("Forbidden value (" + this.guildId + ") on element guildId.");
            }
            output.writeVarInt(this.guildId);
            if (this.leaderId < 0 || this.leaderId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.leaderId + ") on element leaderId.");
            }
            output.writeVarLong(this.leaderId);
            if (this.guildLevel < 1 || this.guildLevel > 200) {
                throw new Error("Forbidden value (" + this.guildLevel + ") on element guildLevel.");
            }
            output.writeByte(this.guildLevel);
            if (this.nbMembers < 1 || this.nbMembers > 240) {
                throw new Error("Forbidden value (" + this.nbMembers + ") on element nbMembers.");
            }
            output.writeByte(this.nbMembers);
        };
        GuildVersatileInformations.prototype.deserializeAs_GuildVersatileInformations = function(input) {
            this.guildId = input.readVarUhInt();
            if (this.guildId < 0) {
                throw new Error("Forbidden value (" + this.guildId + ") on element of GuildVersatileInformations.guildId.");
            }
            this.leaderId = input.readVarUhLong();
            if (this.leaderId < 0 || this.leaderId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.leaderId + ") on element of GuildVersatileInformations.leaderId.");
            }
            this.guildLevel = input.readUnsignedByte();
            if (this.guildLevel < 1 || this.guildLevel > 200) {
                throw new Error("Forbidden value (" + this.guildLevel + ") on element of GuildVersatileInformations.guildLevel.");
            }
            this.nbMembers = input.readUnsignedByte();
            if (this.nbMembers < 1 || this.nbMembers > 240) {
                throw new Error("Forbidden value (" + this.nbMembers + ") on element of GuildVersatileInformations.nbMembers.");
            }
        };
        GuildVersatileInformations.ID = 7908;
        return GuildVersatileInformations;
    })();
    Protocol.GuildVersatileInformations = GuildVersatileInformations;
    var GuildInAllianceVersatileInformations = (function(_super) {
        __extends(GuildInAllianceVersatileInformations, _super);

        function GuildInAllianceVersatileInformations() {
            this.allianceId = 0;
            _super.call(this)
        }
        GuildInAllianceVersatileInformations.prototype.getMessageId = function() {
            return GuildInAllianceVersatileInformations.ID;
        };
        GuildInAllianceVersatileInformations.prototype.reset = function() {
            this.allianceId = 0;
        };
        GuildInAllianceVersatileInformations.prototype.serialize = function(output) {
            this.serializeAs_GuildInAllianceVersatileInformations(output);
        };
        GuildInAllianceVersatileInformations.prototype.deserialize = function(input) {
            this.deserializeAs_GuildInAllianceVersatileInformations(input);
        };
        GuildInAllianceVersatileInformations.prototype.serializeAs_GuildInAllianceVersatileInformations = function(output) {
            _super.prototype.serializeAs_GuildVersatileInformations(this, output);
            if (this.allianceId < 0) {
                throw new Error("Forbidden value (" + this.allianceId + ") on element allianceId.");
            }
            output.writeVarInt(this.allianceId);
        };
        GuildInAllianceVersatileInformations.prototype.deserializeAs_GuildInAllianceVersatileInformations = function(input) {
            _super.prototype.deserializeGuildVersatileInformations(this, input);
            this.allianceId = input.readVarUhInt();
            if (this.allianceId < 0) {
                throw new Error("Forbidden value (" + this.allianceId + ") on element of GuildInAllianceVersatileInformations.allianceId.");
            }
        };
        GuildInAllianceVersatileInformations.ID = 5949;
        return GuildInAllianceVersatileInformations;
    })(GuildVersatileInformations);
    Protocol.GuildInAllianceVersatileInformations = GuildInAllianceVersatileInformations;
    var GuildInsiderFactSheetInformations = (function(_super) {
        __extends(GuildInsiderFactSheetInformations, _super);

        function GuildInsiderFactSheetInformations() {
            this.leaderName = "";
            this.nbConnectedMembers = 0;
            this.nbTaxCollectors = 0;
            this.lastActivity = 0;
            _super.call(this)
        }
        GuildInsiderFactSheetInformations.prototype.getMessageId = function() {
            return GuildInsiderFactSheetInformations.ID;
        };
        GuildInsiderFactSheetInformations.prototype.reset = function() {
            this.leaderName = "";
            this.nbConnectedMembers = 0;
            this.nbTaxCollectors = 0;
            this.lastActivity = 0;
        };
        GuildInsiderFactSheetInformations.prototype.serialize = function(output) {
            this.serializeAs_GuildInsiderFactSheetInformations(output);
        };
        GuildInsiderFactSheetInformations.prototype.deserialize = function(input) {
            this.deserializeAs_GuildInsiderFactSheetInformations(input);
        };
        GuildInsiderFactSheetInformations.prototype.serializeAs_GuildInsiderFactSheetInformations = function(output) {
            _super.prototype.serializeAs_GuildFactSheetInformations(this, output);
            output.writeUTF(this.leaderName);
            if (this.nbConnectedMembers < 0) {
                throw new Error("Forbidden value (" + this.nbConnectedMembers + ") on element nbConnectedMembers.");
            }
            output.writeVarShort(this.nbConnectedMembers);
            if (this.nbTaxCollectors < 0) {
                throw new Error("Forbidden value (" + this.nbTaxCollectors + ") on element nbTaxCollectors.");
            }
            output.writeByte(this.nbTaxCollectors);
            if (this.lastActivity < 0) {
                throw new Error("Forbidden value (" + this.lastActivity + ") on element lastActivity.");
            }
            output.writeInt(this.lastActivity);
        };
        GuildInsiderFactSheetInformations.prototype.deserializeAs_GuildInsiderFactSheetInformations = function(input) {
            _super.prototype.deserializeGuildFactSheetInformations(this, input);
            this.leaderName = input.readUTF();
            this.nbConnectedMembers = input.readVarUhShort();
            if (this.nbConnectedMembers < 0) {
                throw new Error("Forbidden value (" + this.nbConnectedMembers + ") on element of GuildInsiderFactSheetInformations.nbConnectedMembers.");
            }
            this.nbTaxCollectors = input.readByte();
            if (this.nbTaxCollectors < 0) {
                throw new Error("Forbidden value (" + this.nbTaxCollectors + ") on element of GuildInsiderFactSheetInformations.nbTaxCollectors.");
            }
            this.lastActivity = input.readInt();
            if (this.lastActivity < 0) {
                throw new Error("Forbidden value (" + this.lastActivity + ") on element of GuildInsiderFactSheetInformations.lastActivity.");
            }
        };
        GuildInsiderFactSheetInformations.ID = 6301;
        return GuildInsiderFactSheetInformations;
    })(GuildFactSheetInformations);
    Protocol.GuildInsiderFactSheetInformations = GuildInsiderFactSheetInformations;
    var StartupActionAddObject = (function() {

        function StartupActionAddObject() {
            this.uid = 0;
            this.title = "";
            this.text = "";
            this.descUrl = "";
            this.pictureUrl = "";
            this.items = [];

        }
        StartupActionAddObject.prototype.getMessageId = function() {
            return StartupActionAddObject.ID;
        };
        StartupActionAddObject.prototype.reset = function() {
            this.uid = 0;
            this.title = "";
            this.text = "";
            this.descUrl = "";
            this.pictureUrl = "";
            this.items = [];
        };
        StartupActionAddObject.prototype.serialize = function(output) {
            this.serializeAs_StartupActionAddObject(output);
        };
        StartupActionAddObject.prototype.deserialize = function(input) {
            this.deserializeAs_StartupActionAddObject(input);
        };
        StartupActionAddObject.prototype.serializeAs_StartupActionAddObject = function(output) {
            if (this.uid < 0) {
                throw new Error("Forbidden value (" + this.uid + ") on element uid.");
            }
            output.writeInt(this.uid);
            output.writeUTF(this.title);
            output.writeUTF(this.text);
            output.writeUTF(this.descUrl);
            output.writeUTF(this.pictureUrl);
            output.writeShort(this.items.length);
            for (var _i6 = 0; _i6 < this.items.length; _i6++) {
                (this.items[_i6]).serializeAs_ObjectItemInformationWithQuantity(output);
            }
        };
        StartupActionAddObject.prototype.deserializeAs_StartupActionAddObject = function(input) {
            var _item6 = null;
            this.uid = input.readInt();
            if (this.uid < 0) {
                throw new Error("Forbidden value (" + this.uid + ") on element of StartupActionAddObject.uid.");
            }
            this.title = input.readUTF();
            this.text = input.readUTF();
            this.descUrl = input.readUTF();
            this.pictureUrl = input.readUTF();
            var _itemsLen = input.readUnsignedShort();
            for (var _i6 = 0; _i6 < _itemsLen; _i6++) {
                _item6 = new ObjectItemInformationWithQuantity();
                _item6.deserialize(input);
                this.items.push(_item6);
            }
        };
        StartupActionAddObject.ID = 5320;
        return StartupActionAddObject;
    })();
    Protocol.StartupActionAddObject = StartupActionAddObject;
    var TrustCertificate = (function() {

        function TrustCertificate() {
            this.id = 0;
            this.hash = "";

        }
        TrustCertificate.prototype.getMessageId = function() {
            return TrustCertificate.ID;
        };
        TrustCertificate.prototype.reset = function() {
            this.id = 0;
            this.hash = "";
        };
        TrustCertificate.prototype.serialize = function(output) {
            this.serializeAs_TrustCertificate(output);
        };
        TrustCertificate.prototype.deserialize = function(input) {
            this.deserializeAs_TrustCertificate(input);
        };
        TrustCertificate.prototype.serializeAs_TrustCertificate = function(output) {
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeInt(this.id);
            output.writeUTF(this.hash);
        };
        TrustCertificate.prototype.deserializeAs_TrustCertificate = function(input) {
            this.id = input.readInt();
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element of TrustCertificate.id.");
            }
            this.hash = input.readUTF();
        };
        TrustCertificate.ID = 327;
        return TrustCertificate;
    })();
    Protocol.TrustCertificate = TrustCertificate;
    var Version = (function() {

        function Version() {
            this.major = 0;
            this.minor = 0;
            this.code = 0;
            this.build = 0;
            this.buildType = 0;

        }
        Version.prototype.getMessageId = function() {
            return Version.ID;
        };
        Version.prototype.reset = function() {
            this.major = 0;
            this.minor = 0;
            this.code = 0;
            this.build = 0;
            this.buildType = 0;
        };
        Version.prototype.serialize = function(output) {
            this.serializeAs_Version(output);
        };
        Version.prototype.deserialize = function(input) {
            this.deserializeAs_Version(input);
        };
        Version.prototype.serializeAs_Version = function(output) {
            if (this.major < 0) {
                throw new Error("Forbidden value (" + this.major + ") on element major.");
            }
            output.writeByte(this.major);
            if (this.minor < 0) {
                throw new Error("Forbidden value (" + this.minor + ") on element minor.");
            }
            output.writeByte(this.minor);
            if (this.code < 0) {
                throw new Error("Forbidden value (" + this.code + ") on element code.");
            }
            output.writeByte(this.code);
            if (this.build < 0) {
                throw new Error("Forbidden value (" + this.build + ") on element build.");
            }
            output.writeInt(this.build);
            output.writeByte(this.buildType);
        };
        Version.prototype.deserializeAs_Version = function(input) {
            this.major = input.readByte();
            if (this.major < 0) {
                throw new Error("Forbidden value (" + this.major + ") on element of Version.major.");
            }
            this.minor = input.readByte();
            if (this.minor < 0) {
                throw new Error("Forbidden value (" + this.minor + ") on element of Version.minor.");
            }
            this.code = input.readByte();
            if (this.code < 0) {
                throw new Error("Forbidden value (" + this.code + ") on element of Version.code.");
            }
            this.build = input.readInt();
            if (this.build < 0) {
                throw new Error("Forbidden value (" + this.build + ") on element of Version.build.");
            }
            this.buildType = input.readByte();
            if (this.buildType < 0) {
                throw new Error("Forbidden value (" + this.buildType + ") on element of Version.buildType.");
            }
        };
        Version.ID = 6752;
        return Version;
    })();
    Protocol.Version = Version;
    var BufferInformation = (function() {

        function BufferInformation() {
            this.id = 0;
            this.amount = 0;

        }
        BufferInformation.prototype.getMessageId = function() {
            return BufferInformation.ID;
        };
        BufferInformation.prototype.reset = function() {
            this.id = 0;
            this.amount = 0;
        };
        BufferInformation.prototype.serialize = function(output) {
            this.serializeAs_BufferInformation(output);
        };
        BufferInformation.prototype.deserialize = function(input) {
            this.deserializeAs_BufferInformation(input);
        };
        BufferInformation.prototype.serializeAs_BufferInformation = function(output) {
            if (this.id < 0 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarLong(this.id);
            if (this.amount < 0 || this.amount > 9007199254740990) {
                throw new Error("Forbidden value (" + this.amount + ") on element amount.");
            }
            output.writeVarLong(this.amount);
        };
        BufferInformation.prototype.deserializeAs_BufferInformation = function(input) {
            this.id = input.readVarUhLong();
            if (this.id < 0 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element of BufferInformation.id.");
            }
            this.amount = input.readVarUhLong();
            if (this.amount < 0 || this.amount > 9007199254740990) {
                throw new Error("Forbidden value (" + this.amount + ") on element of BufferInformation.amount.");
            }
        };
        BufferInformation.ID = 7482;
        return BufferInformation;
    })();
    Protocol.BufferInformation = BufferInformation;
    var AdminCommandMessage = (function(_super) {
        __extends(AdminCommandMessage, _super);

        function AdminCommandMessage() {
            this.content = "";
            _super.call(this)
        }
        AdminCommandMessage.prototype.getMessageId = function() {
            return AdminCommandMessage.ID;
        };
        AdminCommandMessage.prototype.reset = function() {
            this.content = "";
        };
        AdminCommandMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AdminCommandMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AdminCommandMessage.prototype.serialize = function(output) {
            this.serializeAs_AdminCommandMessage(output);
        };
        AdminCommandMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AdminCommandMessage(input);
        };
        AdminCommandMessage.prototype.serializeAs_AdminCommandMessage = function(output) {
            output.writeUTF(this.content);
        };
        AdminCommandMessage.prototype.deserializeAs_AdminCommandMessage = function(input) {
            this.content = input.readUTF();
        };
        AdminCommandMessage.ID = 2983;
        return AdminCommandMessage;
    })(NetworkMessage);
    Protocol.AdminCommandMessage = AdminCommandMessage;
    var AdminQuietCommandMessage = (function(_super) {
        __extends(AdminQuietCommandMessage, _super);

        function AdminQuietCommandMessage() {

            _super.call(this)
        }
        AdminQuietCommandMessage.prototype.getMessageId = function() {
            return AdminQuietCommandMessage.ID;
        };
        AdminQuietCommandMessage.prototype.reset = function() {

        };
        AdminQuietCommandMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AdminQuietCommandMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AdminQuietCommandMessage.prototype.serialize = function(output) {
            this.serializeAs_AdminQuietCommandMessage(output);
        };
        AdminQuietCommandMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AdminQuietCommandMessage(input);
        };
        AdminQuietCommandMessage.prototype.serializeAs_AdminQuietCommandMessage = function(output) {
            _super.prototype.serializeAs_AdminCommandMessage.call(this, output);
        };
        AdminQuietCommandMessage.prototype.deserializeAs_AdminQuietCommandMessage = function(input) {
            _super.prototype.deserializeAs_AdminCommandMessage.call(this, input);
        };
        AdminQuietCommandMessage.ID = 5819;
        return AdminQuietCommandMessage;
    })(AdminCommandMessage);
    Protocol.AdminQuietCommandMessage = AdminQuietCommandMessage;
    var ConsoleCommandsListMessage = (function(_super) {
        __extends(ConsoleCommandsListMessage, _super);

        function ConsoleCommandsListMessage() {
            this.aliases = [];
            this.args = [];
            this.descriptions = [];
            _super.call(this)
        }
        ConsoleCommandsListMessage.prototype.getMessageId = function() {
            return ConsoleCommandsListMessage.ID;
        };
        ConsoleCommandsListMessage.prototype.reset = function() {
            this.aliases = [];
            this.args = [];
            this.descriptions = [];
        };
        ConsoleCommandsListMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ConsoleCommandsListMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ConsoleCommandsListMessage.prototype.serialize = function(output) {
            this.serializeAs_ConsoleCommandsListMessage(output);
        };
        ConsoleCommandsListMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ConsoleCommandsListMessage(input);
        };
        ConsoleCommandsListMessage.prototype.serializeAs_ConsoleCommandsListMessage = function(output) {
            output.writeShort(this.aliases.length);
            for (var _i1 = 0; _i1 < this.aliases.length; _i1++) {
                output.writeUTF(this.aliases[_i1]);
            }
            output.writeShort(this.args.length);
            for (var _i2 = 0; _i2 < this.args.length; _i2++) {
                output.writeUTF(this.args[_i2]);
            }
            output.writeShort(this.descriptions.length);
            for (var _i3 = 0; _i3 < this.descriptions.length; _i3++) {
                output.writeUTF(this.descriptions[_i3]);
            }
        };
        ConsoleCommandsListMessage.prototype.deserializeAs_ConsoleCommandsListMessage = function(input) {
            var _val1 = null;
            var _val2 = null;
            var _val3 = null;
            var _aliasesLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _aliasesLen; _i1++) {
                _val1 = input.readUTF();
                this.aliases.push(_val1);
            }
            var _argsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _argsLen; _i2++) {
                _val2 = input.readUTF();
                this.args.push(_val2);
            }
            var _descriptionsLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _descriptionsLen; _i3++) {
                _val3 = input.readUTF();
                this.descriptions.push(_val3);
            }
        };
        ConsoleCommandsListMessage.ID = 7414;
        return ConsoleCommandsListMessage;
    })(NetworkMessage);
    Protocol.ConsoleCommandsListMessage = ConsoleCommandsListMessage;
    var ConsoleMessage = (function(_super) {
        __extends(ConsoleMessage, _super);

        function ConsoleMessage() {
            this.type = 0;
            this.content = "";
            _super.call(this)
        }
        ConsoleMessage.prototype.getMessageId = function() {
            return ConsoleMessage.ID;
        };
        ConsoleMessage.prototype.reset = function() {
            this.type = 0;
            this.content = "";
        };
        ConsoleMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ConsoleMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ConsoleMessage.prototype.serialize = function(output) {
            this.serializeAs_ConsoleMessage(output);
        };
        ConsoleMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ConsoleMessage(input);
        };
        ConsoleMessage.prototype.serializeAs_ConsoleMessage = function(output) {
            output.writeByte(this.type);
            output.writeUTF(this.content);
        };
        ConsoleMessage.prototype.deserializeAs_ConsoleMessage = function(input) {
            this.type = input.readByte();
            if (this.type < 0) {
                throw new Error("Forbidden value (" + this.type + ") on element of ConsoleMessage.type.");
            }
            this.content = input.readUTF();
        };
        ConsoleMessage.ID = 2223;
        return ConsoleMessage;
    })(NetworkMessage);
    Protocol.ConsoleMessage = ConsoleMessage;
    var BasicPingMessage = (function(_super) {
        __extends(BasicPingMessage, _super);

        function BasicPingMessage() {
            this.quiet = false;
            _super.call(this)
        }
        BasicPingMessage.prototype.getMessageId = function() {
            return BasicPingMessage.ID;
        };
        BasicPingMessage.prototype.reset = function() {
            this.quiet = false;
        };
        BasicPingMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        BasicPingMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        BasicPingMessage.prototype.serialize = function(output) {
            this.serializeAs_BasicPingMessage(output);
        };
        BasicPingMessage.prototype.deserialize = function(input) {
            this.deserializeAs_BasicPingMessage(input);
        };
        BasicPingMessage.prototype.serializeAs_BasicPingMessage = function(output) {
            output.writeBoolean(this.quiet);
        };
        BasicPingMessage.prototype.deserializeAs_BasicPingMessage = function(input) {
            this.quiet = input.readBoolean();
        };
        BasicPingMessage.ID = 9070;
        return BasicPingMessage;
    })(NetworkMessage);
    Protocol.BasicPingMessage = BasicPingMessage;
    var BasicPongMessage = (function(_super) {
        __extends(BasicPongMessage, _super);

        function BasicPongMessage() {
            this.quiet = false;
            _super.call(this)
        }
        BasicPongMessage.prototype.getMessageId = function() {
            return BasicPongMessage.ID;
        };
        BasicPongMessage.prototype.reset = function() {
            this.quiet = false;
        };
        BasicPongMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        BasicPongMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        BasicPongMessage.prototype.serialize = function(output) {
            this.serializeAs_BasicPongMessage(output);
        };
        BasicPongMessage.prototype.deserialize = function(input) {
            this.deserializeAs_BasicPongMessage(input);
        };
        BasicPongMessage.prototype.serializeAs_BasicPongMessage = function(output) {
            output.writeBoolean(this.quiet);
        };
        BasicPongMessage.prototype.deserializeAs_BasicPongMessage = function(input) {
            this.quiet = input.readBoolean();
        };
        BasicPongMessage.ID = 8820;
        return BasicPongMessage;
    })(NetworkMessage);
    Protocol.BasicPongMessage = BasicPongMessage;
    var BasicStatMessage = (function(_super) {
        __extends(BasicStatMessage, _super);

        function BasicStatMessage() {
            this.timeSpent = 0;
            this.statId = 0;
            _super.call(this)
        }
        BasicStatMessage.prototype.getMessageId = function() {
            return BasicStatMessage.ID;
        };
        BasicStatMessage.prototype.reset = function() {
            this.timeSpent = 0;
            this.statId = 0;
        };
        BasicStatMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        BasicStatMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        BasicStatMessage.prototype.serialize = function(output) {
            this.serializeAs_BasicStatMessage(output);
        };
        BasicStatMessage.prototype.deserialize = function(input) {
            this.deserializeAs_BasicStatMessage(input);
        };
        BasicStatMessage.prototype.serializeAs_BasicStatMessage = function(output) {
            if (this.timeSpent < 0 || this.timeSpent > 9007199254740990) {
                throw new Error("Forbidden value (" + this.timeSpent + ") on element timeSpent.");
            }
            output.writeDouble(this.timeSpent);
            output.writeVarShort(this.statId);
        };
        BasicStatMessage.prototype.deserializeAs_BasicStatMessage = function(input) {
            this.timeSpent = input.readDouble();
            if (this.timeSpent < 0 || this.timeSpent > 9007199254740990) {
                throw new Error("Forbidden value (" + this.timeSpent + ") on element of BasicStatMessage.timeSpent.");
            }
            this.statId = input.readVarUhShort();
            if (this.statId < 0) {
                throw new Error("Forbidden value (" + this.statId + ") on element of BasicStatMessage.statId.");
            }
        };
        BasicStatMessage.ID = 7506;
        return BasicStatMessage;
    })(NetworkMessage);
    Protocol.BasicStatMessage = BasicStatMessage;
    var BasicStatWithDataMessage = (function(_super) {
        __extends(BasicStatWithDataMessage, _super);

        function BasicStatWithDataMessage() {
            this.datas = [];
            _super.call(this)
        }
        BasicStatWithDataMessage.prototype.getMessageId = function() {
            return BasicStatWithDataMessage.ID;
        };
        BasicStatWithDataMessage.prototype.reset = function() {
            this.datas = [];
        };
        BasicStatWithDataMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        BasicStatWithDataMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        BasicStatWithDataMessage.prototype.serialize = function(output) {
            this.serializeAs_BasicStatWithDataMessage(output);
        };
        BasicStatWithDataMessage.prototype.deserialize = function(input) {
            this.deserializeAs_BasicStatWithDataMessage(input);
        };
        BasicStatWithDataMessage.prototype.serializeAs_BasicStatWithDataMessage = function(output) {
            _super.prototype.serializeAs_BasicStatMessage.call(this, output);
            output.writeShort(this.datas.length);
            for (var _i1 = 0; _i1 < this.datas.length; _i1++) {
                output.writeShort((this.datas[_i1]).getTypeId());
                (this.datas[_i1]).serialize(output);
            }
        };
        BasicStatWithDataMessage.prototype.deserializeAs_BasicStatWithDataMessage = function(input) {
            var _id1 = 0;
            var _item1 = null;
            _super.prototype.deserializeAs_BasicStatMessage.call(this, input);
            var _datasLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _datasLen; _i1++) {
                _id1 = input.readUnsignedShort();
                _item1 = ProtocolTypeManager.getInstance(StatisticData, _id1);
                _item1.deserialize(input);
                this.datas.push(_item1);
            }
        };
        BasicStatWithDataMessage.ID = 6736;
        return BasicStatWithDataMessage;
    })(BasicStatMessage);
    Protocol.BasicStatWithDataMessage = BasicStatWithDataMessage;
    var NetworkDataContainerMessage = (function(_super) {
        __extends(NetworkDataContainerMessage, _super);

        function NetworkDataContainerMessage() {

            _super.call(this)
        }
        NetworkDataContainerMessage.prototype.getMessageId = function() {
            return NetworkDataContainerMessage.ID;
        };
        NetworkDataContainerMessage.prototype.reset = function() {

        };
        NetworkDataContainerMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        NetworkDataContainerMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        NetworkDataContainerMessage.prototype.serialize = function(output) {
            this.serializeAs_NetworkDataContainerMessage(output);
        };
        NetworkDataContainerMessage.prototype.deserialize = function(input) {
            this.deserializeAs_NetworkDataContainerMessage(input);
        };
        NetworkDataContainerMessage.prototype.serializeAs_NetworkDataContainerMessage = function(output) {
            output.writeBytes(this.content);
            throw new Error("Not implemented");
        };
        NetworkDataContainerMessage.prototype.deserializeAs_NetworkDataContainerMessage = function(input) {
            var _contentLen = input.readVarInt();
            var tmpBuffer = new ByteArray();
            input.readBytes(tmpBuffer, 0, _contentLen);
            tmpBuffer.uncompress();
            this.content = tmpBuffer;
        };
        NetworkDataContainerMessage.ID = 2;
        return NetworkDataContainerMessage;
    })(NetworkMessage);
    Protocol.NetworkDataContainerMessage = NetworkDataContainerMessage;
    var CredentialsAcknowledgementMessage = (function(_super) {
        __extends(CredentialsAcknowledgementMessage, _super);

        function CredentialsAcknowledgementMessage() {

            _super.call(this)
        }
        CredentialsAcknowledgementMessage.prototype.getMessageId = function() {
            return CredentialsAcknowledgementMessage.ID;
        };
        CredentialsAcknowledgementMessage.prototype.reset = function() {

        };
        CredentialsAcknowledgementMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        CredentialsAcknowledgementMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        CredentialsAcknowledgementMessage.prototype.serialize = function(output) {
            this.serializeAs_CredentialsAcknowledgementMessage(output);
        };
        CredentialsAcknowledgementMessage.prototype.deserialize = function(input) {
            this.deserializeAs_CredentialsAcknowledgementMessage(input);
        };
        CredentialsAcknowledgementMessage.prototype.serializeAs_CredentialsAcknowledgementMessage = function(output) {

        };
        CredentialsAcknowledgementMessage.prototype.deserializeAs_CredentialsAcknowledgementMessage = function(input) {

        };
        CredentialsAcknowledgementMessage.ID = 1409;
        return CredentialsAcknowledgementMessage;
    })(NetworkMessage);
    Protocol.CredentialsAcknowledgementMessage = CredentialsAcknowledgementMessage;
    var HelloConnectMessage = (function(_super) {
        __extends(HelloConnectMessage, _super);

        function HelloConnectMessage() {
            this.salt = "";
            this.key = [];
            _super.call(this)
        }
        HelloConnectMessage.prototype.getMessageId = function() {
            return HelloConnectMessage.ID;
        };
        HelloConnectMessage.prototype.reset = function() {
            this.salt = "";
            this.key = [];
        };
        HelloConnectMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        HelloConnectMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        HelloConnectMessage.prototype.serialize = function(output) {
            this.serializeAs_HelloConnectMessage(output);
        };
        HelloConnectMessage.prototype.deserialize = function(input) {
            this.deserializeAs_HelloConnectMessage(input);
        };
        HelloConnectMessage.prototype.serializeAs_HelloConnectMessage = function(output) {
            output.writeUTF(this.salt);
            output.writeVarInt(this.key.length);
            for (var _i2 = 0; _i2 < this.key.length; _i2++) {
                output.writeByte(this.key[_i2]);
            }
        };
        HelloConnectMessage.prototype.deserializeAs_HelloConnectMessage = function(input) {
            var _val2 = 0;
            this.salt = input.readUTF();
            var _keyLen = input.readVarInt();
            for (var _i2 = 0; _i2 < _keyLen; _i2++) {
                _val2 = input.readByte();
                this.key.push(_val2);
            }
        };
        HelloConnectMessage.ID = 1251;
        return HelloConnectMessage;
    })(NetworkMessage);
    Protocol.HelloConnectMessage = HelloConnectMessage;
    var IdentificationMessage = (function(_super) {
        __extends(IdentificationMessage, _super);

        function IdentificationMessage() {
            this.version = new Version();
            this.lang = "";
            this.credentials = [];
            this.serverId = 0;
            this.autoconnect = false;
            this.useCertificate = false;
            this.useLoginToken = false;
            this.sessionOptionalSalt = 0;
            this.failedAttempts = [];
            _super.call(this)
        }
        IdentificationMessage.prototype.getMessageId = function() {
            return IdentificationMessage.ID;
        };
        IdentificationMessage.prototype.reset = function() {
            this.version = new Version();
            this.lang = "";
            this.credentials = [];
            this.serverId = 0;
            this.autoconnect = false;
            this.useCertificate = false;
            this.useLoginToken = false;
            this.sessionOptionalSalt = 0;
            this.failedAttempts = [];
        };
        IdentificationMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        IdentificationMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        IdentificationMessage.prototype.serialize = function(output) {
            this.serializeAs_IdentificationMessage(output);
        };
        IdentificationMessage.prototype.deserialize = function(input) {
            this.deserializeAs_IdentificationMessage(input);
        };
        IdentificationMessage.prototype.serializeAs_IdentificationMessage = function(output) {
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.autoconnect);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.useCertificate);
            _box0 = BooleanByteWrapper.setFlag(_box0, 2, this.useLoginToken);
            output.writeByte(_box0);
            this.version.serializeAs_Version(output);
            output.writeUTF(this.lang);
            output.writeVarInt(this.credentials.length);
            for (var _i3 = 0; _i3 < this.credentials.length; _i3++) {
                output.writeByte(this.credentials[_i3]);
            }
            output.writeShort(this.serverId);
            if (this.sessionOptionalSalt < -9007199254740990 || this.sessionOptionalSalt > 9007199254740990) {
                throw new Error("Forbidden value (" + this.sessionOptionalSalt + ") on element sessionOptionalSalt.");
            }
            output.writeVarLong(this.sessionOptionalSalt);
            output.writeShort(this.failedAttempts.length);
            for (var _i9 = 0; _i9 < this.failedAttempts.length; _i9++) {
                if (this.failedAttempts[_i9] < 0) {
                    throw new Error("Forbidden value (" + this.failedAttempts[_i9] + ") on element 9 (starting at 1) of failedAttempts.");
                }
                output.writeVarShort(this.failedAttempts[_i9]);
            }
        };
        IdentificationMessage.prototype.deserializeAs_IdentificationMessage = function(input) {
            var _val3 = 0;
            var _val9 = 0;
            this.deserializeByteBoxes(input);
            this.version = new Version();
            this.version.deserialize(input);
            this.lang = input.readUTF();
            var _credentialsLen = input.readVarInt();
            for (var _i3 = 0; _i3 < _credentialsLen; _i3++) {
                _val3 = input.readByte();
                this.credentials.push(_val3);
            }
            this.serverId = input.readShort();
            this.sessionOptionalSalt = input.readVarLong();
            if (this.sessionOptionalSalt < -9007199254740990 || this.sessionOptionalSalt > 9007199254740990) {
                throw new Error("Forbidden value (" + this.sessionOptionalSalt + ") on element of IdentificationMessage.sessionOptionalSalt.");
            }
            var _failedAttemptsLen = input.readUnsignedShort();
            for (var _i9 = 0; _i9 < _failedAttemptsLen; _i9++) {
                _val9 = input.readVarUhShort();
                if (_val9 < 0) {
                    throw new Error("Forbidden value (" + _val9 + ") on elements of failedAttempts.");
                }
                this.failedAttempts.push(_val9);
            }
        };
        IdentificationMessage.ID = 8050;
        return IdentificationMessage;
    })(NetworkMessage);
    Protocol.IdentificationMessage = IdentificationMessage;
    var IdentificationAccountForceMessage = (function(_super) {
        __extends(IdentificationAccountForceMessage, _super);

        function IdentificationAccountForceMessage() {
            this.forcedAccountLogin = "";
            _super.call(this)
        }
        IdentificationAccountForceMessage.prototype.getMessageId = function() {
            return IdentificationAccountForceMessage.ID;
        };
        IdentificationAccountForceMessage.prototype.reset = function() {
            this.forcedAccountLogin = "";
        };
        IdentificationAccountForceMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        IdentificationAccountForceMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        IdentificationAccountForceMessage.prototype.serialize = function(output) {
            this.serializeAs_IdentificationAccountForceMessage(output);
        };
        IdentificationAccountForceMessage.prototype.deserialize = function(input) {
            this.deserializeAs_IdentificationAccountForceMessage(input);
        };
        IdentificationAccountForceMessage.prototype.serializeAs_IdentificationAccountForceMessage = function(output) {
            _super.prototype.serializeAs_IdentificationMessage.call(this, output);
            output.writeUTF(this.forcedAccountLogin);
        };
        IdentificationAccountForceMessage.prototype.deserializeAs_IdentificationAccountForceMessage = function(input) {
            _super.prototype.deserializeAs_IdentificationMessage.call(this, input);
            this.forcedAccountLogin = input.readUTF();
        };
        IdentificationAccountForceMessage.ID = 4574;
        return IdentificationAccountForceMessage;
    })(IdentificationMessage);
    Protocol.IdentificationAccountForceMessage = IdentificationAccountForceMessage;
    var IdentificationFailedMessage = (function(_super) {
        __extends(IdentificationFailedMessage, _super);

        function IdentificationFailedMessage() {
            this.reason = 99;
            _super.call(this)
        }
        IdentificationFailedMessage.prototype.getMessageId = function() {
            return IdentificationFailedMessage.ID;
        };
        IdentificationFailedMessage.prototype.reset = function() {
            this.reason = 99;
        };
        IdentificationFailedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        IdentificationFailedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        IdentificationFailedMessage.prototype.serialize = function(output) {
            this.serializeAs_IdentificationFailedMessage(output);
        };
        IdentificationFailedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_IdentificationFailedMessage(input);
        };
        IdentificationFailedMessage.prototype.serializeAs_IdentificationFailedMessage = function(output) {
            output.writeByte(this.reason);
        };
        IdentificationFailedMessage.prototype.deserializeAs_IdentificationFailedMessage = function(input) {
            this.reason = input.readByte();
            if (this.reason < 0) {
                throw new Error("Forbidden value (" + this.reason + ") on element of IdentificationFailedMessage.reason.");
            }
        };
        IdentificationFailedMessage.ID = 1345;
        return IdentificationFailedMessage;
    })(NetworkMessage);
    Protocol.IdentificationFailedMessage = IdentificationFailedMessage;
    var IdentificationFailedBannedMessage = (function(_super) {
        __extends(IdentificationFailedBannedMessage, _super);

        function IdentificationFailedBannedMessage() {
            this.banEndDate = 0;
            _super.call(this)
        }
        IdentificationFailedBannedMessage.prototype.getMessageId = function() {
            return IdentificationFailedBannedMessage.ID;
        };
        IdentificationFailedBannedMessage.prototype.reset = function() {
            this.banEndDate = 0;
        };
        IdentificationFailedBannedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        IdentificationFailedBannedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        IdentificationFailedBannedMessage.prototype.serialize = function(output) {
            this.serializeAs_IdentificationFailedBannedMessage(output);
        };
        IdentificationFailedBannedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_IdentificationFailedBannedMessage(input);
        };
        IdentificationFailedBannedMessage.prototype.serializeAs_IdentificationFailedBannedMessage = function(output) {
            _super.prototype.serializeAs_IdentificationFailedMessage.call(this, output);
            if (this.banEndDate < 0 || this.banEndDate > 9007199254740990) {
                throw new Error("Forbidden value (" + this.banEndDate + ") on element banEndDate.");
            }
            output.writeDouble(this.banEndDate);
        };
        IdentificationFailedBannedMessage.prototype.deserializeAs_IdentificationFailedBannedMessage = function(input) {
            _super.prototype.deserializeAs_IdentificationFailedMessage.call(this, input);
            this.banEndDate = input.readDouble();
            if (this.banEndDate < 0 || this.banEndDate > 9007199254740990) {
                throw new Error("Forbidden value (" + this.banEndDate + ") on element of IdentificationFailedBannedMessage.banEndDate.");
            }
        };
        IdentificationFailedBannedMessage.ID = 5027;
        return IdentificationFailedBannedMessage;
    })(IdentificationFailedMessage);
    Protocol.IdentificationFailedBannedMessage = IdentificationFailedBannedMessage;
    var IdentificationFailedForBadVersionMessage = (function(_super) {
        __extends(IdentificationFailedForBadVersionMessage, _super);

        function IdentificationFailedForBadVersionMessage() {
            this.requiredVersion = new Version();
            _super.call(this)
        }
        IdentificationFailedForBadVersionMessage.prototype.getMessageId = function() {
            return IdentificationFailedForBadVersionMessage.ID;
        };
        IdentificationFailedForBadVersionMessage.prototype.reset = function() {
            this.requiredVersion = new Version();
        };
        IdentificationFailedForBadVersionMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        IdentificationFailedForBadVersionMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        IdentificationFailedForBadVersionMessage.prototype.serialize = function(output) {
            this.serializeAs_IdentificationFailedForBadVersionMessage(output);
        };
        IdentificationFailedForBadVersionMessage.prototype.deserialize = function(input) {
            this.deserializeAs_IdentificationFailedForBadVersionMessage(input);
        };
        IdentificationFailedForBadVersionMessage.prototype.serializeAs_IdentificationFailedForBadVersionMessage = function(output) {
            _super.prototype.serializeAs_IdentificationFailedMessage.call(this, output);
            this.requiredVersion.serializeAs_Version(output);
        };
        IdentificationFailedForBadVersionMessage.prototype.deserializeAs_IdentificationFailedForBadVersionMessage = function(input) {
            _super.prototype.deserializeAs_IdentificationFailedMessage.call(this, input);
            this.requiredVersion = new Version();
            this.requiredVersion.deserialize(input);
        };
        IdentificationFailedForBadVersionMessage.ID = 8907;
        return IdentificationFailedForBadVersionMessage;
    })(IdentificationFailedMessage);
    Protocol.IdentificationFailedForBadVersionMessage = IdentificationFailedForBadVersionMessage;
    var IdentificationSuccessMessage = (function(_super) {
        __extends(IdentificationSuccessMessage, _super);

        function IdentificationSuccessMessage() {
            this.login = "";
            this.nickname = "";
            this.accountId = 0;
            this.communityId = 0;
            this.hasRights = false;
            this.hasConsoleRight = false;
            this.secretQuestion = "";
            this.accountCreation = 0;
            this.subscriptionElapsedDuration = 0;
            this.subscriptionEndDate = 0;
            this.wasAlreadyConnected = false;
            this.havenbagAvailableRoom = 0;
            _super.call(this)
        }
        IdentificationSuccessMessage.prototype.getMessageId = function() {
            return IdentificationSuccessMessage.ID;
        };
        IdentificationSuccessMessage.prototype.reset = function() {
            this.login = "";
            this.nickname = "";
            this.accountId = 0;
            this.communityId = 0;
            this.hasRights = false;
            this.hasConsoleRight = false;
            this.secretQuestion = "";
            this.accountCreation = 0;
            this.subscriptionElapsedDuration = 0;
            this.subscriptionEndDate = 0;
            this.wasAlreadyConnected = false;
            this.havenbagAvailableRoom = 0;
        };
        IdentificationSuccessMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        IdentificationSuccessMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        IdentificationSuccessMessage.prototype.serialize = function(output) {
            this.serializeAs_IdentificationSuccessMessage(output);
        };
        IdentificationSuccessMessage.prototype.deserialize = function(input) {
            this.deserializeAs_IdentificationSuccessMessage(input);
        };
        IdentificationSuccessMessage.prototype.serializeAs_IdentificationSuccessMessage = function(output) {
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.hasRights);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.hasConsoleRight);
            _box0 = BooleanByteWrapper.setFlag(_box0, 2, this.wasAlreadyConnected);
            output.writeByte(_box0);
            output.writeUTF(this.login);
            output.writeUTF(this.nickname);
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element accountId.");
            }
            output.writeInt(this.accountId);
            if (this.communityId < 0) {
                throw new Error("Forbidden value (" + this.communityId + ") on element communityId.");
            }
            output.writeByte(this.communityId);
            output.writeUTF(this.secretQuestion);
            if (this.accountCreation < 0 || this.accountCreation > 9007199254740990) {
                throw new Error("Forbidden value (" + this.accountCreation + ") on element accountCreation.");
            }
            output.writeDouble(this.accountCreation);
            if (this.subscriptionElapsedDuration < 0 || this.subscriptionElapsedDuration > 9007199254740990) {
                throw new Error("Forbidden value (" + this.subscriptionElapsedDuration + ") on element subscriptionElapsedDuration.");
            }
            output.writeDouble(this.subscriptionElapsedDuration);
            if (this.subscriptionEndDate < 0 || this.subscriptionEndDate > 9007199254740990) {
                throw new Error("Forbidden value (" + this.subscriptionEndDate + ") on element subscriptionEndDate.");
            }
            output.writeDouble(this.subscriptionEndDate);
            if (this.havenbagAvailableRoom < 0 || this.havenbagAvailableRoom > 255) {
                throw new Error("Forbidden value (" + this.havenbagAvailableRoom + ") on element havenbagAvailableRoom.");
            }
            output.writeByte(this.havenbagAvailableRoom);
        };
        IdentificationSuccessMessage.prototype.deserializeAs_IdentificationSuccessMessage = function(input) {
            this.deserializeByteBoxes(input);
            this.login = input.readUTF();
            this.nickname = input.readUTF();
            this.accountId = input.readInt();
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element of IdentificationSuccessMessage.accountId.");
            }
            this.communityId = input.readByte();
            if (this.communityId < 0) {
                throw new Error("Forbidden value (" + this.communityId + ") on element of IdentificationSuccessMessage.communityId.");
            }
            this.secretQuestion = input.readUTF();
            this.accountCreation = input.readDouble();
            if (this.accountCreation < 0 || this.accountCreation > 9007199254740990) {
                throw new Error("Forbidden value (" + this.accountCreation + ") on element of IdentificationSuccessMessage.accountCreation.");
            }
            this.subscriptionElapsedDuration = input.readDouble();
            if (this.subscriptionElapsedDuration < 0 || this.subscriptionElapsedDuration > 9007199254740990) {
                throw new Error("Forbidden value (" + this.subscriptionElapsedDuration + ") on element of IdentificationSuccessMessage.subscriptionElapsedDuration.");
            }
            this.subscriptionEndDate = input.readDouble();
            if (this.subscriptionEndDate < 0 || this.subscriptionEndDate > 9007199254740990) {
                throw new Error("Forbidden value (" + this.subscriptionEndDate + ") on element of IdentificationSuccessMessage.subscriptionEndDate.");
            }
            this.havenbagAvailableRoom = input.readUnsignedByte();
            if (this.havenbagAvailableRoom < 0 || this.havenbagAvailableRoom > 255) {
                throw new Error("Forbidden value (" + this.havenbagAvailableRoom + ") on element of IdentificationSuccessMessage.havenbagAvailableRoom.");
            }
        };
        IdentificationSuccessMessage.ID = 149;
        return IdentificationSuccessMessage;
    })(NetworkMessage);
    Protocol.IdentificationSuccessMessage = IdentificationSuccessMessage;
    var IdentificationSuccessWithLoginTokenMessage = (function(_super) {
        __extends(IdentificationSuccessWithLoginTokenMessage, _super);

        function IdentificationSuccessWithLoginTokenMessage() {
            this.loginToken = "";
            _super.call(this)
        }
        IdentificationSuccessWithLoginTokenMessage.prototype.getMessageId = function() {
            return IdentificationSuccessWithLoginTokenMessage.ID;
        };
        IdentificationSuccessWithLoginTokenMessage.prototype.reset = function() {
            this.loginToken = "";
        };
        IdentificationSuccessWithLoginTokenMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        IdentificationSuccessWithLoginTokenMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        IdentificationSuccessWithLoginTokenMessage.prototype.serialize = function(output) {
            this.serializeAs_IdentificationSuccessWithLoginTokenMessage(output);
        };
        IdentificationSuccessWithLoginTokenMessage.prototype.deserialize = function(input) {
            this.deserializeAs_IdentificationSuccessWithLoginTokenMessage(input);
        };
        IdentificationSuccessWithLoginTokenMessage.prototype.serializeAs_IdentificationSuccessWithLoginTokenMessage = function(output) {
            _super.prototype.serializeAs_IdentificationSuccessMessage.call(this, output);
            output.writeUTF(this.loginToken);
        };
        IdentificationSuccessWithLoginTokenMessage.prototype.deserializeAs_IdentificationSuccessWithLoginTokenMessage = function(input) {
            _super.prototype.deserializeAs_IdentificationSuccessMessage.call(this, input);
            this.loginToken = input.readUTF();
        };
        IdentificationSuccessWithLoginTokenMessage.ID = 6160;
        return IdentificationSuccessWithLoginTokenMessage;
    })(IdentificationSuccessMessage);
    Protocol.IdentificationSuccessWithLoginTokenMessage = IdentificationSuccessWithLoginTokenMessage;
    var MigratedServerListMessage = (function(_super) {
        __extends(MigratedServerListMessage, _super);

        function MigratedServerListMessage() {
            this.migratedServerIds = [];
            _super.call(this)
        }
        MigratedServerListMessage.prototype.getMessageId = function() {
            return MigratedServerListMessage.ID;
        };
        MigratedServerListMessage.prototype.reset = function() {
            this.migratedServerIds = [];
        };
        MigratedServerListMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MigratedServerListMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MigratedServerListMessage.prototype.serialize = function(output) {
            this.serializeAs_MigratedServerListMessage(output);
        };
        MigratedServerListMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MigratedServerListMessage(input);
        };
        MigratedServerListMessage.prototype.serializeAs_MigratedServerListMessage = function(output) {
            output.writeShort(this.migratedServerIds.length);
            for (var _i1 = 0; _i1 < this.migratedServerIds.length; _i1++) {
                if (this.migratedServerIds[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.migratedServerIds[_i1] + ") on element 1 (starting at 1) of migratedServerIds.");
                }
                output.writeVarShort(this.migratedServerIds[_i1]);
            }
        };
        MigratedServerListMessage.prototype.deserializeAs_MigratedServerListMessage = function(input) {
            var _val1 = 0;
            var _migratedServerIdsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _migratedServerIdsLen; _i1++) {
                _val1 = input.readVarUhShort();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of migratedServerIds.");
                }
                this.migratedServerIds.push(_val1);
            }
        };
        MigratedServerListMessage.ID = 9270;
        return MigratedServerListMessage;
    })(NetworkMessage);
    Protocol.MigratedServerListMessage = MigratedServerListMessage;
    var AccountLinkRequiredMessage = (function(_super) {
        __extends(AccountLinkRequiredMessage, _super);

        function AccountLinkRequiredMessage() {

            _super.call(this)
        }
        AccountLinkRequiredMessage.prototype.getMessageId = function() {
            return AccountLinkRequiredMessage.ID;
        };
        AccountLinkRequiredMessage.prototype.reset = function() {

        };
        AccountLinkRequiredMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AccountLinkRequiredMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AccountLinkRequiredMessage.prototype.serialize = function(output) {
            this.serializeAs_AccountLinkRequiredMessage(output);
        };
        AccountLinkRequiredMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AccountLinkRequiredMessage(input);
        };
        AccountLinkRequiredMessage.prototype.serializeAs_AccountLinkRequiredMessage = function(output) {

        };
        AccountLinkRequiredMessage.prototype.deserializeAs_AccountLinkRequiredMessage = function(input) {

        };
        AccountLinkRequiredMessage.ID = 7982;
        return AccountLinkRequiredMessage;
    })(NetworkMessage);
    Protocol.AccountLinkRequiredMessage = AccountLinkRequiredMessage;
    var NicknameAcceptedMessage = (function(_super) {
        __extends(NicknameAcceptedMessage, _super);

        function NicknameAcceptedMessage() {

            _super.call(this)
        }
        NicknameAcceptedMessage.prototype.getMessageId = function() {
            return NicknameAcceptedMessage.ID;
        };
        NicknameAcceptedMessage.prototype.reset = function() {

        };
        NicknameAcceptedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        NicknameAcceptedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        NicknameAcceptedMessage.prototype.serialize = function(output) {
            this.serializeAs_NicknameAcceptedMessage(output);
        };
        NicknameAcceptedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_NicknameAcceptedMessage(input);
        };
        NicknameAcceptedMessage.prototype.serializeAs_NicknameAcceptedMessage = function(output) {

        };
        NicknameAcceptedMessage.prototype.deserializeAs_NicknameAcceptedMessage = function(input) {

        };
        NicknameAcceptedMessage.ID = 7967;
        return NicknameAcceptedMessage;
    })(NetworkMessage);
    Protocol.NicknameAcceptedMessage = NicknameAcceptedMessage;
    var NicknameChoiceRequestMessage = (function(_super) {
        __extends(NicknameChoiceRequestMessage, _super);

        function NicknameChoiceRequestMessage() {
            this.nickname = "";
            _super.call(this)
        }
        NicknameChoiceRequestMessage.prototype.getMessageId = function() {
            return NicknameChoiceRequestMessage.ID;
        };
        NicknameChoiceRequestMessage.prototype.reset = function() {
            this.nickname = "";
        };
        NicknameChoiceRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        NicknameChoiceRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        NicknameChoiceRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_NicknameChoiceRequestMessage(output);
        };
        NicknameChoiceRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_NicknameChoiceRequestMessage(input);
        };
        NicknameChoiceRequestMessage.prototype.serializeAs_NicknameChoiceRequestMessage = function(output) {
            output.writeUTF(this.nickname);
        };
        NicknameChoiceRequestMessage.prototype.deserializeAs_NicknameChoiceRequestMessage = function(input) {
            this.nickname = input.readUTF();
        };
        NicknameChoiceRequestMessage.ID = 4237;
        return NicknameChoiceRequestMessage;
    })(NetworkMessage);
    Protocol.NicknameChoiceRequestMessage = NicknameChoiceRequestMessage;
    var NicknameRefusedMessage = (function(_super) {
        __extends(NicknameRefusedMessage, _super);

        function NicknameRefusedMessage() {
            this.reason = 99;
            _super.call(this)
        }
        NicknameRefusedMessage.prototype.getMessageId = function() {
            return NicknameRefusedMessage.ID;
        };
        NicknameRefusedMessage.prototype.reset = function() {
            this.reason = 99;
        };
        NicknameRefusedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        NicknameRefusedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        NicknameRefusedMessage.prototype.serialize = function(output) {
            this.serializeAs_NicknameRefusedMessage(output);
        };
        NicknameRefusedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_NicknameRefusedMessage(input);
        };
        NicknameRefusedMessage.prototype.serializeAs_NicknameRefusedMessage = function(output) {
            output.writeByte(this.reason);
        };
        NicknameRefusedMessage.prototype.deserializeAs_NicknameRefusedMessage = function(input) {
            this.reason = input.readByte();
            if (this.reason < 0) {
                throw new Error("Forbidden value (" + this.reason + ") on element of NicknameRefusedMessage.reason.");
            }
        };
        NicknameRefusedMessage.ID = 8144;
        return NicknameRefusedMessage;
    })(NetworkMessage);
    Protocol.NicknameRefusedMessage = NicknameRefusedMessage;
    var NicknameRegistrationMessage = (function(_super) {
        __extends(NicknameRegistrationMessage, _super);

        function NicknameRegistrationMessage() {

            _super.call(this)
        }
        NicknameRegistrationMessage.prototype.getMessageId = function() {
            return NicknameRegistrationMessage.ID;
        };
        NicknameRegistrationMessage.prototype.reset = function() {

        };
        NicknameRegistrationMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        NicknameRegistrationMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        NicknameRegistrationMessage.prototype.serialize = function(output) {
            this.serializeAs_NicknameRegistrationMessage(output);
        };
        NicknameRegistrationMessage.prototype.deserialize = function(input) {
            this.deserializeAs_NicknameRegistrationMessage(input);
        };
        NicknameRegistrationMessage.prototype.serializeAs_NicknameRegistrationMessage = function(output) {

        };
        NicknameRegistrationMessage.prototype.deserializeAs_NicknameRegistrationMessage = function(input) {

        };
        NicknameRegistrationMessage.ID = 6627;
        return NicknameRegistrationMessage;
    })(NetworkMessage);
    Protocol.NicknameRegistrationMessage = NicknameRegistrationMessage;
    var AcquaintanceSearchErrorMessage = (function(_super) {
        __extends(AcquaintanceSearchErrorMessage, _super);

        function AcquaintanceSearchErrorMessage() {
            this.reason = 0;
            _super.call(this)
        }
        AcquaintanceSearchErrorMessage.prototype.getMessageId = function() {
            return AcquaintanceSearchErrorMessage.ID;
        };
        AcquaintanceSearchErrorMessage.prototype.reset = function() {
            this.reason = 0;
        };
        AcquaintanceSearchErrorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AcquaintanceSearchErrorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AcquaintanceSearchErrorMessage.prototype.serialize = function(output) {
            this.serializeAs_AcquaintanceSearchErrorMessage(output);
        };
        AcquaintanceSearchErrorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AcquaintanceSearchErrorMessage(input);
        };
        AcquaintanceSearchErrorMessage.prototype.serializeAs_AcquaintanceSearchErrorMessage = function(output) {
            output.writeByte(this.reason);
        };
        AcquaintanceSearchErrorMessage.prototype.deserializeAs_AcquaintanceSearchErrorMessage = function(input) {
            this.reason = input.readByte();
            if (this.reason < 0) {
                throw new Error("Forbidden value (" + this.reason + ") on element of AcquaintanceSearchErrorMessage.reason.");
            }
        };
        AcquaintanceSearchErrorMessage.ID = 2175;
        return AcquaintanceSearchErrorMessage;
    })(NetworkMessage);
    Protocol.AcquaintanceSearchErrorMessage = AcquaintanceSearchErrorMessage;
    var AcquaintanceSearchMessage = (function(_super) {
        __extends(AcquaintanceSearchMessage, _super);

        function AcquaintanceSearchMessage() {
            this.nickname = "";
            _super.call(this)
        }
        AcquaintanceSearchMessage.prototype.getMessageId = function() {
            return AcquaintanceSearchMessage.ID;
        };
        AcquaintanceSearchMessage.prototype.reset = function() {
            this.nickname = "";
        };
        AcquaintanceSearchMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AcquaintanceSearchMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AcquaintanceSearchMessage.prototype.serialize = function(output) {
            this.serializeAs_AcquaintanceSearchMessage(output);
        };
        AcquaintanceSearchMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AcquaintanceSearchMessage(input);
        };
        AcquaintanceSearchMessage.prototype.serializeAs_AcquaintanceSearchMessage = function(output) {
            output.writeUTF(this.nickname);
        };
        AcquaintanceSearchMessage.prototype.deserializeAs_AcquaintanceSearchMessage = function(input) {
            this.nickname = input.readUTF();
        };
        AcquaintanceSearchMessage.ID = 4981;
        return AcquaintanceSearchMessage;
    })(NetworkMessage);
    Protocol.AcquaintanceSearchMessage = AcquaintanceSearchMessage;
    var AcquaintanceServerListMessage = (function(_super) {
        __extends(AcquaintanceServerListMessage, _super);

        function AcquaintanceServerListMessage() {
            this.servers = [];
            _super.call(this)
        }
        AcquaintanceServerListMessage.prototype.getMessageId = function() {
            return AcquaintanceServerListMessage.ID;
        };
        AcquaintanceServerListMessage.prototype.reset = function() {
            this.servers = [];
        };
        AcquaintanceServerListMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AcquaintanceServerListMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AcquaintanceServerListMessage.prototype.serialize = function(output) {
            this.serializeAs_AcquaintanceServerListMessage(output);
        };
        AcquaintanceServerListMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AcquaintanceServerListMessage(input);
        };
        AcquaintanceServerListMessage.prototype.serializeAs_AcquaintanceServerListMessage = function(output) {
            output.writeShort(this.servers.length);
            for (var _i1 = 0; _i1 < this.servers.length; _i1++) {
                if (this.servers[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.servers[_i1] + ") on element 1 (starting at 1) of servers.");
                }
                output.writeVarShort(this.servers[_i1]);
            }
        };
        AcquaintanceServerListMessage.prototype.deserializeAs_AcquaintanceServerListMessage = function(input) {
            var _val1 = 0;
            var _serversLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _serversLen; _i1++) {
                _val1 = input.readVarUhShort();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of servers.");
                }
                this.servers.push(_val1);
            }
        };
        AcquaintanceServerListMessage.ID = 1800;
        return AcquaintanceServerListMessage;
    })(NetworkMessage);
    Protocol.AcquaintanceServerListMessage = AcquaintanceServerListMessage;
    var SelectedServerDataMessage = (function(_super) {
        __extends(SelectedServerDataMessage, _super);

        function SelectedServerDataMessage() {
            this.serverId = 0;
            this.address = "";
            this.ports = [];
            this.canCreateNewCharacter = false;
            this.ticket = [];
            _super.call(this)
        }
        SelectedServerDataMessage.prototype.getMessageId = function() {
            return SelectedServerDataMessage.ID;
        };
        SelectedServerDataMessage.prototype.reset = function() {
            this.serverId = 0;
            this.address = "";
            this.ports = [];
            this.canCreateNewCharacter = false;
            this.ticket = [];
        };
        SelectedServerDataMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        SelectedServerDataMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        SelectedServerDataMessage.prototype.serialize = function(output) {
            this.serializeAs_SelectedServerDataMessage(output);
        };
        SelectedServerDataMessage.prototype.deserialize = function(input) {
            this.deserializeAs_SelectedServerDataMessage(input);
        };
        SelectedServerDataMessage.prototype.serializeAs_SelectedServerDataMessage = function(output) {
            if (this.serverId < 0) {
                throw new Error("Forbidden value (" + this.serverId + ") on element serverId.");
            }
            output.writeVarShort(this.serverId);
            output.writeUTF(this.address);
            output.writeShort(this.ports.length);
            for (var _i3 = 0; _i3 < this.ports.length; _i3++) {
                if (this.ports[_i3] < 0) {
                    throw new Error("Forbidden value (" + this.ports[_i3] + ") on element 3 (starting at 1) of ports.");
                }
                output.writeVarShort(this.ports[_i3]);
            }
            output.writeBoolean(this.canCreateNewCharacter);
            output.writeVarInt(this.ticket.length);
            for (var _i5 = 0; _i5 < this.ticket.length; _i5++) {
                output.writeByte(this.ticket[_i5]);
            }
        };
        SelectedServerDataMessage.prototype.deserializeAs_SelectedServerDataMessage = function(input) {
            var _val3 = 0;
            var _val5 = 0;
            this.serverId = input.readVarUhShort();
            if (this.serverId < 0) {
                throw new Error("Forbidden value (" + this.serverId + ") on element of SelectedServerDataMessage.serverId.");
            }
            this.address = input.readUTF();
            var _portsLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _portsLen; _i3++) {
                _val3 = input.readVarUhShort();
                if (_val3 < 0) {
                    throw new Error("Forbidden value (" + _val3 + ") on elements of ports.");
                }
                this.ports.push(_val3);
            }
            this.canCreateNewCharacter = input.readBoolean();
            var _ticketLen = input.readVarInt();
            for (var _i5 = 0; _i5 < _ticketLen; _i5++) {
                _val5 = input.readByte();
                this.ticket.push(_val5);
            }
        };
        SelectedServerDataMessage.ID = 9610;
        return SelectedServerDataMessage;
    })(NetworkMessage);
    Protocol.SelectedServerDataMessage = SelectedServerDataMessage;
    var SelectedServerDataExtendedMessage = (function(_super) {
        __extends(SelectedServerDataExtendedMessage, _super);

        function SelectedServerDataExtendedMessage() {
            this.servers = [];
            _super.call(this)
        }
        SelectedServerDataExtendedMessage.prototype.getMessageId = function() {
            return SelectedServerDataExtendedMessage.ID;
        };
        SelectedServerDataExtendedMessage.prototype.reset = function() {
            this.servers = [];
        };
        SelectedServerDataExtendedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        SelectedServerDataExtendedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        SelectedServerDataExtendedMessage.prototype.serialize = function(output) {
            this.serializeAs_SelectedServerDataExtendedMessage(output);
        };
        SelectedServerDataExtendedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_SelectedServerDataExtendedMessage(input);
        };
        SelectedServerDataExtendedMessage.prototype.serializeAs_SelectedServerDataExtendedMessage = function(output) {
            _super.prototype.serializeAs_SelectedServerDataMessage.call(this, output);
            output.writeShort(this.servers.length);
            for (var _i1 = 0; _i1 < this.servers.length; _i1++) {
                (this.servers[_i1]).serializeAs_GameServerInformations(output);
            }
        };
        SelectedServerDataExtendedMessage.prototype.deserializeAs_SelectedServerDataExtendedMessage = function(input) {
            var _item1 = null;
            _super.prototype.deserializeAs_SelectedServerDataMessage.call(this, input);
            var _serversLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _serversLen; _i1++) {
                _item1 = new GameServerInformations();
                _item1.deserialize(input);
                this.servers.push(_item1);
            }
        };
        SelectedServerDataExtendedMessage.ID = 7321;
        return SelectedServerDataExtendedMessage;
    })(SelectedServerDataMessage);
    Protocol.SelectedServerDataExtendedMessage = SelectedServerDataExtendedMessage;
    var SelectedServerRefusedMessage = (function(_super) {
        __extends(SelectedServerRefusedMessage, _super);

        function SelectedServerRefusedMessage() {
            this.serverId = 0;
            this.error = 1;
            this.serverStatus = 1;
            _super.call(this)
        }
        SelectedServerRefusedMessage.prototype.getMessageId = function() {
            return SelectedServerRefusedMessage.ID;
        };
        SelectedServerRefusedMessage.prototype.reset = function() {
            this.serverId = 0;
            this.error = 1;
            this.serverStatus = 1;
        };
        SelectedServerRefusedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        SelectedServerRefusedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        SelectedServerRefusedMessage.prototype.serialize = function(output) {
            this.serializeAs_SelectedServerRefusedMessage(output);
        };
        SelectedServerRefusedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_SelectedServerRefusedMessage(input);
        };
        SelectedServerRefusedMessage.prototype.serializeAs_SelectedServerRefusedMessage = function(output) {
            if (this.serverId < 0) {
                throw new Error("Forbidden value (" + this.serverId + ") on element serverId.");
            }
            output.writeVarShort(this.serverId);
            output.writeByte(this.error);
            output.writeByte(this.serverStatus);
        };
        SelectedServerRefusedMessage.prototype.deserializeAs_SelectedServerRefusedMessage = function(input) {
            this.serverId = input.readVarUhShort();
            if (this.serverId < 0) {
                throw new Error("Forbidden value (" + this.serverId + ") on element of SelectedServerRefusedMessage.serverId.");
            }
            this.error = input.readByte();
            if (this.error < 0) {
                throw new Error("Forbidden value (" + this.error + ") on element of SelectedServerRefusedMessage.error.");
            }
            this.serverStatus = input.readByte();
            if (this.serverStatus < 0) {
                throw new Error("Forbidden value (" + this.serverStatus + ") on element of SelectedServerRefusedMessage.serverStatus.");
            }
        };
        SelectedServerRefusedMessage.ID = 95;
        return SelectedServerRefusedMessage;
    })(NetworkMessage);
    Protocol.SelectedServerRefusedMessage = SelectedServerRefusedMessage;
    var ServerSelectionMessage = (function(_super) {
        __extends(ServerSelectionMessage, _super);

        function ServerSelectionMessage() {
            this.serverId = 0;
            _super.call(this)
        }
        ServerSelectionMessage.prototype.getMessageId = function() {
            return ServerSelectionMessage.ID;
        };
        ServerSelectionMessage.prototype.reset = function() {
            this.serverId = 0;
        };
        ServerSelectionMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ServerSelectionMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ServerSelectionMessage.prototype.serialize = function(output) {
            this.serializeAs_ServerSelectionMessage(output);
        };
        ServerSelectionMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ServerSelectionMessage(input);
        };
        ServerSelectionMessage.prototype.serializeAs_ServerSelectionMessage = function(output) {
            if (this.serverId < 0) {
                throw new Error("Forbidden value (" + this.serverId + ") on element serverId.");
            }
            output.writeVarShort(this.serverId);
        };
        ServerSelectionMessage.prototype.deserializeAs_ServerSelectionMessage = function(input) {
            this.serverId = input.readVarUhShort();
            if (this.serverId < 0) {
                throw new Error("Forbidden value (" + this.serverId + ") on element of ServerSelectionMessage.serverId.");
            }
        };
        ServerSelectionMessage.ID = 7721;
        return ServerSelectionMessage;
    })(NetworkMessage);
    Protocol.ServerSelectionMessage = ServerSelectionMessage;
    var ServersListMessage = (function(_super) {
        __extends(ServersListMessage, _super);

        function ServersListMessage() {
            this.servers = [];
            this.alreadyConnectedToServerId = 0;
            this.canCreateNewCharacter = false;
            _super.call(this)
        }
        ServersListMessage.prototype.getMessageId = function() {
            return ServersListMessage.ID;
        };
        ServersListMessage.prototype.reset = function() {
            this.servers = [];
            this.alreadyConnectedToServerId = 0;
            this.canCreateNewCharacter = false;
        };
        ServersListMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ServersListMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ServersListMessage.prototype.serialize = function(output) {
            this.serializeAs_ServersListMessage(output);
        };
        ServersListMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ServersListMessage(input);
        };
        ServersListMessage.prototype.serializeAs_ServersListMessage = function(output) {
            output.writeShort(this.servers.length);
            for (var _i1 = 0; _i1 < this.servers.length; _i1++) {
                (this.servers[_i1]).serializeAs_GameServerInformations(output);
            }
            if (this.alreadyConnectedToServerId < 0) {
                throw new Error("Forbidden value (" + this.alreadyConnectedToServerId + ") on element alreadyConnectedToServerId.");
            }
            output.writeVarShort(this.alreadyConnectedToServerId);
            output.writeBoolean(this.canCreateNewCharacter);
        };
        ServersListMessage.prototype.deserializeAs_ServersListMessage = function(input) {
            var _item1 = null;
            var _serversLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _serversLen; _i1++) {
                _item1 = new GameServerInformations();
                _item1.deserialize(input);
                this.servers.push(_item1);
            }
            this.alreadyConnectedToServerId = input.readVarUhShort();
            if (this.alreadyConnectedToServerId < 0) {
                throw new Error("Forbidden value (" + this.alreadyConnectedToServerId + ") on element of ServersListMessage.alreadyConnectedToServerId.");
            }
            this.canCreateNewCharacter = input.readBoolean();
        };
        ServersListMessage.ID = 7603;
        return ServersListMessage;
    })(NetworkMessage);
    Protocol.ServersListMessage = ServersListMessage;
    var ServerStatusUpdateMessage = (function(_super) {
        __extends(ServerStatusUpdateMessage, _super);

        function ServerStatusUpdateMessage() {
            this.server = new GameServerInformations();
            _super.call(this)
        }
        ServerStatusUpdateMessage.prototype.getMessageId = function() {
            return ServerStatusUpdateMessage.ID;
        };
        ServerStatusUpdateMessage.prototype.reset = function() {
            this.server = new GameServerInformations();
        };
        ServerStatusUpdateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ServerStatusUpdateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ServerStatusUpdateMessage.prototype.serialize = function(output) {
            this.serializeAs_ServerStatusUpdateMessage(output);
        };
        ServerStatusUpdateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ServerStatusUpdateMessage(input);
        };
        ServerStatusUpdateMessage.prototype.serializeAs_ServerStatusUpdateMessage = function(output) {
            this.server.serializeAs_GameServerInformations(output);
        };
        ServerStatusUpdateMessage.prototype.deserializeAs_ServerStatusUpdateMessage = function(input) {
            this.server = new GameServerInformations();
            this.server.deserialize(input);
        };
        ServerStatusUpdateMessage.ID = 2105;
        return ServerStatusUpdateMessage;
    })(NetworkMessage);
    Protocol.ServerStatusUpdateMessage = ServerStatusUpdateMessage;
    var DebugClearHighlightCellsMessage = (function(_super) {
        __extends(DebugClearHighlightCellsMessage, _super);

        function DebugClearHighlightCellsMessage() {

            _super.call(this)
        }
        DebugClearHighlightCellsMessage.prototype.getMessageId = function() {
            return DebugClearHighlightCellsMessage.ID;
        };
        DebugClearHighlightCellsMessage.prototype.reset = function() {

        };
        DebugClearHighlightCellsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        DebugClearHighlightCellsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        DebugClearHighlightCellsMessage.prototype.serialize = function(output) {
            this.serializeAs_DebugClearHighlightCellsMessage(output);
        };
        DebugClearHighlightCellsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_DebugClearHighlightCellsMessage(input);
        };
        DebugClearHighlightCellsMessage.prototype.serializeAs_DebugClearHighlightCellsMessage = function(output) {

        };
        DebugClearHighlightCellsMessage.prototype.deserializeAs_DebugClearHighlightCellsMessage = function(input) {

        };
        DebugClearHighlightCellsMessage.ID = 2501;
        return DebugClearHighlightCellsMessage;
    })(NetworkMessage);
    Protocol.DebugClearHighlightCellsMessage = DebugClearHighlightCellsMessage;
    var DebugHighlightCellsMessage = (function(_super) {
        __extends(DebugHighlightCellsMessage, _super);

        function DebugHighlightCellsMessage() {
            this.color = 0;
            this.cells = [];
            _super.call(this)
        }
        DebugHighlightCellsMessage.prototype.getMessageId = function() {
            return DebugHighlightCellsMessage.ID;
        };
        DebugHighlightCellsMessage.prototype.reset = function() {
            this.color = 0;
            this.cells = [];
        };
        DebugHighlightCellsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        DebugHighlightCellsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        DebugHighlightCellsMessage.prototype.serialize = function(output) {
            this.serializeAs_DebugHighlightCellsMessage(output);
        };
        DebugHighlightCellsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_DebugHighlightCellsMessage(input);
        };
        DebugHighlightCellsMessage.prototype.serializeAs_DebugHighlightCellsMessage = function(output) {
            if (this.color < -9007199254740990 || this.color > 9007199254740990) {
                throw new Error("Forbidden value (" + this.color + ") on element color.");
            }
            output.writeDouble(this.color);
            output.writeShort(this.cells.length);
            for (var _i2 = 0; _i2 < this.cells.length; _i2++) {
                if (this.cells[_i2] < 0 || this.cells[_i2] > 559) {
                    throw new Error("Forbidden value (" + this.cells[_i2] + ") on element 2 (starting at 1) of cells.");
                }
                output.writeVarShort(this.cells[_i2]);
            }
        };
        DebugHighlightCellsMessage.prototype.deserializeAs_DebugHighlightCellsMessage = function(input) {
            var _val2 = 0;
            this.color = input.readDouble();
            if (this.color < -9007199254740990 || this.color > 9007199254740990) {
                throw new Error("Forbidden value (" + this.color + ") on element of DebugHighlightCellsMessage.color.");
            }
            var _cellsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _cellsLen; _i2++) {
                _val2 = input.readVarUhShort();
                if (_val2 < 0 || _val2 > 559) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of cells.");
                }
                this.cells.push(_val2);
            }
        };
        DebugHighlightCellsMessage.ID = 7861;
        return DebugHighlightCellsMessage;
    })(NetworkMessage);
    Protocol.DebugHighlightCellsMessage = DebugHighlightCellsMessage;
    var DebugInClientMessage = (function(_super) {
        __extends(DebugInClientMessage, _super);

        function DebugInClientMessage() {
            this.level = 0;
            this.message = "";
            _super.call(this)
        }
        DebugInClientMessage.prototype.getMessageId = function() {
            return DebugInClientMessage.ID;
        };
        DebugInClientMessage.prototype.reset = function() {
            this.level = 0;
            this.message = "";
        };
        DebugInClientMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        DebugInClientMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        DebugInClientMessage.prototype.serialize = function(output) {
            this.serializeAs_DebugInClientMessage(output);
        };
        DebugInClientMessage.prototype.deserialize = function(input) {
            this.deserializeAs_DebugInClientMessage(input);
        };
        DebugInClientMessage.prototype.serializeAs_DebugInClientMessage = function(output) {
            output.writeByte(this.level);
            output.writeUTF(this.message);
        };
        DebugInClientMessage.prototype.deserializeAs_DebugInClientMessage = function(input) {
            this.level = input.readByte();
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element of DebugInClientMessage.level.");
            }
            this.message = input.readUTF();
        };
        DebugInClientMessage.ID = 2283;
        return DebugInClientMessage;
    })(NetworkMessage);
    Protocol.DebugInClientMessage = DebugInClientMessage;
    var AchievementDetailedListMessage = (function(_super) {
        __extends(AchievementDetailedListMessage, _super);

        function AchievementDetailedListMessage() {
            this.startedAchievements = [];
            this.finishedAchievements = [];
            _super.call(this)
        }
        AchievementDetailedListMessage.prototype.getMessageId = function() {
            return AchievementDetailedListMessage.ID;
        };
        AchievementDetailedListMessage.prototype.reset = function() {
            this.startedAchievements = [];
            this.finishedAchievements = [];
        };
        AchievementDetailedListMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AchievementDetailedListMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AchievementDetailedListMessage.prototype.serialize = function(output) {
            this.serializeAs_AchievementDetailedListMessage(output);
        };
        AchievementDetailedListMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AchievementDetailedListMessage(input);
        };
        AchievementDetailedListMessage.prototype.serializeAs_AchievementDetailedListMessage = function(output) {
            output.writeShort(this.startedAchievements.length);
            for (var _i1 = 0; _i1 < this.startedAchievements.length; _i1++) {
                (this.startedAchievements[_i1]).serializeAs_Achievement(output);
            }
            output.writeShort(this.finishedAchievements.length);
            for (var _i2 = 0; _i2 < this.finishedAchievements.length; _i2++) {
                (this.finishedAchievements[_i2]).serializeAs_Achievement(output);
            }
        };
        AchievementDetailedListMessage.prototype.deserializeAs_AchievementDetailedListMessage = function(input) {
            var _item1 = null;
            var _item2 = null;
            var _startedAchievementsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _startedAchievementsLen; _i1++) {
                _item1 = new Achievement();
                _item1.deserialize(input);
                this.startedAchievements.push(_item1);
            }
            var _finishedAchievementsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _finishedAchievementsLen; _i2++) {
                _item2 = new Achievement();
                _item2.deserialize(input);
                this.finishedAchievements.push(_item2);
            }
        };
        AchievementDetailedListMessage.ID = 4019;
        return AchievementDetailedListMessage;
    })(NetworkMessage);
    Protocol.AchievementDetailedListMessage = AchievementDetailedListMessage;
    var AchievementDetailedListRequestMessage = (function(_super) {
        __extends(AchievementDetailedListRequestMessage, _super);

        function AchievementDetailedListRequestMessage() {
            this.categoryId = 0;
            _super.call(this)
        }
        AchievementDetailedListRequestMessage.prototype.getMessageId = function() {
            return AchievementDetailedListRequestMessage.ID;
        };
        AchievementDetailedListRequestMessage.prototype.reset = function() {
            this.categoryId = 0;
        };
        AchievementDetailedListRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AchievementDetailedListRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AchievementDetailedListRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_AchievementDetailedListRequestMessage(output);
        };
        AchievementDetailedListRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AchievementDetailedListRequestMessage(input);
        };
        AchievementDetailedListRequestMessage.prototype.serializeAs_AchievementDetailedListRequestMessage = function(output) {
            if (this.categoryId < 0) {
                throw new Error("Forbidden value (" + this.categoryId + ") on element categoryId.");
            }
            output.writeVarShort(this.categoryId);
        };
        AchievementDetailedListRequestMessage.prototype.deserializeAs_AchievementDetailedListRequestMessage = function(input) {
            this.categoryId = input.readVarUhShort();
            if (this.categoryId < 0) {
                throw new Error("Forbidden value (" + this.categoryId + ") on element of AchievementDetailedListRequestMessage.categoryId.");
            }
        };
        AchievementDetailedListRequestMessage.ID = 8701;
        return AchievementDetailedListRequestMessage;
    })(NetworkMessage);
    Protocol.AchievementDetailedListRequestMessage = AchievementDetailedListRequestMessage;
    var AchievementDetailsMessage = (function(_super) {
        __extends(AchievementDetailsMessage, _super);

        function AchievementDetailsMessage() {
            this.achievement = new Achievement();
            _super.call(this)
        }
        AchievementDetailsMessage.prototype.getMessageId = function() {
            return AchievementDetailsMessage.ID;
        };
        AchievementDetailsMessage.prototype.reset = function() {
            this.achievement = new Achievement();
        };
        AchievementDetailsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AchievementDetailsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AchievementDetailsMessage.prototype.serialize = function(output) {
            this.serializeAs_AchievementDetailsMessage(output);
        };
        AchievementDetailsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AchievementDetailsMessage(input);
        };
        AchievementDetailsMessage.prototype.serializeAs_AchievementDetailsMessage = function(output) {
            this.achievement.serializeAs_Achievement(output);
        };
        AchievementDetailsMessage.prototype.deserializeAs_AchievementDetailsMessage = function(input) {
            this.achievement = new Achievement();
            this.achievement.deserialize(input);
        };
        AchievementDetailsMessage.ID = 535;
        return AchievementDetailsMessage;
    })(NetworkMessage);
    Protocol.AchievementDetailsMessage = AchievementDetailsMessage;
    var AchievementDetailsRequestMessage = (function(_super) {
        __extends(AchievementDetailsRequestMessage, _super);

        function AchievementDetailsRequestMessage() {
            this.achievementId = 0;
            _super.call(this)
        }
        AchievementDetailsRequestMessage.prototype.getMessageId = function() {
            return AchievementDetailsRequestMessage.ID;
        };
        AchievementDetailsRequestMessage.prototype.reset = function() {
            this.achievementId = 0;
        };
        AchievementDetailsRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AchievementDetailsRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AchievementDetailsRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_AchievementDetailsRequestMessage(output);
        };
        AchievementDetailsRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AchievementDetailsRequestMessage(input);
        };
        AchievementDetailsRequestMessage.prototype.serializeAs_AchievementDetailsRequestMessage = function(output) {
            if (this.achievementId < 0) {
                throw new Error("Forbidden value (" + this.achievementId + ") on element achievementId.");
            }
            output.writeVarShort(this.achievementId);
        };
        AchievementDetailsRequestMessage.prototype.deserializeAs_AchievementDetailsRequestMessage = function(input) {
            this.achievementId = input.readVarUhShort();
            if (this.achievementId < 0) {
                throw new Error("Forbidden value (" + this.achievementId + ") on element of AchievementDetailsRequestMessage.achievementId.");
            }
        };
        AchievementDetailsRequestMessage.ID = 2811;
        return AchievementDetailsRequestMessage;
    })(NetworkMessage);
    Protocol.AchievementDetailsRequestMessage = AchievementDetailsRequestMessage;
    var AchievementFinishedMessage = (function(_super) {
        __extends(AchievementFinishedMessage, _super);

        function AchievementFinishedMessage() {
            this.achievement = new AchievementAchievedRewardable();
            _super.call(this)
        }
        AchievementFinishedMessage.prototype.getMessageId = function() {
            return AchievementFinishedMessage.ID;
        };
        AchievementFinishedMessage.prototype.reset = function() {
            this.achievement = new AchievementAchievedRewardable();
        };
        AchievementFinishedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AchievementFinishedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AchievementFinishedMessage.prototype.serialize = function(output) {
            this.serializeAs_AchievementFinishedMessage(output);
        };
        AchievementFinishedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AchievementFinishedMessage(input);
        };
        AchievementFinishedMessage.prototype.serializeAs_AchievementFinishedMessage = function(output) {
            this.achievement.serializeAs_AchievementAchievedRewardable(output);
        };
        AchievementFinishedMessage.prototype.deserializeAs_AchievementFinishedMessage = function(input) {
            this.achievement = new AchievementAchievedRewardable();
            this.achievement.deserialize(input);
        };
        AchievementFinishedMessage.ID = 518;
        return AchievementFinishedMessage;
    })(NetworkMessage);
    Protocol.AchievementFinishedMessage = AchievementFinishedMessage;
    var AchievementFinishedInformationMessage = (function(_super) {
        __extends(AchievementFinishedInformationMessage, _super);

        function AchievementFinishedInformationMessage() {
            this.name = "";
            this.playerId = 0;
            _super.call(this)
        }
        AchievementFinishedInformationMessage.prototype.getMessageId = function() {
            return AchievementFinishedInformationMessage.ID;
        };
        AchievementFinishedInformationMessage.prototype.reset = function() {
            this.name = "";
            this.playerId = 0;
        };
        AchievementFinishedInformationMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AchievementFinishedInformationMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AchievementFinishedInformationMessage.prototype.serialize = function(output) {
            this.serializeAs_AchievementFinishedInformationMessage(output);
        };
        AchievementFinishedInformationMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AchievementFinishedInformationMessage(input);
        };
        AchievementFinishedInformationMessage.prototype.serializeAs_AchievementFinishedInformationMessage = function(output) {
            _super.prototype.serializeAs_AchievementFinishedMessage.call(this, output);
            output.writeUTF(this.name);
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
        };
        AchievementFinishedInformationMessage.prototype.deserializeAs_AchievementFinishedInformationMessage = function(input) {
            _super.prototype.deserializeAs_AchievementFinishedMessage.call(this, input);
            this.name = input.readUTF();
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of AchievementFinishedInformationMessage.playerId.");
            }
        };
        AchievementFinishedInformationMessage.ID = 1659;
        return AchievementFinishedInformationMessage;
    })(AchievementFinishedMessage);
    Protocol.AchievementFinishedInformationMessage = AchievementFinishedInformationMessage;
    var AchievementListMessage = (function(_super) {
        __extends(AchievementListMessage, _super);

        function AchievementListMessage() {
            this.finishedAchievements = [];
            _super.call(this)
        }
        AchievementListMessage.prototype.getMessageId = function() {
            return AchievementListMessage.ID;
        };
        AchievementListMessage.prototype.reset = function() {
            this.finishedAchievements = [];
        };
        AchievementListMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AchievementListMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AchievementListMessage.prototype.serialize = function(output) {
            this.serializeAs_AchievementListMessage(output);
        };
        AchievementListMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AchievementListMessage(input);
        };
        AchievementListMessage.prototype.serializeAs_AchievementListMessage = function(output) {
            output.writeShort(this.finishedAchievements.length);
            for (var _i1 = 0; _i1 < this.finishedAchievements.length; _i1++) {
                output.writeShort((this.finishedAchievements[_i1]).getTypeId());
                (this.finishedAchievements[_i1]).serialize(output);
            }
        };
        AchievementListMessage.prototype.deserializeAs_AchievementListMessage = function(input) {
            var _id1 = 0;
            var _item1 = null;
            var _finishedAchievementsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _finishedAchievementsLen; _i1++) {
                _id1 = input.readUnsignedShort();
                _item1 = ProtocolTypeManager.getInstance(AchievementAchieved, _id1);
                _item1.deserialize(input);
                this.finishedAchievements.push(_item1);
            }
        };
        AchievementListMessage.ID = 3313;
        return AchievementListMessage;
    })(NetworkMessage);
    Protocol.AchievementListMessage = AchievementListMessage;
    var AchievementRewardErrorMessage = (function(_super) {
        __extends(AchievementRewardErrorMessage, _super);

        function AchievementRewardErrorMessage() {
            this.achievementId = 0;
            _super.call(this)
        }
        AchievementRewardErrorMessage.prototype.getMessageId = function() {
            return AchievementRewardErrorMessage.ID;
        };
        AchievementRewardErrorMessage.prototype.reset = function() {
            this.achievementId = 0;
        };
        AchievementRewardErrorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AchievementRewardErrorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AchievementRewardErrorMessage.prototype.serialize = function(output) {
            this.serializeAs_AchievementRewardErrorMessage(output);
        };
        AchievementRewardErrorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AchievementRewardErrorMessage(input);
        };
        AchievementRewardErrorMessage.prototype.serializeAs_AchievementRewardErrorMessage = function(output) {
            output.writeShort(this.achievementId);
        };
        AchievementRewardErrorMessage.prototype.deserializeAs_AchievementRewardErrorMessage = function(input) {
            this.achievementId = input.readShort();
        };
        AchievementRewardErrorMessage.ID = 5517;
        return AchievementRewardErrorMessage;
    })(NetworkMessage);
    Protocol.AchievementRewardErrorMessage = AchievementRewardErrorMessage;
    var AchievementRewardRequestMessage = (function(_super) {
        __extends(AchievementRewardRequestMessage, _super);

        function AchievementRewardRequestMessage() {
            this.achievementId = 0;
            _super.call(this)
        }
        AchievementRewardRequestMessage.prototype.getMessageId = function() {
            return AchievementRewardRequestMessage.ID;
        };
        AchievementRewardRequestMessage.prototype.reset = function() {
            this.achievementId = 0;
        };
        AchievementRewardRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AchievementRewardRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AchievementRewardRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_AchievementRewardRequestMessage(output);
        };
        AchievementRewardRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AchievementRewardRequestMessage(input);
        };
        AchievementRewardRequestMessage.prototype.serializeAs_AchievementRewardRequestMessage = function(output) {
            output.writeShort(this.achievementId);
        };
        AchievementRewardRequestMessage.prototype.deserializeAs_AchievementRewardRequestMessage = function(input) {
            this.achievementId = input.readShort();
        };
        AchievementRewardRequestMessage.ID = 4816;
        return AchievementRewardRequestMessage;
    })(NetworkMessage);
    Protocol.AchievementRewardRequestMessage = AchievementRewardRequestMessage;
    var AchievementRewardSuccessMessage = (function(_super) {
        __extends(AchievementRewardSuccessMessage, _super);

        function AchievementRewardSuccessMessage() {
            this.achievementId = 0;
            _super.call(this)
        }
        AchievementRewardSuccessMessage.prototype.getMessageId = function() {
            return AchievementRewardSuccessMessage.ID;
        };
        AchievementRewardSuccessMessage.prototype.reset = function() {
            this.achievementId = 0;
        };
        AchievementRewardSuccessMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AchievementRewardSuccessMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AchievementRewardSuccessMessage.prototype.serialize = function(output) {
            this.serializeAs_AchievementRewardSuccessMessage(output);
        };
        AchievementRewardSuccessMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AchievementRewardSuccessMessage(input);
        };
        AchievementRewardSuccessMessage.prototype.serializeAs_AchievementRewardSuccessMessage = function(output) {
            output.writeShort(this.achievementId);
        };
        AchievementRewardSuccessMessage.prototype.deserializeAs_AchievementRewardSuccessMessage = function(input) {
            this.achievementId = input.readShort();
        };
        AchievementRewardSuccessMessage.ID = 5062;
        return AchievementRewardSuccessMessage;
    })(NetworkMessage);
    Protocol.AchievementRewardSuccessMessage = AchievementRewardSuccessMessage;
    var FriendGuildSetWarnOnAchievementCompleteMessage = (function(_super) {
        __extends(FriendGuildSetWarnOnAchievementCompleteMessage, _super);

        function FriendGuildSetWarnOnAchievementCompleteMessage() {
            this.enable = false;
            _super.call(this)
        }
        FriendGuildSetWarnOnAchievementCompleteMessage.prototype.getMessageId = function() {
            return FriendGuildSetWarnOnAchievementCompleteMessage.ID;
        };
        FriendGuildSetWarnOnAchievementCompleteMessage.prototype.reset = function() {
            this.enable = false;
        };
        FriendGuildSetWarnOnAchievementCompleteMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        FriendGuildSetWarnOnAchievementCompleteMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        FriendGuildSetWarnOnAchievementCompleteMessage.prototype.serialize = function(output) {
            this.serializeAs_FriendGuildSetWarnOnAchievementCompleteMessage(output);
        };
        FriendGuildSetWarnOnAchievementCompleteMessage.prototype.deserialize = function(input) {
            this.deserializeAs_FriendGuildSetWarnOnAchievementCompleteMessage(input);
        };
        FriendGuildSetWarnOnAchievementCompleteMessage.prototype.serializeAs_FriendGuildSetWarnOnAchievementCompleteMessage = function(output) {
            output.writeBoolean(this.enable);
        };
        FriendGuildSetWarnOnAchievementCompleteMessage.prototype.deserializeAs_FriendGuildSetWarnOnAchievementCompleteMessage = function(input) {
            this.enable = input.readBoolean();
        };
        FriendGuildSetWarnOnAchievementCompleteMessage.ID = 5495;
        return FriendGuildSetWarnOnAchievementCompleteMessage;
    })(NetworkMessage);
    Protocol.FriendGuildSetWarnOnAchievementCompleteMessage = FriendGuildSetWarnOnAchievementCompleteMessage;
    var FriendGuildWarnOnAchievementCompleteStateMessage = (function(_super) {
        __extends(FriendGuildWarnOnAchievementCompleteStateMessage, _super);

        function FriendGuildWarnOnAchievementCompleteStateMessage() {
            this.enable = false;
            _super.call(this)
        }
        FriendGuildWarnOnAchievementCompleteStateMessage.prototype.getMessageId = function() {
            return FriendGuildWarnOnAchievementCompleteStateMessage.ID;
        };
        FriendGuildWarnOnAchievementCompleteStateMessage.prototype.reset = function() {
            this.enable = false;
        };
        FriendGuildWarnOnAchievementCompleteStateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        FriendGuildWarnOnAchievementCompleteStateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        FriendGuildWarnOnAchievementCompleteStateMessage.prototype.serialize = function(output) {
            this.serializeAs_FriendGuildWarnOnAchievementCompleteStateMessage(output);
        };
        FriendGuildWarnOnAchievementCompleteStateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_FriendGuildWarnOnAchievementCompleteStateMessage(input);
        };
        FriendGuildWarnOnAchievementCompleteStateMessage.prototype.serializeAs_FriendGuildWarnOnAchievementCompleteStateMessage = function(output) {
            output.writeBoolean(this.enable);
        };
        FriendGuildWarnOnAchievementCompleteStateMessage.prototype.deserializeAs_FriendGuildWarnOnAchievementCompleteStateMessage = function(input) {
            this.enable = input.readBoolean();
        };
        FriendGuildWarnOnAchievementCompleteStateMessage.ID = 2035;
        return FriendGuildWarnOnAchievementCompleteStateMessage;
    })(NetworkMessage);
    Protocol.FriendGuildWarnOnAchievementCompleteStateMessage = FriendGuildWarnOnAchievementCompleteStateMessage;
    var AbstractGameActionMessage = (function(_super) {
        __extends(AbstractGameActionMessage, _super);

        function AbstractGameActionMessage() {
            this.actionId = 0;
            this.sourceId = 0;
            _super.call(this)
        }
        AbstractGameActionMessage.prototype.getMessageId = function() {
            return AbstractGameActionMessage.ID;
        };
        AbstractGameActionMessage.prototype.reset = function() {
            this.actionId = 0;
            this.sourceId = 0;
        };
        AbstractGameActionMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AbstractGameActionMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AbstractGameActionMessage.prototype.serialize = function(output) {
            this.serializeAs_AbstractGameActionMessage(output);
        };
        AbstractGameActionMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AbstractGameActionMessage(input);
        };
        AbstractGameActionMessage.prototype.serializeAs_AbstractGameActionMessage = function(output) {
            if (this.actionId < 0) {
                throw new Error("Forbidden value (" + this.actionId + ") on element actionId.");
            }
            output.writeVarShort(this.actionId);
            if (this.sourceId < -9007199254740990 || this.sourceId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.sourceId + ") on element sourceId.");
            }
            output.writeDouble(this.sourceId);
        };
        AbstractGameActionMessage.prototype.deserializeAs_AbstractGameActionMessage = function(input) {
            this.actionId = input.readVarUhShort();
            if (this.actionId < 0) {
                throw new Error("Forbidden value (" + this.actionId + ") on element of AbstractGameActionMessage.actionId.");
            }
            this.sourceId = input.readDouble();
            if (this.sourceId < -9007199254740990 || this.sourceId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.sourceId + ") on element of AbstractGameActionMessage.sourceId.");
            }
        };
        AbstractGameActionMessage.ID = 8791;
        return AbstractGameActionMessage;
    })(NetworkMessage);
    Protocol.AbstractGameActionMessage = AbstractGameActionMessage;
    var AbstractGameActionWithAckMessage = (function(_super) {
        __extends(AbstractGameActionWithAckMessage, _super);

        function AbstractGameActionWithAckMessage() {
            this.waitAckId = 0;
            _super.call(this)
        }
        AbstractGameActionWithAckMessage.prototype.getMessageId = function() {
            return AbstractGameActionWithAckMessage.ID;
        };
        AbstractGameActionWithAckMessage.prototype.reset = function() {
            this.waitAckId = 0;
        };
        AbstractGameActionWithAckMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AbstractGameActionWithAckMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AbstractGameActionWithAckMessage.prototype.serialize = function(output) {
            this.serializeAs_AbstractGameActionWithAckMessage(output);
        };
        AbstractGameActionWithAckMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AbstractGameActionWithAckMessage(input);
        };
        AbstractGameActionWithAckMessage.prototype.serializeAs_AbstractGameActionWithAckMessage = function(output) {
            _super.prototype.serializeAs_AbstractGameActionMessage.call(this, output);
            output.writeShort(this.waitAckId);
        };
        AbstractGameActionWithAckMessage.prototype.deserializeAs_AbstractGameActionWithAckMessage = function(input) {
            _super.prototype.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.waitAckId = input.readShort();
        };
        AbstractGameActionWithAckMessage.ID = 7030;
        return AbstractGameActionWithAckMessage;
    })(AbstractGameActionMessage);
    Protocol.AbstractGameActionWithAckMessage = AbstractGameActionWithAckMessage;
    var AbstractGameActionFightTargetedAbilityMessage = (function(_super) {
        __extends(AbstractGameActionFightTargetedAbilityMessage, _super);

        function AbstractGameActionFightTargetedAbilityMessage() {
            this.targetId = 0;
            this.destinationCellId = 0;
            this.critical = 1;
            this.silentCast = false;
            this.verboseCast = false;
            _super.call(this)
        }
        AbstractGameActionFightTargetedAbilityMessage.prototype.getMessageId = function() {
            return AbstractGameActionFightTargetedAbilityMessage.ID;
        };
        AbstractGameActionFightTargetedAbilityMessage.prototype.reset = function() {
            this.targetId = 0;
            this.destinationCellId = 0;
            this.critical = 1;
            this.silentCast = false;
            this.verboseCast = false;
        };
        AbstractGameActionFightTargetedAbilityMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AbstractGameActionFightTargetedAbilityMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AbstractGameActionFightTargetedAbilityMessage.prototype.serialize = function(output) {
            this.serializeAs_AbstractGameActionFightTargetedAbilityMessage(output);
        };
        AbstractGameActionFightTargetedAbilityMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AbstractGameActionFightTargetedAbilityMessage(input);
        };
        AbstractGameActionFightTargetedAbilityMessage.prototype.serializeAs_AbstractGameActionFightTargetedAbilityMessage = function(output) {
            _super.prototype.serializeAs_AbstractGameActionMessage.call(this, output);
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.silentCast);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.verboseCast);
            output.writeByte(_box0);
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            if (this.destinationCellId < -1 || this.destinationCellId > 559) {
                throw new Error("Forbidden value (" + this.destinationCellId + ") on element destinationCellId.");
            }
            output.writeShort(this.destinationCellId);
            output.writeByte(this.critical);
        };
        AbstractGameActionFightTargetedAbilityMessage.prototype.deserializeAs_AbstractGameActionFightTargetedAbilityMessage = function(input) {
            _super.prototype.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.deserializeByteBoxes(input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of AbstractGameActionFightTargetedAbilityMessage.targetId.");
            }
            this.destinationCellId = input.readShort();
            if (this.destinationCellId < -1 || this.destinationCellId > 559) {
                throw new Error("Forbidden value (" + this.destinationCellId + ") on element of AbstractGameActionFightTargetedAbilityMessage.destinationCellId.");
            }
            this.critical = input.readByte();
            if (this.critical < 0) {
                throw new Error("Forbidden value (" + this.critical + ") on element of AbstractGameActionFightTargetedAbilityMessage.critical.");
            }
        };
        AbstractGameActionFightTargetedAbilityMessage.ID = 7655;
        return AbstractGameActionFightTargetedAbilityMessage;
    })(AbstractGameActionMessage);
    Protocol.AbstractGameActionFightTargetedAbilityMessage = AbstractGameActionFightTargetedAbilityMessage;
    var GameActionFightActivateGlyphTrapMessage = (function(_super) {
        __extends(GameActionFightActivateGlyphTrapMessage, _super);

        function GameActionFightActivateGlyphTrapMessage() {
            this.markId = 0;
            this.active = false;
            _super.call(this)
        }
        GameActionFightActivateGlyphTrapMessage.prototype.getMessageId = function() {
            return GameActionFightActivateGlyphTrapMessage.ID;
        };
        GameActionFightActivateGlyphTrapMessage.prototype.reset = function() {
            this.markId = 0;
            this.active = false;
        };
        GameActionFightActivateGlyphTrapMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionFightActivateGlyphTrapMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionFightActivateGlyphTrapMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionFightActivateGlyphTrapMessage(output);
        };
        GameActionFightActivateGlyphTrapMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionFightActivateGlyphTrapMessage(input);
        };
        GameActionFightActivateGlyphTrapMessage.prototype.serializeAs_GameActionFightActivateGlyphTrapMessage = function(output) {
            _super.prototype.serializeAs_AbstractGameActionMessage.call(this, output);
            output.writeShort(this.markId);
            output.writeBoolean(this.active);
        };
        GameActionFightActivateGlyphTrapMessage.prototype.deserializeAs_GameActionFightActivateGlyphTrapMessage = function(input) {
            _super.prototype.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.markId = input.readShort();
            this.active = input.readBoolean();
        };
        GameActionFightActivateGlyphTrapMessage.ID = 449;
        return GameActionFightActivateGlyphTrapMessage;
    })(AbstractGameActionMessage);
    Protocol.GameActionFightActivateGlyphTrapMessage = GameActionFightActivateGlyphTrapMessage;
    var GameActionFightCarryCharacterMessage = (function(_super) {
        __extends(GameActionFightCarryCharacterMessage, _super);

        function GameActionFightCarryCharacterMessage() {
            this.targetId = 0;
            this.cellId = 0;
            _super.call(this)
        }
        GameActionFightCarryCharacterMessage.prototype.getMessageId = function() {
            return GameActionFightCarryCharacterMessage.ID;
        };
        GameActionFightCarryCharacterMessage.prototype.reset = function() {
            this.targetId = 0;
            this.cellId = 0;
        };
        GameActionFightCarryCharacterMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionFightCarryCharacterMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionFightCarryCharacterMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionFightCarryCharacterMessage(output);
        };
        GameActionFightCarryCharacterMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionFightCarryCharacterMessage(input);
        };
        GameActionFightCarryCharacterMessage.prototype.serializeAs_GameActionFightCarryCharacterMessage = function(output) {
            _super.prototype.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            if (this.cellId < -1 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
            }
            output.writeShort(this.cellId);
        };
        GameActionFightCarryCharacterMessage.prototype.deserializeAs_GameActionFightCarryCharacterMessage = function(input) {
            _super.prototype.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightCarryCharacterMessage.targetId.");
            }
            this.cellId = input.readShort();
            if (this.cellId < -1 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element of GameActionFightCarryCharacterMessage.cellId.");
            }
        };
        GameActionFightCarryCharacterMessage.ID = 3652;
        return GameActionFightCarryCharacterMessage;
    })(AbstractGameActionMessage);
    Protocol.GameActionFightCarryCharacterMessage = GameActionFightCarryCharacterMessage;
    var GameActionFightCastOnTargetRequestMessage = (function(_super) {
        __extends(GameActionFightCastOnTargetRequestMessage, _super);

        function GameActionFightCastOnTargetRequestMessage() {
            this.spellId = 0;
            this.targetId = 0;
            _super.call(this)
        }
        GameActionFightCastOnTargetRequestMessage.prototype.getMessageId = function() {
            return GameActionFightCastOnTargetRequestMessage.ID;
        };
        GameActionFightCastOnTargetRequestMessage.prototype.reset = function() {
            this.spellId = 0;
            this.targetId = 0;
        };
        GameActionFightCastOnTargetRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionFightCastOnTargetRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionFightCastOnTargetRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionFightCastOnTargetRequestMessage(output);
        };
        GameActionFightCastOnTargetRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionFightCastOnTargetRequestMessage(input);
        };
        GameActionFightCastOnTargetRequestMessage.prototype.serializeAs_GameActionFightCastOnTargetRequestMessage = function(output) {
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
            }
            output.writeVarShort(this.spellId);
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
        };
        GameActionFightCastOnTargetRequestMessage.prototype.deserializeAs_GameActionFightCastOnTargetRequestMessage = function(input) {
            this.spellId = input.readVarUhShort();
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element of GameActionFightCastOnTargetRequestMessage.spellId.");
            }
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightCastOnTargetRequestMessage.targetId.");
            }
        };
        GameActionFightCastOnTargetRequestMessage.ID = 5055;
        return GameActionFightCastOnTargetRequestMessage;
    })(NetworkMessage);
    Protocol.GameActionFightCastOnTargetRequestMessage = GameActionFightCastOnTargetRequestMessage;
    var GameActionFightCastRequestMessage = (function(_super) {
        __extends(GameActionFightCastRequestMessage, _super);

        function GameActionFightCastRequestMessage() {
            this.spellId = 0;
            this.cellId = 0;
            _super.call(this)
        }
        GameActionFightCastRequestMessage.prototype.getMessageId = function() {
            return GameActionFightCastRequestMessage.ID;
        };
        GameActionFightCastRequestMessage.prototype.reset = function() {
            this.spellId = 0;
            this.cellId = 0;
        };
        GameActionFightCastRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionFightCastRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionFightCastRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionFightCastRequestMessage(output);
        };
        GameActionFightCastRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionFightCastRequestMessage(input);
        };
        GameActionFightCastRequestMessage.prototype.serializeAs_GameActionFightCastRequestMessage = function(output) {
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
            }
            output.writeVarShort(this.spellId);
            if (this.cellId < -1 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
            }
            output.writeShort(this.cellId);
        };
        GameActionFightCastRequestMessage.prototype.deserializeAs_GameActionFightCastRequestMessage = function(input) {
            this.spellId = input.readVarUhShort();
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element of GameActionFightCastRequestMessage.spellId.");
            }
            this.cellId = input.readShort();
            if (this.cellId < -1 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element of GameActionFightCastRequestMessage.cellId.");
            }
        };
        GameActionFightCastRequestMessage.ID = 1470;
        return GameActionFightCastRequestMessage;
    })(NetworkMessage);
    Protocol.GameActionFightCastRequestMessage = GameActionFightCastRequestMessage;
    var GameActionFightChangeLookMessage = (function(_super) {
        __extends(GameActionFightChangeLookMessage, _super);

        function GameActionFightChangeLookMessage() {
            this.targetId = 0;
            this.entityLook = new EntityLook();
            _super.call(this)
        }
        GameActionFightChangeLookMessage.prototype.getMessageId = function() {
            return GameActionFightChangeLookMessage.ID;
        };
        GameActionFightChangeLookMessage.prototype.reset = function() {
            this.targetId = 0;
            this.entityLook = new EntityLook();
        };
        GameActionFightChangeLookMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionFightChangeLookMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionFightChangeLookMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionFightChangeLookMessage(output);
        };
        GameActionFightChangeLookMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionFightChangeLookMessage(input);
        };
        GameActionFightChangeLookMessage.prototype.serializeAs_GameActionFightChangeLookMessage = function(output) {
            _super.prototype.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            this.entityLook.serializeAs_EntityLook(output);
        };
        GameActionFightChangeLookMessage.prototype.deserializeAs_GameActionFightChangeLookMessage = function(input) {
            _super.prototype.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightChangeLookMessage.targetId.");
            }
            this.entityLook = new EntityLook();
            this.entityLook.deserialize(input);
        };
        GameActionFightChangeLookMessage.ID = 5574;
        return GameActionFightChangeLookMessage;
    })(AbstractGameActionMessage);
    Protocol.GameActionFightChangeLookMessage = GameActionFightChangeLookMessage;
    var GameActionFightCloseCombatMessage = (function(_super) {
        __extends(GameActionFightCloseCombatMessage, _super);

        function GameActionFightCloseCombatMessage() {
            this.weaponGenericId = 0;
            _super.call(this)
        }
        GameActionFightCloseCombatMessage.prototype.getMessageId = function() {
            return GameActionFightCloseCombatMessage.ID;
        };
        GameActionFightCloseCombatMessage.prototype.reset = function() {
            this.weaponGenericId = 0;
        };
        GameActionFightCloseCombatMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionFightCloseCombatMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionFightCloseCombatMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionFightCloseCombatMessage(output);
        };
        GameActionFightCloseCombatMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionFightCloseCombatMessage(input);
        };
        GameActionFightCloseCombatMessage.prototype.serializeAs_GameActionFightCloseCombatMessage = function(output) {
            _super.prototype.serializeAs_AbstractGameActionFightTargetedAbilityMessage.call(this, output);
            if (this.weaponGenericId < 0) {
                throw new Error("Forbidden value (" + this.weaponGenericId + ") on element weaponGenericId.");
            }
            output.writeVarShort(this.weaponGenericId);
        };
        GameActionFightCloseCombatMessage.prototype.deserializeAs_GameActionFightCloseCombatMessage = function(input) {
            _super.prototype.deserializeAs_AbstractGameActionFightTargetedAbilityMessage.call(this, input);
            this.weaponGenericId = input.readVarUhShort();
            if (this.weaponGenericId < 0) {
                throw new Error("Forbidden value (" + this.weaponGenericId + ") on element of GameActionFightCloseCombatMessage.weaponGenericId.");
            }
        };
        GameActionFightCloseCombatMessage.ID = 2232;
        return GameActionFightCloseCombatMessage;
    })(AbstractGameActionFightTargetedAbilityMessage);
    Protocol.GameActionFightCloseCombatMessage = GameActionFightCloseCombatMessage;
    var GameActionFightDeathMessage = (function(_super) {
        __extends(GameActionFightDeathMessage, _super);

        function GameActionFightDeathMessage() {
            this.targetId = 0;
            _super.call(this)
        }
        GameActionFightDeathMessage.prototype.getMessageId = function() {
            return GameActionFightDeathMessage.ID;
        };
        GameActionFightDeathMessage.prototype.reset = function() {
            this.targetId = 0;
        };
        GameActionFightDeathMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionFightDeathMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionFightDeathMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionFightDeathMessage(output);
        };
        GameActionFightDeathMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionFightDeathMessage(input);
        };
        GameActionFightDeathMessage.prototype.serializeAs_GameActionFightDeathMessage = function(output) {
            _super.prototype.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
        };
        GameActionFightDeathMessage.prototype.deserializeAs_GameActionFightDeathMessage = function(input) {
            _super.prototype.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightDeathMessage.targetId.");
            }
        };
        GameActionFightDeathMessage.ID = 3225;
        return GameActionFightDeathMessage;
    })(AbstractGameActionMessage);
    Protocol.GameActionFightDeathMessage = GameActionFightDeathMessage;
    var GameActionFightDispellableEffectMessage = (function(_super) {
        __extends(GameActionFightDispellableEffectMessage, _super);

        function GameActionFightDispellableEffectMessage() {
            this.effect = new AbstractFightDispellableEffect();
            _super.call(this)
        }
        GameActionFightDispellableEffectMessage.prototype.getMessageId = function() {
            return GameActionFightDispellableEffectMessage.ID;
        };
        GameActionFightDispellableEffectMessage.prototype.reset = function() {
            this.effect = new AbstractFightDispellableEffect();
        };
        GameActionFightDispellableEffectMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionFightDispellableEffectMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionFightDispellableEffectMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionFightDispellableEffectMessage(output);
        };
        GameActionFightDispellableEffectMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionFightDispellableEffectMessage(input);
        };
        GameActionFightDispellableEffectMessage.prototype.serializeAs_GameActionFightDispellableEffectMessage = function(output) {
            _super.prototype.serializeAs_AbstractGameActionMessage.call(this, output);
            output.writeShort(this.effect.getTypeId());
            this.effect.serialize(output);
        };
        GameActionFightDispellableEffectMessage.prototype.deserializeAs_GameActionFightDispellableEffectMessage = function(input) {
            _super.prototype.deserializeAs_AbstractGameActionMessage.call(this, input);
            var _id1 = input.readUnsignedShort();
            this.effect = ProtocolTypeManager.getInstance(AbstractFightDispellableEffect, _id1);
            this.effect.deserialize(input);
        };
        GameActionFightDispellableEffectMessage.ID = 5910;
        return GameActionFightDispellableEffectMessage;
    })(AbstractGameActionMessage);
    Protocol.GameActionFightDispellableEffectMessage = GameActionFightDispellableEffectMessage;
    var GameActionFightDispellMessage = (function(_super) {
        __extends(GameActionFightDispellMessage, _super);

        function GameActionFightDispellMessage() {
            this.targetId = 0;
            this.verboseCast = false;
            _super.call(this)
        }
        GameActionFightDispellMessage.prototype.getMessageId = function() {
            return GameActionFightDispellMessage.ID;
        };
        GameActionFightDispellMessage.prototype.reset = function() {
            this.targetId = 0;
            this.verboseCast = false;
        };
        GameActionFightDispellMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionFightDispellMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionFightDispellMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionFightDispellMessage(output);
        };
        GameActionFightDispellMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionFightDispellMessage(input);
        };
        GameActionFightDispellMessage.prototype.serializeAs_GameActionFightDispellMessage = function(output) {
            _super.prototype.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            output.writeBoolean(this.verboseCast);
        };
        GameActionFightDispellMessage.prototype.deserializeAs_GameActionFightDispellMessage = function(input) {
            _super.prototype.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightDispellMessage.targetId.");
            }
            this.verboseCast = input.readBoolean();
        };
        GameActionFightDispellMessage.ID = 1408;
        return GameActionFightDispellMessage;
    })(AbstractGameActionMessage);
    Protocol.GameActionFightDispellMessage = GameActionFightDispellMessage;
    var GameActionFightDispellEffectMessage = (function(_super) {
        __extends(GameActionFightDispellEffectMessage, _super);

        function GameActionFightDispellEffectMessage() {
            this.boostUID = 0;
            _super.call(this)
        }
        GameActionFightDispellEffectMessage.prototype.getMessageId = function() {
            return GameActionFightDispellEffectMessage.ID;
        };
        GameActionFightDispellEffectMessage.prototype.reset = function() {
            this.boostUID = 0;
        };
        GameActionFightDispellEffectMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionFightDispellEffectMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionFightDispellEffectMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionFightDispellEffectMessage(output);
        };
        GameActionFightDispellEffectMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionFightDispellEffectMessage(input);
        };
        GameActionFightDispellEffectMessage.prototype.serializeAs_GameActionFightDispellEffectMessage = function(output) {
            _super.prototype.serializeAs_GameActionFightDispellMessage.call(this, output);
            if (this.boostUID < 0) {
                throw new Error("Forbidden value (" + this.boostUID + ") on element boostUID.");
            }
            output.writeInt(this.boostUID);
        };
        GameActionFightDispellEffectMessage.prototype.deserializeAs_GameActionFightDispellEffectMessage = function(input) {
            _super.prototype.deserializeAs_GameActionFightDispellMessage.call(this, input);
            this.boostUID = input.readInt();
            if (this.boostUID < 0) {
                throw new Error("Forbidden value (" + this.boostUID + ") on element of GameActionFightDispellEffectMessage.boostUID.");
            }
        };
        GameActionFightDispellEffectMessage.ID = 7947;
        return GameActionFightDispellEffectMessage;
    })(GameActionFightDispellMessage);
    Protocol.GameActionFightDispellEffectMessage = GameActionFightDispellEffectMessage;
    var GameActionFightDispellSpellMessage = (function(_super) {
        __extends(GameActionFightDispellSpellMessage, _super);

        function GameActionFightDispellSpellMessage() {
            this.spellId = 0;
            _super.call(this)
        }
        GameActionFightDispellSpellMessage.prototype.getMessageId = function() {
            return GameActionFightDispellSpellMessage.ID;
        };
        GameActionFightDispellSpellMessage.prototype.reset = function() {
            this.spellId = 0;
        };
        GameActionFightDispellSpellMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionFightDispellSpellMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionFightDispellSpellMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionFightDispellSpellMessage(output);
        };
        GameActionFightDispellSpellMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionFightDispellSpellMessage(input);
        };
        GameActionFightDispellSpellMessage.prototype.serializeAs_GameActionFightDispellSpellMessage = function(output) {
            _super.prototype.serializeAs_GameActionFightDispellMessage.call(this, output);
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
            }
            output.writeVarShort(this.spellId);
        };
        GameActionFightDispellSpellMessage.prototype.deserializeAs_GameActionFightDispellSpellMessage = function(input) {
            _super.prototype.deserializeAs_GameActionFightDispellMessage.call(this, input);
            this.spellId = input.readVarUhShort();
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element of GameActionFightDispellSpellMessage.spellId.");
            }
        };
        GameActionFightDispellSpellMessage.ID = 9184;
        return GameActionFightDispellSpellMessage;
    })(GameActionFightDispellMessage);
    Protocol.GameActionFightDispellSpellMessage = GameActionFightDispellSpellMessage;
    var GameActionFightDodgePointLossMessage = (function(_super) {
        __extends(GameActionFightDodgePointLossMessage, _super);

        function GameActionFightDodgePointLossMessage() {
            this.targetId = 0;
            this.amount = 0;
            _super.call(this)
        }
        GameActionFightDodgePointLossMessage.prototype.getMessageId = function() {
            return GameActionFightDodgePointLossMessage.ID;
        };
        GameActionFightDodgePointLossMessage.prototype.reset = function() {
            this.targetId = 0;
            this.amount = 0;
        };
        GameActionFightDodgePointLossMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionFightDodgePointLossMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionFightDodgePointLossMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionFightDodgePointLossMessage(output);
        };
        GameActionFightDodgePointLossMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionFightDodgePointLossMessage(input);
        };
        GameActionFightDodgePointLossMessage.prototype.serializeAs_GameActionFightDodgePointLossMessage = function(output) {
            _super.prototype.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            if (this.amount < 0) {
                throw new Error("Forbidden value (" + this.amount + ") on element amount.");
            }
            output.writeVarShort(this.amount);
        };
        GameActionFightDodgePointLossMessage.prototype.deserializeAs_GameActionFightDodgePointLossMessage = function(input) {
            _super.prototype.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightDodgePointLossMessage.targetId.");
            }
            this.amount = input.readVarUhShort();
            if (this.amount < 0) {
                throw new Error("Forbidden value (" + this.amount + ") on element of GameActionFightDodgePointLossMessage.amount.");
            }
        };
        GameActionFightDodgePointLossMessage.ID = 7952;
        return GameActionFightDodgePointLossMessage;
    })(AbstractGameActionMessage);
    Protocol.GameActionFightDodgePointLossMessage = GameActionFightDodgePointLossMessage;
    var GameActionFightDropCharacterMessage = (function(_super) {
        __extends(GameActionFightDropCharacterMessage, _super);

        function GameActionFightDropCharacterMessage() {
            this.targetId = 0;
            this.cellId = 0;
            _super.call(this)
        }
        GameActionFightDropCharacterMessage.prototype.getMessageId = function() {
            return GameActionFightDropCharacterMessage.ID;
        };
        GameActionFightDropCharacterMessage.prototype.reset = function() {
            this.targetId = 0;
            this.cellId = 0;
        };
        GameActionFightDropCharacterMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionFightDropCharacterMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionFightDropCharacterMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionFightDropCharacterMessage(output);
        };
        GameActionFightDropCharacterMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionFightDropCharacterMessage(input);
        };
        GameActionFightDropCharacterMessage.prototype.serializeAs_GameActionFightDropCharacterMessage = function(output) {
            _super.prototype.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            if (this.cellId < -1 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
            }
            output.writeShort(this.cellId);
        };
        GameActionFightDropCharacterMessage.prototype.deserializeAs_GameActionFightDropCharacterMessage = function(input) {
            _super.prototype.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightDropCharacterMessage.targetId.");
            }
            this.cellId = input.readShort();
            if (this.cellId < -1 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element of GameActionFightDropCharacterMessage.cellId.");
            }
        };
        GameActionFightDropCharacterMessage.ID = 8910;
        return GameActionFightDropCharacterMessage;
    })(AbstractGameActionMessage);
    Protocol.GameActionFightDropCharacterMessage = GameActionFightDropCharacterMessage;
    var GameActionFightExchangePositionsMessage = (function(_super) {
        __extends(GameActionFightExchangePositionsMessage, _super);

        function GameActionFightExchangePositionsMessage() {
            this.targetId = 0;
            this.casterCellId = 0;
            this.targetCellId = 0;
            _super.call(this)
        }
        GameActionFightExchangePositionsMessage.prototype.getMessageId = function() {
            return GameActionFightExchangePositionsMessage.ID;
        };
        GameActionFightExchangePositionsMessage.prototype.reset = function() {
            this.targetId = 0;
            this.casterCellId = 0;
            this.targetCellId = 0;
        };
        GameActionFightExchangePositionsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionFightExchangePositionsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionFightExchangePositionsMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionFightExchangePositionsMessage(output);
        };
        GameActionFightExchangePositionsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionFightExchangePositionsMessage(input);
        };
        GameActionFightExchangePositionsMessage.prototype.serializeAs_GameActionFightExchangePositionsMessage = function(output) {
            _super.prototype.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            if (this.casterCellId < -1 || this.casterCellId > 559) {
                throw new Error("Forbidden value (" + this.casterCellId + ") on element casterCellId.");
            }
            output.writeShort(this.casterCellId);
            if (this.targetCellId < -1 || this.targetCellId > 559) {
                throw new Error("Forbidden value (" + this.targetCellId + ") on element targetCellId.");
            }
            output.writeShort(this.targetCellId);
        };
        GameActionFightExchangePositionsMessage.prototype.deserializeAs_GameActionFightExchangePositionsMessage = function(input) {
            _super.prototype.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightExchangePositionsMessage.targetId.");
            }
            this.casterCellId = input.readShort();
            if (this.casterCellId < -1 || this.casterCellId > 559) {
                throw new Error("Forbidden value (" + this.casterCellId + ") on element of GameActionFightExchangePositionsMessage.casterCellId.");
            }
            this.targetCellId = input.readShort();
            if (this.targetCellId < -1 || this.targetCellId > 559) {
                throw new Error("Forbidden value (" + this.targetCellId + ") on element of GameActionFightExchangePositionsMessage.targetCellId.");
            }
        };
        GameActionFightExchangePositionsMessage.ID = 640;
        return GameActionFightExchangePositionsMessage;
    })(AbstractGameActionMessage);
    Protocol.GameActionFightExchangePositionsMessage = GameActionFightExchangePositionsMessage;
    var GameActionFightInvisibilityMessage = (function(_super) {
        __extends(GameActionFightInvisibilityMessage, _super);

        function GameActionFightInvisibilityMessage() {
            this.targetId = 0;
            this.state = 0;
            _super.call(this)
        }
        GameActionFightInvisibilityMessage.prototype.getMessageId = function() {
            return GameActionFightInvisibilityMessage.ID;
        };
        GameActionFightInvisibilityMessage.prototype.reset = function() {
            this.targetId = 0;
            this.state = 0;
        };
        GameActionFightInvisibilityMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionFightInvisibilityMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionFightInvisibilityMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionFightInvisibilityMessage(output);
        };
        GameActionFightInvisibilityMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionFightInvisibilityMessage(input);
        };
        GameActionFightInvisibilityMessage.prototype.serializeAs_GameActionFightInvisibilityMessage = function(output) {
            _super.prototype.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            output.writeByte(this.state);
        };
        GameActionFightInvisibilityMessage.prototype.deserializeAs_GameActionFightInvisibilityMessage = function(input) {
            _super.prototype.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightInvisibilityMessage.targetId.");
            }
            this.state = input.readByte();
            if (this.state < 0) {
                throw new Error("Forbidden value (" + this.state + ") on element of GameActionFightInvisibilityMessage.state.");
            }
        };
        GameActionFightInvisibilityMessage.ID = 1575;
        return GameActionFightInvisibilityMessage;
    })(AbstractGameActionMessage);
    Protocol.GameActionFightInvisibilityMessage = GameActionFightInvisibilityMessage;
    var GameActionFightInvisibleDetectedMessage = (function(_super) {
        __extends(GameActionFightInvisibleDetectedMessage, _super);

        function GameActionFightInvisibleDetectedMessage() {
            this.targetId = 0;
            this.cellId = 0;
            _super.call(this)
        }
        GameActionFightInvisibleDetectedMessage.prototype.getMessageId = function() {
            return GameActionFightInvisibleDetectedMessage.ID;
        };
        GameActionFightInvisibleDetectedMessage.prototype.reset = function() {
            this.targetId = 0;
            this.cellId = 0;
        };
        GameActionFightInvisibleDetectedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionFightInvisibleDetectedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionFightInvisibleDetectedMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionFightInvisibleDetectedMessage(output);
        };
        GameActionFightInvisibleDetectedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionFightInvisibleDetectedMessage(input);
        };
        GameActionFightInvisibleDetectedMessage.prototype.serializeAs_GameActionFightInvisibleDetectedMessage = function(output) {
            _super.prototype.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            if (this.cellId < -1 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
            }
            output.writeShort(this.cellId);
        };
        GameActionFightInvisibleDetectedMessage.prototype.deserializeAs_GameActionFightInvisibleDetectedMessage = function(input) {
            _super.prototype.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightInvisibleDetectedMessage.targetId.");
            }
            this.cellId = input.readShort();
            if (this.cellId < -1 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element of GameActionFightInvisibleDetectedMessage.cellId.");
            }
        };
        GameActionFightInvisibleDetectedMessage.ID = 4737;
        return GameActionFightInvisibleDetectedMessage;
    })(AbstractGameActionMessage);
    Protocol.GameActionFightInvisibleDetectedMessage = GameActionFightInvisibleDetectedMessage;
    var GameActionFightKillMessage = (function(_super) {
        __extends(GameActionFightKillMessage, _super);

        function GameActionFightKillMessage() {
            this.targetId = 0;
            _super.call(this)
        }
        GameActionFightKillMessage.prototype.getMessageId = function() {
            return GameActionFightKillMessage.ID;
        };
        GameActionFightKillMessage.prototype.reset = function() {
            this.targetId = 0;
        };
        GameActionFightKillMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionFightKillMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionFightKillMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionFightKillMessage(output);
        };
        GameActionFightKillMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionFightKillMessage(input);
        };
        GameActionFightKillMessage.prototype.serializeAs_GameActionFightKillMessage = function(output) {
            _super.prototype.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
        };
        GameActionFightKillMessage.prototype.deserializeAs_GameActionFightKillMessage = function(input) {
            _super.prototype.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightKillMessage.targetId.");
            }
        };
        GameActionFightKillMessage.ID = 8275;
        return GameActionFightKillMessage;
    })(AbstractGameActionMessage);
    Protocol.GameActionFightKillMessage = GameActionFightKillMessage;
    var GameActionFightLifePointsLostMessage = (function(_super) {
        __extends(GameActionFightLifePointsLostMessage, _super);

        function GameActionFightLifePointsLostMessage() {
            this.targetId = 0;
            this.loss = 0;
            this.permanentDamages = 0;
            this.elementId = 0;
            _super.call(this)
        }
        GameActionFightLifePointsLostMessage.prototype.getMessageId = function() {
            return GameActionFightLifePointsLostMessage.ID;
        };
        GameActionFightLifePointsLostMessage.prototype.reset = function() {
            this.targetId = 0;
            this.loss = 0;
            this.permanentDamages = 0;
            this.elementId = 0;
        };
        GameActionFightLifePointsLostMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionFightLifePointsLostMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionFightLifePointsLostMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionFightLifePointsLostMessage(output);
        };
        GameActionFightLifePointsLostMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionFightLifePointsLostMessage(input);
        };
        GameActionFightLifePointsLostMessage.prototype.serializeAs_GameActionFightLifePointsLostMessage = function(output) {
            _super.prototype.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            if (this.loss < 0) {
                throw new Error("Forbidden value (" + this.loss + ") on element loss.");
            }
            output.writeVarInt(this.loss);
            if (this.permanentDamages < 0) {
                throw new Error("Forbidden value (" + this.permanentDamages + ") on element permanentDamages.");
            }
            output.writeVarInt(this.permanentDamages);
            output.writeVarInt(this.elementId);
        };
        GameActionFightLifePointsLostMessage.prototype.deserializeAs_GameActionFightLifePointsLostMessage = function(input) {
            _super.prototype.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightLifePointsLostMessage.targetId.");
            }
            this.loss = input.readVarUhInt();
            if (this.loss < 0) {
                throw new Error("Forbidden value (" + this.loss + ") on element of GameActionFightLifePointsLostMessage.loss.");
            }
            this.permanentDamages = input.readVarUhInt();
            if (this.permanentDamages < 0) {
                throw new Error("Forbidden value (" + this.permanentDamages + ") on element of GameActionFightLifePointsLostMessage.permanentDamages.");
            }
            this.elementId = input.readVarInt();
        };
        GameActionFightLifePointsLostMessage.ID = 8747;
        return GameActionFightLifePointsLostMessage;
    })(AbstractGameActionMessage);
    Protocol.GameActionFightLifePointsLostMessage = GameActionFightLifePointsLostMessage;
    var GameActionFightLifeAndShieldPointsLostMessage = (function(_super) {
        __extends(GameActionFightLifeAndShieldPointsLostMessage, _super);

        function GameActionFightLifeAndShieldPointsLostMessage() {
            this.shieldLoss = 0;
            _super.call(this)
        }
        GameActionFightLifeAndShieldPointsLostMessage.prototype.getMessageId = function() {
            return GameActionFightLifeAndShieldPointsLostMessage.ID;
        };
        GameActionFightLifeAndShieldPointsLostMessage.prototype.reset = function() {
            this.shieldLoss = 0;
        };
        GameActionFightLifeAndShieldPointsLostMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionFightLifeAndShieldPointsLostMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionFightLifeAndShieldPointsLostMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionFightLifeAndShieldPointsLostMessage(output);
        };
        GameActionFightLifeAndShieldPointsLostMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionFightLifeAndShieldPointsLostMessage(input);
        };
        GameActionFightLifeAndShieldPointsLostMessage.prototype.serializeAs_GameActionFightLifeAndShieldPointsLostMessage = function(output) {
            _super.prototype.serializeAs_GameActionFightLifePointsLostMessage.call(this, output);
            if (this.shieldLoss < 0) {
                throw new Error("Forbidden value (" + this.shieldLoss + ") on element shieldLoss.");
            }
            output.writeVarShort(this.shieldLoss);
        };
        GameActionFightLifeAndShieldPointsLostMessage.prototype.deserializeAs_GameActionFightLifeAndShieldPointsLostMessage = function(input) {
            _super.prototype.deserializeAs_GameActionFightLifePointsLostMessage.call(this, input);
            this.shieldLoss = input.readVarUhShort();
            if (this.shieldLoss < 0) {
                throw new Error("Forbidden value (" + this.shieldLoss + ") on element of GameActionFightLifeAndShieldPointsLostMessage.shieldLoss.");
            }
        };
        GameActionFightLifeAndShieldPointsLostMessage.ID = 423;
        return GameActionFightLifeAndShieldPointsLostMessage;
    })(GameActionFightLifePointsLostMessage);
    Protocol.GameActionFightLifeAndShieldPointsLostMessage = GameActionFightLifeAndShieldPointsLostMessage;
    var GameActionFightLifePointsGainMessage = (function(_super) {
        __extends(GameActionFightLifePointsGainMessage, _super);

        function GameActionFightLifePointsGainMessage() {
            this.targetId = 0;
            this.delta = 0;
            _super.call(this)
        }
        GameActionFightLifePointsGainMessage.prototype.getMessageId = function() {
            return GameActionFightLifePointsGainMessage.ID;
        };
        GameActionFightLifePointsGainMessage.prototype.reset = function() {
            this.targetId = 0;
            this.delta = 0;
        };
        GameActionFightLifePointsGainMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionFightLifePointsGainMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionFightLifePointsGainMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionFightLifePointsGainMessage(output);
        };
        GameActionFightLifePointsGainMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionFightLifePointsGainMessage(input);
        };
        GameActionFightLifePointsGainMessage.prototype.serializeAs_GameActionFightLifePointsGainMessage = function(output) {
            _super.prototype.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            if (this.delta < 0) {
                throw new Error("Forbidden value (" + this.delta + ") on element delta.");
            }
            output.writeVarInt(this.delta);
        };
        GameActionFightLifePointsGainMessage.prototype.deserializeAs_GameActionFightLifePointsGainMessage = function(input) {
            _super.prototype.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightLifePointsGainMessage.targetId.");
            }
            this.delta = input.readVarUhInt();
            if (this.delta < 0) {
                throw new Error("Forbidden value (" + this.delta + ") on element of GameActionFightLifePointsGainMessage.delta.");
            }
        };
        GameActionFightLifePointsGainMessage.ID = 1531;
        return GameActionFightLifePointsGainMessage;
    })(AbstractGameActionMessage);
    Protocol.GameActionFightLifePointsGainMessage = GameActionFightLifePointsGainMessage;
    var GameActionFightMarkCellsMessage = (function(_super) {
        __extends(GameActionFightMarkCellsMessage, _super);

        function GameActionFightMarkCellsMessage() {
            this.mark = new GameActionMark();
            _super.call(this)
        }
        GameActionFightMarkCellsMessage.prototype.getMessageId = function() {
            return GameActionFightMarkCellsMessage.ID;
        };
        GameActionFightMarkCellsMessage.prototype.reset = function() {
            this.mark = new GameActionMark();
        };
        GameActionFightMarkCellsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionFightMarkCellsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionFightMarkCellsMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionFightMarkCellsMessage(output);
        };
        GameActionFightMarkCellsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionFightMarkCellsMessage(input);
        };
        GameActionFightMarkCellsMessage.prototype.serializeAs_GameActionFightMarkCellsMessage = function(output) {
            _super.prototype.serializeAs_AbstractGameActionMessage.call(this, output);
            this.mark.serializeAs_GameActionMark(output);
        };
        GameActionFightMarkCellsMessage.prototype.deserializeAs_GameActionFightMarkCellsMessage = function(input) {
            _super.prototype.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.mark = new GameActionMark();
            this.mark.deserialize(input);
        };
        GameActionFightMarkCellsMessage.ID = 1538;
        return GameActionFightMarkCellsMessage;
    })(AbstractGameActionMessage);
    Protocol.GameActionFightMarkCellsMessage = GameActionFightMarkCellsMessage;
    var GameActionFightModifyEffectsDurationMessage = (function(_super) {
        __extends(GameActionFightModifyEffectsDurationMessage, _super);

        function GameActionFightModifyEffectsDurationMessage() {
            this.targetId = 0;
            this.delta = 0;
            _super.call(this)
        }
        GameActionFightModifyEffectsDurationMessage.prototype.getMessageId = function() {
            return GameActionFightModifyEffectsDurationMessage.ID;
        };
        GameActionFightModifyEffectsDurationMessage.prototype.reset = function() {
            this.targetId = 0;
            this.delta = 0;
        };
        GameActionFightModifyEffectsDurationMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionFightModifyEffectsDurationMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionFightModifyEffectsDurationMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionFightModifyEffectsDurationMessage(output);
        };
        GameActionFightModifyEffectsDurationMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionFightModifyEffectsDurationMessage(input);
        };
        GameActionFightModifyEffectsDurationMessage.prototype.serializeAs_GameActionFightModifyEffectsDurationMessage = function(output) {
            _super.prototype.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            output.writeShort(this.delta);
        };
        GameActionFightModifyEffectsDurationMessage.prototype.deserializeAs_GameActionFightModifyEffectsDurationMessage = function(input) {
            _super.prototype.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightModifyEffectsDurationMessage.targetId.");
            }
            this.delta = input.readShort();
        };
        GameActionFightModifyEffectsDurationMessage.ID = 6413;
        return GameActionFightModifyEffectsDurationMessage;
    })(AbstractGameActionMessage);
    Protocol.GameActionFightModifyEffectsDurationMessage = GameActionFightModifyEffectsDurationMessage;
    var GameActionFightMultipleSummonMessage = (function(_super) {
        __extends(GameActionFightMultipleSummonMessage, _super);

        function GameActionFightMultipleSummonMessage() {
            this.summons = [];
            _super.call(this)
        }
        GameActionFightMultipleSummonMessage.prototype.getMessageId = function() {
            return GameActionFightMultipleSummonMessage.ID;
        };
        GameActionFightMultipleSummonMessage.prototype.reset = function() {
            this.summons = [];
        };
        GameActionFightMultipleSummonMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionFightMultipleSummonMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionFightMultipleSummonMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionFightMultipleSummonMessage(output);
        };
        GameActionFightMultipleSummonMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionFightMultipleSummonMessage(input);
        };
        GameActionFightMultipleSummonMessage.prototype.serializeAs_GameActionFightMultipleSummonMessage = function(output) {
            _super.prototype.serializeAs_AbstractGameActionMessage.call(this, output);
            output.writeShort(this.summons.length);
            for (var _i1 = 0; _i1 < this.summons.length; _i1++) {
                output.writeShort((this.summons[_i1]).getTypeId());
                (this.summons[_i1]).serialize(output);
            }
        };
        GameActionFightMultipleSummonMessage.prototype.deserializeAs_GameActionFightMultipleSummonMessage = function(input) {
            var _id1 = 0;
            var _item1 = null;
            _super.prototype.deserializeAs_AbstractGameActionMessage.call(this, input);
            var _summonsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _summonsLen; _i1++) {
                _id1 = input.readUnsignedShort();
                _item1 = ProtocolTypeManager.getInstance(GameContextSummonsInformation, _id1);
                _item1.deserialize(input);
                this.summons.push(_item1);
            }
        };
        GameActionFightMultipleSummonMessage.ID = 5036;
        return GameActionFightMultipleSummonMessage;
    })(AbstractGameActionMessage);
    Protocol.GameActionFightMultipleSummonMessage = GameActionFightMultipleSummonMessage;
    var GameActionFightNoSpellCastMessage = (function(_super) {
        __extends(GameActionFightNoSpellCastMessage, _super);

        function GameActionFightNoSpellCastMessage() {
            this.spellLevelId = 0;
            _super.call(this)
        }
        GameActionFightNoSpellCastMessage.prototype.getMessageId = function() {
            return GameActionFightNoSpellCastMessage.ID;
        };
        GameActionFightNoSpellCastMessage.prototype.reset = function() {
            this.spellLevelId = 0;
        };
        GameActionFightNoSpellCastMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionFightNoSpellCastMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionFightNoSpellCastMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionFightNoSpellCastMessage(output);
        };
        GameActionFightNoSpellCastMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionFightNoSpellCastMessage(input);
        };
        GameActionFightNoSpellCastMessage.prototype.serializeAs_GameActionFightNoSpellCastMessage = function(output) {
            if (this.spellLevelId < 0) {
                throw new Error("Forbidden value (" + this.spellLevelId + ") on element spellLevelId.");
            }
            output.writeVarInt(this.spellLevelId);
        };
        GameActionFightNoSpellCastMessage.prototype.deserializeAs_GameActionFightNoSpellCastMessage = function(input) {
            this.spellLevelId = input.readVarUhInt();
            if (this.spellLevelId < 0) {
                throw new Error("Forbidden value (" + this.spellLevelId + ") on element of GameActionFightNoSpellCastMessage.spellLevelId.");
            }
        };
        GameActionFightNoSpellCastMessage.ID = 2159;
        return GameActionFightNoSpellCastMessage;
    })(NetworkMessage);
    Protocol.GameActionFightNoSpellCastMessage = GameActionFightNoSpellCastMessage;
    var GameActionFightPointsVariationMessage = (function(_super) {
        __extends(GameActionFightPointsVariationMessage, _super);

        function GameActionFightPointsVariationMessage() {
            this.targetId = 0;
            this.delta = 0;
            _super.call(this)
        }
        GameActionFightPointsVariationMessage.prototype.getMessageId = function() {
            return GameActionFightPointsVariationMessage.ID;
        };
        GameActionFightPointsVariationMessage.prototype.reset = function() {
            this.targetId = 0;
            this.delta = 0;
        };
        GameActionFightPointsVariationMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionFightPointsVariationMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionFightPointsVariationMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionFightPointsVariationMessage(output);
        };
        GameActionFightPointsVariationMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionFightPointsVariationMessage(input);
        };
        GameActionFightPointsVariationMessage.prototype.serializeAs_GameActionFightPointsVariationMessage = function(output) {
            _super.prototype.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            output.writeShort(this.delta);
        };
        GameActionFightPointsVariationMessage.prototype.deserializeAs_GameActionFightPointsVariationMessage = function(input) {
            _super.prototype.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightPointsVariationMessage.targetId.");
            }
            this.delta = input.readShort();
        };
        GameActionFightPointsVariationMessage.ID = 5415;
        return GameActionFightPointsVariationMessage;
    })(AbstractGameActionMessage);
    Protocol.GameActionFightPointsVariationMessage = GameActionFightPointsVariationMessage;
    var GameActionFightReduceDamagesMessage = (function(_super) {
        __extends(GameActionFightReduceDamagesMessage, _super);

        function GameActionFightReduceDamagesMessage() {
            this.targetId = 0;
            this.amount = 0;
            _super.call(this)
        }
        GameActionFightReduceDamagesMessage.prototype.getMessageId = function() {
            return GameActionFightReduceDamagesMessage.ID;
        };
        GameActionFightReduceDamagesMessage.prototype.reset = function() {
            this.targetId = 0;
            this.amount = 0;
        };
        GameActionFightReduceDamagesMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionFightReduceDamagesMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionFightReduceDamagesMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionFightReduceDamagesMessage(output);
        };
        GameActionFightReduceDamagesMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionFightReduceDamagesMessage(input);
        };
        GameActionFightReduceDamagesMessage.prototype.serializeAs_GameActionFightReduceDamagesMessage = function(output) {
            _super.prototype.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            if (this.amount < 0) {
                throw new Error("Forbidden value (" + this.amount + ") on element amount.");
            }
            output.writeVarInt(this.amount);
        };
        GameActionFightReduceDamagesMessage.prototype.deserializeAs_GameActionFightReduceDamagesMessage = function(input) {
            _super.prototype.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightReduceDamagesMessage.targetId.");
            }
            this.amount = input.readVarUhInt();
            if (this.amount < 0) {
                throw new Error("Forbidden value (" + this.amount + ") on element of GameActionFightReduceDamagesMessage.amount.");
            }
        };
        GameActionFightReduceDamagesMessage.ID = 6074;
        return GameActionFightReduceDamagesMessage;
    })(AbstractGameActionMessage);
    Protocol.GameActionFightReduceDamagesMessage = GameActionFightReduceDamagesMessage;
    var GameActionFightReflectDamagesMessage = (function(_super) {
        __extends(GameActionFightReflectDamagesMessage, _super);

        function GameActionFightReflectDamagesMessage() {
            this.targetId = 0;
            _super.call(this)
        }
        GameActionFightReflectDamagesMessage.prototype.getMessageId = function() {
            return GameActionFightReflectDamagesMessage.ID;
        };
        GameActionFightReflectDamagesMessage.prototype.reset = function() {
            this.targetId = 0;
        };
        GameActionFightReflectDamagesMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionFightReflectDamagesMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionFightReflectDamagesMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionFightReflectDamagesMessage(output);
        };
        GameActionFightReflectDamagesMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionFightReflectDamagesMessage(input);
        };
        GameActionFightReflectDamagesMessage.prototype.serializeAs_GameActionFightReflectDamagesMessage = function(output) {
            _super.prototype.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
        };
        GameActionFightReflectDamagesMessage.prototype.deserializeAs_GameActionFightReflectDamagesMessage = function(input) {
            _super.prototype.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightReflectDamagesMessage.targetId.");
            }
        };
        GameActionFightReflectDamagesMessage.ID = 7605;
        return GameActionFightReflectDamagesMessage;
    })(AbstractGameActionMessage);
    Protocol.GameActionFightReflectDamagesMessage = GameActionFightReflectDamagesMessage;
    var GameActionFightReflectSpellMessage = (function(_super) {
        __extends(GameActionFightReflectSpellMessage, _super);

        function GameActionFightReflectSpellMessage() {
            this.targetId = 0;
            _super.call(this)
        }
        GameActionFightReflectSpellMessage.prototype.getMessageId = function() {
            return GameActionFightReflectSpellMessage.ID;
        };
        GameActionFightReflectSpellMessage.prototype.reset = function() {
            this.targetId = 0;
        };
        GameActionFightReflectSpellMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionFightReflectSpellMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionFightReflectSpellMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionFightReflectSpellMessage(output);
        };
        GameActionFightReflectSpellMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionFightReflectSpellMessage(input);
        };
        GameActionFightReflectSpellMessage.prototype.serializeAs_GameActionFightReflectSpellMessage = function(output) {
            _super.prototype.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
        };
        GameActionFightReflectSpellMessage.prototype.deserializeAs_GameActionFightReflectSpellMessage = function(input) {
            _super.prototype.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightReflectSpellMessage.targetId.");
            }
        };
        GameActionFightReflectSpellMessage.ID = 1453;
        return GameActionFightReflectSpellMessage;
    })(AbstractGameActionMessage);
    Protocol.GameActionFightReflectSpellMessage = GameActionFightReflectSpellMessage;
    var GameActionFightSlideMessage = (function(_super) {
        __extends(GameActionFightSlideMessage, _super);

        function GameActionFightSlideMessage() {
            this.targetId = 0;
            this.startCellId = 0;
            this.endCellId = 0;
            _super.call(this)
        }
        GameActionFightSlideMessage.prototype.getMessageId = function() {
            return GameActionFightSlideMessage.ID;
        };
        GameActionFightSlideMessage.prototype.reset = function() {
            this.targetId = 0;
            this.startCellId = 0;
            this.endCellId = 0;
        };
        GameActionFightSlideMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionFightSlideMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionFightSlideMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionFightSlideMessage(output);
        };
        GameActionFightSlideMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionFightSlideMessage(input);
        };
        GameActionFightSlideMessage.prototype.serializeAs_GameActionFightSlideMessage = function(output) {
            _super.prototype.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            if (this.startCellId < -1 || this.startCellId > 559) {
                throw new Error("Forbidden value (" + this.startCellId + ") on element startCellId.");
            }
            output.writeShort(this.startCellId);
            if (this.endCellId < -1 || this.endCellId > 559) {
                throw new Error("Forbidden value (" + this.endCellId + ") on element endCellId.");
            }
            output.writeShort(this.endCellId);
        };
        GameActionFightSlideMessage.prototype.deserializeAs_GameActionFightSlideMessage = function(input) {
            _super.prototype.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightSlideMessage.targetId.");
            }
            this.startCellId = input.readShort();
            if (this.startCellId < -1 || this.startCellId > 559) {
                throw new Error("Forbidden value (" + this.startCellId + ") on element of GameActionFightSlideMessage.startCellId.");
            }
            this.endCellId = input.readShort();
            if (this.endCellId < -1 || this.endCellId > 559) {
                throw new Error("Forbidden value (" + this.endCellId + ") on element of GameActionFightSlideMessage.endCellId.");
            }
        };
        GameActionFightSlideMessage.ID = 1549;
        return GameActionFightSlideMessage;
    })(AbstractGameActionMessage);
    Protocol.GameActionFightSlideMessage = GameActionFightSlideMessage;
    var GameActionFightSpellCastMessage = (function(_super) {
        __extends(GameActionFightSpellCastMessage, _super);

        function GameActionFightSpellCastMessage() {
            this.spellId = 0;
            this.spellLevel = 0;
            this.portalsIds = [];
            _super.call(this)
        }
        GameActionFightSpellCastMessage.prototype.getMessageId = function() {
            return GameActionFightSpellCastMessage.ID;
        };
        GameActionFightSpellCastMessage.prototype.reset = function() {
            this.spellId = 0;
            this.spellLevel = 0;
            this.portalsIds = [];
        };
        GameActionFightSpellCastMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionFightSpellCastMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionFightSpellCastMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionFightSpellCastMessage(output);
        };
        GameActionFightSpellCastMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionFightSpellCastMessage(input);
        };
        GameActionFightSpellCastMessage.prototype.serializeAs_GameActionFightSpellCastMessage = function(output) {
            _super.prototype.serializeAs_AbstractGameActionFightTargetedAbilityMessage.call(this, output);
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
            }
            output.writeVarShort(this.spellId);
            if (this.spellLevel < 1 || this.spellLevel > 32767) {
                throw new Error("Forbidden value (" + this.spellLevel + ") on element spellLevel.");
            }
            output.writeShort(this.spellLevel);
            output.writeShort(this.portalsIds.length);
            for (var _i3 = 0; _i3 < this.portalsIds.length; _i3++) {
                output.writeShort(this.portalsIds[_i3]);
            }
        };
        GameActionFightSpellCastMessage.prototype.deserializeAs_GameActionFightSpellCastMessage = function(input) {
            var _val3 = 0;
            _super.prototype.deserializeAs_AbstractGameActionFightTargetedAbilityMessage.call(this, input);
            this.spellId = input.readVarUhShort();
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element of GameActionFightSpellCastMessage.spellId.");
            }
            this.spellLevel = input.readShort();
            if (this.spellLevel < 1 || this.spellLevel > 32767) {
                throw new Error("Forbidden value (" + this.spellLevel + ") on element of GameActionFightSpellCastMessage.spellLevel.");
            }
            var _portalsIdsLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _portalsIdsLen; _i3++) {
                _val3 = input.readShort();
                this.portalsIds.push(_val3);
            }
        };
        GameActionFightSpellCastMessage.ID = 5026;
        return GameActionFightSpellCastMessage;
    })(AbstractGameActionFightTargetedAbilityMessage);
    Protocol.GameActionFightSpellCastMessage = GameActionFightSpellCastMessage;
    var GameActionFightSpellCooldownVariationMessage = (function(_super) {
        __extends(GameActionFightSpellCooldownVariationMessage, _super);

        function GameActionFightSpellCooldownVariationMessage() {
            this.targetId = 0;
            this.spellId = 0;
            this.value = 0;
            _super.call(this)
        }
        GameActionFightSpellCooldownVariationMessage.prototype.getMessageId = function() {
            return GameActionFightSpellCooldownVariationMessage.ID;
        };
        GameActionFightSpellCooldownVariationMessage.prototype.reset = function() {
            this.targetId = 0;
            this.spellId = 0;
            this.value = 0;
        };
        GameActionFightSpellCooldownVariationMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionFightSpellCooldownVariationMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionFightSpellCooldownVariationMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionFightSpellCooldownVariationMessage(output);
        };
        GameActionFightSpellCooldownVariationMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionFightSpellCooldownVariationMessage(input);
        };
        GameActionFightSpellCooldownVariationMessage.prototype.serializeAs_GameActionFightSpellCooldownVariationMessage = function(output) {
            _super.prototype.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
            }
            output.writeVarShort(this.spellId);
            output.writeVarShort(this.value);
        };
        GameActionFightSpellCooldownVariationMessage.prototype.deserializeAs_GameActionFightSpellCooldownVariationMessage = function(input) {
            _super.prototype.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightSpellCooldownVariationMessage.targetId.");
            }
            this.spellId = input.readVarUhShort();
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element of GameActionFightSpellCooldownVariationMessage.spellId.");
            }
            this.value = input.readVarShort();
        };
        GameActionFightSpellCooldownVariationMessage.ID = 772;
        return GameActionFightSpellCooldownVariationMessage;
    })(AbstractGameActionMessage);
    Protocol.GameActionFightSpellCooldownVariationMessage = GameActionFightSpellCooldownVariationMessage;
    var GameActionFightSpellImmunityMessage = (function(_super) {
        __extends(GameActionFightSpellImmunityMessage, _super);

        function GameActionFightSpellImmunityMessage() {
            this.targetId = 0;
            this.spellId = 0;
            _super.call(this)
        }
        GameActionFightSpellImmunityMessage.prototype.getMessageId = function() {
            return GameActionFightSpellImmunityMessage.ID;
        };
        GameActionFightSpellImmunityMessage.prototype.reset = function() {
            this.targetId = 0;
            this.spellId = 0;
        };
        GameActionFightSpellImmunityMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionFightSpellImmunityMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionFightSpellImmunityMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionFightSpellImmunityMessage(output);
        };
        GameActionFightSpellImmunityMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionFightSpellImmunityMessage(input);
        };
        GameActionFightSpellImmunityMessage.prototype.serializeAs_GameActionFightSpellImmunityMessage = function(output) {
            _super.prototype.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
            }
            output.writeVarShort(this.spellId);
        };
        GameActionFightSpellImmunityMessage.prototype.deserializeAs_GameActionFightSpellImmunityMessage = function(input) {
            _super.prototype.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightSpellImmunityMessage.targetId.");
            }
            this.spellId = input.readVarUhShort();
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element of GameActionFightSpellImmunityMessage.spellId.");
            }
        };
        GameActionFightSpellImmunityMessage.ID = 1076;
        return GameActionFightSpellImmunityMessage;
    })(AbstractGameActionMessage);
    Protocol.GameActionFightSpellImmunityMessage = GameActionFightSpellImmunityMessage;
    var GameActionFightStealKamaMessage = (function(_super) {
        __extends(GameActionFightStealKamaMessage, _super);

        function GameActionFightStealKamaMessage() {
            this.targetId = 0;
            this.amount = 0;
            _super.call(this)
        }
        GameActionFightStealKamaMessage.prototype.getMessageId = function() {
            return GameActionFightStealKamaMessage.ID;
        };
        GameActionFightStealKamaMessage.prototype.reset = function() {
            this.targetId = 0;
            this.amount = 0;
        };
        GameActionFightStealKamaMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionFightStealKamaMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionFightStealKamaMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionFightStealKamaMessage(output);
        };
        GameActionFightStealKamaMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionFightStealKamaMessage(input);
        };
        GameActionFightStealKamaMessage.prototype.serializeAs_GameActionFightStealKamaMessage = function(output) {
            _super.prototype.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            if (this.amount < 0 || this.amount > 9007199254740990) {
                throw new Error("Forbidden value (" + this.amount + ") on element amount.");
            }
            output.writeVarLong(this.amount);
        };
        GameActionFightStealKamaMessage.prototype.deserializeAs_GameActionFightStealKamaMessage = function(input) {
            _super.prototype.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightStealKamaMessage.targetId.");
            }
            this.amount = input.readVarUhLong();
            if (this.amount < 0 || this.amount > 9007199254740990) {
                throw new Error("Forbidden value (" + this.amount + ") on element of GameActionFightStealKamaMessage.amount.");
            }
        };
        GameActionFightStealKamaMessage.ID = 6663;
        return GameActionFightStealKamaMessage;
    })(AbstractGameActionMessage);
    Protocol.GameActionFightStealKamaMessage = GameActionFightStealKamaMessage;
    var GameActionFightSummonMessage = (function(_super) {
        __extends(GameActionFightSummonMessage, _super);

        function GameActionFightSummonMessage() {
            this.summons = [];
            _super.call(this)
        }
        GameActionFightSummonMessage.prototype.getMessageId = function() {
            return GameActionFightSummonMessage.ID;
        };
        GameActionFightSummonMessage.prototype.reset = function() {
            this.summons = [];
        };
        GameActionFightSummonMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionFightSummonMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionFightSummonMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionFightSummonMessage(output);
        };
        GameActionFightSummonMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionFightSummonMessage(input);
        };
        GameActionFightSummonMessage.prototype.serializeAs_GameActionFightSummonMessage = function(output) {
            _super.prototype.serializeAs_AbstractGameActionMessage.call(this, output);
            output.writeShort(this.summons.length);
            for (var _i1 = 0; _i1 < this.summons.length; _i1++) {
                output.writeShort((this.summons[_i1]).getTypeId());
                (this.summons[_i1]).serialize(output);
            }
        };
        GameActionFightSummonMessage.prototype.deserializeAs_GameActionFightSummonMessage = function(input) {
            var _id1 = 0;
            var _item1 = null;
            _super.prototype.deserializeAs_AbstractGameActionMessage.call(this, input);
            var _summonsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _summonsLen; _i1++) {
                _id1 = input.readUnsignedShort();
                _item1 = ProtocolTypeManager.getInstance(GameFightFighterInformations, _id1);
                _item1.deserialize(input);
                this.summons.push(_item1);
            }
        };
        GameActionFightSummonMessage.ID = 8796;
        return GameActionFightSummonMessage;
    })(AbstractGameActionMessage);
    Protocol.GameActionFightSummonMessage = GameActionFightSummonMessage;
    var GameActionFightTackledMessage = (function(_super) {
        __extends(GameActionFightTackledMessage, _super);

        function GameActionFightTackledMessage() {
            this.tacklersIds = [];
            _super.call(this)
        }
        GameActionFightTackledMessage.prototype.getMessageId = function() {
            return GameActionFightTackledMessage.ID;
        };
        GameActionFightTackledMessage.prototype.reset = function() {
            this.tacklersIds = [];
        };
        GameActionFightTackledMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionFightTackledMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionFightTackledMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionFightTackledMessage(output);
        };
        GameActionFightTackledMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionFightTackledMessage(input);
        };
        GameActionFightTackledMessage.prototype.serializeAs_GameActionFightTackledMessage = function(output) {
            _super.prototype.serializeAs_AbstractGameActionMessage.call(this, output);
            output.writeShort(this.tacklersIds.length);
            for (var _i1 = 0; _i1 < this.tacklersIds.length; _i1++) {
                if (this.tacklersIds[_i1] < -9007199254740990 || this.tacklersIds[_i1] > 9007199254740990) {
                    throw new Error("Forbidden value (" + this.tacklersIds[_i1] + ") on element 1 (starting at 1) of tacklersIds.");
                }
                output.writeDouble(this.tacklersIds[_i1]);
            }
        };
        GameActionFightTackledMessage.prototype.deserializeAs_GameActionFightTackledMessage = function(input) {
            var _val1 = NaN;
            _super.prototype.deserializeAs_AbstractGameActionMessage.call(this, input);
            var _tacklersIdsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _tacklersIdsLen; _i1++) {
                _val1 = input.readDouble();
                if (_val1 < -9007199254740990 || _val1 > 9007199254740990) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of tacklersIds.");
                }
                this.tacklersIds.push(_val1);
            }
        };
        GameActionFightTackledMessage.ID = 3775;
        return GameActionFightTackledMessage;
    })(AbstractGameActionMessage);
    Protocol.GameActionFightTackledMessage = GameActionFightTackledMessage;
    var GameActionFightTeleportOnSameMapMessage = (function(_super) {
        __extends(GameActionFightTeleportOnSameMapMessage, _super);

        function GameActionFightTeleportOnSameMapMessage() {
            this.targetId = 0;
            this.cellId = 0;
            _super.call(this)
        }
        GameActionFightTeleportOnSameMapMessage.prototype.getMessageId = function() {
            return GameActionFightTeleportOnSameMapMessage.ID;
        };
        GameActionFightTeleportOnSameMapMessage.prototype.reset = function() {
            this.targetId = 0;
            this.cellId = 0;
        };
        GameActionFightTeleportOnSameMapMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionFightTeleportOnSameMapMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionFightTeleportOnSameMapMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionFightTeleportOnSameMapMessage(output);
        };
        GameActionFightTeleportOnSameMapMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionFightTeleportOnSameMapMessage(input);
        };
        GameActionFightTeleportOnSameMapMessage.prototype.serializeAs_GameActionFightTeleportOnSameMapMessage = function(output) {
            _super.prototype.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            if (this.cellId < -1 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
            }
            output.writeShort(this.cellId);
        };
        GameActionFightTeleportOnSameMapMessage.prototype.deserializeAs_GameActionFightTeleportOnSameMapMessage = function(input) {
            _super.prototype.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightTeleportOnSameMapMessage.targetId.");
            }
            this.cellId = input.readShort();
            if (this.cellId < -1 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element of GameActionFightTeleportOnSameMapMessage.cellId.");
            }
        };
        GameActionFightTeleportOnSameMapMessage.ID = 9063;
        return GameActionFightTeleportOnSameMapMessage;
    })(AbstractGameActionMessage);
    Protocol.GameActionFightTeleportOnSameMapMessage = GameActionFightTeleportOnSameMapMessage;
    var GameActionFightThrowCharacterMessage = (function(_super) {
        __extends(GameActionFightThrowCharacterMessage, _super);

        function GameActionFightThrowCharacterMessage() {
            this.targetId = 0;
            this.cellId = 0;
            _super.call(this)
        }
        GameActionFightThrowCharacterMessage.prototype.getMessageId = function() {
            return GameActionFightThrowCharacterMessage.ID;
        };
        GameActionFightThrowCharacterMessage.prototype.reset = function() {
            this.targetId = 0;
            this.cellId = 0;
        };
        GameActionFightThrowCharacterMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionFightThrowCharacterMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionFightThrowCharacterMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionFightThrowCharacterMessage(output);
        };
        GameActionFightThrowCharacterMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionFightThrowCharacterMessage(input);
        };
        GameActionFightThrowCharacterMessage.prototype.serializeAs_GameActionFightThrowCharacterMessage = function(output) {
            _super.prototype.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            if (this.cellId < -1 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
            }
            output.writeShort(this.cellId);
        };
        GameActionFightThrowCharacterMessage.prototype.deserializeAs_GameActionFightThrowCharacterMessage = function(input) {
            _super.prototype.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightThrowCharacterMessage.targetId.");
            }
            this.cellId = input.readShort();
            if (this.cellId < -1 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element of GameActionFightThrowCharacterMessage.cellId.");
            }
        };
        GameActionFightThrowCharacterMessage.ID = 9016;
        return GameActionFightThrowCharacterMessage;
    })(AbstractGameActionMessage);
    Protocol.GameActionFightThrowCharacterMessage = GameActionFightThrowCharacterMessage;
    var GameActionFightTriggerEffectMessage = (function(_super) {
        __extends(GameActionFightTriggerEffectMessage, _super);

        function GameActionFightTriggerEffectMessage() {

            _super.call(this)
        }
        GameActionFightTriggerEffectMessage.prototype.getMessageId = function() {
            return GameActionFightTriggerEffectMessage.ID;
        };
        GameActionFightTriggerEffectMessage.prototype.reset = function() {

        };
        GameActionFightTriggerEffectMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionFightTriggerEffectMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionFightTriggerEffectMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionFightTriggerEffectMessage(output);
        };
        GameActionFightTriggerEffectMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionFightTriggerEffectMessage(input);
        };
        GameActionFightTriggerEffectMessage.prototype.serializeAs_GameActionFightTriggerEffectMessage = function(output) {
            _super.prototype.serializeAs_GameActionFightDispellEffectMessage.call(this, output);
        };
        GameActionFightTriggerEffectMessage.prototype.deserializeAs_GameActionFightTriggerEffectMessage = function(input) {
            _super.prototype.deserializeAs_GameActionFightDispellEffectMessage.call(this, input);
        };
        GameActionFightTriggerEffectMessage.ID = 9562;
        return GameActionFightTriggerEffectMessage;
    })(GameActionFightDispellEffectMessage);
    Protocol.GameActionFightTriggerEffectMessage = GameActionFightTriggerEffectMessage;
    var GameActionFightTriggerGlyphTrapMessage = (function(_super) {
        __extends(GameActionFightTriggerGlyphTrapMessage, _super);

        function GameActionFightTriggerGlyphTrapMessage() {
            this.markId = 0;
            this.markImpactCell = 0;
            this.triggeringCharacterId = 0;
            this.triggeredSpellId = 0;
            _super.call(this)
        }
        GameActionFightTriggerGlyphTrapMessage.prototype.getMessageId = function() {
            return GameActionFightTriggerGlyphTrapMessage.ID;
        };
        GameActionFightTriggerGlyphTrapMessage.prototype.reset = function() {
            this.markId = 0;
            this.markImpactCell = 0;
            this.triggeringCharacterId = 0;
            this.triggeredSpellId = 0;
        };
        GameActionFightTriggerGlyphTrapMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionFightTriggerGlyphTrapMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionFightTriggerGlyphTrapMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionFightTriggerGlyphTrapMessage(output);
        };
        GameActionFightTriggerGlyphTrapMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionFightTriggerGlyphTrapMessage(input);
        };
        GameActionFightTriggerGlyphTrapMessage.prototype.serializeAs_GameActionFightTriggerGlyphTrapMessage = function(output) {
            _super.prototype.serializeAs_AbstractGameActionMessage.call(this, output);
            output.writeShort(this.markId);
            if (this.markImpactCell < 0) {
                throw new Error("Forbidden value (" + this.markImpactCell + ") on element markImpactCell.");
            }
            output.writeVarShort(this.markImpactCell);
            if (this.triggeringCharacterId < -9007199254740990 || this.triggeringCharacterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.triggeringCharacterId + ") on element triggeringCharacterId.");
            }
            output.writeDouble(this.triggeringCharacterId);
            if (this.triggeredSpellId < 0) {
                throw new Error("Forbidden value (" + this.triggeredSpellId + ") on element triggeredSpellId.");
            }
            output.writeVarShort(this.triggeredSpellId);
        };
        GameActionFightTriggerGlyphTrapMessage.prototype.deserializeAs_GameActionFightTriggerGlyphTrapMessage = function(input) {
            _super.prototype.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.markId = input.readShort();
            this.markImpactCell = input.readVarUhShort();
            if (this.markImpactCell < 0) {
                throw new Error("Forbidden value (" + this.markImpactCell + ") on element of GameActionFightTriggerGlyphTrapMessage.markImpactCell.");
            }
            this.triggeringCharacterId = input.readDouble();
            if (this.triggeringCharacterId < -9007199254740990 || this.triggeringCharacterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.triggeringCharacterId + ") on element of GameActionFightTriggerGlyphTrapMessage.triggeringCharacterId.");
            }
            this.triggeredSpellId = input.readVarUhShort();
            if (this.triggeredSpellId < 0) {
                throw new Error("Forbidden value (" + this.triggeredSpellId + ") on element of GameActionFightTriggerGlyphTrapMessage.triggeredSpellId.");
            }
        };
        GameActionFightTriggerGlyphTrapMessage.ID = 8084;
        return GameActionFightTriggerGlyphTrapMessage;
    })(AbstractGameActionMessage);
    Protocol.GameActionFightTriggerGlyphTrapMessage = GameActionFightTriggerGlyphTrapMessage;
    var GameActionFightUnmarkCellsMessage = (function(_super) {
        __extends(GameActionFightUnmarkCellsMessage, _super);

        function GameActionFightUnmarkCellsMessage() {
            this.markId = 0;
            _super.call(this)
        }
        GameActionFightUnmarkCellsMessage.prototype.getMessageId = function() {
            return GameActionFightUnmarkCellsMessage.ID;
        };
        GameActionFightUnmarkCellsMessage.prototype.reset = function() {
            this.markId = 0;
        };
        GameActionFightUnmarkCellsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionFightUnmarkCellsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionFightUnmarkCellsMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionFightUnmarkCellsMessage(output);
        };
        GameActionFightUnmarkCellsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionFightUnmarkCellsMessage(input);
        };
        GameActionFightUnmarkCellsMessage.prototype.serializeAs_GameActionFightUnmarkCellsMessage = function(output) {
            _super.prototype.serializeAs_AbstractGameActionMessage.call(this, output);
            output.writeShort(this.markId);
        };
        GameActionFightUnmarkCellsMessage.prototype.deserializeAs_GameActionFightUnmarkCellsMessage = function(input) {
            _super.prototype.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.markId = input.readShort();
        };
        GameActionFightUnmarkCellsMessage.ID = 4963;
        return GameActionFightUnmarkCellsMessage;
    })(AbstractGameActionMessage);
    Protocol.GameActionFightUnmarkCellsMessage = GameActionFightUnmarkCellsMessage;
    var GameActionFightVanishMessage = (function(_super) {
        __extends(GameActionFightVanishMessage, _super);

        function GameActionFightVanishMessage() {
            this.targetId = 0;
            _super.call(this)
        }
        GameActionFightVanishMessage.prototype.getMessageId = function() {
            return GameActionFightVanishMessage.ID;
        };
        GameActionFightVanishMessage.prototype.reset = function() {
            this.targetId = 0;
        };
        GameActionFightVanishMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionFightVanishMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionFightVanishMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionFightVanishMessage(output);
        };
        GameActionFightVanishMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionFightVanishMessage(input);
        };
        GameActionFightVanishMessage.prototype.serializeAs_GameActionFightVanishMessage = function(output) {
            _super.prototype.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
        };
        GameActionFightVanishMessage.prototype.deserializeAs_GameActionFightVanishMessage = function(input) {
            _super.prototype.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightVanishMessage.targetId.");
            }
        };
        GameActionFightVanishMessage.ID = 622;
        return GameActionFightVanishMessage;
    })(AbstractGameActionMessage);
    Protocol.GameActionFightVanishMessage = GameActionFightVanishMessage;
    var GameActionUpdateEffectTriggerCountMessage = (function(_super) {
        __extends(GameActionUpdateEffectTriggerCountMessage, _super);

        function GameActionUpdateEffectTriggerCountMessage() {
            this.targetIds = [];
            _super.call(this)
        }
        GameActionUpdateEffectTriggerCountMessage.prototype.getMessageId = function() {
            return GameActionUpdateEffectTriggerCountMessage.ID;
        };
        GameActionUpdateEffectTriggerCountMessage.prototype.reset = function() {
            this.targetIds = [];
        };
        GameActionUpdateEffectTriggerCountMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionUpdateEffectTriggerCountMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionUpdateEffectTriggerCountMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionUpdateEffectTriggerCountMessage(output);
        };
        GameActionUpdateEffectTriggerCountMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionUpdateEffectTriggerCountMessage(input);
        };
        GameActionUpdateEffectTriggerCountMessage.prototype.serializeAs_GameActionUpdateEffectTriggerCountMessage = function(output) {
            output.writeShort(this.targetIds.length);
            for (var _i1 = 0; _i1 < this.targetIds.length; _i1++) {
                (this.targetIds[_i1]).serializeAs_GameFightEffectTriggerCount(output);
            }
        };
        GameActionUpdateEffectTriggerCountMessage.prototype.deserializeAs_GameActionUpdateEffectTriggerCountMessage = function(input) {
            var _item1 = null;
            var _targetIdsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _targetIdsLen; _i1++) {
                _item1 = new GameFightEffectTriggerCount();
                _item1.deserialize(input);
                this.targetIds.push(_item1);
            }
        };
        GameActionUpdateEffectTriggerCountMessage.ID = 2534;
        return GameActionUpdateEffectTriggerCountMessage;
    })(NetworkMessage);
    Protocol.GameActionUpdateEffectTriggerCountMessage = GameActionUpdateEffectTriggerCountMessage;
    var GameActionAcknowledgementMessage = (function(_super) {
        __extends(GameActionAcknowledgementMessage, _super);

        function GameActionAcknowledgementMessage() {
            this.valid = false;
            this.actionId = 0;
            _super.call(this)
        }
        GameActionAcknowledgementMessage.prototype.getMessageId = function() {
            return GameActionAcknowledgementMessage.ID;
        };
        GameActionAcknowledgementMessage.prototype.reset = function() {
            this.valid = false;
            this.actionId = 0;
        };
        GameActionAcknowledgementMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionAcknowledgementMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionAcknowledgementMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionAcknowledgementMessage(output);
        };
        GameActionAcknowledgementMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionAcknowledgementMessage(input);
        };
        GameActionAcknowledgementMessage.prototype.serializeAs_GameActionAcknowledgementMessage = function(output) {
            output.writeBoolean(this.valid);
            output.writeByte(this.actionId);
        };
        GameActionAcknowledgementMessage.prototype.deserializeAs_GameActionAcknowledgementMessage = function(input) {
            this.valid = input.readBoolean();
            this.actionId = input.readByte();
        };
        GameActionAcknowledgementMessage.ID = 3790;
        return GameActionAcknowledgementMessage;
    })(NetworkMessage);
    Protocol.GameActionAcknowledgementMessage = GameActionAcknowledgementMessage;
    var GameActionNoopMessage = (function(_super) {
        __extends(GameActionNoopMessage, _super);

        function GameActionNoopMessage() {

            _super.call(this)
        }
        GameActionNoopMessage.prototype.getMessageId = function() {
            return GameActionNoopMessage.ID;
        };
        GameActionNoopMessage.prototype.reset = function() {

        };
        GameActionNoopMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionNoopMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionNoopMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionNoopMessage(output);
        };
        GameActionNoopMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionNoopMessage(input);
        };
        GameActionNoopMessage.prototype.serializeAs_GameActionNoopMessage = function(output) {

        };
        GameActionNoopMessage.prototype.deserializeAs_GameActionNoopMessage = function(input) {

        };
        GameActionNoopMessage.ID = 3464;
        return GameActionNoopMessage;
    })(NetworkMessage);
    Protocol.GameActionNoopMessage = GameActionNoopMessage;
    var GameActionSpamMessage = (function(_super) {
        __extends(GameActionSpamMessage, _super);

        function GameActionSpamMessage() {
            this.cells = [];
            _super.call(this)
        }
        GameActionSpamMessage.prototype.getMessageId = function() {
            return GameActionSpamMessage.ID;
        };
        GameActionSpamMessage.prototype.reset = function() {
            this.cells = [];
        };
        GameActionSpamMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameActionSpamMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameActionSpamMessage.prototype.serialize = function(output) {
            this.serializeAs_GameActionSpamMessage(output);
        };
        GameActionSpamMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameActionSpamMessage(input);
        };
        GameActionSpamMessage.prototype.serializeAs_GameActionSpamMessage = function(output) {
            output.writeShort(this.cells.length);
            for (var _i1 = 0; _i1 < this.cells.length; _i1++) {
                output.writeShort(this.cells[_i1]);
            }
        };
        GameActionSpamMessage.prototype.deserializeAs_GameActionSpamMessage = function(input) {
            var _val1 = 0;
            var _cellsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _cellsLen; _i1++) {
                _val1 = input.readShort();
                this.cells.push(_val1);
            }
        };
        GameActionSpamMessage.ID = 5912;
        return GameActionSpamMessage;
    })(NetworkMessage);
    Protocol.GameActionSpamMessage = GameActionSpamMessage;
    var SequenceEndMessage = (function(_super) {
        __extends(SequenceEndMessage, _super);

        function SequenceEndMessage() {
            this.actionId = 0;
            this.authorId = 0;
            this.sequenceType = 0;
            _super.call(this)
        }
        SequenceEndMessage.prototype.getMessageId = function() {
            return SequenceEndMessage.ID;
        };
        SequenceEndMessage.prototype.reset = function() {
            this.actionId = 0;
            this.authorId = 0;
            this.sequenceType = 0;
        };
        SequenceEndMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        SequenceEndMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        SequenceEndMessage.prototype.serialize = function(output) {
            this.serializeAs_SequenceEndMessage(output);
        };
        SequenceEndMessage.prototype.deserialize = function(input) {
            this.deserializeAs_SequenceEndMessage(input);
        };
        SequenceEndMessage.prototype.serializeAs_SequenceEndMessage = function(output) {
            if (this.actionId < 0) {
                throw new Error("Forbidden value (" + this.actionId + ") on element actionId.");
            }
            output.writeVarShort(this.actionId);
            if (this.authorId < -9007199254740990 || this.authorId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.authorId + ") on element authorId.");
            }
            output.writeDouble(this.authorId);
            output.writeByte(this.sequenceType);
        };
        SequenceEndMessage.prototype.deserializeAs_SequenceEndMessage = function(input) {
            this.actionId = input.readVarUhShort();
            if (this.actionId < 0) {
                throw new Error("Forbidden value (" + this.actionId + ") on element of SequenceEndMessage.actionId.");
            }
            this.authorId = input.readDouble();
            if (this.authorId < -9007199254740990 || this.authorId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.authorId + ") on element of SequenceEndMessage.authorId.");
            }
            this.sequenceType = input.readByte();
        };
        SequenceEndMessage.ID = 7632;
        return SequenceEndMessage;
    })(NetworkMessage);
    Protocol.SequenceEndMessage = SequenceEndMessage;
    var SequenceStartMessage = (function(_super) {
        __extends(SequenceStartMessage, _super);

        function SequenceStartMessage() {
            this.sequenceType = 0;
            this.authorId = 0;
            _super.call(this)
        }
        SequenceStartMessage.prototype.getMessageId = function() {
            return SequenceStartMessage.ID;
        };
        SequenceStartMessage.prototype.reset = function() {
            this.sequenceType = 0;
            this.authorId = 0;
        };
        SequenceStartMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        SequenceStartMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        SequenceStartMessage.prototype.serialize = function(output) {
            this.serializeAs_SequenceStartMessage(output);
        };
        SequenceStartMessage.prototype.deserialize = function(input) {
            this.deserializeAs_SequenceStartMessage(input);
        };
        SequenceStartMessage.prototype.serializeAs_SequenceStartMessage = function(output) {
            output.writeByte(this.sequenceType);
            if (this.authorId < -9007199254740990 || this.authorId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.authorId + ") on element authorId.");
            }
            output.writeDouble(this.authorId);
        };
        SequenceStartMessage.prototype.deserializeAs_SequenceStartMessage = function(input) {
            this.sequenceType = input.readByte();
            this.authorId = input.readDouble();
            if (this.authorId < -9007199254740990 || this.authorId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.authorId + ") on element of SequenceStartMessage.authorId.");
            }
        };
        SequenceStartMessage.ID = 5293;
        return SequenceStartMessage;
    })(NetworkMessage);
    Protocol.SequenceStartMessage = SequenceStartMessage;
    var SocialNoticeMessage = (function(_super) {
        __extends(SocialNoticeMessage, _super);

        function SocialNoticeMessage() {
            this.content = "";
            this.timestamp = 0;
            this.memberId = 0;
            this.memberName = "";
            _super.call(this)
        }
        SocialNoticeMessage.prototype.getMessageId = function() {
            return SocialNoticeMessage.ID;
        };
        SocialNoticeMessage.prototype.reset = function() {
            this.content = "";
            this.timestamp = 0;
            this.memberId = 0;
            this.memberName = "";
        };
        SocialNoticeMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        SocialNoticeMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        SocialNoticeMessage.prototype.serialize = function(output) {
            this.serializeAs_SocialNoticeMessage(output);
        };
        SocialNoticeMessage.prototype.deserialize = function(input) {
            this.deserializeAs_SocialNoticeMessage(input);
        };
        SocialNoticeMessage.prototype.serializeAs_SocialNoticeMessage = function(output) {
            output.writeUTF(this.content);
            if (this.timestamp < 0) {
                throw new Error("Forbidden value (" + this.timestamp + ") on element timestamp.");
            }
            output.writeInt(this.timestamp);
            if (this.memberId < 0 || this.memberId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.memberId + ") on element memberId.");
            }
            output.writeVarLong(this.memberId);
            output.writeUTF(this.memberName);
        };
        SocialNoticeMessage.prototype.deserializeAs_SocialNoticeMessage = function(input) {
            this.content = input.readUTF();
            this.timestamp = input.readInt();
            if (this.timestamp < 0) {
                throw new Error("Forbidden value (" + this.timestamp + ") on element of SocialNoticeMessage.timestamp.");
            }
            this.memberId = input.readVarUhLong();
            if (this.memberId < 0 || this.memberId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.memberId + ") on element of SocialNoticeMessage.memberId.");
            }
            this.memberName = input.readUTF();
        };
        SocialNoticeMessage.ID = 1883;
        return SocialNoticeMessage;
    })(NetworkMessage);
    Protocol.SocialNoticeMessage = SocialNoticeMessage;
    var BulletinMessage = (function(_super) {
        __extends(BulletinMessage, _super);

        function BulletinMessage() {
            this.lastNotifiedTimestamp = 0;
            _super.call(this)
        }
        BulletinMessage.prototype.getMessageId = function() {
            return BulletinMessage.ID;
        };
        BulletinMessage.prototype.reset = function() {
            this.lastNotifiedTimestamp = 0;
        };
        BulletinMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        BulletinMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        BulletinMessage.prototype.serialize = function(output) {
            this.serializeAs_BulletinMessage(output);
        };
        BulletinMessage.prototype.deserialize = function(input) {
            this.deserializeAs_BulletinMessage(input);
        };
        BulletinMessage.prototype.serializeAs_BulletinMessage = function(output) {
            _super.prototype.serializeAs_SocialNoticeMessage.call(this, output);
            if (this.lastNotifiedTimestamp < 0) {
                throw new Error("Forbidden value (" + this.lastNotifiedTimestamp + ") on element lastNotifiedTimestamp.");
            }
            output.writeInt(this.lastNotifiedTimestamp);
        };
        BulletinMessage.prototype.deserializeAs_BulletinMessage = function(input) {
            _super.prototype.deserializeAs_SocialNoticeMessage.call(this, input);
            this.lastNotifiedTimestamp = input.readInt();
            if (this.lastNotifiedTimestamp < 0) {
                throw new Error("Forbidden value (" + this.lastNotifiedTimestamp + ") on element of BulletinMessage.lastNotifiedTimestamp.");
            }
        };
        BulletinMessage.ID = 6070;
        return BulletinMessage;
    })(SocialNoticeMessage);
    Protocol.BulletinMessage = BulletinMessage;
    var AllianceBulletinMessage = (function(_super) {
        __extends(AllianceBulletinMessage, _super);

        function AllianceBulletinMessage() {

            _super.call(this)
        }
        AllianceBulletinMessage.prototype.getMessageId = function() {
            return AllianceBulletinMessage.ID;
        };
        AllianceBulletinMessage.prototype.reset = function() {

        };
        AllianceBulletinMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AllianceBulletinMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AllianceBulletinMessage.prototype.serialize = function(output) {
            this.serializeAs_AllianceBulletinMessage(output);
        };
        AllianceBulletinMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AllianceBulletinMessage(input);
        };
        AllianceBulletinMessage.prototype.serializeAs_AllianceBulletinMessage = function(output) {
            _super.prototype.serializeAs_BulletinMessage.call(this, output);
        };
        AllianceBulletinMessage.prototype.deserializeAs_AllianceBulletinMessage = function(input) {
            _super.prototype.deserializeAs_BulletinMessage.call(this, input);
        };
        AllianceBulletinMessage.ID = 5460;
        return AllianceBulletinMessage;
    })(BulletinMessage);
    Protocol.AllianceBulletinMessage = AllianceBulletinMessage;
    var SocialNoticeSetErrorMessage = (function(_super) {
        __extends(SocialNoticeSetErrorMessage, _super);

        function SocialNoticeSetErrorMessage() {
            this.reason = 0;
            _super.call(this)
        }
        SocialNoticeSetErrorMessage.prototype.getMessageId = function() {
            return SocialNoticeSetErrorMessage.ID;
        };
        SocialNoticeSetErrorMessage.prototype.reset = function() {
            this.reason = 0;
        };
        SocialNoticeSetErrorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        SocialNoticeSetErrorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        SocialNoticeSetErrorMessage.prototype.serialize = function(output) {
            this.serializeAs_SocialNoticeSetErrorMessage(output);
        };
        SocialNoticeSetErrorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_SocialNoticeSetErrorMessage(input);
        };
        SocialNoticeSetErrorMessage.prototype.serializeAs_SocialNoticeSetErrorMessage = function(output) {
            output.writeByte(this.reason);
        };
        SocialNoticeSetErrorMessage.prototype.deserializeAs_SocialNoticeSetErrorMessage = function(input) {
            this.reason = input.readByte();
            if (this.reason < 0) {
                throw new Error("Forbidden value (" + this.reason + ") on element of SocialNoticeSetErrorMessage.reason.");
            }
        };
        SocialNoticeSetErrorMessage.ID = 9965;
        return SocialNoticeSetErrorMessage;
    })(NetworkMessage);
    Protocol.SocialNoticeSetErrorMessage = SocialNoticeSetErrorMessage;
    var AllianceBulletinSetErrorMessage = (function(_super) {
        __extends(AllianceBulletinSetErrorMessage, _super);

        function AllianceBulletinSetErrorMessage() {

            _super.call(this)
        }
        AllianceBulletinSetErrorMessage.prototype.getMessageId = function() {
            return AllianceBulletinSetErrorMessage.ID;
        };
        AllianceBulletinSetErrorMessage.prototype.reset = function() {

        };
        AllianceBulletinSetErrorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AllianceBulletinSetErrorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AllianceBulletinSetErrorMessage.prototype.serialize = function(output) {
            this.serializeAs_AllianceBulletinSetErrorMessage(output);
        };
        AllianceBulletinSetErrorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AllianceBulletinSetErrorMessage(input);
        };
        AllianceBulletinSetErrorMessage.prototype.serializeAs_AllianceBulletinSetErrorMessage = function(output) {
            _super.prototype.serializeAs_SocialNoticeSetErrorMessage.call(this, output);
        };
        AllianceBulletinSetErrorMessage.prototype.deserializeAs_AllianceBulletinSetErrorMessage = function(input) {
            _super.prototype.deserializeAs_SocialNoticeSetErrorMessage.call(this, input);
        };
        AllianceBulletinSetErrorMessage.ID = 3716;
        return AllianceBulletinSetErrorMessage;
    })(SocialNoticeSetErrorMessage);
    Protocol.AllianceBulletinSetErrorMessage = AllianceBulletinSetErrorMessage;
    var SocialNoticeSetRequestMessage = (function(_super) {
        __extends(SocialNoticeSetRequestMessage, _super);

        function SocialNoticeSetRequestMessage() {

            _super.call(this)
        }
        SocialNoticeSetRequestMessage.prototype.getMessageId = function() {
            return SocialNoticeSetRequestMessage.ID;
        };
        SocialNoticeSetRequestMessage.prototype.reset = function() {

        };
        SocialNoticeSetRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        SocialNoticeSetRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        SocialNoticeSetRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_SocialNoticeSetRequestMessage(output);
        };
        SocialNoticeSetRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_SocialNoticeSetRequestMessage(input);
        };
        SocialNoticeSetRequestMessage.prototype.serializeAs_SocialNoticeSetRequestMessage = function(output) {

        };
        SocialNoticeSetRequestMessage.prototype.deserializeAs_SocialNoticeSetRequestMessage = function(input) {

        };
        SocialNoticeSetRequestMessage.ID = 7244;
        return SocialNoticeSetRequestMessage;
    })(NetworkMessage);
    Protocol.SocialNoticeSetRequestMessage = SocialNoticeSetRequestMessage;
    var AllianceBulletinSetRequestMessage = (function(_super) {
        __extends(AllianceBulletinSetRequestMessage, _super);

        function AllianceBulletinSetRequestMessage() {
            this.content = "";
            this.notifyMembers = false;
            _super.call(this)
        }
        AllianceBulletinSetRequestMessage.prototype.getMessageId = function() {
            return AllianceBulletinSetRequestMessage.ID;
        };
        AllianceBulletinSetRequestMessage.prototype.reset = function() {
            this.content = "";
            this.notifyMembers = false;
        };
        AllianceBulletinSetRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AllianceBulletinSetRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AllianceBulletinSetRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_AllianceBulletinSetRequestMessage(output);
        };
        AllianceBulletinSetRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AllianceBulletinSetRequestMessage(input);
        };
        AllianceBulletinSetRequestMessage.prototype.serializeAs_AllianceBulletinSetRequestMessage = function(output) {
            _super.prototype.serializeAs_SocialNoticeSetRequestMessage.call(this, output);
            output.writeUTF(this.content);
            output.writeBoolean(this.notifyMembers);
        };
        AllianceBulletinSetRequestMessage.prototype.deserializeAs_AllianceBulletinSetRequestMessage = function(input) {
            _super.prototype.deserializeAs_SocialNoticeSetRequestMessage.call(this, input);
            this.content = input.readUTF();
            this.notifyMembers = input.readBoolean();
        };
        AllianceBulletinSetRequestMessage.ID = 7301;
        return AllianceBulletinSetRequestMessage;
    })(SocialNoticeSetRequestMessage);
    Protocol.AllianceBulletinSetRequestMessage = AllianceBulletinSetRequestMessage;
    var AllianceChangeGuildRightsMessage = (function(_super) {
        __extends(AllianceChangeGuildRightsMessage, _super);

        function AllianceChangeGuildRightsMessage() {
            this.guildId = 0;
            this.rights = 0;
            _super.call(this)
        }
        AllianceChangeGuildRightsMessage.prototype.getMessageId = function() {
            return AllianceChangeGuildRightsMessage.ID;
        };
        AllianceChangeGuildRightsMessage.prototype.reset = function() {
            this.guildId = 0;
            this.rights = 0;
        };
        AllianceChangeGuildRightsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AllianceChangeGuildRightsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AllianceChangeGuildRightsMessage.prototype.serialize = function(output) {
            this.serializeAs_AllianceChangeGuildRightsMessage(output);
        };
        AllianceChangeGuildRightsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AllianceChangeGuildRightsMessage(input);
        };
        AllianceChangeGuildRightsMessage.prototype.serializeAs_AllianceChangeGuildRightsMessage = function(output) {
            if (this.guildId < 0) {
                throw new Error("Forbidden value (" + this.guildId + ") on element guildId.");
            }
            output.writeVarInt(this.guildId);
            if (this.rights < 0) {
                throw new Error("Forbidden value (" + this.rights + ") on element rights.");
            }
            output.writeByte(this.rights);
        };
        AllianceChangeGuildRightsMessage.prototype.deserializeAs_AllianceChangeGuildRightsMessage = function(input) {
            this.guildId = input.readVarUhInt();
            if (this.guildId < 0) {
                throw new Error("Forbidden value (" + this.guildId + ") on element of AllianceChangeGuildRightsMessage.guildId.");
            }
            this.rights = input.readByte();
            if (this.rights < 0) {
                throw new Error("Forbidden value (" + this.rights + ") on element of AllianceChangeGuildRightsMessage.rights.");
            }
        };
        AllianceChangeGuildRightsMessage.ID = 8973;
        return AllianceChangeGuildRightsMessage;
    })(NetworkMessage);
    Protocol.AllianceChangeGuildRightsMessage = AllianceChangeGuildRightsMessage;
    var AllianceCreationResultMessage = (function(_super) {
        __extends(AllianceCreationResultMessage, _super);

        function AllianceCreationResultMessage() {
            this.result = 0;
            _super.call(this)
        }
        AllianceCreationResultMessage.prototype.getMessageId = function() {
            return AllianceCreationResultMessage.ID;
        };
        AllianceCreationResultMessage.prototype.reset = function() {
            this.result = 0;
        };
        AllianceCreationResultMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AllianceCreationResultMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AllianceCreationResultMessage.prototype.serialize = function(output) {
            this.serializeAs_AllianceCreationResultMessage(output);
        };
        AllianceCreationResultMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AllianceCreationResultMessage(input);
        };
        AllianceCreationResultMessage.prototype.serializeAs_AllianceCreationResultMessage = function(output) {
            output.writeByte(this.result);
        };
        AllianceCreationResultMessage.prototype.deserializeAs_AllianceCreationResultMessage = function(input) {
            this.result = input.readByte();
            if (this.result < 0) {
                throw new Error("Forbidden value (" + this.result + ") on element of AllianceCreationResultMessage.result.");
            }
        };
        AllianceCreationResultMessage.ID = 1594;
        return AllianceCreationResultMessage;
    })(NetworkMessage);
    Protocol.AllianceCreationResultMessage = AllianceCreationResultMessage;
    var AllianceCreationStartedMessage = (function(_super) {
        __extends(AllianceCreationStartedMessage, _super);

        function AllianceCreationStartedMessage() {

            _super.call(this)
        }
        AllianceCreationStartedMessage.prototype.getMessageId = function() {
            return AllianceCreationStartedMessage.ID;
        };
        AllianceCreationStartedMessage.prototype.reset = function() {

        };
        AllianceCreationStartedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AllianceCreationStartedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AllianceCreationStartedMessage.prototype.serialize = function(output) {
            this.serializeAs_AllianceCreationStartedMessage(output);
        };
        AllianceCreationStartedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AllianceCreationStartedMessage(input);
        };
        AllianceCreationStartedMessage.prototype.serializeAs_AllianceCreationStartedMessage = function(output) {

        };
        AllianceCreationStartedMessage.prototype.deserializeAs_AllianceCreationStartedMessage = function(input) {

        };
        AllianceCreationStartedMessage.ID = 4020;
        return AllianceCreationStartedMessage;
    })(NetworkMessage);
    Protocol.AllianceCreationStartedMessage = AllianceCreationStartedMessage;
    var AllianceCreationValidMessage = (function(_super) {
        __extends(AllianceCreationValidMessage, _super);

        function AllianceCreationValidMessage() {
            this.allianceName = "";
            this.allianceTag = "";
            this.allianceEmblem = new GuildEmblem();
            _super.call(this)
        }
        AllianceCreationValidMessage.prototype.getMessageId = function() {
            return AllianceCreationValidMessage.ID;
        };
        AllianceCreationValidMessage.prototype.reset = function() {
            this.allianceName = "";
            this.allianceTag = "";
            this.allianceEmblem = new GuildEmblem();
        };
        AllianceCreationValidMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AllianceCreationValidMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AllianceCreationValidMessage.prototype.serialize = function(output) {
            this.serializeAs_AllianceCreationValidMessage(output);
        };
        AllianceCreationValidMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AllianceCreationValidMessage(input);
        };
        AllianceCreationValidMessage.prototype.serializeAs_AllianceCreationValidMessage = function(output) {
            output.writeUTF(this.allianceName);
            output.writeUTF(this.allianceTag);
            this.allianceEmblem.serializeAs_GuildEmblem(output);
        };
        AllianceCreationValidMessage.prototype.deserializeAs_AllianceCreationValidMessage = function(input) {
            this.allianceName = input.readUTF();
            this.allianceTag = input.readUTF();
            this.allianceEmblem = new GuildEmblem();
            this.allianceEmblem.deserialize(input);
        };
        AllianceCreationValidMessage.ID = 813;
        return AllianceCreationValidMessage;
    })(NetworkMessage);
    Protocol.AllianceCreationValidMessage = AllianceCreationValidMessage;
    var AllianceFactsErrorMessage = (function(_super) {
        __extends(AllianceFactsErrorMessage, _super);

        function AllianceFactsErrorMessage() {
            this.allianceId = 0;
            _super.call(this)
        }
        AllianceFactsErrorMessage.prototype.getMessageId = function() {
            return AllianceFactsErrorMessage.ID;
        };
        AllianceFactsErrorMessage.prototype.reset = function() {
            this.allianceId = 0;
        };
        AllianceFactsErrorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AllianceFactsErrorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AllianceFactsErrorMessage.prototype.serialize = function(output) {
            this.serializeAs_AllianceFactsErrorMessage(output);
        };
        AllianceFactsErrorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AllianceFactsErrorMessage(input);
        };
        AllianceFactsErrorMessage.prototype.serializeAs_AllianceFactsErrorMessage = function(output) {
            if (this.allianceId < 0) {
                throw new Error("Forbidden value (" + this.allianceId + ") on element allianceId.");
            }
            output.writeVarInt(this.allianceId);
        };
        AllianceFactsErrorMessage.prototype.deserializeAs_AllianceFactsErrorMessage = function(input) {
            this.allianceId = input.readVarUhInt();
            if (this.allianceId < 0) {
                throw new Error("Forbidden value (" + this.allianceId + ") on element of AllianceFactsErrorMessage.allianceId.");
            }
        };
        AllianceFactsErrorMessage.ID = 9299;
        return AllianceFactsErrorMessage;
    })(NetworkMessage);
    Protocol.AllianceFactsErrorMessage = AllianceFactsErrorMessage;
    var AllianceFactsMessage = (function(_super) {
        __extends(AllianceFactsMessage, _super);

        function AllianceFactsMessage() {
            this.infos = new AllianceFactSheetInformations();
            this.guilds = [];
            this.controlledSubareaIds = [];
            this.leaderCharacterId = 0;
            this.leaderCharacterName = "";
            _super.call(this)
        }
        AllianceFactsMessage.prototype.getMessageId = function() {
            return AllianceFactsMessage.ID;
        };
        AllianceFactsMessage.prototype.reset = function() {
            this.infos = new AllianceFactSheetInformations();
            this.guilds = [];
            this.controlledSubareaIds = [];
            this.leaderCharacterId = 0;
            this.leaderCharacterName = "";
        };
        AllianceFactsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AllianceFactsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AllianceFactsMessage.prototype.serialize = function(output) {
            this.serializeAs_AllianceFactsMessage(output);
        };
        AllianceFactsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AllianceFactsMessage(input);
        };
        AllianceFactsMessage.prototype.serializeAs_AllianceFactsMessage = function(output) {
            output.writeShort(this.infos.getTypeId());
            this.infos.serialize(output);
            output.writeShort(this.guilds.length);
            for (var _i2 = 0; _i2 < this.guilds.length; _i2++) {
                (this.guilds[_i2]).serializeAs_GuildInAllianceInformations(output);
            }
            output.writeShort(this.controlledSubareaIds.length);
            for (var _i3 = 0; _i3 < this.controlledSubareaIds.length; _i3++) {
                if (this.controlledSubareaIds[_i3] < 0) {
                    throw new Error("Forbidden value (" + this.controlledSubareaIds[_i3] + ") on element 3 (starting at 1) of controlledSubareaIds.");
                }
                output.writeVarShort(this.controlledSubareaIds[_i3]);
            }
            if (this.leaderCharacterId < 0 || this.leaderCharacterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.leaderCharacterId + ") on element leaderCharacterId.");
            }
            output.writeVarLong(this.leaderCharacterId);
            output.writeUTF(this.leaderCharacterName);
        };
        AllianceFactsMessage.prototype.deserializeAs_AllianceFactsMessage = function(input) {
            var _item2 = null;
            var _val3 = 0;
            var _id1 = input.readUnsignedShort();
            this.infos = ProtocolTypeManager.getInstance(AllianceFactSheetInformations, _id1);
            this.infos.deserialize(input);
            var _guildsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _guildsLen; _i2++) {
                _item2 = new GuildInAllianceInformations();
                _item2.deserialize(input);
                this.guilds.push(_item2);
            }
            var _controlledSubareaIdsLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _controlledSubareaIdsLen; _i3++) {
                _val3 = input.readVarUhShort();
                if (_val3 < 0) {
                    throw new Error("Forbidden value (" + _val3 + ") on elements of controlledSubareaIds.");
                }
                this.controlledSubareaIds.push(_val3);
            }
            this.leaderCharacterId = input.readVarUhLong();
            if (this.leaderCharacterId < 0 || this.leaderCharacterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.leaderCharacterId + ") on element of AllianceFactsMessage.leaderCharacterId.");
            }
            this.leaderCharacterName = input.readUTF();
        };
        AllianceFactsMessage.ID = 6638;
        return AllianceFactsMessage;
    })(NetworkMessage);
    Protocol.AllianceFactsMessage = AllianceFactsMessage;
    var AllianceFactsRequestMessage = (function(_super) {
        __extends(AllianceFactsRequestMessage, _super);

        function AllianceFactsRequestMessage() {
            this.allianceId = 0;
            _super.call(this)
        }
        AllianceFactsRequestMessage.prototype.getMessageId = function() {
            return AllianceFactsRequestMessage.ID;
        };
        AllianceFactsRequestMessage.prototype.reset = function() {
            this.allianceId = 0;
        };
        AllianceFactsRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AllianceFactsRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AllianceFactsRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_AllianceFactsRequestMessage(output);
        };
        AllianceFactsRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AllianceFactsRequestMessage(input);
        };
        AllianceFactsRequestMessage.prototype.serializeAs_AllianceFactsRequestMessage = function(output) {
            if (this.allianceId < 0) {
                throw new Error("Forbidden value (" + this.allianceId + ") on element allianceId.");
            }
            output.writeVarInt(this.allianceId);
        };
        AllianceFactsRequestMessage.prototype.deserializeAs_AllianceFactsRequestMessage = function(input) {
            this.allianceId = input.readVarUhInt();
            if (this.allianceId < 0) {
                throw new Error("Forbidden value (" + this.allianceId + ") on element of AllianceFactsRequestMessage.allianceId.");
            }
        };
        AllianceFactsRequestMessage.ID = 4229;
        return AllianceFactsRequestMessage;
    })(NetworkMessage);
    Protocol.AllianceFactsRequestMessage = AllianceFactsRequestMessage;
    var AllianceGuildLeavingMessage = (function(_super) {
        __extends(AllianceGuildLeavingMessage, _super);

        function AllianceGuildLeavingMessage() {
            this.kicked = false;
            this.guildId = 0;
            _super.call(this)
        }
        AllianceGuildLeavingMessage.prototype.getMessageId = function() {
            return AllianceGuildLeavingMessage.ID;
        };
        AllianceGuildLeavingMessage.prototype.reset = function() {
            this.kicked = false;
            this.guildId = 0;
        };
        AllianceGuildLeavingMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AllianceGuildLeavingMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AllianceGuildLeavingMessage.prototype.serialize = function(output) {
            this.serializeAs_AllianceGuildLeavingMessage(output);
        };
        AllianceGuildLeavingMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AllianceGuildLeavingMessage(input);
        };
        AllianceGuildLeavingMessage.prototype.serializeAs_AllianceGuildLeavingMessage = function(output) {
            output.writeBoolean(this.kicked);
            if (this.guildId < 0) {
                throw new Error("Forbidden value (" + this.guildId + ") on element guildId.");
            }
            output.writeVarInt(this.guildId);
        };
        AllianceGuildLeavingMessage.prototype.deserializeAs_AllianceGuildLeavingMessage = function(input) {
            this.kicked = input.readBoolean();
            this.guildId = input.readVarUhInt();
            if (this.guildId < 0) {
                throw new Error("Forbidden value (" + this.guildId + ") on element of AllianceGuildLeavingMessage.guildId.");
            }
        };
        AllianceGuildLeavingMessage.ID = 2353;
        return AllianceGuildLeavingMessage;
    })(NetworkMessage);
    Protocol.AllianceGuildLeavingMessage = AllianceGuildLeavingMessage;
    var AllianceInsiderInfoMessage = (function(_super) {
        __extends(AllianceInsiderInfoMessage, _super);

        function AllianceInsiderInfoMessage() {
            this.allianceInfos = new AllianceFactSheetInformations();
            this.guilds = [];
            this.prisms = [];
            _super.call(this)
        }
        AllianceInsiderInfoMessage.prototype.getMessageId = function() {
            return AllianceInsiderInfoMessage.ID;
        };
        AllianceInsiderInfoMessage.prototype.reset = function() {
            this.allianceInfos = new AllianceFactSheetInformations();
            this.guilds = [];
            this.prisms = [];
        };
        AllianceInsiderInfoMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AllianceInsiderInfoMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AllianceInsiderInfoMessage.prototype.serialize = function(output) {
            this.serializeAs_AllianceInsiderInfoMessage(output);
        };
        AllianceInsiderInfoMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AllianceInsiderInfoMessage(input);
        };
        AllianceInsiderInfoMessage.prototype.serializeAs_AllianceInsiderInfoMessage = function(output) {
            this.allianceInfos.serializeAs_AllianceFactSheetInformations(output);
            output.writeShort(this.guilds.length);
            for (var _i2 = 0; _i2 < this.guilds.length; _i2++) {
                (this.guilds[_i2]).serializeAs_GuildInsiderFactSheetInformations(output);
            }
            output.writeShort(this.prisms.length);
            for (var _i3 = 0; _i3 < this.prisms.length; _i3++) {
                output.writeShort((this.prisms[_i3]).getTypeId());
                (this.prisms[_i3]).serialize(output);
            }
        };
        AllianceInsiderInfoMessage.prototype.deserializeAs_AllianceInsiderInfoMessage = function(input) {
            var _item2 = null;
            var _id3 = 0;
            var _item3 = null;
            this.allianceInfos = new AllianceFactSheetInformations();
            this.allianceInfos.deserialize(input);
            var _guildsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _guildsLen; _i2++) {
                _item2 = new GuildInsiderFactSheetInformations();
                _item2.deserialize(input);
                this.guilds.push(_item2);
            }
            var _prismsLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _prismsLen; _i3++) {
                _id3 = input.readUnsignedShort();
                _item3 = ProtocolTypeManager.getInstance(PrismSubareaEmptyInfo, _id3);
                _item3.deserialize(input);
                this.prisms.push(_item3);
            }
        };
        AllianceInsiderInfoMessage.ID = 7582;
        return AllianceInsiderInfoMessage;
    })(NetworkMessage);
    Protocol.AllianceInsiderInfoMessage = AllianceInsiderInfoMessage;
    var AllianceInsiderInfoRequestMessage = (function(_super) {
        __extends(AllianceInsiderInfoRequestMessage, _super);

        function AllianceInsiderInfoRequestMessage() {

            _super.call(this)
        }
        AllianceInsiderInfoRequestMessage.prototype.getMessageId = function() {
            return AllianceInsiderInfoRequestMessage.ID;
        };
        AllianceInsiderInfoRequestMessage.prototype.reset = function() {

        };
        AllianceInsiderInfoRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AllianceInsiderInfoRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AllianceInsiderInfoRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_AllianceInsiderInfoRequestMessage(output);
        };
        AllianceInsiderInfoRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AllianceInsiderInfoRequestMessage(input);
        };
        AllianceInsiderInfoRequestMessage.prototype.serializeAs_AllianceInsiderInfoRequestMessage = function(output) {

        };
        AllianceInsiderInfoRequestMessage.prototype.deserializeAs_AllianceInsiderInfoRequestMessage = function(input) {

        };
        AllianceInsiderInfoRequestMessage.ID = 1729;
        return AllianceInsiderInfoRequestMessage;
    })(NetworkMessage);
    Protocol.AllianceInsiderInfoRequestMessage = AllianceInsiderInfoRequestMessage;
    var AllianceInvitationAnswerMessage = (function(_super) {
        __extends(AllianceInvitationAnswerMessage, _super);

        function AllianceInvitationAnswerMessage() {
            this.accept = false;
            _super.call(this)
        }
        AllianceInvitationAnswerMessage.prototype.getMessageId = function() {
            return AllianceInvitationAnswerMessage.ID;
        };
        AllianceInvitationAnswerMessage.prototype.reset = function() {
            this.accept = false;
        };
        AllianceInvitationAnswerMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AllianceInvitationAnswerMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AllianceInvitationAnswerMessage.prototype.serialize = function(output) {
            this.serializeAs_AllianceInvitationAnswerMessage(output);
        };
        AllianceInvitationAnswerMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AllianceInvitationAnswerMessage(input);
        };
        AllianceInvitationAnswerMessage.prototype.serializeAs_AllianceInvitationAnswerMessage = function(output) {
            output.writeBoolean(this.accept);
        };
        AllianceInvitationAnswerMessage.prototype.deserializeAs_AllianceInvitationAnswerMessage = function(input) {
            this.accept = input.readBoolean();
        };
        AllianceInvitationAnswerMessage.ID = 4464;
        return AllianceInvitationAnswerMessage;
    })(NetworkMessage);
    Protocol.AllianceInvitationAnswerMessage = AllianceInvitationAnswerMessage;
    var AllianceInvitationMessage = (function(_super) {
        __extends(AllianceInvitationMessage, _super);

        function AllianceInvitationMessage() {
            this.targetId = 0;
            _super.call(this)
        }
        AllianceInvitationMessage.prototype.getMessageId = function() {
            return AllianceInvitationMessage.ID;
        };
        AllianceInvitationMessage.prototype.reset = function() {
            this.targetId = 0;
        };
        AllianceInvitationMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AllianceInvitationMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AllianceInvitationMessage.prototype.serialize = function(output) {
            this.serializeAs_AllianceInvitationMessage(output);
        };
        AllianceInvitationMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AllianceInvitationMessage(input);
        };
        AllianceInvitationMessage.prototype.serializeAs_AllianceInvitationMessage = function(output) {
            if (this.targetId < 0 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeVarLong(this.targetId);
        };
        AllianceInvitationMessage.prototype.deserializeAs_AllianceInvitationMessage = function(input) {
            this.targetId = input.readVarUhLong();
            if (this.targetId < 0 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of AllianceInvitationMessage.targetId.");
            }
        };
        AllianceInvitationMessage.ID = 9978;
        return AllianceInvitationMessage;
    })(NetworkMessage);
    Protocol.AllianceInvitationMessage = AllianceInvitationMessage;
    var AllianceInvitationStateRecrutedMessage = (function(_super) {
        __extends(AllianceInvitationStateRecrutedMessage, _super);

        function AllianceInvitationStateRecrutedMessage() {
            this.invitationState = 0;
            _super.call(this)
        }
        AllianceInvitationStateRecrutedMessage.prototype.getMessageId = function() {
            return AllianceInvitationStateRecrutedMessage.ID;
        };
        AllianceInvitationStateRecrutedMessage.prototype.reset = function() {
            this.invitationState = 0;
        };
        AllianceInvitationStateRecrutedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AllianceInvitationStateRecrutedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AllianceInvitationStateRecrutedMessage.prototype.serialize = function(output) {
            this.serializeAs_AllianceInvitationStateRecrutedMessage(output);
        };
        AllianceInvitationStateRecrutedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AllianceInvitationStateRecrutedMessage(input);
        };
        AllianceInvitationStateRecrutedMessage.prototype.serializeAs_AllianceInvitationStateRecrutedMessage = function(output) {
            output.writeByte(this.invitationState);
        };
        AllianceInvitationStateRecrutedMessage.prototype.deserializeAs_AllianceInvitationStateRecrutedMessage = function(input) {
            this.invitationState = input.readByte();
            if (this.invitationState < 0) {
                throw new Error("Forbidden value (" + this.invitationState + ") on element of AllianceInvitationStateRecrutedMessage.invitationState.");
            }
        };
        AllianceInvitationStateRecrutedMessage.ID = 7315;
        return AllianceInvitationStateRecrutedMessage;
    })(NetworkMessage);
    Protocol.AllianceInvitationStateRecrutedMessage = AllianceInvitationStateRecrutedMessage;
    var AllianceInvitationStateRecruterMessage = (function(_super) {
        __extends(AllianceInvitationStateRecruterMessage, _super);

        function AllianceInvitationStateRecruterMessage() {
            this.recrutedName = "";
            this.invitationState = 0;
            _super.call(this)
        }
        AllianceInvitationStateRecruterMessage.prototype.getMessageId = function() {
            return AllianceInvitationStateRecruterMessage.ID;
        };
        AllianceInvitationStateRecruterMessage.prototype.reset = function() {
            this.recrutedName = "";
            this.invitationState = 0;
        };
        AllianceInvitationStateRecruterMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AllianceInvitationStateRecruterMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AllianceInvitationStateRecruterMessage.prototype.serialize = function(output) {
            this.serializeAs_AllianceInvitationStateRecruterMessage(output);
        };
        AllianceInvitationStateRecruterMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AllianceInvitationStateRecruterMessage(input);
        };
        AllianceInvitationStateRecruterMessage.prototype.serializeAs_AllianceInvitationStateRecruterMessage = function(output) {
            output.writeUTF(this.recrutedName);
            output.writeByte(this.invitationState);
        };
        AllianceInvitationStateRecruterMessage.prototype.deserializeAs_AllianceInvitationStateRecruterMessage = function(input) {
            this.recrutedName = input.readUTF();
            this.invitationState = input.readByte();
            if (this.invitationState < 0) {
                throw new Error("Forbidden value (" + this.invitationState + ") on element of AllianceInvitationStateRecruterMessage.invitationState.");
            }
        };
        AllianceInvitationStateRecruterMessage.ID = 3584;
        return AllianceInvitationStateRecruterMessage;
    })(NetworkMessage);
    Protocol.AllianceInvitationStateRecruterMessage = AllianceInvitationStateRecruterMessage;
    var AllianceInvitedMessage = (function(_super) {
        __extends(AllianceInvitedMessage, _super);

        function AllianceInvitedMessage() {
            this.recruterId = 0;
            this.recruterName = "";
            this.allianceInfo = new BasicNamedAllianceInformations();
            _super.call(this)
        }
        AllianceInvitedMessage.prototype.getMessageId = function() {
            return AllianceInvitedMessage.ID;
        };
        AllianceInvitedMessage.prototype.reset = function() {
            this.recruterId = 0;
            this.recruterName = "";
            this.allianceInfo = new BasicNamedAllianceInformations();
        };
        AllianceInvitedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AllianceInvitedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AllianceInvitedMessage.prototype.serialize = function(output) {
            this.serializeAs_AllianceInvitedMessage(output);
        };
        AllianceInvitedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AllianceInvitedMessage(input);
        };
        AllianceInvitedMessage.prototype.serializeAs_AllianceInvitedMessage = function(output) {
            if (this.recruterId < 0 || this.recruterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.recruterId + ") on element recruterId.");
            }
            output.writeVarLong(this.recruterId);
            output.writeUTF(this.recruterName);
            this.allianceInfo.serializeAs_BasicNamedAllianceInformations(output);
        };
        AllianceInvitedMessage.prototype.deserializeAs_AllianceInvitedMessage = function(input) {
            this.recruterId = input.readVarUhLong();
            if (this.recruterId < 0 || this.recruterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.recruterId + ") on element of AllianceInvitedMessage.recruterId.");
            }
            this.recruterName = input.readUTF();
            this.allianceInfo = new BasicNamedAllianceInformations();
            this.allianceInfo.deserialize(input);
        };
        AllianceInvitedMessage.ID = 3392;
        return AllianceInvitedMessage;
    })(NetworkMessage);
    Protocol.AllianceInvitedMessage = AllianceInvitedMessage;
    var AllianceJoinedMessage = (function(_super) {
        __extends(AllianceJoinedMessage, _super);

        function AllianceJoinedMessage() {
            this.allianceInfo = new AllianceInformations();
            this.enabled = false;
            this.leadingGuildId = 0;
            _super.call(this)
        }
        AllianceJoinedMessage.prototype.getMessageId = function() {
            return AllianceJoinedMessage.ID;
        };
        AllianceJoinedMessage.prototype.reset = function() {
            this.allianceInfo = new AllianceInformations();
            this.enabled = false;
            this.leadingGuildId = 0;
        };
        AllianceJoinedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AllianceJoinedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AllianceJoinedMessage.prototype.serialize = function(output) {
            this.serializeAs_AllianceJoinedMessage(output);
        };
        AllianceJoinedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AllianceJoinedMessage(input);
        };
        AllianceJoinedMessage.prototype.serializeAs_AllianceJoinedMessage = function(output) {
            this.allianceInfo.serializeAs_AllianceInformations(output);
            output.writeBoolean(this.enabled);
            if (this.leadingGuildId < 0) {
                throw new Error("Forbidden value (" + this.leadingGuildId + ") on element leadingGuildId.");
            }
            output.writeVarInt(this.leadingGuildId);
        };
        AllianceJoinedMessage.prototype.deserializeAs_AllianceJoinedMessage = function(input) {
            this.allianceInfo = new AllianceInformations();
            this.allianceInfo.deserialize(input);
            this.enabled = input.readBoolean();
            this.leadingGuildId = input.readVarUhInt();
            if (this.leadingGuildId < 0) {
                throw new Error("Forbidden value (" + this.leadingGuildId + ") on element of AllianceJoinedMessage.leadingGuildId.");
            }
        };
        AllianceJoinedMessage.ID = 1115;
        return AllianceJoinedMessage;
    })(NetworkMessage);
    Protocol.AllianceJoinedMessage = AllianceJoinedMessage;
    var AllianceKickRequestMessage = (function(_super) {
        __extends(AllianceKickRequestMessage, _super);

        function AllianceKickRequestMessage() {
            this.kickedId = 0;
            _super.call(this)
        }
        AllianceKickRequestMessage.prototype.getMessageId = function() {
            return AllianceKickRequestMessage.ID;
        };
        AllianceKickRequestMessage.prototype.reset = function() {
            this.kickedId = 0;
        };
        AllianceKickRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AllianceKickRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AllianceKickRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_AllianceKickRequestMessage(output);
        };
        AllianceKickRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AllianceKickRequestMessage(input);
        };
        AllianceKickRequestMessage.prototype.serializeAs_AllianceKickRequestMessage = function(output) {
            if (this.kickedId < 0) {
                throw new Error("Forbidden value (" + this.kickedId + ") on element kickedId.");
            }
            output.writeVarInt(this.kickedId);
        };
        AllianceKickRequestMessage.prototype.deserializeAs_AllianceKickRequestMessage = function(input) {
            this.kickedId = input.readVarUhInt();
            if (this.kickedId < 0) {
                throw new Error("Forbidden value (" + this.kickedId + ") on element of AllianceKickRequestMessage.kickedId.");
            }
        };
        AllianceKickRequestMessage.ID = 4475;
        return AllianceKickRequestMessage;
    })(NetworkMessage);
    Protocol.AllianceKickRequestMessage = AllianceKickRequestMessage;
    var AllianceLeftMessage = (function(_super) {
        __extends(AllianceLeftMessage, _super);

        function AllianceLeftMessage() {

            _super.call(this)
        }
        AllianceLeftMessage.prototype.getMessageId = function() {
            return AllianceLeftMessage.ID;
        };
        AllianceLeftMessage.prototype.reset = function() {

        };
        AllianceLeftMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AllianceLeftMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AllianceLeftMessage.prototype.serialize = function(output) {
            this.serializeAs_AllianceLeftMessage(output);
        };
        AllianceLeftMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AllianceLeftMessage(input);
        };
        AllianceLeftMessage.prototype.serializeAs_AllianceLeftMessage = function(output) {

        };
        AllianceLeftMessage.prototype.deserializeAs_AllianceLeftMessage = function(input) {

        };
        AllianceLeftMessage.ID = 9560;
        return AllianceLeftMessage;
    })(NetworkMessage);
    Protocol.AllianceLeftMessage = AllianceLeftMessage;
    var AllianceListMessage = (function(_super) {
        __extends(AllianceListMessage, _super);

        function AllianceListMessage() {
            this.alliances = [];
            _super.call(this)
        }
        AllianceListMessage.prototype.getMessageId = function() {
            return AllianceListMessage.ID;
        };
        AllianceListMessage.prototype.reset = function() {
            this.alliances = [];
        };
        AllianceListMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AllianceListMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AllianceListMessage.prototype.serialize = function(output) {
            this.serializeAs_AllianceListMessage(output);
        };
        AllianceListMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AllianceListMessage(input);
        };
        AllianceListMessage.prototype.serializeAs_AllianceListMessage = function(output) {
            output.writeShort(this.alliances.length);
            for (var _i1 = 0; _i1 < this.alliances.length; _i1++) {
                (this.alliances[_i1]).serializeAs_AllianceFactSheetInformations(output);
            }
        };
        AllianceListMessage.prototype.deserializeAs_AllianceListMessage = function(input) {
            var _item1 = null;
            var _alliancesLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _alliancesLen; _i1++) {
                _item1 = new AllianceFactSheetInformations();
                _item1.deserialize(input);
                this.alliances.push(_item1);
            }
        };
        AllianceListMessage.ID = 5865;
        return AllianceListMessage;
    })(NetworkMessage);
    Protocol.AllianceListMessage = AllianceListMessage;
    var AllianceMembershipMessage = (function(_super) {
        __extends(AllianceMembershipMessage, _super);

        function AllianceMembershipMessage() {

            _super.call(this)
        }
        AllianceMembershipMessage.prototype.getMessageId = function() {
            return AllianceMembershipMessage.ID;
        };
        AllianceMembershipMessage.prototype.reset = function() {

        };
        AllianceMembershipMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AllianceMembershipMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AllianceMembershipMessage.prototype.serialize = function(output) {
            this.serializeAs_AllianceMembershipMessage(output);
        };
        AllianceMembershipMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AllianceMembershipMessage(input);
        };
        AllianceMembershipMessage.prototype.serializeAs_AllianceMembershipMessage = function(output) {
            _super.prototype.serializeAs_AllianceJoinedMessage.call(this, output);
        };
        AllianceMembershipMessage.prototype.deserializeAs_AllianceMembershipMessage = function(input) {
            _super.prototype.deserializeAs_AllianceJoinedMessage.call(this, input);
        };
        AllianceMembershipMessage.ID = 1682;
        return AllianceMembershipMessage;
    })(AllianceJoinedMessage);
    Protocol.AllianceMembershipMessage = AllianceMembershipMessage;
    var AllianceModificationEmblemValidMessage = (function(_super) {
        __extends(AllianceModificationEmblemValidMessage, _super);

        function AllianceModificationEmblemValidMessage() {
            this.Alliancemblem = new GuildEmblem();
            _super.call(this)
        }
        AllianceModificationEmblemValidMessage.prototype.getMessageId = function() {
            return AllianceModificationEmblemValidMessage.ID;
        };
        AllianceModificationEmblemValidMessage.prototype.reset = function() {
            this.Alliancemblem = new GuildEmblem();
        };
        AllianceModificationEmblemValidMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AllianceModificationEmblemValidMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AllianceModificationEmblemValidMessage.prototype.serialize = function(output) {
            this.serializeAs_AllianceModificationEmblemValidMessage(output);
        };
        AllianceModificationEmblemValidMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AllianceModificationEmblemValidMessage(input);
        };
        AllianceModificationEmblemValidMessage.prototype.serializeAs_AllianceModificationEmblemValidMessage = function(output) {
            this.Alliancemblem.serializeAs_GuildEmblem(output);
        };
        AllianceModificationEmblemValidMessage.prototype.deserializeAs_AllianceModificationEmblemValidMessage = function(input) {
            this.Alliancemblem = new GuildEmblem();
            this.Alliancemblem.deserialize(input);
        };
        AllianceModificationEmblemValidMessage.ID = 1433;
        return AllianceModificationEmblemValidMessage;
    })(NetworkMessage);
    Protocol.AllianceModificationEmblemValidMessage = AllianceModificationEmblemValidMessage;
    var AllianceModificationNameAndTagValidMessage = (function(_super) {
        __extends(AllianceModificationNameAndTagValidMessage, _super);

        function AllianceModificationNameAndTagValidMessage() {
            this.allianceName = "";
            this.allianceTag = "";
            _super.call(this)
        }
        AllianceModificationNameAndTagValidMessage.prototype.getMessageId = function() {
            return AllianceModificationNameAndTagValidMessage.ID;
        };
        AllianceModificationNameAndTagValidMessage.prototype.reset = function() {
            this.allianceName = "";
            this.allianceTag = "";
        };
        AllianceModificationNameAndTagValidMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AllianceModificationNameAndTagValidMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AllianceModificationNameAndTagValidMessage.prototype.serialize = function(output) {
            this.serializeAs_AllianceModificationNameAndTagValidMessage(output);
        };
        AllianceModificationNameAndTagValidMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AllianceModificationNameAndTagValidMessage(input);
        };
        AllianceModificationNameAndTagValidMessage.prototype.serializeAs_AllianceModificationNameAndTagValidMessage = function(output) {
            output.writeUTF(this.allianceName);
            output.writeUTF(this.allianceTag);
        };
        AllianceModificationNameAndTagValidMessage.prototype.deserializeAs_AllianceModificationNameAndTagValidMessage = function(input) {
            this.allianceName = input.readUTF();
            this.allianceTag = input.readUTF();
        };
        AllianceModificationNameAndTagValidMessage.ID = 5789;
        return AllianceModificationNameAndTagValidMessage;
    })(NetworkMessage);
    Protocol.AllianceModificationNameAndTagValidMessage = AllianceModificationNameAndTagValidMessage;
    var AllianceModificationStartedMessage = (function(_super) {
        __extends(AllianceModificationStartedMessage, _super);

        function AllianceModificationStartedMessage() {
            this.canChangeName = false;
            this.canChangeTag = false;
            this.canChangeEmblem = false;
            _super.call(this)
        }
        AllianceModificationStartedMessage.prototype.getMessageId = function() {
            return AllianceModificationStartedMessage.ID;
        };
        AllianceModificationStartedMessage.prototype.reset = function() {
            this.canChangeName = false;
            this.canChangeTag = false;
            this.canChangeEmblem = false;
        };
        AllianceModificationStartedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AllianceModificationStartedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AllianceModificationStartedMessage.prototype.serialize = function(output) {
            this.serializeAs_AllianceModificationStartedMessage(output);
        };
        AllianceModificationStartedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AllianceModificationStartedMessage(input);
        };
        AllianceModificationStartedMessage.prototype.serializeAs_AllianceModificationStartedMessage = function(output) {
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.canChangeName);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.canChangeTag);
            _box0 = BooleanByteWrapper.setFlag(_box0, 2, this.canChangeEmblem);
            output.writeByte(_box0);
        };
        AllianceModificationStartedMessage.prototype.deserializeAs_AllianceModificationStartedMessage = function(input) {
            this.deserializeByteBoxes(input);
        };
        AllianceModificationStartedMessage.ID = 6628;
        return AllianceModificationStartedMessage;
    })(NetworkMessage);
    Protocol.AllianceModificationStartedMessage = AllianceModificationStartedMessage;
    var AllianceModificationValidMessage = (function(_super) {
        __extends(AllianceModificationValidMessage, _super);

        function AllianceModificationValidMessage() {
            this.allianceName = "";
            this.allianceTag = "";
            this.Alliancemblem = new GuildEmblem();
            _super.call(this)
        }
        AllianceModificationValidMessage.prototype.getMessageId = function() {
            return AllianceModificationValidMessage.ID;
        };
        AllianceModificationValidMessage.prototype.reset = function() {
            this.allianceName = "";
            this.allianceTag = "";
            this.Alliancemblem = new GuildEmblem();
        };
        AllianceModificationValidMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AllianceModificationValidMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AllianceModificationValidMessage.prototype.serialize = function(output) {
            this.serializeAs_AllianceModificationValidMessage(output);
        };
        AllianceModificationValidMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AllianceModificationValidMessage(input);
        };
        AllianceModificationValidMessage.prototype.serializeAs_AllianceModificationValidMessage = function(output) {
            output.writeUTF(this.allianceName);
            output.writeUTF(this.allianceTag);
            this.Alliancemblem.serializeAs_GuildEmblem(output);
        };
        AllianceModificationValidMessage.prototype.deserializeAs_AllianceModificationValidMessage = function(input) {
            this.allianceName = input.readUTF();
            this.allianceTag = input.readUTF();
            this.Alliancemblem = new GuildEmblem();
            this.Alliancemblem.deserialize(input);
        };
        AllianceModificationValidMessage.ID = 8124;
        return AllianceModificationValidMessage;
    })(NetworkMessage);
    Protocol.AllianceModificationValidMessage = AllianceModificationValidMessage;
    var AllianceMotdMessage = (function(_super) {
        __extends(AllianceMotdMessage, _super);

        function AllianceMotdMessage() {

            _super.call(this)
        }
        AllianceMotdMessage.prototype.getMessageId = function() {
            return AllianceMotdMessage.ID;
        };
        AllianceMotdMessage.prototype.reset = function() {

        };
        AllianceMotdMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AllianceMotdMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AllianceMotdMessage.prototype.serialize = function(output) {
            this.serializeAs_AllianceMotdMessage(output);
        };
        AllianceMotdMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AllianceMotdMessage(input);
        };
        AllianceMotdMessage.prototype.serializeAs_AllianceMotdMessage = function(output) {
            _super.prototype.serializeAs_SocialNoticeMessage.call(this, output);
        };
        AllianceMotdMessage.prototype.deserializeAs_AllianceMotdMessage = function(input) {
            _super.prototype.deserializeAs_SocialNoticeMessage.call(this, input);
        };
        AllianceMotdMessage.ID = 6551;
        return AllianceMotdMessage;
    })(SocialNoticeMessage);
    Protocol.AllianceMotdMessage = AllianceMotdMessage;
    var AllianceMotdSetErrorMessage = (function(_super) {
        __extends(AllianceMotdSetErrorMessage, _super);

        function AllianceMotdSetErrorMessage() {

            _super.call(this)
        }
        AllianceMotdSetErrorMessage.prototype.getMessageId = function() {
            return AllianceMotdSetErrorMessage.ID;
        };
        AllianceMotdSetErrorMessage.prototype.reset = function() {

        };
        AllianceMotdSetErrorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AllianceMotdSetErrorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AllianceMotdSetErrorMessage.prototype.serialize = function(output) {
            this.serializeAs_AllianceMotdSetErrorMessage(output);
        };
        AllianceMotdSetErrorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AllianceMotdSetErrorMessage(input);
        };
        AllianceMotdSetErrorMessage.prototype.serializeAs_AllianceMotdSetErrorMessage = function(output) {
            _super.prototype.serializeAs_SocialNoticeSetErrorMessage.call(this, output);
        };
        AllianceMotdSetErrorMessage.prototype.deserializeAs_AllianceMotdSetErrorMessage = function(input) {
            _super.prototype.deserializeAs_SocialNoticeSetErrorMessage.call(this, input);
        };
        AllianceMotdSetErrorMessage.ID = 2111;
        return AllianceMotdSetErrorMessage;
    })(SocialNoticeSetErrorMessage);
    Protocol.AllianceMotdSetErrorMessage = AllianceMotdSetErrorMessage;
    var AllianceMotdSetRequestMessage = (function(_super) {
        __extends(AllianceMotdSetRequestMessage, _super);

        function AllianceMotdSetRequestMessage() {
            this.content = "";
            _super.call(this)
        }
        AllianceMotdSetRequestMessage.prototype.getMessageId = function() {
            return AllianceMotdSetRequestMessage.ID;
        };
        AllianceMotdSetRequestMessage.prototype.reset = function() {
            this.content = "";
        };
        AllianceMotdSetRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AllianceMotdSetRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AllianceMotdSetRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_AllianceMotdSetRequestMessage(output);
        };
        AllianceMotdSetRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AllianceMotdSetRequestMessage(input);
        };
        AllianceMotdSetRequestMessage.prototype.serializeAs_AllianceMotdSetRequestMessage = function(output) {
            _super.prototype.serializeAs_SocialNoticeSetRequestMessage.call(this, output);
            output.writeUTF(this.content);
        };
        AllianceMotdSetRequestMessage.prototype.deserializeAs_AllianceMotdSetRequestMessage = function(input) {
            _super.prototype.deserializeAs_SocialNoticeSetRequestMessage.call(this, input);
            this.content = input.readUTF();
        };
        AllianceMotdSetRequestMessage.ID = 9138;
        return AllianceMotdSetRequestMessage;
    })(SocialNoticeSetRequestMessage);
    Protocol.AllianceMotdSetRequestMessage = AllianceMotdSetRequestMessage;
    var AlliancePartialListMessage = (function(_super) {
        __extends(AlliancePartialListMessage, _super);

        function AlliancePartialListMessage() {

            _super.call(this)
        }
        AlliancePartialListMessage.prototype.getMessageId = function() {
            return AlliancePartialListMessage.ID;
        };
        AlliancePartialListMessage.prototype.reset = function() {

        };
        AlliancePartialListMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AlliancePartialListMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AlliancePartialListMessage.prototype.serialize = function(output) {
            this.serializeAs_AlliancePartialListMessage(output);
        };
        AlliancePartialListMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AlliancePartialListMessage(input);
        };
        AlliancePartialListMessage.prototype.serializeAs_AlliancePartialListMessage = function(output) {
            _super.prototype.serializeAs_AllianceListMessage.call(this, output);
        };
        AlliancePartialListMessage.prototype.deserializeAs_AlliancePartialListMessage = function(input) {
            _super.prototype.deserializeAs_AllianceListMessage.call(this, input);
        };
        AlliancePartialListMessage.ID = 4368;
        return AlliancePartialListMessage;
    })(AllianceListMessage);
    Protocol.AlliancePartialListMessage = AlliancePartialListMessage;
    var AllianceVersatileInfoListMessage = (function(_super) {
        __extends(AllianceVersatileInfoListMessage, _super);

        function AllianceVersatileInfoListMessage() {
            this.alliances = [];
            _super.call(this)
        }
        AllianceVersatileInfoListMessage.prototype.getMessageId = function() {
            return AllianceVersatileInfoListMessage.ID;
        };
        AllianceVersatileInfoListMessage.prototype.reset = function() {
            this.alliances = [];
        };
        AllianceVersatileInfoListMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AllianceVersatileInfoListMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AllianceVersatileInfoListMessage.prototype.serialize = function(output) {
            this.serializeAs_AllianceVersatileInfoListMessage(output);
        };
        AllianceVersatileInfoListMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AllianceVersatileInfoListMessage(input);
        };
        AllianceVersatileInfoListMessage.prototype.serializeAs_AllianceVersatileInfoListMessage = function(output) {
            output.writeShort(this.alliances.length);
            for (var _i1 = 0; _i1 < this.alliances.length; _i1++) {
                (this.alliances[_i1]).serializeAs_AllianceVersatileInformations(output);
            }
        };
        AllianceVersatileInfoListMessage.prototype.deserializeAs_AllianceVersatileInfoListMessage = function(input) {
            var _item1 = null;
            var _alliancesLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _alliancesLen; _i1++) {
                _item1 = new AllianceVersatileInformations();
                _item1.deserialize(input);
                this.alliances.push(_item1);
            }
        };
        AllianceVersatileInfoListMessage.ID = 815;
        return AllianceVersatileInfoListMessage;
    })(NetworkMessage);
    Protocol.AllianceVersatileInfoListMessage = AllianceVersatileInfoListMessage;
    var KohUpdateMessage = (function(_super) {
        __extends(KohUpdateMessage, _super);

        function KohUpdateMessage() {
            this.alliances = [];
            this.allianceNbMembers = [];
            this.allianceRoundWeigth = [];
            this.allianceMatchScore = [];
            this.allianceMapWinners = [];
            this.allianceMapWinnerScore = 0;
            this.allianceMapMyAllianceScore = 0;
            this.nextTickTime = 0;
            _super.call(this)
        }
        KohUpdateMessage.prototype.getMessageId = function() {
            return KohUpdateMessage.ID;
        };
        KohUpdateMessage.prototype.reset = function() {
            this.alliances = [];
            this.allianceNbMembers = [];
            this.allianceRoundWeigth = [];
            this.allianceMatchScore = [];
            this.allianceMapWinners = [];
            this.allianceMapWinnerScore = 0;
            this.allianceMapMyAllianceScore = 0;
            this.nextTickTime = 0;
        };
        KohUpdateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        KohUpdateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        KohUpdateMessage.prototype.serialize = function(output) {
            this.serializeAs_KohUpdateMessage(output);
        };
        KohUpdateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_KohUpdateMessage(input);
        };
        KohUpdateMessage.prototype.serializeAs_KohUpdateMessage = function(output) {
            output.writeShort(this.alliances.length);
            for (var _i1 = 0; _i1 < this.alliances.length; _i1++) {
                (this.alliances[_i1]).serializeAs_AllianceInformations(output);
            }
            output.writeShort(this.allianceNbMembers.length);
            for (var _i2 = 0; _i2 < this.allianceNbMembers.length; _i2++) {
                if (this.allianceNbMembers[_i2] < 0) {
                    throw new Error("Forbidden value (" + this.allianceNbMembers[_i2] + ") on element 2 (starting at 1) of allianceNbMembers.");
                }
                output.writeVarShort(this.allianceNbMembers[_i2]);
            }
            output.writeShort(this.allianceRoundWeigth.length);
            for (var _i3 = 0; _i3 < this.allianceRoundWeigth.length; _i3++) {
                if (this.allianceRoundWeigth[_i3] < 0) {
                    throw new Error("Forbidden value (" + this.allianceRoundWeigth[_i3] + ") on element 3 (starting at 1) of allianceRoundWeigth.");
                }
                output.writeVarInt(this.allianceRoundWeigth[_i3]);
            }
            output.writeShort(this.allianceMatchScore.length);
            for (var _i4 = 0; _i4 < this.allianceMatchScore.length; _i4++) {
                if (this.allianceMatchScore[_i4] < 0) {
                    throw new Error("Forbidden value (" + this.allianceMatchScore[_i4] + ") on element 4 (starting at 1) of allianceMatchScore.");
                }
                output.writeByte(this.allianceMatchScore[_i4]);
            }
            output.writeShort(this.allianceMapWinners.length);
            for (var _i5 = 0; _i5 < this.allianceMapWinners.length; _i5++) {
                (this.allianceMapWinners[_i5]).serializeAs_BasicAllianceInformations(output);
            }
            if (this.allianceMapWinnerScore < 0) {
                throw new Error("Forbidden value (" + this.allianceMapWinnerScore + ") on element allianceMapWinnerScore.");
            }
            output.writeVarInt(this.allianceMapWinnerScore);
            if (this.allianceMapMyAllianceScore < 0) {
                throw new Error("Forbidden value (" + this.allianceMapMyAllianceScore + ") on element allianceMapMyAllianceScore.");
            }
            output.writeVarInt(this.allianceMapMyAllianceScore);
            if (this.nextTickTime < 0 || this.nextTickTime > 9007199254740990) {
                throw new Error("Forbidden value (" + this.nextTickTime + ") on element nextTickTime.");
            }
            output.writeDouble(this.nextTickTime);
        };
        KohUpdateMessage.prototype.deserializeAs_KohUpdateMessage = function(input) {
            var _item1 = null;
            var _val2 = 0;
            var _val3 = 0;
            var _val4 = 0;
            var _item5 = null;
            var _alliancesLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _alliancesLen; _i1++) {
                _item1 = new AllianceInformations();
                _item1.deserialize(input);
                this.alliances.push(_item1);
            }
            var _allianceNbMembersLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _allianceNbMembersLen; _i2++) {
                _val2 = input.readVarUhShort();
                if (_val2 < 0) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of allianceNbMembers.");
                }
                this.allianceNbMembers.push(_val2);
            }
            var _allianceRoundWeigthLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _allianceRoundWeigthLen; _i3++) {
                _val3 = input.readVarUhInt();
                if (_val3 < 0) {
                    throw new Error("Forbidden value (" + _val3 + ") on elements of allianceRoundWeigth.");
                }
                this.allianceRoundWeigth.push(_val3);
            }
            var _allianceMatchScoreLen = input.readUnsignedShort();
            for (var _i4 = 0; _i4 < _allianceMatchScoreLen; _i4++) {
                _val4 = input.readByte();
                if (_val4 < 0) {
                    throw new Error("Forbidden value (" + _val4 + ") on elements of allianceMatchScore.");
                }
                this.allianceMatchScore.push(_val4);
            }
            var _allianceMapWinnersLen = input.readUnsignedShort();
            for (var _i5 = 0; _i5 < _allianceMapWinnersLen; _i5++) {
                _item5 = new BasicAllianceInformations();
                _item5.deserialize(input);
                this.allianceMapWinners.push(_item5);
            }
            this.allianceMapWinnerScore = input.readVarUhInt();
            if (this.allianceMapWinnerScore < 0) {
                throw new Error("Forbidden value (" + this.allianceMapWinnerScore + ") on element of KohUpdateMessage.allianceMapWinnerScore.");
            }
            this.allianceMapMyAllianceScore = input.readVarUhInt();
            if (this.allianceMapMyAllianceScore < 0) {
                throw new Error("Forbidden value (" + this.allianceMapMyAllianceScore + ") on element of KohUpdateMessage.allianceMapMyAllianceScore.");
            }
            this.nextTickTime = input.readDouble();
            if (this.nextTickTime < 0 || this.nextTickTime > 9007199254740990) {
                throw new Error("Forbidden value (" + this.nextTickTime + ") on element of KohUpdateMessage.nextTickTime.");
            }
        };
        KohUpdateMessage.ID = 5197;
        return KohUpdateMessage;
    })(NetworkMessage);
    Protocol.KohUpdateMessage = KohUpdateMessage;
    var AlmanachCalendarDateMessage = (function(_super) {
        __extends(AlmanachCalendarDateMessage, _super);

        function AlmanachCalendarDateMessage() {
            this.date = 0;
            _super.call(this)
        }
        AlmanachCalendarDateMessage.prototype.getMessageId = function() {
            return AlmanachCalendarDateMessage.ID;
        };
        AlmanachCalendarDateMessage.prototype.reset = function() {
            this.date = 0;
        };
        AlmanachCalendarDateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AlmanachCalendarDateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AlmanachCalendarDateMessage.prototype.serialize = function(output) {
            this.serializeAs_AlmanachCalendarDateMessage(output);
        };
        AlmanachCalendarDateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AlmanachCalendarDateMessage(input);
        };
        AlmanachCalendarDateMessage.prototype.serializeAs_AlmanachCalendarDateMessage = function(output) {
            output.writeInt(this.date);
        };
        AlmanachCalendarDateMessage.prototype.deserializeAs_AlmanachCalendarDateMessage = function(input) {
            this.date = input.readInt();
        };
        AlmanachCalendarDateMessage.ID = 5290;
        return AlmanachCalendarDateMessage;
    })(NetworkMessage);
    Protocol.AlmanachCalendarDateMessage = AlmanachCalendarDateMessage;
    var AccountCapabilitiesMessage = (function(_super) {
        __extends(AccountCapabilitiesMessage, _super);

        function AccountCapabilitiesMessage() {
            this.accountId = 0;
            this.tutorialAvailable = false;
            this.breedsVisible = 0;
            this.breedsAvailable = 0;
            this.status = -1;
            this.canCreateNewCharacter = false;
            _super.call(this)
        }
        AccountCapabilitiesMessage.prototype.getMessageId = function() {
            return AccountCapabilitiesMessage.ID;
        };
        AccountCapabilitiesMessage.prototype.reset = function() {
            this.accountId = 0;
            this.tutorialAvailable = false;
            this.breedsVisible = 0;
            this.breedsAvailable = 0;
            this.status = -1;
            this.canCreateNewCharacter = false;
        };
        AccountCapabilitiesMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AccountCapabilitiesMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AccountCapabilitiesMessage.prototype.serialize = function(output) {
            this.serializeAs_AccountCapabilitiesMessage(output);
        };
        AccountCapabilitiesMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AccountCapabilitiesMessage(input);
        };
        AccountCapabilitiesMessage.prototype.serializeAs_AccountCapabilitiesMessage = function(output) {
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.tutorialAvailable);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.canCreateNewCharacter);
            output.writeByte(_box0);
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element accountId.");
            }
            output.writeInt(this.accountId);
            if (this.breedsVisible < 0) {
                throw new Error("Forbidden value (" + this.breedsVisible + ") on element breedsVisible.");
            }
            output.writeVarInt(this.breedsVisible);
            if (this.breedsAvailable < 0) {
                throw new Error("Forbidden value (" + this.breedsAvailable + ") on element breedsAvailable.");
            }
            output.writeVarInt(this.breedsAvailable);
            output.writeByte(this.status);
        };
        AccountCapabilitiesMessage.prototype.deserializeAs_AccountCapabilitiesMessage = function(input) {
            this.deserializeByteBoxes(input);
            this.accountId = input.readInt();
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element of AccountCapabilitiesMessage.accountId.");
            }
            this.breedsVisible = input.readVarUhInt();
            if (this.breedsVisible < 0) {
                throw new Error("Forbidden value (" + this.breedsVisible + ") on element of AccountCapabilitiesMessage.breedsVisible.");
            }
            this.breedsAvailable = input.readVarUhInt();
            if (this.breedsAvailable < 0) {
                throw new Error("Forbidden value (" + this.breedsAvailable + ") on element of AccountCapabilitiesMessage.breedsAvailable.");
            }
            this.status = input.readByte();
        };
        AccountCapabilitiesMessage.ID = 6779;
        return AccountCapabilitiesMessage;
    })(NetworkMessage);
    Protocol.AccountCapabilitiesMessage = AccountCapabilitiesMessage;
    var AccountLoggingKickedMessage = (function(_super) {
        __extends(AccountLoggingKickedMessage, _super);

        function AccountLoggingKickedMessage() {
            this.days = 0;
            this.hours = 0;
            this.minutes = 0;
            _super.call(this)
        }
        AccountLoggingKickedMessage.prototype.getMessageId = function() {
            return AccountLoggingKickedMessage.ID;
        };
        AccountLoggingKickedMessage.prototype.reset = function() {
            this.days = 0;
            this.hours = 0;
            this.minutes = 0;
        };
        AccountLoggingKickedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AccountLoggingKickedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AccountLoggingKickedMessage.prototype.serialize = function(output) {
            this.serializeAs_AccountLoggingKickedMessage(output);
        };
        AccountLoggingKickedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AccountLoggingKickedMessage(input);
        };
        AccountLoggingKickedMessage.prototype.serializeAs_AccountLoggingKickedMessage = function(output) {
            if (this.days < 0) {
                throw new Error("Forbidden value (" + this.days + ") on element days.");
            }
            output.writeVarShort(this.days);
            if (this.hours < 0) {
                throw new Error("Forbidden value (" + this.hours + ") on element hours.");
            }
            output.writeByte(this.hours);
            if (this.minutes < 0) {
                throw new Error("Forbidden value (" + this.minutes + ") on element minutes.");
            }
            output.writeByte(this.minutes);
        };
        AccountLoggingKickedMessage.prototype.deserializeAs_AccountLoggingKickedMessage = function(input) {
            this.days = input.readVarUhShort();
            if (this.days < 0) {
                throw new Error("Forbidden value (" + this.days + ") on element of AccountLoggingKickedMessage.days.");
            }
            this.hours = input.readByte();
            if (this.hours < 0) {
                throw new Error("Forbidden value (" + this.hours + ") on element of AccountLoggingKickedMessage.hours.");
            }
            this.minutes = input.readByte();
            if (this.minutes < 0) {
                throw new Error("Forbidden value (" + this.minutes + ") on element of AccountLoggingKickedMessage.minutes.");
            }
        };
        AccountLoggingKickedMessage.ID = 2150;
        return AccountLoggingKickedMessage;
    })(NetworkMessage);
    Protocol.AccountLoggingKickedMessage = AccountLoggingKickedMessage;
    var AlreadyConnectedMessage = (function(_super) {
        __extends(AlreadyConnectedMessage, _super);

        function AlreadyConnectedMessage() {

            _super.call(this)
        }
        AlreadyConnectedMessage.prototype.getMessageId = function() {
            return AlreadyConnectedMessage.ID;
        };
        AlreadyConnectedMessage.prototype.reset = function() {

        };
        AlreadyConnectedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AlreadyConnectedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AlreadyConnectedMessage.prototype.serialize = function(output) {
            this.serializeAs_AlreadyConnectedMessage(output);
        };
        AlreadyConnectedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AlreadyConnectedMessage(input);
        };
        AlreadyConnectedMessage.prototype.serializeAs_AlreadyConnectedMessage = function(output) {

        };
        AlreadyConnectedMessage.prototype.deserializeAs_AlreadyConnectedMessage = function(input) {

        };
        AlreadyConnectedMessage.ID = 13;
        return AlreadyConnectedMessage;
    })(NetworkMessage);
    Protocol.AlreadyConnectedMessage = AlreadyConnectedMessage;
    var AuthenticationTicketAcceptedMessage = (function(_super) {
        __extends(AuthenticationTicketAcceptedMessage, _super);

        function AuthenticationTicketAcceptedMessage() {

            _super.call(this)
        }
        AuthenticationTicketAcceptedMessage.prototype.getMessageId = function() {
            return AuthenticationTicketAcceptedMessage.ID;
        };
        AuthenticationTicketAcceptedMessage.prototype.reset = function() {

        };
        AuthenticationTicketAcceptedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AuthenticationTicketAcceptedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AuthenticationTicketAcceptedMessage.prototype.serialize = function(output) {
            this.serializeAs_AuthenticationTicketAcceptedMessage(output);
        };
        AuthenticationTicketAcceptedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AuthenticationTicketAcceptedMessage(input);
        };
        AuthenticationTicketAcceptedMessage.prototype.serializeAs_AuthenticationTicketAcceptedMessage = function(output) {

        };
        AuthenticationTicketAcceptedMessage.prototype.deserializeAs_AuthenticationTicketAcceptedMessage = function(input) {

        };
        AuthenticationTicketAcceptedMessage.ID = 9026;
        return AuthenticationTicketAcceptedMessage;
    })(NetworkMessage);
    Protocol.AuthenticationTicketAcceptedMessage = AuthenticationTicketAcceptedMessage;
    var AuthenticationTicketMessage = (function(_super) {
        __extends(AuthenticationTicketMessage, _super);

        function AuthenticationTicketMessage() {
            this.lang = "";
            this.ticket = "";
            _super.call(this)
        }
        AuthenticationTicketMessage.prototype.getMessageId = function() {
            return AuthenticationTicketMessage.ID;
        };
        AuthenticationTicketMessage.prototype.reset = function() {
            this.lang = "";
            this.ticket = "";
        };
        AuthenticationTicketMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AuthenticationTicketMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AuthenticationTicketMessage.prototype.serialize = function(output) {
            this.serializeAs_AuthenticationTicketMessage(output);
        };
        AuthenticationTicketMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AuthenticationTicketMessage(input);
        };
        AuthenticationTicketMessage.prototype.serializeAs_AuthenticationTicketMessage = function(output) {
            output.writeUTF(this.lang);
            output.writeUTF(this.ticket);
        };
        AuthenticationTicketMessage.prototype.deserializeAs_AuthenticationTicketMessage = function(input) {
            this.lang = input.readUTF();
            this.ticket = input.readUTF();
        };
        AuthenticationTicketMessage.ID = 1864;
        return AuthenticationTicketMessage;
    })(NetworkMessage);
    Protocol.AuthenticationTicketMessage = AuthenticationTicketMessage;
    var AuthenticationTicketRefusedMessage = (function(_super) {
        __extends(AuthenticationTicketRefusedMessage, _super);

        function AuthenticationTicketRefusedMessage() {

            _super.call(this)
        }
        AuthenticationTicketRefusedMessage.prototype.getMessageId = function() {
            return AuthenticationTicketRefusedMessage.ID;
        };
        AuthenticationTicketRefusedMessage.prototype.reset = function() {

        };
        AuthenticationTicketRefusedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AuthenticationTicketRefusedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AuthenticationTicketRefusedMessage.prototype.serialize = function(output) {
            this.serializeAs_AuthenticationTicketRefusedMessage(output);
        };
        AuthenticationTicketRefusedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AuthenticationTicketRefusedMessage(input);
        };
        AuthenticationTicketRefusedMessage.prototype.serializeAs_AuthenticationTicketRefusedMessage = function(output) {

        };
        AuthenticationTicketRefusedMessage.prototype.deserializeAs_AuthenticationTicketRefusedMessage = function(input) {

        };
        AuthenticationTicketRefusedMessage.ID = 9238;
        return AuthenticationTicketRefusedMessage;
    })(NetworkMessage);
    Protocol.AuthenticationTicketRefusedMessage = AuthenticationTicketRefusedMessage;
    var HelloGameMessage = (function(_super) {
        __extends(HelloGameMessage, _super);

        function HelloGameMessage() {

            _super.call(this)
        }
        HelloGameMessage.prototype.getMessageId = function() {
            return HelloGameMessage.ID;
        };
        HelloGameMessage.prototype.reset = function() {

        };
        HelloGameMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        HelloGameMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        HelloGameMessage.prototype.serialize = function(output) {
            this.serializeAs_HelloGameMessage(output);
        };
        HelloGameMessage.prototype.deserialize = function(input) {
            this.deserializeAs_HelloGameMessage(input);
        };
        HelloGameMessage.prototype.serializeAs_HelloGameMessage = function(output) {

        };
        HelloGameMessage.prototype.deserializeAs_HelloGameMessage = function(input) {

        };
        HelloGameMessage.ID = 4519;
        return HelloGameMessage;
    })(NetworkMessage);
    Protocol.HelloGameMessage = HelloGameMessage;
    var ReloginTokenRequestMessage = (function(_super) {
        __extends(ReloginTokenRequestMessage, _super);

        function ReloginTokenRequestMessage() {

            _super.call(this)
        }
        ReloginTokenRequestMessage.prototype.getMessageId = function() {
            return ReloginTokenRequestMessage.ID;
        };
        ReloginTokenRequestMessage.prototype.reset = function() {

        };
        ReloginTokenRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ReloginTokenRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ReloginTokenRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_ReloginTokenRequestMessage(output);
        };
        ReloginTokenRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ReloginTokenRequestMessage(input);
        };
        ReloginTokenRequestMessage.prototype.serializeAs_ReloginTokenRequestMessage = function(output) {

        };
        ReloginTokenRequestMessage.prototype.deserializeAs_ReloginTokenRequestMessage = function(input) {

        };
        ReloginTokenRequestMessage.ID = 2386;
        return ReloginTokenRequestMessage;
    })(NetworkMessage);
    Protocol.ReloginTokenRequestMessage = ReloginTokenRequestMessage;
    var ReloginTokenStatusMessage = (function(_super) {
        __extends(ReloginTokenStatusMessage, _super);

        function ReloginTokenStatusMessage() {
            this.validToken = false;
            this.ticket = [];
            _super.call(this)
        }
        ReloginTokenStatusMessage.prototype.getMessageId = function() {
            return ReloginTokenStatusMessage.ID;
        };
        ReloginTokenStatusMessage.prototype.reset = function() {
            this.validToken = false;
            this.ticket = [];
        };
        ReloginTokenStatusMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ReloginTokenStatusMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ReloginTokenStatusMessage.prototype.serialize = function(output) {
            this.serializeAs_ReloginTokenStatusMessage(output);
        };
        ReloginTokenStatusMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ReloginTokenStatusMessage(input);
        };
        ReloginTokenStatusMessage.prototype.serializeAs_ReloginTokenStatusMessage = function(output) {
            output.writeBoolean(this.validToken);
            output.writeVarInt(this.ticket.length);
            for (var _i2 = 0; _i2 < this.ticket.length; _i2++) {
                output.writeByte(this.ticket[_i2]);
            }
        };
        ReloginTokenStatusMessage.prototype.deserializeAs_ReloginTokenStatusMessage = function(input) {
            var _val2 = 0;
            this.validToken = input.readBoolean();
            var _ticketLen = input.readVarInt();
            for (var _i2 = 0; _i2 < _ticketLen; _i2++) {
                _val2 = input.readByte();
                this.ticket.push(_val2);
            }
        };
        ReloginTokenStatusMessage.ID = 6343;
        return ReloginTokenStatusMessage;
    })(NetworkMessage);
    Protocol.ReloginTokenStatusMessage = ReloginTokenStatusMessage;
    var ServerOptionalFeaturesMessage = (function(_super) {
        __extends(ServerOptionalFeaturesMessage, _super);

        function ServerOptionalFeaturesMessage() {
            this.features = [];
            _super.call(this)
        }
        ServerOptionalFeaturesMessage.prototype.getMessageId = function() {
            return ServerOptionalFeaturesMessage.ID;
        };
        ServerOptionalFeaturesMessage.prototype.reset = function() {
            this.features = [];
        };
        ServerOptionalFeaturesMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ServerOptionalFeaturesMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ServerOptionalFeaturesMessage.prototype.serialize = function(output) {
            this.serializeAs_ServerOptionalFeaturesMessage(output);
        };
        ServerOptionalFeaturesMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ServerOptionalFeaturesMessage(input);
        };
        ServerOptionalFeaturesMessage.prototype.serializeAs_ServerOptionalFeaturesMessage = function(output) {
            output.writeShort(this.features.length);
            for (var _i1 = 0; _i1 < this.features.length; _i1++) {
                if (this.features[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.features[_i1] + ") on element 1 (starting at 1) of features.");
                }
                output.writeByte(this.features[_i1]);
            }
        };
        ServerOptionalFeaturesMessage.prototype.deserializeAs_ServerOptionalFeaturesMessage = function(input) {
            var _val1 = 0;
            var _featuresLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _featuresLen; _i1++) {
                _val1 = input.readByte();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of features.");
                }
                this.features.push(_val1);
            }
        };
        ServerOptionalFeaturesMessage.ID = 2599;
        return ServerOptionalFeaturesMessage;
    })(NetworkMessage);
    Protocol.ServerOptionalFeaturesMessage = ServerOptionalFeaturesMessage;
    var ServerSessionConstantsMessage = (function(_super) {
        __extends(ServerSessionConstantsMessage, _super);

        function ServerSessionConstantsMessage() {
            this.variables = [];
            _super.call(this)
        }
        ServerSessionConstantsMessage.prototype.getMessageId = function() {
            return ServerSessionConstantsMessage.ID;
        };
        ServerSessionConstantsMessage.prototype.reset = function() {
            this.variables = [];
        };
        ServerSessionConstantsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ServerSessionConstantsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ServerSessionConstantsMessage.prototype.serialize = function(output) {
            this.serializeAs_ServerSessionConstantsMessage(output);
        };
        ServerSessionConstantsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ServerSessionConstantsMessage(input);
        };
        ServerSessionConstantsMessage.prototype.serializeAs_ServerSessionConstantsMessage = function(output) {
            output.writeShort(this.variables.length);
            for (var _i1 = 0; _i1 < this.variables.length; _i1++) {
                output.writeShort((this.variables[_i1]).getTypeId());
                (this.variables[_i1]).serialize(output);
            }
        };
        ServerSessionConstantsMessage.prototype.deserializeAs_ServerSessionConstantsMessage = function(input) {
            var _id1 = 0;
            var _item1 = null;
            var _variablesLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _variablesLen; _i1++) {
                _id1 = input.readUnsignedShort();
                _item1 = ProtocolTypeManager.getInstance(ServerSessionConstant, _id1);
                _item1.deserialize(input);
                this.variables.push(_item1);
            }
        };
        ServerSessionConstantsMessage.ID = 713;
        return ServerSessionConstantsMessage;
    })(NetworkMessage);
    Protocol.ServerSessionConstantsMessage = ServerSessionConstantsMessage;
    var ServerSettingsMessage = (function(_super) {
        __extends(ServerSettingsMessage, _super);

        function ServerSettingsMessage() {
            this.lang = "";
            this.community = 0;
            this.gameType = -1;
            this.isMonoAccount = false;
            this.arenaLeaveBanTime = 0;
            this.itemMaxLevel = 0;
            this.hasFreeAutopilot = false;
            _super.call(this)
        }
        ServerSettingsMessage.prototype.getMessageId = function() {
            return ServerSettingsMessage.ID;
        };
        ServerSettingsMessage.prototype.reset = function() {
            this.lang = "";
            this.community = 0;
            this.gameType = -1;
            this.isMonoAccount = false;
            this.arenaLeaveBanTime = 0;
            this.itemMaxLevel = 0;
            this.hasFreeAutopilot = false;
        };
        ServerSettingsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ServerSettingsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ServerSettingsMessage.prototype.serialize = function(output) {
            this.serializeAs_ServerSettingsMessage(output);
        };
        ServerSettingsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ServerSettingsMessage(input);
        };
        ServerSettingsMessage.prototype.serializeAs_ServerSettingsMessage = function(output) {
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.isMonoAccount);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.hasFreeAutopilot);
            output.writeByte(_box0);
            output.writeUTF(this.lang);
            if (this.community < 0) {
                throw new Error("Forbidden value (" + this.community + ") on element community.");
            }
            output.writeByte(this.community);
            output.writeByte(this.gameType);
            if (this.arenaLeaveBanTime < 0) {
                throw new Error("Forbidden value (" + this.arenaLeaveBanTime + ") on element arenaLeaveBanTime.");
            }
            output.writeVarShort(this.arenaLeaveBanTime);
            if (this.itemMaxLevel < 0) {
                throw new Error("Forbidden value (" + this.itemMaxLevel + ") on element itemMaxLevel.");
            }
            output.writeInt(this.itemMaxLevel);
        };
        ServerSettingsMessage.prototype.deserializeAs_ServerSettingsMessage = function(input) {
            this.deserializeByteBoxes(input);
            this.lang = input.readUTF();
            this.community = input.readByte();
            if (this.community < 0) {
                throw new Error("Forbidden value (" + this.community + ") on element of ServerSettingsMessage.community.");
            }
            this.gameType = input.readByte();
            this.arenaLeaveBanTime = input.readVarUhShort();
            if (this.arenaLeaveBanTime < 0) {
                throw new Error("Forbidden value (" + this.arenaLeaveBanTime + ") on element of ServerSettingsMessage.arenaLeaveBanTime.");
            }
            this.itemMaxLevel = input.readInt();
            if (this.itemMaxLevel < 0) {
                throw new Error("Forbidden value (" + this.itemMaxLevel + ") on element of ServerSettingsMessage.itemMaxLevel.");
            }
        };
        ServerSettingsMessage.ID = 6216;
        return ServerSettingsMessage;
    })(NetworkMessage);
    Protocol.ServerSettingsMessage = ServerSettingsMessage;
    var AtlasPointInformationsMessage = (function(_super) {
        __extends(AtlasPointInformationsMessage, _super);

        function AtlasPointInformationsMessage() {
            this.type = new AtlasPointsInformations();
            _super.call(this)
        }
        AtlasPointInformationsMessage.prototype.getMessageId = function() {
            return AtlasPointInformationsMessage.ID;
        };
        AtlasPointInformationsMessage.prototype.reset = function() {
            this.type = new AtlasPointsInformations();
        };
        AtlasPointInformationsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AtlasPointInformationsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AtlasPointInformationsMessage.prototype.serialize = function(output) {
            this.serializeAs_AtlasPointInformationsMessage(output);
        };
        AtlasPointInformationsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AtlasPointInformationsMessage(input);
        };
        AtlasPointInformationsMessage.prototype.serializeAs_AtlasPointInformationsMessage = function(output) {
            this.type.serializeAs_AtlasPointsInformations(output);
        };
        AtlasPointInformationsMessage.prototype.deserializeAs_AtlasPointInformationsMessage = function(input) {
            this.type = new AtlasPointsInformations();
            this.type.deserialize(input);
        };
        AtlasPointInformationsMessage.ID = 2529;
        return AtlasPointInformationsMessage;
    })(NetworkMessage);
    Protocol.AtlasPointInformationsMessage = AtlasPointInformationsMessage;
    var CompassResetMessage = (function(_super) {
        __extends(CompassResetMessage, _super);

        function CompassResetMessage() {
            this.type = 0;
            _super.call(this)
        }
        CompassResetMessage.prototype.getMessageId = function() {
            return CompassResetMessage.ID;
        };
        CompassResetMessage.prototype.reset = function() {
            this.type = 0;
        };
        CompassResetMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        CompassResetMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        CompassResetMessage.prototype.serialize = function(output) {
            this.serializeAs_CompassResetMessage(output);
        };
        CompassResetMessage.prototype.deserialize = function(input) {
            this.deserializeAs_CompassResetMessage(input);
        };
        CompassResetMessage.prototype.serializeAs_CompassResetMessage = function(output) {
            output.writeByte(this.type);
        };
        CompassResetMessage.prototype.deserializeAs_CompassResetMessage = function(input) {
            this.type = input.readByte();
            if (this.type < 0) {
                throw new Error("Forbidden value (" + this.type + ") on element of CompassResetMessage.type.");
            }
        };
        CompassResetMessage.ID = 5095;
        return CompassResetMessage;
    })(NetworkMessage);
    Protocol.CompassResetMessage = CompassResetMessage;
    var CompassUpdateMessage = (function(_super) {
        __extends(CompassUpdateMessage, _super);

        function CompassUpdateMessage() {
            this.type = 0;
            this.coords = new MapCoordinates();
            _super.call(this)
        }
        CompassUpdateMessage.prototype.getMessageId = function() {
            return CompassUpdateMessage.ID;
        };
        CompassUpdateMessage.prototype.reset = function() {
            this.type = 0;
            this.coords = new MapCoordinates();
        };
        CompassUpdateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        CompassUpdateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        CompassUpdateMessage.prototype.serialize = function(output) {
            this.serializeAs_CompassUpdateMessage(output);
        };
        CompassUpdateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_CompassUpdateMessage(input);
        };
        CompassUpdateMessage.prototype.serializeAs_CompassUpdateMessage = function(output) {
            output.writeByte(this.type);
            output.writeShort(this.coords.getTypeId());
            this.coords.serialize(output);
        };
        CompassUpdateMessage.prototype.deserializeAs_CompassUpdateMessage = function(input) {
            this.type = input.readByte();
            if (this.type < 0) {
                throw new Error("Forbidden value (" + this.type + ") on element of CompassUpdateMessage.type.");
            }
            var _id2 = input.readUnsignedShort();
            this.coords = ProtocolTypeManager.getInstance(MapCoordinates, _id2);
            this.coords.deserialize(input);
        };
        CompassUpdateMessage.ID = 476;
        return CompassUpdateMessage;
    })(NetworkMessage);
    Protocol.CompassUpdateMessage = CompassUpdateMessage;
    var CompassUpdatePartyMemberMessage = (function(_super) {
        __extends(CompassUpdatePartyMemberMessage, _super);

        function CompassUpdatePartyMemberMessage() {
            this.memberId = 0;
            this.active = false;
            _super.call(this)
        }
        CompassUpdatePartyMemberMessage.prototype.getMessageId = function() {
            return CompassUpdatePartyMemberMessage.ID;
        };
        CompassUpdatePartyMemberMessage.prototype.reset = function() {
            this.memberId = 0;
            this.active = false;
        };
        CompassUpdatePartyMemberMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        CompassUpdatePartyMemberMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        CompassUpdatePartyMemberMessage.prototype.serialize = function(output) {
            this.serializeAs_CompassUpdatePartyMemberMessage(output);
        };
        CompassUpdatePartyMemberMessage.prototype.deserialize = function(input) {
            this.deserializeAs_CompassUpdatePartyMemberMessage(input);
        };
        CompassUpdatePartyMemberMessage.prototype.serializeAs_CompassUpdatePartyMemberMessage = function(output) {
            _super.prototype.serializeAs_CompassUpdateMessage.call(this, output);
            if (this.memberId < 0 || this.memberId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.memberId + ") on element memberId.");
            }
            output.writeVarLong(this.memberId);
            output.writeBoolean(this.active);
        };
        CompassUpdatePartyMemberMessage.prototype.deserializeAs_CompassUpdatePartyMemberMessage = function(input) {
            _super.prototype.deserializeAs_CompassUpdateMessage.call(this, input);
            this.memberId = input.readVarUhLong();
            if (this.memberId < 0 || this.memberId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.memberId + ") on element of CompassUpdatePartyMemberMessage.memberId.");
            }
            this.active = input.readBoolean();
        };
        CompassUpdatePartyMemberMessage.ID = 5594;
        return CompassUpdatePartyMemberMessage;
    })(CompassUpdateMessage);
    Protocol.CompassUpdatePartyMemberMessage = CompassUpdatePartyMemberMessage;
    var CompassUpdatePvpSeekMessage = (function(_super) {
        __extends(CompassUpdatePvpSeekMessage, _super);

        function CompassUpdatePvpSeekMessage() {
            this.memberId = 0;
            this.memberName = "";
            _super.call(this)
        }
        CompassUpdatePvpSeekMessage.prototype.getMessageId = function() {
            return CompassUpdatePvpSeekMessage.ID;
        };
        CompassUpdatePvpSeekMessage.prototype.reset = function() {
            this.memberId = 0;
            this.memberName = "";
        };
        CompassUpdatePvpSeekMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        CompassUpdatePvpSeekMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        CompassUpdatePvpSeekMessage.prototype.serialize = function(output) {
            this.serializeAs_CompassUpdatePvpSeekMessage(output);
        };
        CompassUpdatePvpSeekMessage.prototype.deserialize = function(input) {
            this.deserializeAs_CompassUpdatePvpSeekMessage(input);
        };
        CompassUpdatePvpSeekMessage.prototype.serializeAs_CompassUpdatePvpSeekMessage = function(output) {
            _super.prototype.serializeAs_CompassUpdateMessage.call(this, output);
            if (this.memberId < 0 || this.memberId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.memberId + ") on element memberId.");
            }
            output.writeVarLong(this.memberId);
            output.writeUTF(this.memberName);
        };
        CompassUpdatePvpSeekMessage.prototype.deserializeAs_CompassUpdatePvpSeekMessage = function(input) {
            _super.prototype.deserializeAs_CompassUpdateMessage.call(this, input);
            this.memberId = input.readVarUhLong();
            if (this.memberId < 0 || this.memberId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.memberId + ") on element of CompassUpdatePvpSeekMessage.memberId.");
            }
            this.memberName = input.readUTF();
        };
        CompassUpdatePvpSeekMessage.ID = 4417;
        return CompassUpdatePvpSeekMessage;
    })(CompassUpdateMessage);
    Protocol.CompassUpdatePvpSeekMessage = CompassUpdatePvpSeekMessage;
    var BasicAckMessage = (function(_super) {
        __extends(BasicAckMessage, _super);

        function BasicAckMessage() {
            this.seq = 0;
            this.lastPacketId = 0;
            _super.call(this)
        }
        BasicAckMessage.prototype.getMessageId = function() {
            return BasicAckMessage.ID;
        };
        BasicAckMessage.prototype.reset = function() {
            this.seq = 0;
            this.lastPacketId = 0;
        };
        BasicAckMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        BasicAckMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        BasicAckMessage.prototype.serialize = function(output) {
            this.serializeAs_BasicAckMessage(output);
        };
        BasicAckMessage.prototype.deserialize = function(input) {
            this.deserializeAs_BasicAckMessage(input);
        };
        BasicAckMessage.prototype.serializeAs_BasicAckMessage = function(output) {
            if (this.seq < 0) {
                throw new Error("Forbidden value (" + this.seq + ") on element seq.");
            }
            output.writeVarInt(this.seq);
            if (this.lastPacketId < 0) {
                throw new Error("Forbidden value (" + this.lastPacketId + ") on element lastPacketId.");
            }
            output.writeVarShort(this.lastPacketId);
        };
        BasicAckMessage.prototype.deserializeAs_BasicAckMessage = function(input) {
            this.seq = input.readVarUhInt();
            if (this.seq < 0) {
                throw new Error("Forbidden value (" + this.seq + ") on element of BasicAckMessage.seq.");
            }
            this.lastPacketId = input.readVarUhShort();
            if (this.lastPacketId < 0) {
                throw new Error("Forbidden value (" + this.lastPacketId + ") on element of BasicAckMessage.lastPacketId.");
            }
        };
        BasicAckMessage.ID = 8259;
        return BasicAckMessage;
    })(NetworkMessage);
    Protocol.BasicAckMessage = BasicAckMessage;
    var BasicDateMessage = (function(_super) {
        __extends(BasicDateMessage, _super);

        function BasicDateMessage() {
            this.day = 0;
            this.month = 0;
            this.year = 0;
            _super.call(this)
        }
        BasicDateMessage.prototype.getMessageId = function() {
            return BasicDateMessage.ID;
        };
        BasicDateMessage.prototype.reset = function() {
            this.day = 0;
            this.month = 0;
            this.year = 0;
        };
        BasicDateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        BasicDateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        BasicDateMessage.prototype.serialize = function(output) {
            this.serializeAs_BasicDateMessage(output);
        };
        BasicDateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_BasicDateMessage(input);
        };
        BasicDateMessage.prototype.serializeAs_BasicDateMessage = function(output) {
            if (this.day < 0) {
                throw new Error("Forbidden value (" + this.day + ") on element day.");
            }
            output.writeByte(this.day);
            if (this.month < 0) {
                throw new Error("Forbidden value (" + this.month + ") on element month.");
            }
            output.writeByte(this.month);
            if (this.year < 0) {
                throw new Error("Forbidden value (" + this.year + ") on element year.");
            }
            output.writeShort(this.year);
        };
        BasicDateMessage.prototype.deserializeAs_BasicDateMessage = function(input) {
            this.day = input.readByte();
            if (this.day < 0) {
                throw new Error("Forbidden value (" + this.day + ") on element of BasicDateMessage.day.");
            }
            this.month = input.readByte();
            if (this.month < 0) {
                throw new Error("Forbidden value (" + this.month + ") on element of BasicDateMessage.month.");
            }
            this.year = input.readShort();
            if (this.year < 0) {
                throw new Error("Forbidden value (" + this.year + ") on element of BasicDateMessage.year.");
            }
        };
        BasicDateMessage.ID = 7123;
        return BasicDateMessage;
    })(NetworkMessage);
    Protocol.BasicDateMessage = BasicDateMessage;
    var BasicLatencyStatsMessage = (function(_super) {
        __extends(BasicLatencyStatsMessage, _super);

        function BasicLatencyStatsMessage() {
            this.latency = 0;
            this.sampleCount = 0;
            this.max = 0;
            _super.call(this)
        }
        BasicLatencyStatsMessage.prototype.getMessageId = function() {
            return BasicLatencyStatsMessage.ID;
        };
        BasicLatencyStatsMessage.prototype.reset = function() {
            this.latency = 0;
            this.sampleCount = 0;
            this.max = 0;
        };
        BasicLatencyStatsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        BasicLatencyStatsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        BasicLatencyStatsMessage.prototype.serialize = function(output) {
            this.serializeAs_BasicLatencyStatsMessage(output);
        };
        BasicLatencyStatsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_BasicLatencyStatsMessage(input);
        };
        BasicLatencyStatsMessage.prototype.serializeAs_BasicLatencyStatsMessage = function(output) {
            if (this.latency < 0 || this.latency > 65535) {
                throw new Error("Forbidden value (" + this.latency + ") on element latency.");
            }
            output.writeShort(this.latency);
            if (this.sampleCount < 0) {
                throw new Error("Forbidden value (" + this.sampleCount + ") on element sampleCount.");
            }
            output.writeVarShort(this.sampleCount);
            if (this.max < 0) {
                throw new Error("Forbidden value (" + this.max + ") on element max.");
            }
            output.writeVarShort(this.max);
        };
        BasicLatencyStatsMessage.prototype.deserializeAs_BasicLatencyStatsMessage = function(input) {
            this.latency = input.readUnsignedShort();
            if (this.latency < 0 || this.latency > 65535) {
                throw new Error("Forbidden value (" + this.latency + ") on element of BasicLatencyStatsMessage.latency.");
            }
            this.sampleCount = input.readVarUhShort();
            if (this.sampleCount < 0) {
                throw new Error("Forbidden value (" + this.sampleCount + ") on element of BasicLatencyStatsMessage.sampleCount.");
            }
            this.max = input.readVarUhShort();
            if (this.max < 0) {
                throw new Error("Forbidden value (" + this.max + ") on element of BasicLatencyStatsMessage.max.");
            }
        };
        BasicLatencyStatsMessage.ID = 9646;
        return BasicLatencyStatsMessage;
    })(NetworkMessage);
    Protocol.BasicLatencyStatsMessage = BasicLatencyStatsMessage;
    var BasicLatencyStatsRequestMessage = (function(_super) {
        __extends(BasicLatencyStatsRequestMessage, _super);

        function BasicLatencyStatsRequestMessage() {

            _super.call(this)
        }
        BasicLatencyStatsRequestMessage.prototype.getMessageId = function() {
            return BasicLatencyStatsRequestMessage.ID;
        };
        BasicLatencyStatsRequestMessage.prototype.reset = function() {

        };
        BasicLatencyStatsRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        BasicLatencyStatsRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        BasicLatencyStatsRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_BasicLatencyStatsRequestMessage(output);
        };
        BasicLatencyStatsRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_BasicLatencyStatsRequestMessage(input);
        };
        BasicLatencyStatsRequestMessage.prototype.serializeAs_BasicLatencyStatsRequestMessage = function(output) {

        };
        BasicLatencyStatsRequestMessage.prototype.deserializeAs_BasicLatencyStatsRequestMessage = function(input) {

        };
        BasicLatencyStatsRequestMessage.ID = 2340;
        return BasicLatencyStatsRequestMessage;
    })(NetworkMessage);
    Protocol.BasicLatencyStatsRequestMessage = BasicLatencyStatsRequestMessage;
    var BasicNoOperationMessage = (function(_super) {
        __extends(BasicNoOperationMessage, _super);

        function BasicNoOperationMessage() {

            _super.call(this)
        }
        BasicNoOperationMessage.prototype.getMessageId = function() {
            return BasicNoOperationMessage.ID;
        };
        BasicNoOperationMessage.prototype.reset = function() {

        };
        BasicNoOperationMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        BasicNoOperationMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        BasicNoOperationMessage.prototype.serialize = function(output) {
            this.serializeAs_BasicNoOperationMessage(output);
        };
        BasicNoOperationMessage.prototype.deserialize = function(input) {
            this.deserializeAs_BasicNoOperationMessage(input);
        };
        BasicNoOperationMessage.prototype.serializeAs_BasicNoOperationMessage = function(output) {

        };
        BasicNoOperationMessage.prototype.deserializeAs_BasicNoOperationMessage = function(input) {

        };
        BasicNoOperationMessage.ID = 8108;
        return BasicNoOperationMessage;
    })(NetworkMessage);
    Protocol.BasicNoOperationMessage = BasicNoOperationMessage;
    var BasicTimeMessage = (function(_super) {
        __extends(BasicTimeMessage, _super);

        function BasicTimeMessage() {
            this.timestamp = 0;
            this.timezoneOffset = 0;
            _super.call(this)
        }
        BasicTimeMessage.prototype.getMessageId = function() {
            return BasicTimeMessage.ID;
        };
        BasicTimeMessage.prototype.reset = function() {
            this.timestamp = 0;
            this.timezoneOffset = 0;
        };
        BasicTimeMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        BasicTimeMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        BasicTimeMessage.prototype.serialize = function(output) {
            this.serializeAs_BasicTimeMessage(output);
        };
        BasicTimeMessage.prototype.deserialize = function(input) {
            this.deserializeAs_BasicTimeMessage(input);
        };
        BasicTimeMessage.prototype.serializeAs_BasicTimeMessage = function(output) {
            if (this.timestamp < 0 || this.timestamp > 9007199254740990) {
                throw new Error("Forbidden value (" + this.timestamp + ") on element timestamp.");
            }
            output.writeDouble(this.timestamp);
            output.writeShort(this.timezoneOffset);
        };
        BasicTimeMessage.prototype.deserializeAs_BasicTimeMessage = function(input) {
            this.timestamp = input.readDouble();
            if (this.timestamp < 0 || this.timestamp > 9007199254740990) {
                throw new Error("Forbidden value (" + this.timestamp + ") on element of BasicTimeMessage.timestamp.");
            }
            this.timezoneOffset = input.readShort();
        };
        BasicTimeMessage.ID = 9776;
        return BasicTimeMessage;
    })(NetworkMessage);
    Protocol.BasicTimeMessage = BasicTimeMessage;
    var BasicWhoAmIRequestMessage = (function(_super) {
        __extends(BasicWhoAmIRequestMessage, _super);

        function BasicWhoAmIRequestMessage() {
            this.verbose = false;
            _super.call(this)
        }
        BasicWhoAmIRequestMessage.prototype.getMessageId = function() {
            return BasicWhoAmIRequestMessage.ID;
        };
        BasicWhoAmIRequestMessage.prototype.reset = function() {
            this.verbose = false;
        };
        BasicWhoAmIRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        BasicWhoAmIRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        BasicWhoAmIRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_BasicWhoAmIRequestMessage(output);
        };
        BasicWhoAmIRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_BasicWhoAmIRequestMessage(input);
        };
        BasicWhoAmIRequestMessage.prototype.serializeAs_BasicWhoAmIRequestMessage = function(output) {
            output.writeBoolean(this.verbose);
        };
        BasicWhoAmIRequestMessage.prototype.deserializeAs_BasicWhoAmIRequestMessage = function(input) {
            this.verbose = input.readBoolean();
        };
        BasicWhoAmIRequestMessage.ID = 4792;
        return BasicWhoAmIRequestMessage;
    })(NetworkMessage);
    Protocol.BasicWhoAmIRequestMessage = BasicWhoAmIRequestMessage;
    var BasicWhoIsMessage = (function(_super) {
        __extends(BasicWhoIsMessage, _super);

        function BasicWhoIsMessage() {
            this.self = false;
            this.position = -1;
            this.accountNickname = "";
            this.accountId = 0;
            this.playerName = "";
            this.playerId = 0;
            this.areaId = 0;
            this.serverId = 0;
            this.originServerId = 0;
            this.socialGroups = [];
            this.verbose = false;
            this.playerState = 99;
            _super.call(this)
        }
        BasicWhoIsMessage.prototype.getMessageId = function() {
            return BasicWhoIsMessage.ID;
        };
        BasicWhoIsMessage.prototype.reset = function() {
            this.self = false;
            this.position = -1;
            this.accountNickname = "";
            this.accountId = 0;
            this.playerName = "";
            this.playerId = 0;
            this.areaId = 0;
            this.serverId = 0;
            this.originServerId = 0;
            this.socialGroups = [];
            this.verbose = false;
            this.playerState = 99;
        };
        BasicWhoIsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        BasicWhoIsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        BasicWhoIsMessage.prototype.serialize = function(output) {
            this.serializeAs_BasicWhoIsMessage(output);
        };
        BasicWhoIsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_BasicWhoIsMessage(input);
        };
        BasicWhoIsMessage.prototype.serializeAs_BasicWhoIsMessage = function(output) {
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.self);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.verbose);
            output.writeByte(_box0);
            output.writeByte(this.position);
            output.writeUTF(this.accountNickname);
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element accountId.");
            }
            output.writeInt(this.accountId);
            output.writeUTF(this.playerName);
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
            output.writeShort(this.areaId);
            output.writeShort(this.serverId);
            output.writeShort(this.originServerId);
            output.writeShort(this.socialGroups.length);
            for (var _i10 = 0; _i10 < this.socialGroups.length; _i10++) {
                output.writeShort((this.socialGroups[_i10]).getTypeId());
                (this.socialGroups[_i10]).serialize(output);
            }
            output.writeByte(this.playerState);
        };
        BasicWhoIsMessage.prototype.deserializeAs_BasicWhoIsMessage = function(input) {
            var _id10 = 0;
            var _item10 = null;
            this.deserializeByteBoxes(input);
            this.position = input.readByte();
            this.accountNickname = input.readUTF();
            this.accountId = input.readInt();
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element of BasicWhoIsMessage.accountId.");
            }
            this.playerName = input.readUTF();
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of BasicWhoIsMessage.playerId.");
            }
            this.areaId = input.readShort();
            this.serverId = input.readShort();
            this.originServerId = input.readShort();
            var _socialGroupsLen = input.readUnsignedShort();
            for (var _i10 = 0; _i10 < _socialGroupsLen; _i10++) {
                _id10 = input.readUnsignedShort();
                _item10 = ProtocolTypeManager.getInstance(AbstractSocialGroupInfos, _id10);
                _item10.deserialize(input);
                this.socialGroups.push(_item10);
            }
            this.playerState = input.readByte();
            if (this.playerState < 0) {
                throw new Error("Forbidden value (" + this.playerState + ") on element of BasicWhoIsMessage.playerState.");
            }
        };
        BasicWhoIsMessage.ID = 4158;
        return BasicWhoIsMessage;
    })(NetworkMessage);
    Protocol.BasicWhoIsMessage = BasicWhoIsMessage;
    var BasicWhoIsNoMatchMessage = (function(_super) {
        __extends(BasicWhoIsNoMatchMessage, _super);

        function BasicWhoIsNoMatchMessage() {
            this.search = "";
            _super.call(this)
        }
        BasicWhoIsNoMatchMessage.prototype.getMessageId = function() {
            return BasicWhoIsNoMatchMessage.ID;
        };
        BasicWhoIsNoMatchMessage.prototype.reset = function() {
            this.search = "";
        };
        BasicWhoIsNoMatchMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        BasicWhoIsNoMatchMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        BasicWhoIsNoMatchMessage.prototype.serialize = function(output) {
            this.serializeAs_BasicWhoIsNoMatchMessage(output);
        };
        BasicWhoIsNoMatchMessage.prototype.deserialize = function(input) {
            this.deserializeAs_BasicWhoIsNoMatchMessage(input);
        };
        BasicWhoIsNoMatchMessage.prototype.serializeAs_BasicWhoIsNoMatchMessage = function(output) {
            output.writeUTF(this.search);
        };
        BasicWhoIsNoMatchMessage.prototype.deserializeAs_BasicWhoIsNoMatchMessage = function(input) {
            this.search = input.readUTF();
        };
        BasicWhoIsNoMatchMessage.ID = 9329;
        return BasicWhoIsNoMatchMessage;
    })(NetworkMessage);
    Protocol.BasicWhoIsNoMatchMessage = BasicWhoIsNoMatchMessage;
    var BasicWhoIsRequestMessage = (function(_super) {
        __extends(BasicWhoIsRequestMessage, _super);

        function BasicWhoIsRequestMessage() {
            this.verbose = false;
            this.search = "";
            _super.call(this)
        }
        BasicWhoIsRequestMessage.prototype.getMessageId = function() {
            return BasicWhoIsRequestMessage.ID;
        };
        BasicWhoIsRequestMessage.prototype.reset = function() {
            this.verbose = false;
            this.search = "";
        };
        BasicWhoIsRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        BasicWhoIsRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        BasicWhoIsRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_BasicWhoIsRequestMessage(output);
        };
        BasicWhoIsRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_BasicWhoIsRequestMessage(input);
        };
        BasicWhoIsRequestMessage.prototype.serializeAs_BasicWhoIsRequestMessage = function(output) {
            output.writeBoolean(this.verbose);
            output.writeUTF(this.search);
        };
        BasicWhoIsRequestMessage.prototype.deserializeAs_BasicWhoIsRequestMessage = function(input) {
            this.verbose = input.readBoolean();
            this.search = input.readUTF();
        };
        BasicWhoIsRequestMessage.ID = 6558;
        return BasicWhoIsRequestMessage;
    })(NetworkMessage);
    Protocol.BasicWhoIsRequestMessage = BasicWhoIsRequestMessage;
    var CurrentServerStatusUpdateMessage = (function(_super) {
        __extends(CurrentServerStatusUpdateMessage, _super);

        function CurrentServerStatusUpdateMessage() {
            this.status = 1;
            _super.call(this)
        }
        CurrentServerStatusUpdateMessage.prototype.getMessageId = function() {
            return CurrentServerStatusUpdateMessage.ID;
        };
        CurrentServerStatusUpdateMessage.prototype.reset = function() {
            this.status = 1;
        };
        CurrentServerStatusUpdateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        CurrentServerStatusUpdateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        CurrentServerStatusUpdateMessage.prototype.serialize = function(output) {
            this.serializeAs_CurrentServerStatusUpdateMessage(output);
        };
        CurrentServerStatusUpdateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_CurrentServerStatusUpdateMessage(input);
        };
        CurrentServerStatusUpdateMessage.prototype.serializeAs_CurrentServerStatusUpdateMessage = function(output) {
            output.writeByte(this.status);
        };
        CurrentServerStatusUpdateMessage.prototype.deserializeAs_CurrentServerStatusUpdateMessage = function(input) {
            this.status = input.readByte();
            if (this.status < 0) {
                throw new Error("Forbidden value (" + this.status + ") on element of CurrentServerStatusUpdateMessage.status.");
            }
        };
        CurrentServerStatusUpdateMessage.ID = 1218;
        return CurrentServerStatusUpdateMessage;
    })(NetworkMessage);
    Protocol.CurrentServerStatusUpdateMessage = CurrentServerStatusUpdateMessage;
    var NumericWhoIsMessage = (function(_super) {
        __extends(NumericWhoIsMessage, _super);

        function NumericWhoIsMessage() {
            this.playerId = 0;
            this.accountId = 0;
            _super.call(this)
        }
        NumericWhoIsMessage.prototype.getMessageId = function() {
            return NumericWhoIsMessage.ID;
        };
        NumericWhoIsMessage.prototype.reset = function() {
            this.playerId = 0;
            this.accountId = 0;
        };
        NumericWhoIsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        NumericWhoIsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        NumericWhoIsMessage.prototype.serialize = function(output) {
            this.serializeAs_NumericWhoIsMessage(output);
        };
        NumericWhoIsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_NumericWhoIsMessage(input);
        };
        NumericWhoIsMessage.prototype.serializeAs_NumericWhoIsMessage = function(output) {
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element accountId.");
            }
            output.writeInt(this.accountId);
        };
        NumericWhoIsMessage.prototype.deserializeAs_NumericWhoIsMessage = function(input) {
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of NumericWhoIsMessage.playerId.");
            }
            this.accountId = input.readInt();
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element of NumericWhoIsMessage.accountId.");
            }
        };
        NumericWhoIsMessage.ID = 5521;
        return NumericWhoIsMessage;
    })(NetworkMessage);
    Protocol.NumericWhoIsMessage = NumericWhoIsMessage;
    var NumericWhoIsRequestMessage = (function(_super) {
        __extends(NumericWhoIsRequestMessage, _super);

        function NumericWhoIsRequestMessage() {
            this.playerId = 0;
            _super.call(this)
        }
        NumericWhoIsRequestMessage.prototype.getMessageId = function() {
            return NumericWhoIsRequestMessage.ID;
        };
        NumericWhoIsRequestMessage.prototype.reset = function() {
            this.playerId = 0;
        };
        NumericWhoIsRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        NumericWhoIsRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        NumericWhoIsRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_NumericWhoIsRequestMessage(output);
        };
        NumericWhoIsRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_NumericWhoIsRequestMessage(input);
        };
        NumericWhoIsRequestMessage.prototype.serializeAs_NumericWhoIsRequestMessage = function(output) {
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
        };
        NumericWhoIsRequestMessage.prototype.deserializeAs_NumericWhoIsRequestMessage = function(input) {
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of NumericWhoIsRequestMessage.playerId.");
            }
        };
        NumericWhoIsRequestMessage.ID = 1244;
        return NumericWhoIsRequestMessage;
    })(NetworkMessage);
    Protocol.NumericWhoIsRequestMessage = NumericWhoIsRequestMessage;
    var SequenceNumberMessage = (function(_super) {
        __extends(SequenceNumberMessage, _super);

        function SequenceNumberMessage() {
            this.number = 0;
            _super.call(this)
        }
        SequenceNumberMessage.prototype.getMessageId = function() {
            return SequenceNumberMessage.ID;
        };
        SequenceNumberMessage.prototype.reset = function() {
            this.number = 0;
        };
        SequenceNumberMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        SequenceNumberMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        SequenceNumberMessage.prototype.serialize = function(output) {
            this.serializeAs_SequenceNumberMessage(output);
        };
        SequenceNumberMessage.prototype.deserialize = function(input) {
            this.deserializeAs_SequenceNumberMessage(input);
        };
        SequenceNumberMessage.prototype.serializeAs_SequenceNumberMessage = function(output) {
            if (this.number < 0 || this.number > 65535) {
                throw new Error("Forbidden value (" + this.number + ") on element number.");
            }
            output.writeShort(this.number);
        };
        SequenceNumberMessage.prototype.deserializeAs_SequenceNumberMessage = function(input) {
            this.number = input.readUnsignedShort();
            if (this.number < 0 || this.number > 65535) {
                throw new Error("Forbidden value (" + this.number + ") on element of SequenceNumberMessage.number.");
            }
        };
        SequenceNumberMessage.ID = 5131;
        return SequenceNumberMessage;
    })(NetworkMessage);
    Protocol.SequenceNumberMessage = SequenceNumberMessage;
    var SequenceNumberRequestMessage = (function(_super) {
        __extends(SequenceNumberRequestMessage, _super);

        function SequenceNumberRequestMessage() {

            _super.call(this)
        }
        SequenceNumberRequestMessage.prototype.getMessageId = function() {
            return SequenceNumberRequestMessage.ID;
        };
        SequenceNumberRequestMessage.prototype.reset = function() {

        };
        SequenceNumberRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        SequenceNumberRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        SequenceNumberRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_SequenceNumberRequestMessage(output);
        };
        SequenceNumberRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_SequenceNumberRequestMessage(input);
        };
        SequenceNumberRequestMessage.prototype.serializeAs_SequenceNumberRequestMessage = function(output) {

        };
        SequenceNumberRequestMessage.prototype.deserializeAs_SequenceNumberRequestMessage = function(input) {

        };
        SequenceNumberRequestMessage.ID = 5238;
        return SequenceNumberRequestMessage;
    })(NetworkMessage);
    Protocol.SequenceNumberRequestMessage = SequenceNumberRequestMessage;
    var TextInformationMessage = (function(_super) {
        __extends(TextInformationMessage, _super);

        function TextInformationMessage() {
            this.msgType = 0;
            this.msgId = 0;
            this.parameters = [];
            _super.call(this)
        }
        TextInformationMessage.prototype.getMessageId = function() {
            return TextInformationMessage.ID;
        };
        TextInformationMessage.prototype.reset = function() {
            this.msgType = 0;
            this.msgId = 0;
            this.parameters = [];
        };
        TextInformationMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TextInformationMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TextInformationMessage.prototype.serialize = function(output) {
            this.serializeAs_TextInformationMessage(output);
        };
        TextInformationMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TextInformationMessage(input);
        };
        TextInformationMessage.prototype.serializeAs_TextInformationMessage = function(output) {
            output.writeByte(this.msgType);
            if (this.msgId < 0) {
                throw new Error("Forbidden value (" + this.msgId + ") on element msgId.");
            }
            output.writeVarShort(this.msgId);
            output.writeShort(this.parameters.length);
            for (var _i3 = 0; _i3 < this.parameters.length; _i3++) {
                output.writeUTF(this.parameters[_i3]);
            }
        };
        TextInformationMessage.prototype.deserializeAs_TextInformationMessage = function(input) {
            var _val3 = null;
            this.msgType = input.readByte();
            if (this.msgType < 0) {
                throw new Error("Forbidden value (" + this.msgType + ") on element of TextInformationMessage.msgType.");
            }
            this.msgId = input.readVarUhShort();
            if (this.msgId < 0) {
                throw new Error("Forbidden value (" + this.msgId + ") on element of TextInformationMessage.msgId.");
            }
            var _parametersLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _parametersLen; _i3++) {
                _val3 = input.readUTF();
                this.parameters.push(_val3);
            }
        };
        TextInformationMessage.ID = 8868;
        return TextInformationMessage;
    })(NetworkMessage);
    Protocol.TextInformationMessage = TextInformationMessage;
    var AlignmentWarEffortDonatePreviewMessage = (function(_super) {
        __extends(AlignmentWarEffortDonatePreviewMessage, _super);

        function AlignmentWarEffortDonatePreviewMessage() {
            this.xp = 0;
            _super.call(this)
        }
        AlignmentWarEffortDonatePreviewMessage.prototype.getMessageId = function() {
            return AlignmentWarEffortDonatePreviewMessage.ID;
        };
        AlignmentWarEffortDonatePreviewMessage.prototype.reset = function() {
            this.xp = 0;
        };
        AlignmentWarEffortDonatePreviewMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AlignmentWarEffortDonatePreviewMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AlignmentWarEffortDonatePreviewMessage.prototype.serialize = function(output) {
            this.serializeAs_AlignmentWarEffortDonatePreviewMessage(output);
        };
        AlignmentWarEffortDonatePreviewMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AlignmentWarEffortDonatePreviewMessage(input);
        };
        AlignmentWarEffortDonatePreviewMessage.prototype.serializeAs_AlignmentWarEffortDonatePreviewMessage = function(output) {
            if (this.xp < -9007199254740990 || this.xp > 9007199254740990) {
                throw new Error("Forbidden value (" + this.xp + ") on element xp.");
            }
            output.writeDouble(this.xp);
        };
        AlignmentWarEffortDonatePreviewMessage.prototype.deserializeAs_AlignmentWarEffortDonatePreviewMessage = function(input) {
            this.xp = input.readDouble();
            if (this.xp < -9007199254740990 || this.xp > 9007199254740990) {
                throw new Error("Forbidden value (" + this.xp + ") on element of AlignmentWarEffortDonatePreviewMessage.xp.");
            }
        };
        AlignmentWarEffortDonatePreviewMessage.ID = 8421;
        return AlignmentWarEffortDonatePreviewMessage;
    })(NetworkMessage);
    Protocol.AlignmentWarEffortDonatePreviewMessage = AlignmentWarEffortDonatePreviewMessage;
    var AlignmentWarEffortDonateRequestMessage = (function(_super) {
        __extends(AlignmentWarEffortDonateRequestMessage, _super);

        function AlignmentWarEffortDonateRequestMessage() {
            this.donation = 0;
            _super.call(this)
        }
        AlignmentWarEffortDonateRequestMessage.prototype.getMessageId = function() {
            return AlignmentWarEffortDonateRequestMessage.ID;
        };
        AlignmentWarEffortDonateRequestMessage.prototype.reset = function() {
            this.donation = 0;
        };
        AlignmentWarEffortDonateRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AlignmentWarEffortDonateRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AlignmentWarEffortDonateRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_AlignmentWarEffortDonateRequestMessage(output);
        };
        AlignmentWarEffortDonateRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AlignmentWarEffortDonateRequestMessage(input);
        };
        AlignmentWarEffortDonateRequestMessage.prototype.serializeAs_AlignmentWarEffortDonateRequestMessage = function(output) {
            if (this.donation < 0 || this.donation > 9007199254740990) {
                throw new Error("Forbidden value (" + this.donation + ") on element donation.");
            }
            output.writeVarLong(this.donation);
        };
        AlignmentWarEffortDonateRequestMessage.prototype.deserializeAs_AlignmentWarEffortDonateRequestMessage = function(input) {
            this.donation = input.readVarUhLong();
            if (this.donation < 0 || this.donation > 9007199254740990) {
                throw new Error("Forbidden value (" + this.donation + ") on element of AlignmentWarEffortDonateRequestMessage.donation.");
            }
        };
        AlignmentWarEffortDonateRequestMessage.ID = 8514;
        return AlignmentWarEffortDonateRequestMessage;
    })(NetworkMessage);
    Protocol.AlignmentWarEffortDonateRequestMessage = AlignmentWarEffortDonateRequestMessage;
    var AlignmentWarEffortDonationResultMessage = (function(_super) {
        __extends(AlignmentWarEffortDonationResultMessage, _super);

        function AlignmentWarEffortDonationResultMessage() {
            this.result = 4;
            _super.call(this)
        }
        AlignmentWarEffortDonationResultMessage.prototype.getMessageId = function() {
            return AlignmentWarEffortDonationResultMessage.ID;
        };
        AlignmentWarEffortDonationResultMessage.prototype.reset = function() {
            this.result = 4;
        };
        AlignmentWarEffortDonationResultMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AlignmentWarEffortDonationResultMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AlignmentWarEffortDonationResultMessage.prototype.serialize = function(output) {
            this.serializeAs_AlignmentWarEffortDonationResultMessage(output);
        };
        AlignmentWarEffortDonationResultMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AlignmentWarEffortDonationResultMessage(input);
        };
        AlignmentWarEffortDonationResultMessage.prototype.serializeAs_AlignmentWarEffortDonationResultMessage = function(output) {
            output.writeByte(this.result);
        };
        AlignmentWarEffortDonationResultMessage.prototype.deserializeAs_AlignmentWarEffortDonationResultMessage = function(input) {
            this.result = input.readByte();
        };
        AlignmentWarEffortDonationResultMessage.ID = 3258;
        return AlignmentWarEffortDonationResultMessage;
    })(NetworkMessage);
    Protocol.AlignmentWarEffortDonationResultMessage = AlignmentWarEffortDonationResultMessage;
    var CharacterAlignmentWarEffortProgressionMessage = (function(_super) {
        __extends(CharacterAlignmentWarEffortProgressionMessage, _super);

        function CharacterAlignmentWarEffortProgressionMessage() {
            this.alignmentWarEffortDailyLimit = 0;
            this.alignmentWarEffortDailyDonation = 0;
            this.alignmentWarEffortPersonalDonation = 0;
            _super.call(this)
        }
        CharacterAlignmentWarEffortProgressionMessage.prototype.getMessageId = function() {
            return CharacterAlignmentWarEffortProgressionMessage.ID;
        };
        CharacterAlignmentWarEffortProgressionMessage.prototype.reset = function() {
            this.alignmentWarEffortDailyLimit = 0;
            this.alignmentWarEffortDailyDonation = 0;
            this.alignmentWarEffortPersonalDonation = 0;
        };
        CharacterAlignmentWarEffortProgressionMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        CharacterAlignmentWarEffortProgressionMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        CharacterAlignmentWarEffortProgressionMessage.prototype.serialize = function(output) {
            this.serializeAs_CharacterAlignmentWarEffortProgressionMessage(output);
        };
        CharacterAlignmentWarEffortProgressionMessage.prototype.deserialize = function(input) {
            this.deserializeAs_CharacterAlignmentWarEffortProgressionMessage(input);
        };
        CharacterAlignmentWarEffortProgressionMessage.prototype.serializeAs_CharacterAlignmentWarEffortProgressionMessage = function(output) {
            if (this.alignmentWarEffortDailyLimit < 0 || this.alignmentWarEffortDailyLimit > 9007199254740990) {
                throw new Error("Forbidden value (" + this.alignmentWarEffortDailyLimit + ") on element alignmentWarEffortDailyLimit.");
            }
            output.writeVarLong(this.alignmentWarEffortDailyLimit);
            if (this.alignmentWarEffortDailyDonation < 0 || this.alignmentWarEffortDailyDonation > 9007199254740990) {
                throw new Error("Forbidden value (" + this.alignmentWarEffortDailyDonation + ") on element alignmentWarEffortDailyDonation.");
            }
            output.writeVarLong(this.alignmentWarEffortDailyDonation);
            if (this.alignmentWarEffortPersonalDonation < 0 || this.alignmentWarEffortPersonalDonation > 9007199254740990) {
                throw new Error("Forbidden value (" + this.alignmentWarEffortPersonalDonation + ") on element alignmentWarEffortPersonalDonation.");
            }
            output.writeVarLong(this.alignmentWarEffortPersonalDonation);
        };
        CharacterAlignmentWarEffortProgressionMessage.prototype.deserializeAs_CharacterAlignmentWarEffortProgressionMessage = function(input) {
            this.alignmentWarEffortDailyLimit = input.readVarUhLong();
            if (this.alignmentWarEffortDailyLimit < 0 || this.alignmentWarEffortDailyLimit > 9007199254740990) {
                throw new Error("Forbidden value (" + this.alignmentWarEffortDailyLimit + ") on element of CharacterAlignmentWarEffortProgressionMessage.alignmentWarEffortDailyLimit.");
            }
            this.alignmentWarEffortDailyDonation = input.readVarUhLong();
            if (this.alignmentWarEffortDailyDonation < 0 || this.alignmentWarEffortDailyDonation > 9007199254740990) {
                throw new Error("Forbidden value (" + this.alignmentWarEffortDailyDonation + ") on element of CharacterAlignmentWarEffortProgressionMessage.alignmentWarEffortDailyDonation.");
            }
            this.alignmentWarEffortPersonalDonation = input.readVarUhLong();
            if (this.alignmentWarEffortPersonalDonation < 0 || this.alignmentWarEffortPersonalDonation > 9007199254740990) {
                throw new Error("Forbidden value (" + this.alignmentWarEffortPersonalDonation + ") on element of CharacterAlignmentWarEffortProgressionMessage.alignmentWarEffortPersonalDonation.");
            }
        };
        CharacterAlignmentWarEffortProgressionMessage.ID = 4989;
        return CharacterAlignmentWarEffortProgressionMessage;
    })(NetworkMessage);
    Protocol.CharacterAlignmentWarEffortProgressionMessage = CharacterAlignmentWarEffortProgressionMessage;
    var CharacterAlignmentWarEffortProgressionRequestMessage = (function(_super) {
        __extends(CharacterAlignmentWarEffortProgressionRequestMessage, _super);

        function CharacterAlignmentWarEffortProgressionRequestMessage() {

            _super.call(this)
        }
        CharacterAlignmentWarEffortProgressionRequestMessage.prototype.getMessageId = function() {
            return CharacterAlignmentWarEffortProgressionRequestMessage.ID;
        };
        CharacterAlignmentWarEffortProgressionRequestMessage.prototype.reset = function() {

        };
        CharacterAlignmentWarEffortProgressionRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        CharacterAlignmentWarEffortProgressionRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        CharacterAlignmentWarEffortProgressionRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_CharacterAlignmentWarEffortProgressionRequestMessage(output);
        };
        CharacterAlignmentWarEffortProgressionRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_CharacterAlignmentWarEffortProgressionRequestMessage(input);
        };
        CharacterAlignmentWarEffortProgressionRequestMessage.prototype.serializeAs_CharacterAlignmentWarEffortProgressionRequestMessage = function(output) {

        };
        CharacterAlignmentWarEffortProgressionRequestMessage.prototype.deserializeAs_CharacterAlignmentWarEffortProgressionRequestMessage = function(input) {

        };
        CharacterAlignmentWarEffortProgressionRequestMessage.ID = 6202;
        return CharacterAlignmentWarEffortProgressionRequestMessage;
    })(NetworkMessage);
    Protocol.CharacterAlignmentWarEffortProgressionRequestMessage = CharacterAlignmentWarEffortProgressionRequestMessage;
    var BasicCharactersListMessage = (function(_super) {
        __extends(BasicCharactersListMessage, _super);

        function BasicCharactersListMessage() {
            this.characters = [];
            _super.call(this)
        }
        BasicCharactersListMessage.prototype.getMessageId = function() {
            return BasicCharactersListMessage.ID;
        };
        BasicCharactersListMessage.prototype.reset = function() {
            this.characters = [];
        };
        BasicCharactersListMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        BasicCharactersListMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        BasicCharactersListMessage.prototype.serialize = function(output) {
            this.serializeAs_BasicCharactersListMessage(output);
        };
        BasicCharactersListMessage.prototype.deserialize = function(input) {
            this.deserializeAs_BasicCharactersListMessage(input);
        };
        BasicCharactersListMessage.prototype.serializeAs_BasicCharactersListMessage = function(output) {
            output.writeShort(this.characters.length);
            for (var _i1 = 0; _i1 < this.characters.length; _i1++) {
                output.writeShort((this.characters[_i1]).getTypeId());
                (this.characters[_i1]).serialize(output);
            }
        };
        BasicCharactersListMessage.prototype.deserializeAs_BasicCharactersListMessage = function(input) {
            var _id1 = 0;
            var _item1 = null;
            var _charactersLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _charactersLen; _i1++) {
                _id1 = input.readUnsignedShort();
                _item1 = ProtocolTypeManager.getInstance(CharacterBaseInformations, _id1);
                _item1.deserialize(input);
                this.characters.push(_item1);
            }
        };
        BasicCharactersListMessage.ID = 7584;
        return BasicCharactersListMessage;
    })(NetworkMessage);
    Protocol.BasicCharactersListMessage = BasicCharactersListMessage;
    var CharacterSelectionMessage = (function(_super) {
        __extends(CharacterSelectionMessage, _super);

        function CharacterSelectionMessage() {
            this.id = 0;
            _super.call(this)
        }
        CharacterSelectionMessage.prototype.getMessageId = function() {
            return CharacterSelectionMessage.ID;
        };
        CharacterSelectionMessage.prototype.reset = function() {
            this.id = 0;
        };
        CharacterSelectionMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        CharacterSelectionMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        CharacterSelectionMessage.prototype.serialize = function(output) {
            this.serializeAs_CharacterSelectionMessage(output);
        };
        CharacterSelectionMessage.prototype.deserialize = function(input) {
            this.deserializeAs_CharacterSelectionMessage(input);
        };
        CharacterSelectionMessage.prototype.serializeAs_CharacterSelectionMessage = function(output) {
            if (this.id < 0 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarLong(this.id);
        };
        CharacterSelectionMessage.prototype.deserializeAs_CharacterSelectionMessage = function(input) {
            this.id = input.readVarUhLong();
            if (this.id < 0 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element of CharacterSelectionMessage.id.");
            }
        };
        CharacterSelectionMessage.ID = 6200;
        return CharacterSelectionMessage;
    })(NetworkMessage);
    Protocol.CharacterSelectionMessage = CharacterSelectionMessage;
    var CharacterFirstSelectionMessage = (function(_super) {
        __extends(CharacterFirstSelectionMessage, _super);

        function CharacterFirstSelectionMessage() {
            this.doTutorial = false;
            _super.call(this)
        }
        CharacterFirstSelectionMessage.prototype.getMessageId = function() {
            return CharacterFirstSelectionMessage.ID;
        };
        CharacterFirstSelectionMessage.prototype.reset = function() {
            this.doTutorial = false;
        };
        CharacterFirstSelectionMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        CharacterFirstSelectionMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        CharacterFirstSelectionMessage.prototype.serialize = function(output) {
            this.serializeAs_CharacterFirstSelectionMessage(output);
        };
        CharacterFirstSelectionMessage.prototype.deserialize = function(input) {
            this.deserializeAs_CharacterFirstSelectionMessage(input);
        };
        CharacterFirstSelectionMessage.prototype.serializeAs_CharacterFirstSelectionMessage = function(output) {
            _super.prototype.serializeAs_CharacterSelectionMessage.call(this, output);
            output.writeBoolean(this.doTutorial);
        };
        CharacterFirstSelectionMessage.prototype.deserializeAs_CharacterFirstSelectionMessage = function(input) {
            _super.prototype.deserializeAs_CharacterSelectionMessage.call(this, input);
            this.doTutorial = input.readBoolean();
        };
        CharacterFirstSelectionMessage.ID = 7120;
        return CharacterFirstSelectionMessage;
    })(CharacterSelectionMessage);
    Protocol.CharacterFirstSelectionMessage = CharacterFirstSelectionMessage;
    var CharacterReplayRequestMessage = (function(_super) {
        __extends(CharacterReplayRequestMessage, _super);

        function CharacterReplayRequestMessage() {
            this.characterId = 0;
            _super.call(this)
        }
        CharacterReplayRequestMessage.prototype.getMessageId = function() {
            return CharacterReplayRequestMessage.ID;
        };
        CharacterReplayRequestMessage.prototype.reset = function() {
            this.characterId = 0;
        };
        CharacterReplayRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        CharacterReplayRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        CharacterReplayRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_CharacterReplayRequestMessage(output);
        };
        CharacterReplayRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_CharacterReplayRequestMessage(input);
        };
        CharacterReplayRequestMessage.prototype.serializeAs_CharacterReplayRequestMessage = function(output) {
            if (this.characterId < 0 || this.characterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.characterId + ") on element characterId.");
            }
            output.writeVarLong(this.characterId);
        };
        CharacterReplayRequestMessage.prototype.deserializeAs_CharacterReplayRequestMessage = function(input) {
            this.characterId = input.readVarUhLong();
            if (this.characterId < 0 || this.characterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.characterId + ") on element of CharacterReplayRequestMessage.characterId.");
            }
        };
        CharacterReplayRequestMessage.ID = 9005;
        return CharacterReplayRequestMessage;
    })(NetworkMessage);
    Protocol.CharacterReplayRequestMessage = CharacterReplayRequestMessage;
    var CharacterReplayWithRemodelRequestMessage = (function(_super) {
        __extends(CharacterReplayWithRemodelRequestMessage, _super);

        function CharacterReplayWithRemodelRequestMessage() {
            this.remodel = new RemodelingInformation();
            _super.call(this)
        }
        CharacterReplayWithRemodelRequestMessage.prototype.getMessageId = function() {
            return CharacterReplayWithRemodelRequestMessage.ID;
        };
        CharacterReplayWithRemodelRequestMessage.prototype.reset = function() {
            this.remodel = new RemodelingInformation();
        };
        CharacterReplayWithRemodelRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        CharacterReplayWithRemodelRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        CharacterReplayWithRemodelRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_CharacterReplayWithRemodelRequestMessage(output);
        };
        CharacterReplayWithRemodelRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_CharacterReplayWithRemodelRequestMessage(input);
        };
        CharacterReplayWithRemodelRequestMessage.prototype.serializeAs_CharacterReplayWithRemodelRequestMessage = function(output) {
            _super.prototype.serializeAs_CharacterReplayRequestMessage.call(this, output);
            this.remodel.serializeAs_RemodelingInformation(output);
        };
        CharacterReplayWithRemodelRequestMessage.prototype.deserializeAs_CharacterReplayWithRemodelRequestMessage = function(input) {
            _super.prototype.deserializeAs_CharacterReplayRequestMessage.call(this, input);
            this.remodel = new RemodelingInformation();
            this.remodel.deserialize(input);
        };
        CharacterReplayWithRemodelRequestMessage.ID = 8678;
        return CharacterReplayWithRemodelRequestMessage;
    })(CharacterReplayRequestMessage);
    Protocol.CharacterReplayWithRemodelRequestMessage = CharacterReplayWithRemodelRequestMessage;
    var CharacterSelectedErrorMessage = (function(_super) {
        __extends(CharacterSelectedErrorMessage, _super);

        function CharacterSelectedErrorMessage() {

            _super.call(this)
        }
        CharacterSelectedErrorMessage.prototype.getMessageId = function() {
            return CharacterSelectedErrorMessage.ID;
        };
        CharacterSelectedErrorMessage.prototype.reset = function() {

        };
        CharacterSelectedErrorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        CharacterSelectedErrorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        CharacterSelectedErrorMessage.prototype.serialize = function(output) {
            this.serializeAs_CharacterSelectedErrorMessage(output);
        };
        CharacterSelectedErrorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_CharacterSelectedErrorMessage(input);
        };
        CharacterSelectedErrorMessage.prototype.serializeAs_CharacterSelectedErrorMessage = function(output) {

        };
        CharacterSelectedErrorMessage.prototype.deserializeAs_CharacterSelectedErrorMessage = function(input) {

        };
        CharacterSelectedErrorMessage.ID = 8844;
        return CharacterSelectedErrorMessage;
    })(NetworkMessage);
    Protocol.CharacterSelectedErrorMessage = CharacterSelectedErrorMessage;
    var CharacterSelectedForceMessage = (function(_super) {
        __extends(CharacterSelectedForceMessage, _super);

        function CharacterSelectedForceMessage() {
            this.id = 0;
            _super.call(this)
        }
        CharacterSelectedForceMessage.prototype.getMessageId = function() {
            return CharacterSelectedForceMessage.ID;
        };
        CharacterSelectedForceMessage.prototype.reset = function() {
            this.id = 0;
        };
        CharacterSelectedForceMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        CharacterSelectedForceMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        CharacterSelectedForceMessage.prototype.serialize = function(output) {
            this.serializeAs_CharacterSelectedForceMessage(output);
        };
        CharacterSelectedForceMessage.prototype.deserialize = function(input) {
            this.deserializeAs_CharacterSelectedForceMessage(input);
        };
        CharacterSelectedForceMessage.prototype.serializeAs_CharacterSelectedForceMessage = function(output) {
            if (this.id < 1 || this.id > 2147483647) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeInt(this.id);
        };
        CharacterSelectedForceMessage.prototype.deserializeAs_CharacterSelectedForceMessage = function(input) {
            this.id = input.readInt();
            if (this.id < 1 || this.id > 2147483647) {
                throw new Error("Forbidden value (" + this.id + ") on element of CharacterSelectedForceMessage.id.");
            }
        };
        CharacterSelectedForceMessage.ID = 2068;
        return CharacterSelectedForceMessage;
    })(NetworkMessage);
    Protocol.CharacterSelectedForceMessage = CharacterSelectedForceMessage;
    var CharacterSelectedForceReadyMessage = (function(_super) {
        __extends(CharacterSelectedForceReadyMessage, _super);

        function CharacterSelectedForceReadyMessage() {

            _super.call(this)
        }
        CharacterSelectedForceReadyMessage.prototype.getMessageId = function() {
            return CharacterSelectedForceReadyMessage.ID;
        };
        CharacterSelectedForceReadyMessage.prototype.reset = function() {

        };
        CharacterSelectedForceReadyMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        CharacterSelectedForceReadyMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        CharacterSelectedForceReadyMessage.prototype.serialize = function(output) {
            this.serializeAs_CharacterSelectedForceReadyMessage(output);
        };
        CharacterSelectedForceReadyMessage.prototype.deserialize = function(input) {
            this.deserializeAs_CharacterSelectedForceReadyMessage(input);
        };
        CharacterSelectedForceReadyMessage.prototype.serializeAs_CharacterSelectedForceReadyMessage = function(output) {

        };
        CharacterSelectedForceReadyMessage.prototype.deserializeAs_CharacterSelectedForceReadyMessage = function(input) {

        };
        CharacterSelectedForceReadyMessage.ID = 5754;
        return CharacterSelectedForceReadyMessage;
    })(NetworkMessage);
    Protocol.CharacterSelectedForceReadyMessage = CharacterSelectedForceReadyMessage;
    var CharacterSelectedSuccessMessage = (function(_super) {
        __extends(CharacterSelectedSuccessMessage, _super);

        function CharacterSelectedSuccessMessage() {
            this.infos = new CharacterBaseInformations();
            this.isCollectingStats = false;
            _super.call(this)
        }
        CharacterSelectedSuccessMessage.prototype.getMessageId = function() {
            return CharacterSelectedSuccessMessage.ID;
        };
        CharacterSelectedSuccessMessage.prototype.reset = function() {
            this.infos = new CharacterBaseInformations();
            this.isCollectingStats = false;
        };
        CharacterSelectedSuccessMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        CharacterSelectedSuccessMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        CharacterSelectedSuccessMessage.prototype.serialize = function(output) {
            this.serializeAs_CharacterSelectedSuccessMessage(output);
        };
        CharacterSelectedSuccessMessage.prototype.deserialize = function(input) {
            this.deserializeAs_CharacterSelectedSuccessMessage(input);
        };
        CharacterSelectedSuccessMessage.prototype.serializeAs_CharacterSelectedSuccessMessage = function(output) {
            this.infos.serializeAs_CharacterBaseInformations(output);
            output.writeBoolean(this.isCollectingStats);
        };
        CharacterSelectedSuccessMessage.prototype.deserializeAs_CharacterSelectedSuccessMessage = function(input) {
            this.infos = new CharacterBaseInformations();
            this.infos.deserialize(input);
            this.isCollectingStats = input.readBoolean();
        };
        CharacterSelectedSuccessMessage.ID = 8424;
        return CharacterSelectedSuccessMessage;
    })(NetworkMessage);
    Protocol.CharacterSelectedSuccessMessage = CharacterSelectedSuccessMessage;
    var CharacterSelectionWithRemodelMessage = (function(_super) {
        __extends(CharacterSelectionWithRemodelMessage, _super);

        function CharacterSelectionWithRemodelMessage() {
            this.remodel = new RemodelingInformation();
            _super.call(this)
        }
        CharacterSelectionWithRemodelMessage.prototype.getMessageId = function() {
            return CharacterSelectionWithRemodelMessage.ID;
        };
        CharacterSelectionWithRemodelMessage.prototype.reset = function() {
            this.remodel = new RemodelingInformation();
        };
        CharacterSelectionWithRemodelMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        CharacterSelectionWithRemodelMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        CharacterSelectionWithRemodelMessage.prototype.serialize = function(output) {
            this.serializeAs_CharacterSelectionWithRemodelMessage(output);
        };
        CharacterSelectionWithRemodelMessage.prototype.deserialize = function(input) {
            this.deserializeAs_CharacterSelectionWithRemodelMessage(input);
        };
        CharacterSelectionWithRemodelMessage.prototype.serializeAs_CharacterSelectionWithRemodelMessage = function(output) {
            _super.prototype.serializeAs_CharacterSelectionMessage.call(this, output);
            this.remodel.serializeAs_RemodelingInformation(output);
        };
        CharacterSelectionWithRemodelMessage.prototype.deserializeAs_CharacterSelectionWithRemodelMessage = function(input) {
            _super.prototype.deserializeAs_CharacterSelectionMessage.call(this, input);
            this.remodel = new RemodelingInformation();
            this.remodel.deserialize(input);
        };
        CharacterSelectionWithRemodelMessage.ID = 3592;
        return CharacterSelectionWithRemodelMessage;
    })(CharacterSelectionMessage);
    Protocol.CharacterSelectionWithRemodelMessage = CharacterSelectionWithRemodelMessage;
    var CharactersListErrorMessage = (function(_super) {
        __extends(CharactersListErrorMessage, _super);

        function CharactersListErrorMessage() {

            _super.call(this)
        }
        CharactersListErrorMessage.prototype.getMessageId = function() {
            return CharactersListErrorMessage.ID;
        };
        CharactersListErrorMessage.prototype.reset = function() {

        };
        CharactersListErrorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        CharactersListErrorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        CharactersListErrorMessage.prototype.serialize = function(output) {
            this.serializeAs_CharactersListErrorMessage(output);
        };
        CharactersListErrorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_CharactersListErrorMessage(input);
        };
        CharactersListErrorMessage.prototype.serializeAs_CharactersListErrorMessage = function(output) {

        };
        CharactersListErrorMessage.prototype.deserializeAs_CharactersListErrorMessage = function(input) {

        };
        CharactersListErrorMessage.ID = 6801;
        return CharactersListErrorMessage;
    })(NetworkMessage);
    Protocol.CharactersListErrorMessage = CharactersListErrorMessage;
    var CharactersListMessage = (function(_super) {
        __extends(CharactersListMessage, _super);

        function CharactersListMessage() {
            this.hasStartupActions = false;
            _super.call(this)
        }
        CharactersListMessage.prototype.getMessageId = function() {
            return CharactersListMessage.ID;
        };
        CharactersListMessage.prototype.reset = function() {
            this.hasStartupActions = false;
        };
        CharactersListMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        CharactersListMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        CharactersListMessage.prototype.serialize = function(output) {
            this.serializeAs_CharactersListMessage(output);
        };
        CharactersListMessage.prototype.deserialize = function(input) {
            this.deserializeAs_CharactersListMessage(input);
        };
        CharactersListMessage.prototype.serializeAs_CharactersListMessage = function(output) {
            _super.prototype.serializeAs_BasicCharactersListMessage.call(this, output);
            output.writeBoolean(this.hasStartupActions);
        };
        CharactersListMessage.prototype.deserializeAs_CharactersListMessage = function(input) {
            _super.prototype.deserializeAs_BasicCharactersListMessage.call(this, input);
            this.hasStartupActions = input.readBoolean();
        };
        CharactersListMessage.ID = 434;
        return CharactersListMessage;
    })(BasicCharactersListMessage);
    Protocol.CharactersListMessage = CharactersListMessage;
    var CharactersListRequestMessage = (function(_super) {
        __extends(CharactersListRequestMessage, _super);

        function CharactersListRequestMessage() {

            _super.call(this)
        }
        CharactersListRequestMessage.prototype.getMessageId = function() {
            return CharactersListRequestMessage.ID;
        };
        CharactersListRequestMessage.prototype.reset = function() {

        };
        CharactersListRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        CharactersListRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        CharactersListRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_CharactersListRequestMessage(output);
        };
        CharactersListRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_CharactersListRequestMessage(input);
        };
        CharactersListRequestMessage.prototype.serializeAs_CharactersListRequestMessage = function(output) {

        };
        CharactersListRequestMessage.prototype.deserializeAs_CharactersListRequestMessage = function(input) {

        };
        CharactersListRequestMessage.ID = 2566;
        return CharactersListRequestMessage;
    })(NetworkMessage);
    Protocol.CharactersListRequestMessage = CharactersListRequestMessage;
    var CharactersListWithRemodelingMessage = (function(_super) {
        __extends(CharactersListWithRemodelingMessage, _super);

        function CharactersListWithRemodelingMessage() {
            this.charactersToRemodel = [];
            _super.call(this)
        }
        CharactersListWithRemodelingMessage.prototype.getMessageId = function() {
            return CharactersListWithRemodelingMessage.ID;
        };
        CharactersListWithRemodelingMessage.prototype.reset = function() {
            this.charactersToRemodel = [];
        };
        CharactersListWithRemodelingMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        CharactersListWithRemodelingMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        CharactersListWithRemodelingMessage.prototype.serialize = function(output) {
            this.serializeAs_CharactersListWithRemodelingMessage(output);
        };
        CharactersListWithRemodelingMessage.prototype.deserialize = function(input) {
            this.deserializeAs_CharactersListWithRemodelingMessage(input);
        };
        CharactersListWithRemodelingMessage.prototype.serializeAs_CharactersListWithRemodelingMessage = function(output) {
            _super.prototype.serializeAs_CharactersListMessage.call(this, output);
            output.writeShort(this.charactersToRemodel.length);
            for (var _i1 = 0; _i1 < this.charactersToRemodel.length; _i1++) {
                (this.charactersToRemodel[_i1]).serializeAs_CharacterToRemodelInformations(output);
            }
        };
        CharactersListWithRemodelingMessage.prototype.deserializeAs_CharactersListWithRemodelingMessage = function(input) {
            var _item1 = null;
            _super.prototype.deserializeAs_CharactersListMessage.call(this, input);
            var _charactersToRemodelLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _charactersToRemodelLen; _i1++) {
                _item1 = new CharacterToRemodelInformations();
                _item1.deserialize(input);
                this.charactersToRemodel.push(_item1);
            }
        };
        CharactersListWithRemodelingMessage.ID = 1171;
        return CharactersListWithRemodelingMessage;
    })(CharactersListMessage);
    Protocol.CharactersListWithRemodelingMessage = CharactersListWithRemodelingMessage;
    var CharacterCanBeCreatedRequestMessage = (function(_super) {
        __extends(CharacterCanBeCreatedRequestMessage, _super);

        function CharacterCanBeCreatedRequestMessage() {

            _super.call(this)
        }
        CharacterCanBeCreatedRequestMessage.prototype.getMessageId = function() {
            return CharacterCanBeCreatedRequestMessage.ID;
        };
        CharacterCanBeCreatedRequestMessage.prototype.reset = function() {

        };
        CharacterCanBeCreatedRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        CharacterCanBeCreatedRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        CharacterCanBeCreatedRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_CharacterCanBeCreatedRequestMessage(output);
        };
        CharacterCanBeCreatedRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_CharacterCanBeCreatedRequestMessage(input);
        };
        CharacterCanBeCreatedRequestMessage.prototype.serializeAs_CharacterCanBeCreatedRequestMessage = function(output) {

        };
        CharacterCanBeCreatedRequestMessage.prototype.deserializeAs_CharacterCanBeCreatedRequestMessage = function(input) {

        };
        CharacterCanBeCreatedRequestMessage.ID = 709;
        return CharacterCanBeCreatedRequestMessage;
    })(NetworkMessage);
    Protocol.CharacterCanBeCreatedRequestMessage = CharacterCanBeCreatedRequestMessage;
    var CharacterCanBeCreatedResultMessage = (function(_super) {
        __extends(CharacterCanBeCreatedResultMessage, _super);

        function CharacterCanBeCreatedResultMessage() {
            this.yesYouCan = false;
            _super.call(this)
        }
        CharacterCanBeCreatedResultMessage.prototype.getMessageId = function() {
            return CharacterCanBeCreatedResultMessage.ID;
        };
        CharacterCanBeCreatedResultMessage.prototype.reset = function() {
            this.yesYouCan = false;
        };
        CharacterCanBeCreatedResultMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        CharacterCanBeCreatedResultMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        CharacterCanBeCreatedResultMessage.prototype.serialize = function(output) {
            this.serializeAs_CharacterCanBeCreatedResultMessage(output);
        };
        CharacterCanBeCreatedResultMessage.prototype.deserialize = function(input) {
            this.deserializeAs_CharacterCanBeCreatedResultMessage(input);
        };
        CharacterCanBeCreatedResultMessage.prototype.serializeAs_CharacterCanBeCreatedResultMessage = function(output) {
            output.writeBoolean(this.yesYouCan);
        };
        CharacterCanBeCreatedResultMessage.prototype.deserializeAs_CharacterCanBeCreatedResultMessage = function(input) {
            this.yesYouCan = input.readBoolean();
        };
        CharacterCanBeCreatedResultMessage.ID = 9261;
        return CharacterCanBeCreatedResultMessage;
    })(NetworkMessage);
    Protocol.CharacterCanBeCreatedResultMessage = CharacterCanBeCreatedResultMessage;
    var CharacterCreationRequestMessage = (function(_super) {
        __extends(CharacterCreationRequestMessage, _super);

        function CharacterCreationRequestMessage() {
            this.name = "";
            this.breed = 0;
            this.sex = false;
            this.colors = [];
            this.cosmeticId = 0;
            _super.call(this)
        }
        CharacterCreationRequestMessage.prototype.getMessageId = function() {
            return CharacterCreationRequestMessage.ID;
        };
        CharacterCreationRequestMessage.prototype.reset = function() {
            this.name = "";
            this.breed = 0;
            this.sex = false;
            this.colors = [];
            this.cosmeticId = 0;
        };
        CharacterCreationRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        CharacterCreationRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        CharacterCreationRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_CharacterCreationRequestMessage(output);
        };
        CharacterCreationRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_CharacterCreationRequestMessage(input);
        };
        CharacterCreationRequestMessage.prototype.serializeAs_CharacterCreationRequestMessage = function(output) {
            output.writeUTF(this.name);
            output.writeByte(this.breed);
            output.writeBoolean(this.sex);
            for (var _i4 = 0; _i4 < 5; _i4++) {
                output.writeInt(this.colors[_i4]);
            }
            if (this.cosmeticId < 0) {
                throw new Error("Forbidden value (" + this.cosmeticId + ") on element cosmeticId.");
            }
            output.writeVarShort(this.cosmeticId);
        };
        CharacterCreationRequestMessage.prototype.deserializeAs_CharacterCreationRequestMessage = function(input) {
            this.name = input.readUTF();
            this.breed = input.readByte();
            if (this.breed < PlayableBreedEnum.Feca || this.breed > PlayableBreedEnum.Ouginak) {
                throw new Error("Forbidden value (" + this.breed + ") on element of CharacterCreationRequestMessage.breed.");
            }
            this.sex = input.readBoolean();
            for (var _i4 = 0; _i4 < 5; _i4++) {
                this.colors[_i4] = input.readInt();
            }
            this.cosmeticId = input.readVarUhShort();
            if (this.cosmeticId < 0) {
                throw new Error("Forbidden value (" + this.cosmeticId + ") on element of CharacterCreationRequestMessage.cosmeticId.");
            }
        };
        CharacterCreationRequestMessage.ID = 1738;
        return CharacterCreationRequestMessage;
    })(NetworkMessage);
    Protocol.CharacterCreationRequestMessage = CharacterCreationRequestMessage;
    var CharacterCreationResultMessage = (function(_super) {
        __extends(CharacterCreationResultMessage, _super);

        function CharacterCreationResultMessage() {
            this.result = 1;
            _super.call(this)
        }
        CharacterCreationResultMessage.prototype.getMessageId = function() {
            return CharacterCreationResultMessage.ID;
        };
        CharacterCreationResultMessage.prototype.reset = function() {
            this.result = 1;
        };
        CharacterCreationResultMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        CharacterCreationResultMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        CharacterCreationResultMessage.prototype.serialize = function(output) {
            this.serializeAs_CharacterCreationResultMessage(output);
        };
        CharacterCreationResultMessage.prototype.deserialize = function(input) {
            this.deserializeAs_CharacterCreationResultMessage(input);
        };
        CharacterCreationResultMessage.prototype.serializeAs_CharacterCreationResultMessage = function(output) {
            output.writeByte(this.result);
        };
        CharacterCreationResultMessage.prototype.deserializeAs_CharacterCreationResultMessage = function(input) {
            this.result = input.readByte();
            if (this.result < 0) {
                throw new Error("Forbidden value (" + this.result + ") on element of CharacterCreationResultMessage.result.");
            }
        };
        CharacterCreationResultMessage.ID = 1146;
        return CharacterCreationResultMessage;
    })(NetworkMessage);
    Protocol.CharacterCreationResultMessage = CharacterCreationResultMessage;
    var CharacterNameSuggestionFailureMessage = (function(_super) {
        __extends(CharacterNameSuggestionFailureMessage, _super);

        function CharacterNameSuggestionFailureMessage() {
            this.reason = 1;
            _super.call(this)
        }
        CharacterNameSuggestionFailureMessage.prototype.getMessageId = function() {
            return CharacterNameSuggestionFailureMessage.ID;
        };
        CharacterNameSuggestionFailureMessage.prototype.reset = function() {
            this.reason = 1;
        };
        CharacterNameSuggestionFailureMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        CharacterNameSuggestionFailureMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        CharacterNameSuggestionFailureMessage.prototype.serialize = function(output) {
            this.serializeAs_CharacterNameSuggestionFailureMessage(output);
        };
        CharacterNameSuggestionFailureMessage.prototype.deserialize = function(input) {
            this.deserializeAs_CharacterNameSuggestionFailureMessage(input);
        };
        CharacterNameSuggestionFailureMessage.prototype.serializeAs_CharacterNameSuggestionFailureMessage = function(output) {
            output.writeByte(this.reason);
        };
        CharacterNameSuggestionFailureMessage.prototype.deserializeAs_CharacterNameSuggestionFailureMessage = function(input) {
            this.reason = input.readByte();
            if (this.reason < 0) {
                throw new Error("Forbidden value (" + this.reason + ") on element of CharacterNameSuggestionFailureMessage.reason.");
            }
        };
        CharacterNameSuggestionFailureMessage.ID = 5079;
        return CharacterNameSuggestionFailureMessage;
    })(NetworkMessage);
    Protocol.CharacterNameSuggestionFailureMessage = CharacterNameSuggestionFailureMessage;
    var CharacterNameSuggestionRequestMessage = (function(_super) {
        __extends(CharacterNameSuggestionRequestMessage, _super);

        function CharacterNameSuggestionRequestMessage() {

            _super.call(this)
        }
        CharacterNameSuggestionRequestMessage.prototype.getMessageId = function() {
            return CharacterNameSuggestionRequestMessage.ID;
        };
        CharacterNameSuggestionRequestMessage.prototype.reset = function() {

        };
        CharacterNameSuggestionRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        CharacterNameSuggestionRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        CharacterNameSuggestionRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_CharacterNameSuggestionRequestMessage(output);
        };
        CharacterNameSuggestionRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_CharacterNameSuggestionRequestMessage(input);
        };
        CharacterNameSuggestionRequestMessage.prototype.serializeAs_CharacterNameSuggestionRequestMessage = function(output) {

        };
        CharacterNameSuggestionRequestMessage.prototype.deserializeAs_CharacterNameSuggestionRequestMessage = function(input) {

        };
        CharacterNameSuggestionRequestMessage.ID = 2144;
        return CharacterNameSuggestionRequestMessage;
    })(NetworkMessage);
    Protocol.CharacterNameSuggestionRequestMessage = CharacterNameSuggestionRequestMessage;
    var CharacterNameSuggestionSuccessMessage = (function(_super) {
        __extends(CharacterNameSuggestionSuccessMessage, _super);

        function CharacterNameSuggestionSuccessMessage() {
            this.suggestion = "";
            _super.call(this)
        }
        CharacterNameSuggestionSuccessMessage.prototype.getMessageId = function() {
            return CharacterNameSuggestionSuccessMessage.ID;
        };
        CharacterNameSuggestionSuccessMessage.prototype.reset = function() {
            this.suggestion = "";
        };
        CharacterNameSuggestionSuccessMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        CharacterNameSuggestionSuccessMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        CharacterNameSuggestionSuccessMessage.prototype.serialize = function(output) {
            this.serializeAs_CharacterNameSuggestionSuccessMessage(output);
        };
        CharacterNameSuggestionSuccessMessage.prototype.deserialize = function(input) {
            this.deserializeAs_CharacterNameSuggestionSuccessMessage(input);
        };
        CharacterNameSuggestionSuccessMessage.prototype.serializeAs_CharacterNameSuggestionSuccessMessage = function(output) {
            output.writeUTF(this.suggestion);
        };
        CharacterNameSuggestionSuccessMessage.prototype.deserializeAs_CharacterNameSuggestionSuccessMessage = function(input) {
            this.suggestion = input.readUTF();
        };
        CharacterNameSuggestionSuccessMessage.ID = 3457;
        return CharacterNameSuggestionSuccessMessage;
    })(NetworkMessage);
    Protocol.CharacterNameSuggestionSuccessMessage = CharacterNameSuggestionSuccessMessage;
    var DebtsDeleteMessage = (function(_super) {
        __extends(DebtsDeleteMessage, _super);

        function DebtsDeleteMessage() {
            this.reason = 0;
            this.debts = [];
            _super.call(this)
        }
        DebtsDeleteMessage.prototype.getMessageId = function() {
            return DebtsDeleteMessage.ID;
        };
        DebtsDeleteMessage.prototype.reset = function() {
            this.reason = 0;
            this.debts = [];
        };
        DebtsDeleteMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        DebtsDeleteMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        DebtsDeleteMessage.prototype.serialize = function(output) {
            this.serializeAs_DebtsDeleteMessage(output);
        };
        DebtsDeleteMessage.prototype.deserialize = function(input) {
            this.deserializeAs_DebtsDeleteMessage(input);
        };
        DebtsDeleteMessage.prototype.serializeAs_DebtsDeleteMessage = function(output) {
            output.writeByte(this.reason);
            output.writeShort(this.debts.length);
            for (var _i2 = 0; _i2 < this.debts.length; _i2++) {
                if (this.debts[_i2] < 0 || this.debts[_i2] > 9007199254740990) {
                    throw new Error("Forbidden value (" + this.debts[_i2] + ") on element 2 (starting at 1) of debts.");
                }
                output.writeDouble(this.debts[_i2]);
            }
        };
        DebtsDeleteMessage.prototype.deserializeAs_DebtsDeleteMessage = function(input) {
            var _val2 = NaN;
            this.reason = input.readByte();
            if (this.reason < 0) {
                throw new Error("Forbidden value (" + this.reason + ") on element of DebtsDeleteMessage.reason.");
            }
            var _debtsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _debtsLen; _i2++) {
                _val2 = input.readDouble();
                if (_val2 < 0 || _val2 > 9007199254740990) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of debts.");
                }
                this.debts.push(_val2);
            }
        };
        DebtsDeleteMessage.ID = 5452;
        return DebtsDeleteMessage;
    })(NetworkMessage);
    Protocol.DebtsDeleteMessage = DebtsDeleteMessage;
    var DebtsUpdateMessage = (function(_super) {
        __extends(DebtsUpdateMessage, _super);

        function DebtsUpdateMessage() {
            this.action = 0;
            this.debts = [];
            _super.call(this)
        }
        DebtsUpdateMessage.prototype.getMessageId = function() {
            return DebtsUpdateMessage.ID;
        };
        DebtsUpdateMessage.prototype.reset = function() {
            this.action = 0;
            this.debts = [];
        };
        DebtsUpdateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        DebtsUpdateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        DebtsUpdateMessage.prototype.serialize = function(output) {
            this.serializeAs_DebtsUpdateMessage(output);
        };
        DebtsUpdateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_DebtsUpdateMessage(input);
        };
        DebtsUpdateMessage.prototype.serializeAs_DebtsUpdateMessage = function(output) {
            output.writeByte(this.action);
            output.writeShort(this.debts.length);
            for (var _i2 = 0; _i2 < this.debts.length; _i2++) {
                output.writeShort((this.debts[_i2]).getTypeId());
                (this.debts[_i2]).serialize(output);
            }
        };
        DebtsUpdateMessage.prototype.deserializeAs_DebtsUpdateMessage = function(input) {
            var _id2 = 0;
            var _item2 = null;
            this.action = input.readByte();
            if (this.action < 0) {
                throw new Error("Forbidden value (" + this.action + ") on element of DebtsUpdateMessage.action.");
            }
            var _debtsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _debtsLen; _i2++) {
                _id2 = input.readUnsignedShort();
                _item2 = ProtocolTypeManager.getInstance(DebtInformation, _id2);
                _item2.deserialize(input);
                this.debts.push(_item2);
            }
        };
        DebtsUpdateMessage.ID = 9975;
        return DebtsUpdateMessage;
    })(NetworkMessage);
    Protocol.DebtsUpdateMessage = DebtsUpdateMessage;
    var CharacterDeletionErrorMessage = (function(_super) {
        __extends(CharacterDeletionErrorMessage, _super);

        function CharacterDeletionErrorMessage() {
            this.reason = 1;
            _super.call(this)
        }
        CharacterDeletionErrorMessage.prototype.getMessageId = function() {
            return CharacterDeletionErrorMessage.ID;
        };
        CharacterDeletionErrorMessage.prototype.reset = function() {
            this.reason = 1;
        };
        CharacterDeletionErrorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        CharacterDeletionErrorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        CharacterDeletionErrorMessage.prototype.serialize = function(output) {
            this.serializeAs_CharacterDeletionErrorMessage(output);
        };
        CharacterDeletionErrorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_CharacterDeletionErrorMessage(input);
        };
        CharacterDeletionErrorMessage.prototype.serializeAs_CharacterDeletionErrorMessage = function(output) {
            output.writeByte(this.reason);
        };
        CharacterDeletionErrorMessage.prototype.deserializeAs_CharacterDeletionErrorMessage = function(input) {
            this.reason = input.readByte();
            if (this.reason < 0) {
                throw new Error("Forbidden value (" + this.reason + ") on element of CharacterDeletionErrorMessage.reason.");
            }
        };
        CharacterDeletionErrorMessage.ID = 9769;
        return CharacterDeletionErrorMessage;
    })(NetworkMessage);
    Protocol.CharacterDeletionErrorMessage = CharacterDeletionErrorMessage;
    var CharacterDeletionRequestMessage = (function(_super) {
        __extends(CharacterDeletionRequestMessage, _super);

        function CharacterDeletionRequestMessage() {
            this.characterId = 0;
            this.secretAnswerHash = "";
            _super.call(this)
        }
        CharacterDeletionRequestMessage.prototype.getMessageId = function() {
            return CharacterDeletionRequestMessage.ID;
        };
        CharacterDeletionRequestMessage.prototype.reset = function() {
            this.characterId = 0;
            this.secretAnswerHash = "";
        };
        CharacterDeletionRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        CharacterDeletionRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        CharacterDeletionRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_CharacterDeletionRequestMessage(output);
        };
        CharacterDeletionRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_CharacterDeletionRequestMessage(input);
        };
        CharacterDeletionRequestMessage.prototype.serializeAs_CharacterDeletionRequestMessage = function(output) {
            if (this.characterId < 0 || this.characterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.characterId + ") on element characterId.");
            }
            output.writeVarLong(this.characterId);
            output.writeUTF(this.secretAnswerHash);
        };
        CharacterDeletionRequestMessage.prototype.deserializeAs_CharacterDeletionRequestMessage = function(input) {
            this.characterId = input.readVarUhLong();
            if (this.characterId < 0 || this.characterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.characterId + ") on element of CharacterDeletionRequestMessage.characterId.");
            }
            this.secretAnswerHash = input.readUTF();
        };
        CharacterDeletionRequestMessage.ID = 3569;
        return CharacterDeletionRequestMessage;
    })(NetworkMessage);
    Protocol.CharacterDeletionRequestMessage = CharacterDeletionRequestMessage;
    var ForgettableSpellClientActionMessage = (function(_super) {
        __extends(ForgettableSpellClientActionMessage, _super);

        function ForgettableSpellClientActionMessage() {
            this.spellId = 0;
            this.action = 0;
            _super.call(this)
        }
        ForgettableSpellClientActionMessage.prototype.getMessageId = function() {
            return ForgettableSpellClientActionMessage.ID;
        };
        ForgettableSpellClientActionMessage.prototype.reset = function() {
            this.spellId = 0;
            this.action = 0;
        };
        ForgettableSpellClientActionMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ForgettableSpellClientActionMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ForgettableSpellClientActionMessage.prototype.serialize = function(output) {
            this.serializeAs_ForgettableSpellClientActionMessage(output);
        };
        ForgettableSpellClientActionMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ForgettableSpellClientActionMessage(input);
        };
        ForgettableSpellClientActionMessage.prototype.serializeAs_ForgettableSpellClientActionMessage = function(output) {
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
            }
            output.writeInt(this.spellId);
            output.writeByte(this.action);
        };
        ForgettableSpellClientActionMessage.prototype.deserializeAs_ForgettableSpellClientActionMessage = function(input) {
            this.spellId = input.readInt();
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element of ForgettableSpellClientActionMessage.spellId.");
            }
            this.action = input.readByte();
            if (this.action < 0) {
                throw new Error("Forbidden value (" + this.action + ") on element of ForgettableSpellClientActionMessage.action.");
            }
        };
        ForgettableSpellClientActionMessage.ID = 8669;
        return ForgettableSpellClientActionMessage;
    })(NetworkMessage);
    Protocol.ForgettableSpellClientActionMessage = ForgettableSpellClientActionMessage;
    var ForgettableSpellDeleteMessage = (function(_super) {
        __extends(ForgettableSpellDeleteMessage, _super);

        function ForgettableSpellDeleteMessage() {
            this.reason = 0;
            this.spells = [];
            _super.call(this)
        }
        ForgettableSpellDeleteMessage.prototype.getMessageId = function() {
            return ForgettableSpellDeleteMessage.ID;
        };
        ForgettableSpellDeleteMessage.prototype.reset = function() {
            this.reason = 0;
            this.spells = [];
        };
        ForgettableSpellDeleteMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ForgettableSpellDeleteMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ForgettableSpellDeleteMessage.prototype.serialize = function(output) {
            this.serializeAs_ForgettableSpellDeleteMessage(output);
        };
        ForgettableSpellDeleteMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ForgettableSpellDeleteMessage(input);
        };
        ForgettableSpellDeleteMessage.prototype.serializeAs_ForgettableSpellDeleteMessage = function(output) {
            output.writeByte(this.reason);
            output.writeShort(this.spells.length);
            for (var _i2 = 0; _i2 < this.spells.length; _i2++) {
                if (this.spells[_i2] < 0) {
                    throw new Error("Forbidden value (" + this.spells[_i2] + ") on element 2 (starting at 1) of spells.");
                }
                output.writeInt(this.spells[_i2]);
            }
        };
        ForgettableSpellDeleteMessage.prototype.deserializeAs_ForgettableSpellDeleteMessage = function(input) {
            var _val2 = 0;
            this.reason = input.readByte();
            if (this.reason < 0) {
                throw new Error("Forbidden value (" + this.reason + ") on element of ForgettableSpellDeleteMessage.reason.");
            }
            var _spellsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _spellsLen; _i2++) {
                _val2 = input.readInt();
                if (_val2 < 0) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of spells.");
                }
                this.spells.push(_val2);
            }
        };
        ForgettableSpellDeleteMessage.ID = 1920;
        return ForgettableSpellDeleteMessage;
    })(NetworkMessage);
    Protocol.ForgettableSpellDeleteMessage = ForgettableSpellDeleteMessage;
    var ForgettableSpellEquipmentSlotsMessage = (function(_super) {
        __extends(ForgettableSpellEquipmentSlotsMessage, _super);

        function ForgettableSpellEquipmentSlotsMessage() {
            this.quantity = 0;
            _super.call(this)
        }
        ForgettableSpellEquipmentSlotsMessage.prototype.getMessageId = function() {
            return ForgettableSpellEquipmentSlotsMessage.ID;
        };
        ForgettableSpellEquipmentSlotsMessage.prototype.reset = function() {
            this.quantity = 0;
        };
        ForgettableSpellEquipmentSlotsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ForgettableSpellEquipmentSlotsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ForgettableSpellEquipmentSlotsMessage.prototype.serialize = function(output) {
            this.serializeAs_ForgettableSpellEquipmentSlotsMessage(output);
        };
        ForgettableSpellEquipmentSlotsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ForgettableSpellEquipmentSlotsMessage(input);
        };
        ForgettableSpellEquipmentSlotsMessage.prototype.serializeAs_ForgettableSpellEquipmentSlotsMessage = function(output) {
            output.writeVarShort(this.quantity);
        };
        ForgettableSpellEquipmentSlotsMessage.prototype.deserializeAs_ForgettableSpellEquipmentSlotsMessage = function(input) {
            this.quantity = input.readVarShort();
        };
        ForgettableSpellEquipmentSlotsMessage.ID = 1271;
        return ForgettableSpellEquipmentSlotsMessage;
    })(NetworkMessage);
    Protocol.ForgettableSpellEquipmentSlotsMessage = ForgettableSpellEquipmentSlotsMessage;
    var ForgettableSpellListUpdateMessage = (function(_super) {
        __extends(ForgettableSpellListUpdateMessage, _super);

        function ForgettableSpellListUpdateMessage() {
            this.action = 0;
            this.spells = [];
            _super.call(this)
        }
        ForgettableSpellListUpdateMessage.prototype.getMessageId = function() {
            return ForgettableSpellListUpdateMessage.ID;
        };
        ForgettableSpellListUpdateMessage.prototype.reset = function() {
            this.action = 0;
            this.spells = [];
        };
        ForgettableSpellListUpdateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ForgettableSpellListUpdateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ForgettableSpellListUpdateMessage.prototype.serialize = function(output) {
            this.serializeAs_ForgettableSpellListUpdateMessage(output);
        };
        ForgettableSpellListUpdateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ForgettableSpellListUpdateMessage(input);
        };
        ForgettableSpellListUpdateMessage.prototype.serializeAs_ForgettableSpellListUpdateMessage = function(output) {
            output.writeByte(this.action);
            output.writeShort(this.spells.length);
            for (var _i2 = 0; _i2 < this.spells.length; _i2++) {
                (this.spells[_i2]).serializeAs_ForgettableSpellItem(output);
            }
        };
        ForgettableSpellListUpdateMessage.prototype.deserializeAs_ForgettableSpellListUpdateMessage = function(input) {
            var _item2 = null;
            this.action = input.readByte();
            if (this.action < 0) {
                throw new Error("Forbidden value (" + this.action + ") on element of ForgettableSpellListUpdateMessage.action.");
            }
            var _spellsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _spellsLen; _i2++) {
                _item2 = new ForgettableSpellItem();
                _item2.deserialize(input);
                this.spells.push(_item2);
            }
        };
        ForgettableSpellListUpdateMessage.ID = 3230;
        return ForgettableSpellListUpdateMessage;
    })(NetworkMessage);
    Protocol.ForgettableSpellListUpdateMessage = ForgettableSpellListUpdateMessage;
    var CharacterExperienceGainMessage = (function(_super) {
        __extends(CharacterExperienceGainMessage, _super);

        function CharacterExperienceGainMessage() {
            this.experienceCharacter = 0;
            this.experienceMount = 0;
            this.experienceGuild = 0;
            this.experienceIncarnation = 0;
            _super.call(this)
        }
        CharacterExperienceGainMessage.prototype.getMessageId = function() {
            return CharacterExperienceGainMessage.ID;
        };
        CharacterExperienceGainMessage.prototype.reset = function() {
            this.experienceCharacter = 0;
            this.experienceMount = 0;
            this.experienceGuild = 0;
            this.experienceIncarnation = 0;
        };
        CharacterExperienceGainMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        CharacterExperienceGainMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        CharacterExperienceGainMessage.prototype.serialize = function(output) {
            this.serializeAs_CharacterExperienceGainMessage(output);
        };
        CharacterExperienceGainMessage.prototype.deserialize = function(input) {
            this.deserializeAs_CharacterExperienceGainMessage(input);
        };
        CharacterExperienceGainMessage.prototype.serializeAs_CharacterExperienceGainMessage = function(output) {
            if (this.experienceCharacter < 0 || this.experienceCharacter > 9007199254740990) {
                throw new Error("Forbidden value (" + this.experienceCharacter + ") on element experienceCharacter.");
            }
            output.writeVarLong(this.experienceCharacter);
            if (this.experienceMount < 0 || this.experienceMount > 9007199254740990) {
                throw new Error("Forbidden value (" + this.experienceMount + ") on element experienceMount.");
            }
            output.writeVarLong(this.experienceMount);
            if (this.experienceGuild < 0 || this.experienceGuild > 9007199254740990) {
                throw new Error("Forbidden value (" + this.experienceGuild + ") on element experienceGuild.");
            }
            output.writeVarLong(this.experienceGuild);
            if (this.experienceIncarnation < 0 || this.experienceIncarnation > 9007199254740990) {
                throw new Error("Forbidden value (" + this.experienceIncarnation + ") on element experienceIncarnation.");
            }
            output.writeVarLong(this.experienceIncarnation);
        };
        CharacterExperienceGainMessage.prototype.deserializeAs_CharacterExperienceGainMessage = function(input) {
            this.experienceCharacter = input.readVarUhLong();
            if (this.experienceCharacter < 0 || this.experienceCharacter > 9007199254740990) {
                throw new Error("Forbidden value (" + this.experienceCharacter + ") on element of CharacterExperienceGainMessage.experienceCharacter.");
            }
            this.experienceMount = input.readVarUhLong();
            if (this.experienceMount < 0 || this.experienceMount > 9007199254740990) {
                throw new Error("Forbidden value (" + this.experienceMount + ") on element of CharacterExperienceGainMessage.experienceMount.");
            }
            this.experienceGuild = input.readVarUhLong();
            if (this.experienceGuild < 0 || this.experienceGuild > 9007199254740990) {
                throw new Error("Forbidden value (" + this.experienceGuild + ") on element of CharacterExperienceGainMessage.experienceGuild.");
            }
            this.experienceIncarnation = input.readVarUhLong();
            if (this.experienceIncarnation < 0 || this.experienceIncarnation > 9007199254740990) {
                throw new Error("Forbidden value (" + this.experienceIncarnation + ") on element of CharacterExperienceGainMessage.experienceIncarnation.");
            }
        };
        CharacterExperienceGainMessage.ID = 3122;
        return CharacterExperienceGainMessage;
    })(NetworkMessage);
    Protocol.CharacterExperienceGainMessage = CharacterExperienceGainMessage;
    var CharacterLevelUpMessage = (function(_super) {
        __extends(CharacterLevelUpMessage, _super);

        function CharacterLevelUpMessage() {
            this.newLevel = 0;
            _super.call(this)
        }
        CharacterLevelUpMessage.prototype.getMessageId = function() {
            return CharacterLevelUpMessage.ID;
        };
        CharacterLevelUpMessage.prototype.reset = function() {
            this.newLevel = 0;
        };
        CharacterLevelUpMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        CharacterLevelUpMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        CharacterLevelUpMessage.prototype.serialize = function(output) {
            this.serializeAs_CharacterLevelUpMessage(output);
        };
        CharacterLevelUpMessage.prototype.deserialize = function(input) {
            this.deserializeAs_CharacterLevelUpMessage(input);
        };
        CharacterLevelUpMessage.prototype.serializeAs_CharacterLevelUpMessage = function(output) {
            if (this.newLevel < 0) {
                throw new Error("Forbidden value (" + this.newLevel + ") on element newLevel.");
            }
            output.writeVarShort(this.newLevel);
        };
        CharacterLevelUpMessage.prototype.deserializeAs_CharacterLevelUpMessage = function(input) {
            this.newLevel = input.readVarUhShort();
            if (this.newLevel < 0) {
                throw new Error("Forbidden value (" + this.newLevel + ") on element of CharacterLevelUpMessage.newLevel.");
            }
        };
        CharacterLevelUpMessage.ID = 4759;
        return CharacterLevelUpMessage;
    })(NetworkMessage);
    Protocol.CharacterLevelUpMessage = CharacterLevelUpMessage;
    var CharacterLevelUpInformationMessage = (function(_super) {
        __extends(CharacterLevelUpInformationMessage, _super);

        function CharacterLevelUpInformationMessage() {
            this.name = "";
            this.id = 0;
            _super.call(this)
        }
        CharacterLevelUpInformationMessage.prototype.getMessageId = function() {
            return CharacterLevelUpInformationMessage.ID;
        };
        CharacterLevelUpInformationMessage.prototype.reset = function() {
            this.name = "";
            this.id = 0;
        };
        CharacterLevelUpInformationMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        CharacterLevelUpInformationMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        CharacterLevelUpInformationMessage.prototype.serialize = function(output) {
            this.serializeAs_CharacterLevelUpInformationMessage(output);
        };
        CharacterLevelUpInformationMessage.prototype.deserialize = function(input) {
            this.deserializeAs_CharacterLevelUpInformationMessage(input);
        };
        CharacterLevelUpInformationMessage.prototype.serializeAs_CharacterLevelUpInformationMessage = function(output) {
            _super.prototype.serializeAs_CharacterLevelUpMessage.call(this, output);
            output.writeUTF(this.name);
            if (this.id < 0 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarLong(this.id);
        };
        CharacterLevelUpInformationMessage.prototype.deserializeAs_CharacterLevelUpInformationMessage = function(input) {
            _super.prototype.deserializeAs_CharacterLevelUpMessage.call(this, input);
            this.name = input.readUTF();
            this.id = input.readVarUhLong();
            if (this.id < 0 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element of CharacterLevelUpInformationMessage.id.");
            }
        };
        CharacterLevelUpInformationMessage.ID = 4037;
        return CharacterLevelUpInformationMessage;
    })(CharacterLevelUpMessage);
    Protocol.CharacterLevelUpInformationMessage = CharacterLevelUpInformationMessage;
    var CharacterStatsListMessage = (function(_super) {
        __extends(CharacterStatsListMessage, _super);

        function CharacterStatsListMessage() {
            this.stats = new CharacterCharacteristicsInformations();
            _super.call(this)
        }
        CharacterStatsListMessage.prototype.getMessageId = function() {
            return CharacterStatsListMessage.ID;
        };
        CharacterStatsListMessage.prototype.reset = function() {
            this.stats = new CharacterCharacteristicsInformations();
        };
        CharacterStatsListMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        CharacterStatsListMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        CharacterStatsListMessage.prototype.serialize = function(output) {
            this.serializeAs_CharacterStatsListMessage(output);
        };
        CharacterStatsListMessage.prototype.deserialize = function(input) {
            this.deserializeAs_CharacterStatsListMessage(input);
        };
        CharacterStatsListMessage.prototype.serializeAs_CharacterStatsListMessage = function(output) {
            this.stats.serializeAs_CharacterCharacteristicsInformations(output);
        };
        CharacterStatsListMessage.prototype.deserializeAs_CharacterStatsListMessage = function(input) {
            this.stats = new CharacterCharacteristicsInformations();
            this.stats.deserialize(input);
        };
        CharacterStatsListMessage.ID = 4663;
        return CharacterStatsListMessage;
    })(NetworkMessage);
    Protocol.CharacterStatsListMessage = CharacterStatsListMessage;
    var FighterStatsListMessage = (function(_super) {
        __extends(FighterStatsListMessage, _super);

        function FighterStatsListMessage() {
            this.stats = new CharacterCharacteristicsInformations();
            _super.call(this)
        }
        FighterStatsListMessage.prototype.getMessageId = function() {
            return FighterStatsListMessage.ID;
        };
        FighterStatsListMessage.prototype.reset = function() {
            this.stats = new CharacterCharacteristicsInformations();
        };
        FighterStatsListMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        FighterStatsListMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        FighterStatsListMessage.prototype.serialize = function(output) {
            this.serializeAs_FighterStatsListMessage(output);
        };
        FighterStatsListMessage.prototype.deserialize = function(input) {
            this.deserializeAs_FighterStatsListMessage(input);
        };
        FighterStatsListMessage.prototype.serializeAs_FighterStatsListMessage = function(output) {
            this.stats.serializeAs_CharacterCharacteristicsInformations(output);
        };
        FighterStatsListMessage.prototype.deserializeAs_FighterStatsListMessage = function(input) {
            this.stats = new CharacterCharacteristicsInformations();
            this.stats.deserialize(input);
        };
        FighterStatsListMessage.ID = 7728;
        return FighterStatsListMessage;
    })(NetworkMessage);
    Protocol.FighterStatsListMessage = FighterStatsListMessage;
    var LifePointsRegenBeginMessage = (function(_super) {
        __extends(LifePointsRegenBeginMessage, _super);

        function LifePointsRegenBeginMessage() {
            this.regenRate = 0;
            _super.call(this)
        }
        LifePointsRegenBeginMessage.prototype.getMessageId = function() {
            return LifePointsRegenBeginMessage.ID;
        };
        LifePointsRegenBeginMessage.prototype.reset = function() {
            this.regenRate = 0;
        };
        LifePointsRegenBeginMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        LifePointsRegenBeginMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        LifePointsRegenBeginMessage.prototype.serialize = function(output) {
            this.serializeAs_LifePointsRegenBeginMessage(output);
        };
        LifePointsRegenBeginMessage.prototype.deserialize = function(input) {
            this.deserializeAs_LifePointsRegenBeginMessage(input);
        };
        LifePointsRegenBeginMessage.prototype.serializeAs_LifePointsRegenBeginMessage = function(output) {
            if (this.regenRate < 0 || this.regenRate > 255) {
                throw new Error("Forbidden value (" + this.regenRate + ") on element regenRate.");
            }
            output.writeByte(this.regenRate);
        };
        LifePointsRegenBeginMessage.prototype.deserializeAs_LifePointsRegenBeginMessage = function(input) {
            this.regenRate = input.readUnsignedByte();
            if (this.regenRate < 0 || this.regenRate > 255) {
                throw new Error("Forbidden value (" + this.regenRate + ") on element of LifePointsRegenBeginMessage.regenRate.");
            }
        };
        LifePointsRegenBeginMessage.ID = 7338;
        return LifePointsRegenBeginMessage;
    })(NetworkMessage);
    Protocol.LifePointsRegenBeginMessage = LifePointsRegenBeginMessage;
    var UpdateLifePointsMessage = (function(_super) {
        __extends(UpdateLifePointsMessage, _super);

        function UpdateLifePointsMessage() {
            this.lifePoints = 0;
            this.maxLifePoints = 0;
            _super.call(this)
        }
        UpdateLifePointsMessage.prototype.getMessageId = function() {
            return UpdateLifePointsMessage.ID;
        };
        UpdateLifePointsMessage.prototype.reset = function() {
            this.lifePoints = 0;
            this.maxLifePoints = 0;
        };
        UpdateLifePointsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        UpdateLifePointsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        UpdateLifePointsMessage.prototype.serialize = function(output) {
            this.serializeAs_UpdateLifePointsMessage(output);
        };
        UpdateLifePointsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_UpdateLifePointsMessage(input);
        };
        UpdateLifePointsMessage.prototype.serializeAs_UpdateLifePointsMessage = function(output) {
            if (this.lifePoints < 0) {
                throw new Error("Forbidden value (" + this.lifePoints + ") on element lifePoints.");
            }
            output.writeVarInt(this.lifePoints);
            if (this.maxLifePoints < 0) {
                throw new Error("Forbidden value (" + this.maxLifePoints + ") on element maxLifePoints.");
            }
            output.writeVarInt(this.maxLifePoints);
        };
        UpdateLifePointsMessage.prototype.deserializeAs_UpdateLifePointsMessage = function(input) {
            this.lifePoints = input.readVarUhInt();
            if (this.lifePoints < 0) {
                throw new Error("Forbidden value (" + this.lifePoints + ") on element of UpdateLifePointsMessage.lifePoints.");
            }
            this.maxLifePoints = input.readVarUhInt();
            if (this.maxLifePoints < 0) {
                throw new Error("Forbidden value (" + this.maxLifePoints + ") on element of UpdateLifePointsMessage.maxLifePoints.");
            }
        };
        UpdateLifePointsMessage.ID = 2752;
        return UpdateLifePointsMessage;
    })(NetworkMessage);
    Protocol.UpdateLifePointsMessage = UpdateLifePointsMessage;
    var LifePointsRegenEndMessage = (function(_super) {
        __extends(LifePointsRegenEndMessage, _super);

        function LifePointsRegenEndMessage() {
            this.lifePointsGained = 0;
            _super.call(this)
        }
        LifePointsRegenEndMessage.prototype.getMessageId = function() {
            return LifePointsRegenEndMessage.ID;
        };
        LifePointsRegenEndMessage.prototype.reset = function() {
            this.lifePointsGained = 0;
        };
        LifePointsRegenEndMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        LifePointsRegenEndMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        LifePointsRegenEndMessage.prototype.serialize = function(output) {
            this.serializeAs_LifePointsRegenEndMessage(output);
        };
        LifePointsRegenEndMessage.prototype.deserialize = function(input) {
            this.deserializeAs_LifePointsRegenEndMessage(input);
        };
        LifePointsRegenEndMessage.prototype.serializeAs_LifePointsRegenEndMessage = function(output) {
            _super.prototype.serializeAs_UpdateLifePointsMessage.call(this, output);
            if (this.lifePointsGained < 0) {
                throw new Error("Forbidden value (" + this.lifePointsGained + ") on element lifePointsGained.");
            }
            output.writeVarInt(this.lifePointsGained);
        };
        LifePointsRegenEndMessage.prototype.deserializeAs_LifePointsRegenEndMessage = function(input) {
            _super.prototype.deserializeAs_UpdateLifePointsMessage.call(this, input);
            this.lifePointsGained = input.readVarUhInt();
            if (this.lifePointsGained < 0) {
                throw new Error("Forbidden value (" + this.lifePointsGained + ") on element of LifePointsRegenEndMessage.lifePointsGained.");
            }
        };
        LifePointsRegenEndMessage.ID = 1338;
        return LifePointsRegenEndMessage;
    })(UpdateLifePointsMessage);
    Protocol.LifePointsRegenEndMessage = LifePointsRegenEndMessage;
    var ResetCharacterStatsRequestMessage = (function(_super) {
        __extends(ResetCharacterStatsRequestMessage, _super);

        function ResetCharacterStatsRequestMessage() {

            _super.call(this)
        }
        ResetCharacterStatsRequestMessage.prototype.getMessageId = function() {
            return ResetCharacterStatsRequestMessage.ID;
        };
        ResetCharacterStatsRequestMessage.prototype.reset = function() {

        };
        ResetCharacterStatsRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ResetCharacterStatsRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ResetCharacterStatsRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_ResetCharacterStatsRequestMessage(output);
        };
        ResetCharacterStatsRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ResetCharacterStatsRequestMessage(input);
        };
        ResetCharacterStatsRequestMessage.prototype.serializeAs_ResetCharacterStatsRequestMessage = function(output) {

        };
        ResetCharacterStatsRequestMessage.prototype.deserializeAs_ResetCharacterStatsRequestMessage = function(input) {

        };
        ResetCharacterStatsRequestMessage.ID = 7828;
        return ResetCharacterStatsRequestMessage;
    })(NetworkMessage);
    Protocol.ResetCharacterStatsRequestMessage = ResetCharacterStatsRequestMessage;
    var PlayerStatusUpdateErrorMessage = (function(_super) {
        __extends(PlayerStatusUpdateErrorMessage, _super);

        function PlayerStatusUpdateErrorMessage() {

            _super.call(this)
        }
        PlayerStatusUpdateErrorMessage.prototype.getMessageId = function() {
            return PlayerStatusUpdateErrorMessage.ID;
        };
        PlayerStatusUpdateErrorMessage.prototype.reset = function() {

        };
        PlayerStatusUpdateErrorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PlayerStatusUpdateErrorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PlayerStatusUpdateErrorMessage.prototype.serialize = function(output) {
            this.serializeAs_PlayerStatusUpdateErrorMessage(output);
        };
        PlayerStatusUpdateErrorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PlayerStatusUpdateErrorMessage(input);
        };
        PlayerStatusUpdateErrorMessage.prototype.serializeAs_PlayerStatusUpdateErrorMessage = function(output) {

        };
        PlayerStatusUpdateErrorMessage.prototype.deserializeAs_PlayerStatusUpdateErrorMessage = function(input) {

        };
        PlayerStatusUpdateErrorMessage.ID = 9276;
        return PlayerStatusUpdateErrorMessage;
    })(NetworkMessage);
    Protocol.PlayerStatusUpdateErrorMessage = PlayerStatusUpdateErrorMessage;
    var PlayerStatusUpdateMessage = (function(_super) {
        __extends(PlayerStatusUpdateMessage, _super);

        function PlayerStatusUpdateMessage() {
            this.accountId = 0;
            this.playerId = 0;
            this.status = new PlayerStatus();
            _super.call(this)
        }
        PlayerStatusUpdateMessage.prototype.getMessageId = function() {
            return PlayerStatusUpdateMessage.ID;
        };
        PlayerStatusUpdateMessage.prototype.reset = function() {
            this.accountId = 0;
            this.playerId = 0;
            this.status = new PlayerStatus();
        };
        PlayerStatusUpdateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PlayerStatusUpdateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PlayerStatusUpdateMessage.prototype.serialize = function(output) {
            this.serializeAs_PlayerStatusUpdateMessage(output);
        };
        PlayerStatusUpdateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PlayerStatusUpdateMessage(input);
        };
        PlayerStatusUpdateMessage.prototype.serializeAs_PlayerStatusUpdateMessage = function(output) {
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element accountId.");
            }
            output.writeInt(this.accountId);
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
            output.writeShort(this.status.getTypeId());
            this.status.serialize(output);
        };
        PlayerStatusUpdateMessage.prototype.deserializeAs_PlayerStatusUpdateMessage = function(input) {
            this.accountId = input.readInt();
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element of PlayerStatusUpdateMessage.accountId.");
            }
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of PlayerStatusUpdateMessage.playerId.");
            }
            var _id3 = input.readUnsignedShort();
            this.status = ProtocolTypeManager.getInstance(PlayerStatus, _id3);
            this.status.deserialize(input);
        };
        PlayerStatusUpdateMessage.ID = 9099;
        return PlayerStatusUpdateMessage;
    })(NetworkMessage);
    Protocol.PlayerStatusUpdateMessage = PlayerStatusUpdateMessage;
    var PlayerStatusUpdateRequestMessage = (function(_super) {
        __extends(PlayerStatusUpdateRequestMessage, _super);

        function PlayerStatusUpdateRequestMessage() {
            this.status = new PlayerStatus();
            _super.call(this)
        }
        PlayerStatusUpdateRequestMessage.prototype.getMessageId = function() {
            return PlayerStatusUpdateRequestMessage.ID;
        };
        PlayerStatusUpdateRequestMessage.prototype.reset = function() {
            this.status = new PlayerStatus();
        };
        PlayerStatusUpdateRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PlayerStatusUpdateRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PlayerStatusUpdateRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_PlayerStatusUpdateRequestMessage(output);
        };
        PlayerStatusUpdateRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PlayerStatusUpdateRequestMessage(input);
        };
        PlayerStatusUpdateRequestMessage.prototype.serializeAs_PlayerStatusUpdateRequestMessage = function(output) {
            output.writeShort(this.status.getTypeId());
            this.status.serialize(output);
        };
        PlayerStatusUpdateRequestMessage.prototype.deserializeAs_PlayerStatusUpdateRequestMessage = function(input) {
            var _id1 = input.readUnsignedShort();
            this.status = ProtocolTypeManager.getInstance(PlayerStatus, _id1);
            this.status.deserialize(input);
        };
        PlayerStatusUpdateRequestMessage.ID = 5133;
        return PlayerStatusUpdateRequestMessage;
    })(NetworkMessage);
    Protocol.PlayerStatusUpdateRequestMessage = PlayerStatusUpdateRequestMessage;
    var ChannelEnablingChangeMessage = (function(_super) {
        __extends(ChannelEnablingChangeMessage, _super);

        function ChannelEnablingChangeMessage() {
            this.channel = 0;
            this.enable = false;
            _super.call(this)
        }
        ChannelEnablingChangeMessage.prototype.getMessageId = function() {
            return ChannelEnablingChangeMessage.ID;
        };
        ChannelEnablingChangeMessage.prototype.reset = function() {
            this.channel = 0;
            this.enable = false;
        };
        ChannelEnablingChangeMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ChannelEnablingChangeMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ChannelEnablingChangeMessage.prototype.serialize = function(output) {
            this.serializeAs_ChannelEnablingChangeMessage(output);
        };
        ChannelEnablingChangeMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ChannelEnablingChangeMessage(input);
        };
        ChannelEnablingChangeMessage.prototype.serializeAs_ChannelEnablingChangeMessage = function(output) {
            output.writeByte(this.channel);
            output.writeBoolean(this.enable);
        };
        ChannelEnablingChangeMessage.prototype.deserializeAs_ChannelEnablingChangeMessage = function(input) {
            this.channel = input.readByte();
            if (this.channel < 0) {
                throw new Error("Forbidden value (" + this.channel + ") on element of ChannelEnablingChangeMessage.channel.");
            }
            this.enable = input.readBoolean();
        };
        ChannelEnablingChangeMessage.ID = 1455;
        return ChannelEnablingChangeMessage;
    })(NetworkMessage);
    Protocol.ChannelEnablingChangeMessage = ChannelEnablingChangeMessage;
    var ChannelEnablingMessage = (function(_super) {
        __extends(ChannelEnablingMessage, _super);

        function ChannelEnablingMessage() {
            this.channel = 0;
            this.enable = false;
            _super.call(this)
        }
        ChannelEnablingMessage.prototype.getMessageId = function() {
            return ChannelEnablingMessage.ID;
        };
        ChannelEnablingMessage.prototype.reset = function() {
            this.channel = 0;
            this.enable = false;
        };
        ChannelEnablingMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ChannelEnablingMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ChannelEnablingMessage.prototype.serialize = function(output) {
            this.serializeAs_ChannelEnablingMessage(output);
        };
        ChannelEnablingMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ChannelEnablingMessage(input);
        };
        ChannelEnablingMessage.prototype.serializeAs_ChannelEnablingMessage = function(output) {
            output.writeByte(this.channel);
            output.writeBoolean(this.enable);
        };
        ChannelEnablingMessage.prototype.deserializeAs_ChannelEnablingMessage = function(input) {
            this.channel = input.readByte();
            if (this.channel < 0) {
                throw new Error("Forbidden value (" + this.channel + ") on element of ChannelEnablingMessage.channel.");
            }
            this.enable = input.readBoolean();
        };
        ChannelEnablingMessage.ID = 1902;
        return ChannelEnablingMessage;
    })(NetworkMessage);
    Protocol.ChannelEnablingMessage = ChannelEnablingMessage;
    var EnabledChannelsMessage = (function(_super) {
        __extends(EnabledChannelsMessage, _super);

        function EnabledChannelsMessage() {
            this.channels = [];
            this.disallowed = [];
            _super.call(this)
        }
        EnabledChannelsMessage.prototype.getMessageId = function() {
            return EnabledChannelsMessage.ID;
        };
        EnabledChannelsMessage.prototype.reset = function() {
            this.channels = [];
            this.disallowed = [];
        };
        EnabledChannelsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        EnabledChannelsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        EnabledChannelsMessage.prototype.serialize = function(output) {
            this.serializeAs_EnabledChannelsMessage(output);
        };
        EnabledChannelsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_EnabledChannelsMessage(input);
        };
        EnabledChannelsMessage.prototype.serializeAs_EnabledChannelsMessage = function(output) {
            output.writeShort(this.channels.length);
            for (var _i1 = 0; _i1 < this.channels.length; _i1++) {
                output.writeByte(this.channels[_i1]);
            }
            output.writeShort(this.disallowed.length);
            for (var _i2 = 0; _i2 < this.disallowed.length; _i2++) {
                output.writeByte(this.disallowed[_i2]);
            }
        };
        EnabledChannelsMessage.prototype.deserializeAs_EnabledChannelsMessage = function(input) {
            var _val1 = 0;
            var _val2 = 0;
            var _channelsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _channelsLen; _i1++) {
                _val1 = input.readByte();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of channels.");
                }
                this.channels.push(_val1);
            }
            var _disallowedLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _disallowedLen; _i2++) {
                _val2 = input.readByte();
                if (_val2 < 0) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of disallowed.");
                }
                this.disallowed.push(_val2);
            }
        };
        EnabledChannelsMessage.ID = 1211;
        return EnabledChannelsMessage;
    })(NetworkMessage);
    Protocol.EnabledChannelsMessage = EnabledChannelsMessage;
    var ChatAbstractClientMessage = (function(_super) {
        __extends(ChatAbstractClientMessage, _super);

        function ChatAbstractClientMessage() {
            this.content = "";
            _super.call(this)
        }
        ChatAbstractClientMessage.prototype.getMessageId = function() {
            return ChatAbstractClientMessage.ID;
        };
        ChatAbstractClientMessage.prototype.reset = function() {
            this.content = "";
        };
        ChatAbstractClientMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ChatAbstractClientMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ChatAbstractClientMessage.prototype.serialize = function(output) {
            this.serializeAs_ChatAbstractClientMessage(output);
        };
        ChatAbstractClientMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ChatAbstractClientMessage(input);
        };
        ChatAbstractClientMessage.prototype.serializeAs_ChatAbstractClientMessage = function(output) {
            output.writeUTF(this.content);
        };
        ChatAbstractClientMessage.prototype.deserializeAs_ChatAbstractClientMessage = function(input) {
            this.content = input.readUTF();
        };
        ChatAbstractClientMessage.ID = 7045;
        return ChatAbstractClientMessage;
    })(NetworkMessage);
    Protocol.ChatAbstractClientMessage = ChatAbstractClientMessage;
    var ChatAbstractServerMessage = (function(_super) {
        __extends(ChatAbstractServerMessage, _super);

        function ChatAbstractServerMessage() {
            this.channel = 0;
            this.content = "";
            this.timestamp = 0;
            this.fingerprint = "";
            _super.call(this)
        }
        ChatAbstractServerMessage.prototype.getMessageId = function() {
            return ChatAbstractServerMessage.ID;
        };
        ChatAbstractServerMessage.prototype.reset = function() {
            this.channel = 0;
            this.content = "";
            this.timestamp = 0;
            this.fingerprint = "";
        };
        ChatAbstractServerMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ChatAbstractServerMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ChatAbstractServerMessage.prototype.serialize = function(output) {
            this.serializeAs_ChatAbstractServerMessage(output);
        };
        ChatAbstractServerMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ChatAbstractServerMessage(input);
        };
        ChatAbstractServerMessage.prototype.serializeAs_ChatAbstractServerMessage = function(output) {
            output.writeByte(this.channel);
            output.writeUTF(this.content);
            if (this.timestamp < 0) {
                throw new Error("Forbidden value (" + this.timestamp + ") on element timestamp.");
            }
            output.writeInt(this.timestamp);
            output.writeUTF(this.fingerprint);
        };
        ChatAbstractServerMessage.prototype.deserializeAs_ChatAbstractServerMessage = function(input) {
            this.channel = input.readByte();
            if (this.channel < 0) {
                throw new Error("Forbidden value (" + this.channel + ") on element of ChatAbstractServerMessage.channel.");
            }
            this.content = input.readUTF();
            this.timestamp = input.readInt();
            if (this.timestamp < 0) {
                throw new Error("Forbidden value (" + this.timestamp + ") on element of ChatAbstractServerMessage.timestamp.");
            }
            this.fingerprint = input.readUTF();
        };
        ChatAbstractServerMessage.ID = 6850;
        return ChatAbstractServerMessage;
    })(NetworkMessage);
    Protocol.ChatAbstractServerMessage = ChatAbstractServerMessage;
    var ChatServerMessage = (function(_super) {
        __extends(ChatServerMessage, _super);

        function ChatServerMessage() {
            this.senderId = 0;
            this.senderName = "";
            this.prefix = "";
            this.senderAccountId = 0;
            _super.call(this)
        }
        ChatServerMessage.prototype.getMessageId = function() {
            return ChatServerMessage.ID;
        };
        ChatServerMessage.prototype.reset = function() {
            this.senderId = 0;
            this.senderName = "";
            this.prefix = "";
            this.senderAccountId = 0;
        };
        ChatServerMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ChatServerMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ChatServerMessage.prototype.serialize = function(output) {
            this.serializeAs_ChatServerMessage(output);
        };
        ChatServerMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ChatServerMessage(input);
        };
        ChatServerMessage.prototype.serializeAs_ChatServerMessage = function(output) {
            _super.prototype.serializeAs_ChatAbstractServerMessage.call(this, output);
            if (this.senderId < -9007199254740990 || this.senderId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.senderId + ") on element senderId.");
            }
            output.writeDouble(this.senderId);
            output.writeUTF(this.senderName);
            output.writeUTF(this.prefix);
            if (this.senderAccountId < 0) {
                throw new Error("Forbidden value (" + this.senderAccountId + ") on element senderAccountId.");
            }
            output.writeInt(this.senderAccountId);
        };
        ChatServerMessage.prototype.deserializeAs_ChatServerMessage = function(input) {
            _super.prototype.deserializeAs_ChatAbstractServerMessage.call(this, input);
            this.senderId = input.readDouble();
            if (this.senderId < -9007199254740990 || this.senderId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.senderId + ") on element of ChatServerMessage.senderId.");
            }
            this.senderName = input.readUTF();
            this.prefix = input.readUTF();
            this.senderAccountId = input.readInt();
            if (this.senderAccountId < 0) {
                throw new Error("Forbidden value (" + this.senderAccountId + ") on element of ChatServerMessage.senderAccountId.");
            }
        };
        ChatServerMessage.ID = 5509;
        return ChatServerMessage;
    })(ChatAbstractServerMessage);
    Protocol.ChatServerMessage = ChatServerMessage;
    var ChatAdminServerMessage = (function(_super) {
        __extends(ChatAdminServerMessage, _super);

        function ChatAdminServerMessage() {

            _super.call(this)
        }
        ChatAdminServerMessage.prototype.getMessageId = function() {
            return ChatAdminServerMessage.ID;
        };
        ChatAdminServerMessage.prototype.reset = function() {

        };
        ChatAdminServerMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ChatAdminServerMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ChatAdminServerMessage.prototype.serialize = function(output) {
            this.serializeAs_ChatAdminServerMessage(output);
        };
        ChatAdminServerMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ChatAdminServerMessage(input);
        };
        ChatAdminServerMessage.prototype.serializeAs_ChatAdminServerMessage = function(output) {
            _super.prototype.serializeAs_ChatServerMessage.call(this, output);
        };
        ChatAdminServerMessage.prototype.deserializeAs_ChatAdminServerMessage = function(input) {
            _super.prototype.deserializeAs_ChatServerMessage.call(this, input);
        };
        ChatAdminServerMessage.ID = 5240;
        return ChatAdminServerMessage;
    })(ChatServerMessage);
    Protocol.ChatAdminServerMessage = ChatAdminServerMessage;
    var ChatClientMultiMessage = (function(_super) {
        __extends(ChatClientMultiMessage, _super);

        function ChatClientMultiMessage() {
            this.channel = 0;
            _super.call(this)
        }
        ChatClientMultiMessage.prototype.getMessageId = function() {
            return ChatClientMultiMessage.ID;
        };
        ChatClientMultiMessage.prototype.reset = function() {
            this.channel = 0;
        };
        ChatClientMultiMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ChatClientMultiMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ChatClientMultiMessage.prototype.serialize = function(output) {
            this.serializeAs_ChatClientMultiMessage(output);
        };
        ChatClientMultiMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ChatClientMultiMessage(input);
        };
        ChatClientMultiMessage.prototype.serializeAs_ChatClientMultiMessage = function(output) {
            _super.prototype.serializeAs_ChatAbstractClientMessage.call(this, output);
            output.writeByte(this.channel);
        };
        ChatClientMultiMessage.prototype.deserializeAs_ChatClientMultiMessage = function(input) {
            _super.prototype.deserializeAs_ChatAbstractClientMessage.call(this, input);
            this.channel = input.readByte();
            if (this.channel < 0) {
                throw new Error("Forbidden value (" + this.channel + ") on element of ChatClientMultiMessage.channel.");
            }
        };
        ChatClientMultiMessage.ID = 3674;
        return ChatClientMultiMessage;
    })(ChatAbstractClientMessage);
    Protocol.ChatClientMultiMessage = ChatClientMultiMessage;
    var ChatClientMultiWithObjectMessage = (function(_super) {
        __extends(ChatClientMultiWithObjectMessage, _super);

        function ChatClientMultiWithObjectMessage() {
            this.objects = [];
            _super.call(this)
        }
        ChatClientMultiWithObjectMessage.prototype.getMessageId = function() {
            return ChatClientMultiWithObjectMessage.ID;
        };
        ChatClientMultiWithObjectMessage.prototype.reset = function() {
            this.objects = [];
        };
        ChatClientMultiWithObjectMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ChatClientMultiWithObjectMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ChatClientMultiWithObjectMessage.prototype.serialize = function(output) {
            this.serializeAs_ChatClientMultiWithObjectMessage(output);
        };
        ChatClientMultiWithObjectMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ChatClientMultiWithObjectMessage(input);
        };
        ChatClientMultiWithObjectMessage.prototype.serializeAs_ChatClientMultiWithObjectMessage = function(output) {
            _super.prototype.serializeAs_ChatClientMultiMessage.call(this, output);
            output.writeShort(this.objects.length);
            for (var _i1 = 0; _i1 < this.objects.length; _i1++) {
                (this.objects[_i1]).serializeAs_ObjectItem(output);
            }
        };
        ChatClientMultiWithObjectMessage.prototype.deserializeAs_ChatClientMultiWithObjectMessage = function(input) {
            var _item1 = null;
            _super.prototype.deserializeAs_ChatClientMultiMessage.call(this, input);
            var _objectsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _objectsLen; _i1++) {
                _item1 = new ObjectItem();
                _item1.deserialize(input);
                this.objects.push(_item1);
            }
        };
        ChatClientMultiWithObjectMessage.ID = 5275;
        return ChatClientMultiWithObjectMessage;
    })(ChatClientMultiMessage);
    Protocol.ChatClientMultiWithObjectMessage = ChatClientMultiWithObjectMessage;
    var ChatClientPrivateMessage = (function(_super) {
        __extends(ChatClientPrivateMessage, _super);

        function ChatClientPrivateMessage() {
            this.receiver = "";
            _super.call(this)
        }
        ChatClientPrivateMessage.prototype.getMessageId = function() {
            return ChatClientPrivateMessage.ID;
        };
        ChatClientPrivateMessage.prototype.reset = function() {
            this.receiver = "";
        };
        ChatClientPrivateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ChatClientPrivateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ChatClientPrivateMessage.prototype.serialize = function(output) {
            this.serializeAs_ChatClientPrivateMessage(output);
        };
        ChatClientPrivateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ChatClientPrivateMessage(input);
        };
        ChatClientPrivateMessage.prototype.serializeAs_ChatClientPrivateMessage = function(output) {
            _super.prototype.serializeAs_ChatAbstractClientMessage.call(this, output);
            output.writeUTF(this.receiver);
        };
        ChatClientPrivateMessage.prototype.deserializeAs_ChatClientPrivateMessage = function(input) {
            _super.prototype.deserializeAs_ChatAbstractClientMessage.call(this, input);
            this.receiver = input.readUTF();
        };
        ChatClientPrivateMessage.ID = 6307;
        return ChatClientPrivateMessage;
    })(ChatAbstractClientMessage);
    Protocol.ChatClientPrivateMessage = ChatClientPrivateMessage;
    var ChatClientPrivateWithObjectMessage = (function(_super) {
        __extends(ChatClientPrivateWithObjectMessage, _super);

        function ChatClientPrivateWithObjectMessage() {
            this.objects = [];
            _super.call(this)
        }
        ChatClientPrivateWithObjectMessage.prototype.getMessageId = function() {
            return ChatClientPrivateWithObjectMessage.ID;
        };
        ChatClientPrivateWithObjectMessage.prototype.reset = function() {
            this.objects = [];
        };
        ChatClientPrivateWithObjectMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ChatClientPrivateWithObjectMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ChatClientPrivateWithObjectMessage.prototype.serialize = function(output) {
            this.serializeAs_ChatClientPrivateWithObjectMessage(output);
        };
        ChatClientPrivateWithObjectMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ChatClientPrivateWithObjectMessage(input);
        };
        ChatClientPrivateWithObjectMessage.prototype.serializeAs_ChatClientPrivateWithObjectMessage = function(output) {
            _super.prototype.serializeAs_ChatClientPrivateMessage.call(this, output);
            output.writeShort(this.objects.length);
            for (var _i1 = 0; _i1 < this.objects.length; _i1++) {
                (this.objects[_i1]).serializeAs_ObjectItem(output);
            }
        };
        ChatClientPrivateWithObjectMessage.prototype.deserializeAs_ChatClientPrivateWithObjectMessage = function(input) {
            var _item1 = null;
            _super.prototype.deserializeAs_ChatClientPrivateMessage.call(this, input);
            var _objectsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _objectsLen; _i1++) {
                _item1 = new ObjectItem();
                _item1.deserialize(input);
                this.objects.push(_item1);
            }
        };
        ChatClientPrivateWithObjectMessage.ID = 5903;
        return ChatClientPrivateWithObjectMessage;
    })(ChatClientPrivateMessage);
    Protocol.ChatClientPrivateWithObjectMessage = ChatClientPrivateWithObjectMessage;
    var ChatErrorMessage = (function(_super) {
        __extends(ChatErrorMessage, _super);

        function ChatErrorMessage() {
            this.reason = 0;
            _super.call(this)
        }
        ChatErrorMessage.prototype.getMessageId = function() {
            return ChatErrorMessage.ID;
        };
        ChatErrorMessage.prototype.reset = function() {
            this.reason = 0;
        };
        ChatErrorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ChatErrorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ChatErrorMessage.prototype.serialize = function(output) {
            this.serializeAs_ChatErrorMessage(output);
        };
        ChatErrorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ChatErrorMessage(input);
        };
        ChatErrorMessage.prototype.serializeAs_ChatErrorMessage = function(output) {
            output.writeByte(this.reason);
        };
        ChatErrorMessage.prototype.deserializeAs_ChatErrorMessage = function(input) {
            this.reason = input.readByte();
            if (this.reason < 0) {
                throw new Error("Forbidden value (" + this.reason + ") on element of ChatErrorMessage.reason.");
            }
        };
        ChatErrorMessage.ID = 1161;
        return ChatErrorMessage;
    })(NetworkMessage);
    Protocol.ChatErrorMessage = ChatErrorMessage;
    var ChatServerCopyMessage = (function(_super) {
        __extends(ChatServerCopyMessage, _super);

        function ChatServerCopyMessage() {
            this.receiverId = 0;
            this.receiverName = "";
            _super.call(this)
        }
        ChatServerCopyMessage.prototype.getMessageId = function() {
            return ChatServerCopyMessage.ID;
        };
        ChatServerCopyMessage.prototype.reset = function() {
            this.receiverId = 0;
            this.receiverName = "";
        };
        ChatServerCopyMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ChatServerCopyMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ChatServerCopyMessage.prototype.serialize = function(output) {
            this.serializeAs_ChatServerCopyMessage(output);
        };
        ChatServerCopyMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ChatServerCopyMessage(input);
        };
        ChatServerCopyMessage.prototype.serializeAs_ChatServerCopyMessage = function(output) {
            _super.prototype.serializeAs_ChatAbstractServerMessage.call(this, output);
            if (this.receiverId < 0 || this.receiverId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.receiverId + ") on element receiverId.");
            }
            output.writeVarLong(this.receiverId);
            output.writeUTF(this.receiverName);
        };
        ChatServerCopyMessage.prototype.deserializeAs_ChatServerCopyMessage = function(input) {
            _super.prototype.deserializeAs_ChatAbstractServerMessage.call(this, input);
            this.receiverId = input.readVarUhLong();
            if (this.receiverId < 0 || this.receiverId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.receiverId + ") on element of ChatServerCopyMessage.receiverId.");
            }
            this.receiverName = input.readUTF();
        };
        ChatServerCopyMessage.ID = 9502;
        return ChatServerCopyMessage;
    })(ChatAbstractServerMessage);
    Protocol.ChatServerCopyMessage = ChatServerCopyMessage;
    var ChatServerCopyWithObjectMessage = (function(_super) {
        __extends(ChatServerCopyWithObjectMessage, _super);

        function ChatServerCopyWithObjectMessage() {
            this.objects = [];
            _super.call(this)
        }
        ChatServerCopyWithObjectMessage.prototype.getMessageId = function() {
            return ChatServerCopyWithObjectMessage.ID;
        };
        ChatServerCopyWithObjectMessage.prototype.reset = function() {
            this.objects = [];
        };
        ChatServerCopyWithObjectMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ChatServerCopyWithObjectMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ChatServerCopyWithObjectMessage.prototype.serialize = function(output) {
            this.serializeAs_ChatServerCopyWithObjectMessage(output);
        };
        ChatServerCopyWithObjectMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ChatServerCopyWithObjectMessage(input);
        };
        ChatServerCopyWithObjectMessage.prototype.serializeAs_ChatServerCopyWithObjectMessage = function(output) {
            _super.prototype.serializeAs_ChatServerCopyMessage.call(this, output);
            output.writeShort(this.objects.length);
            for (var _i1 = 0; _i1 < this.objects.length; _i1++) {
                (this.objects[_i1]).serializeAs_ObjectItem(output);
            }
        };
        ChatServerCopyWithObjectMessage.prototype.deserializeAs_ChatServerCopyWithObjectMessage = function(input) {
            var _item1 = null;
            _super.prototype.deserializeAs_ChatServerCopyMessage.call(this, input);
            var _objectsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _objectsLen; _i1++) {
                _item1 = new ObjectItem();
                _item1.deserialize(input);
                this.objects.push(_item1);
            }
        };
        ChatServerCopyWithObjectMessage.ID = 7669;
        return ChatServerCopyWithObjectMessage;
    })(ChatServerCopyMessage);
    Protocol.ChatServerCopyWithObjectMessage = ChatServerCopyWithObjectMessage;
    var ChatServerWithObjectMessage = (function(_super) {
        __extends(ChatServerWithObjectMessage, _super);

        function ChatServerWithObjectMessage() {
            this.objects = [];
            _super.call(this)
        }
        ChatServerWithObjectMessage.prototype.getMessageId = function() {
            return ChatServerWithObjectMessage.ID;
        };
        ChatServerWithObjectMessage.prototype.reset = function() {
            this.objects = [];
        };
        ChatServerWithObjectMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ChatServerWithObjectMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ChatServerWithObjectMessage.prototype.serialize = function(output) {
            this.serializeAs_ChatServerWithObjectMessage(output);
        };
        ChatServerWithObjectMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ChatServerWithObjectMessage(input);
        };
        ChatServerWithObjectMessage.prototype.serializeAs_ChatServerWithObjectMessage = function(output) {
            _super.prototype.serializeAs_ChatServerMessage.call(this, output);
            output.writeShort(this.objects.length);
            for (var _i1 = 0; _i1 < this.objects.length; _i1++) {
                (this.objects[_i1]).serializeAs_ObjectItem(output);
            }
        };
        ChatServerWithObjectMessage.prototype.deserializeAs_ChatServerWithObjectMessage = function(input) {
            var _item1 = null;
            _super.prototype.deserializeAs_ChatServerMessage.call(this, input);
            var _objectsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _objectsLen; _i1++) {
                _item1 = new ObjectItem();
                _item1.deserialize(input);
                this.objects.push(_item1);
            }
        };
        ChatServerWithObjectMessage.ID = 1344;
        return ChatServerWithObjectMessage;
    })(ChatServerMessage);
    Protocol.ChatServerWithObjectMessage = ChatServerWithObjectMessage;
    var ChatCommunityChannelCommunityMessage = (function(_super) {
        __extends(ChatCommunityChannelCommunityMessage, _super);

        function ChatCommunityChannelCommunityMessage() {
            this.communityId = 0;
            _super.call(this)
        }
        ChatCommunityChannelCommunityMessage.prototype.getMessageId = function() {
            return ChatCommunityChannelCommunityMessage.ID;
        };
        ChatCommunityChannelCommunityMessage.prototype.reset = function() {
            this.communityId = 0;
        };
        ChatCommunityChannelCommunityMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ChatCommunityChannelCommunityMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ChatCommunityChannelCommunityMessage.prototype.serialize = function(output) {
            this.serializeAs_ChatCommunityChannelCommunityMessage(output);
        };
        ChatCommunityChannelCommunityMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ChatCommunityChannelCommunityMessage(input);
        };
        ChatCommunityChannelCommunityMessage.prototype.serializeAs_ChatCommunityChannelCommunityMessage = function(output) {
            output.writeShort(this.communityId);
        };
        ChatCommunityChannelCommunityMessage.prototype.deserializeAs_ChatCommunityChannelCommunityMessage = function(input) {
            this.communityId = input.readShort();
        };
        ChatCommunityChannelCommunityMessage.ID = 5438;
        return ChatCommunityChannelCommunityMessage;
    })(NetworkMessage);
    Protocol.ChatCommunityChannelCommunityMessage = ChatCommunityChannelCommunityMessage;
    var ChatCommunityChannelSetCommunityRequestMessage = (function(_super) {
        __extends(ChatCommunityChannelSetCommunityRequestMessage, _super);

        function ChatCommunityChannelSetCommunityRequestMessage() {
            this.communityId = 0;
            _super.call(this)
        }
        ChatCommunityChannelSetCommunityRequestMessage.prototype.getMessageId = function() {
            return ChatCommunityChannelSetCommunityRequestMessage.ID;
        };
        ChatCommunityChannelSetCommunityRequestMessage.prototype.reset = function() {
            this.communityId = 0;
        };
        ChatCommunityChannelSetCommunityRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ChatCommunityChannelSetCommunityRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ChatCommunityChannelSetCommunityRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_ChatCommunityChannelSetCommunityRequestMessage(output);
        };
        ChatCommunityChannelSetCommunityRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ChatCommunityChannelSetCommunityRequestMessage(input);
        };
        ChatCommunityChannelSetCommunityRequestMessage.prototype.serializeAs_ChatCommunityChannelSetCommunityRequestMessage = function(output) {
            output.writeShort(this.communityId);
        };
        ChatCommunityChannelSetCommunityRequestMessage.prototype.deserializeAs_ChatCommunityChannelSetCommunityRequestMessage = function(input) {
            this.communityId = input.readShort();
        };
        ChatCommunityChannelSetCommunityRequestMessage.ID = 43;
        return ChatCommunityChannelSetCommunityRequestMessage;
    })(NetworkMessage);
    Protocol.ChatCommunityChannelSetCommunityRequestMessage = ChatCommunityChannelSetCommunityRequestMessage;
    var ChatSmileyExtraPackListMessage = (function(_super) {
        __extends(ChatSmileyExtraPackListMessage, _super);

        function ChatSmileyExtraPackListMessage() {
            this.packIds = [];
            _super.call(this)
        }
        ChatSmileyExtraPackListMessage.prototype.getMessageId = function() {
            return ChatSmileyExtraPackListMessage.ID;
        };
        ChatSmileyExtraPackListMessage.prototype.reset = function() {
            this.packIds = [];
        };
        ChatSmileyExtraPackListMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ChatSmileyExtraPackListMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ChatSmileyExtraPackListMessage.prototype.serialize = function(output) {
            this.serializeAs_ChatSmileyExtraPackListMessage(output);
        };
        ChatSmileyExtraPackListMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ChatSmileyExtraPackListMessage(input);
        };
        ChatSmileyExtraPackListMessage.prototype.serializeAs_ChatSmileyExtraPackListMessage = function(output) {
            output.writeShort(this.packIds.length);
            for (var _i1 = 0; _i1 < this.packIds.length; _i1++) {
                if (this.packIds[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.packIds[_i1] + ") on element 1 (starting at 1) of packIds.");
                }
                output.writeByte(this.packIds[_i1]);
            }
        };
        ChatSmileyExtraPackListMessage.prototype.deserializeAs_ChatSmileyExtraPackListMessage = function(input) {
            var _val1 = 0;
            var _packIdsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _packIdsLen; _i1++) {
                _val1 = input.readByte();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of packIds.");
                }
                this.packIds.push(_val1);
            }
        };
        ChatSmileyExtraPackListMessage.ID = 6;
        return ChatSmileyExtraPackListMessage;
    })(NetworkMessage);
    Protocol.ChatSmileyExtraPackListMessage = ChatSmileyExtraPackListMessage;
    var ChatSmileyMessage = (function(_super) {
        __extends(ChatSmileyMessage, _super);

        function ChatSmileyMessage() {
            this.entityId = 0;
            this.smileyId = 0;
            this.accountId = 0;
            _super.call(this)
        }
        ChatSmileyMessage.prototype.getMessageId = function() {
            return ChatSmileyMessage.ID;
        };
        ChatSmileyMessage.prototype.reset = function() {
            this.entityId = 0;
            this.smileyId = 0;
            this.accountId = 0;
        };
        ChatSmileyMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ChatSmileyMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ChatSmileyMessage.prototype.serialize = function(output) {
            this.serializeAs_ChatSmileyMessage(output);
        };
        ChatSmileyMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ChatSmileyMessage(input);
        };
        ChatSmileyMessage.prototype.serializeAs_ChatSmileyMessage = function(output) {
            if (this.entityId < -9007199254740990 || this.entityId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.entityId + ") on element entityId.");
            }
            output.writeDouble(this.entityId);
            if (this.smileyId < 0) {
                throw new Error("Forbidden value (" + this.smileyId + ") on element smileyId.");
            }
            output.writeVarShort(this.smileyId);
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element accountId.");
            }
            output.writeInt(this.accountId);
        };
        ChatSmileyMessage.prototype.deserializeAs_ChatSmileyMessage = function(input) {
            this.entityId = input.readDouble();
            if (this.entityId < -9007199254740990 || this.entityId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.entityId + ") on element of ChatSmileyMessage.entityId.");
            }
            this.smileyId = input.readVarUhShort();
            if (this.smileyId < 0) {
                throw new Error("Forbidden value (" + this.smileyId + ") on element of ChatSmileyMessage.smileyId.");
            }
            this.accountId = input.readInt();
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element of ChatSmileyMessage.accountId.");
            }
        };
        ChatSmileyMessage.ID = 2736;
        return ChatSmileyMessage;
    })(NetworkMessage);
    Protocol.ChatSmileyMessage = ChatSmileyMessage;
    var ChatSmileyRequestMessage = (function(_super) {
        __extends(ChatSmileyRequestMessage, _super);

        function ChatSmileyRequestMessage() {
            this.smileyId = 0;
            _super.call(this)
        }
        ChatSmileyRequestMessage.prototype.getMessageId = function() {
            return ChatSmileyRequestMessage.ID;
        };
        ChatSmileyRequestMessage.prototype.reset = function() {
            this.smileyId = 0;
        };
        ChatSmileyRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ChatSmileyRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ChatSmileyRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_ChatSmileyRequestMessage(output);
        };
        ChatSmileyRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ChatSmileyRequestMessage(input);
        };
        ChatSmileyRequestMessage.prototype.serializeAs_ChatSmileyRequestMessage = function(output) {
            if (this.smileyId < 0) {
                throw new Error("Forbidden value (" + this.smileyId + ") on element smileyId.");
            }
            output.writeVarShort(this.smileyId);
        };
        ChatSmileyRequestMessage.prototype.deserializeAs_ChatSmileyRequestMessage = function(input) {
            this.smileyId = input.readVarUhShort();
            if (this.smileyId < 0) {
                throw new Error("Forbidden value (" + this.smileyId + ") on element of ChatSmileyRequestMessage.smileyId.");
            }
        };
        ChatSmileyRequestMessage.ID = 5172;
        return ChatSmileyRequestMessage;
    })(NetworkMessage);
    Protocol.ChatSmileyRequestMessage = ChatSmileyRequestMessage;
    var LocalizedChatSmileyMessage = (function(_super) {
        __extends(LocalizedChatSmileyMessage, _super);

        function LocalizedChatSmileyMessage() {
            this.cellId = 0;
            _super.call(this)
        }
        LocalizedChatSmileyMessage.prototype.getMessageId = function() {
            return LocalizedChatSmileyMessage.ID;
        };
        LocalizedChatSmileyMessage.prototype.reset = function() {
            this.cellId = 0;
        };
        LocalizedChatSmileyMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        LocalizedChatSmileyMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        LocalizedChatSmileyMessage.prototype.serialize = function(output) {
            this.serializeAs_LocalizedChatSmileyMessage(output);
        };
        LocalizedChatSmileyMessage.prototype.deserialize = function(input) {
            this.deserializeAs_LocalizedChatSmileyMessage(input);
        };
        LocalizedChatSmileyMessage.prototype.serializeAs_LocalizedChatSmileyMessage = function(output) {
            _super.prototype.serializeAs_ChatSmileyMessage.call(this, output);
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
            }
            output.writeVarShort(this.cellId);
        };
        LocalizedChatSmileyMessage.prototype.deserializeAs_LocalizedChatSmileyMessage = function(input) {
            _super.prototype.deserializeAs_ChatSmileyMessage.call(this, input);
            this.cellId = input.readVarUhShort();
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element of LocalizedChatSmileyMessage.cellId.");
            }
        };
        LocalizedChatSmileyMessage.ID = 7234;
        return LocalizedChatSmileyMessage;
    })(ChatSmileyMessage);
    Protocol.LocalizedChatSmileyMessage = LocalizedChatSmileyMessage;
    var MoodSmileyRequestMessage = (function(_super) {
        __extends(MoodSmileyRequestMessage, _super);

        function MoodSmileyRequestMessage() {
            this.smileyId = 0;
            _super.call(this)
        }
        MoodSmileyRequestMessage.prototype.getMessageId = function() {
            return MoodSmileyRequestMessage.ID;
        };
        MoodSmileyRequestMessage.prototype.reset = function() {
            this.smileyId = 0;
        };
        MoodSmileyRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MoodSmileyRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MoodSmileyRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_MoodSmileyRequestMessage(output);
        };
        MoodSmileyRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MoodSmileyRequestMessage(input);
        };
        MoodSmileyRequestMessage.prototype.serializeAs_MoodSmileyRequestMessage = function(output) {
            if (this.smileyId < 0) {
                throw new Error("Forbidden value (" + this.smileyId + ") on element smileyId.");
            }
            output.writeVarShort(this.smileyId);
        };
        MoodSmileyRequestMessage.prototype.deserializeAs_MoodSmileyRequestMessage = function(input) {
            this.smileyId = input.readVarUhShort();
            if (this.smileyId < 0) {
                throw new Error("Forbidden value (" + this.smileyId + ") on element of MoodSmileyRequestMessage.smileyId.");
            }
        };
        MoodSmileyRequestMessage.ID = 670;
        return MoodSmileyRequestMessage;
    })(NetworkMessage);
    Protocol.MoodSmileyRequestMessage = MoodSmileyRequestMessage;
    var MoodSmileyResultMessage = (function(_super) {
        __extends(MoodSmileyResultMessage, _super);

        function MoodSmileyResultMessage() {
            this.resultCode = 1;
            this.smileyId = 0;
            _super.call(this)
        }
        MoodSmileyResultMessage.prototype.getMessageId = function() {
            return MoodSmileyResultMessage.ID;
        };
        MoodSmileyResultMessage.prototype.reset = function() {
            this.resultCode = 1;
            this.smileyId = 0;
        };
        MoodSmileyResultMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MoodSmileyResultMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MoodSmileyResultMessage.prototype.serialize = function(output) {
            this.serializeAs_MoodSmileyResultMessage(output);
        };
        MoodSmileyResultMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MoodSmileyResultMessage(input);
        };
        MoodSmileyResultMessage.prototype.serializeAs_MoodSmileyResultMessage = function(output) {
            output.writeByte(this.resultCode);
            if (this.smileyId < 0) {
                throw new Error("Forbidden value (" + this.smileyId + ") on element smileyId.");
            }
            output.writeVarShort(this.smileyId);
        };
        MoodSmileyResultMessage.prototype.deserializeAs_MoodSmileyResultMessage = function(input) {
            this.resultCode = input.readByte();
            if (this.resultCode < 0) {
                throw new Error("Forbidden value (" + this.resultCode + ") on element of MoodSmileyResultMessage.resultCode.");
            }
            this.smileyId = input.readVarUhShort();
            if (this.smileyId < 0) {
                throw new Error("Forbidden value (" + this.smileyId + ") on element of MoodSmileyResultMessage.smileyId.");
            }
        };
        MoodSmileyResultMessage.ID = 2233;
        return MoodSmileyResultMessage;
    })(NetworkMessage);
    Protocol.MoodSmileyResultMessage = MoodSmileyResultMessage;
    var MoodSmileyUpdateMessage = (function(_super) {
        __extends(MoodSmileyUpdateMessage, _super);

        function MoodSmileyUpdateMessage() {
            this.accountId = 0;
            this.playerId = 0;
            this.smileyId = 0;
            _super.call(this)
        }
        MoodSmileyUpdateMessage.prototype.getMessageId = function() {
            return MoodSmileyUpdateMessage.ID;
        };
        MoodSmileyUpdateMessage.prototype.reset = function() {
            this.accountId = 0;
            this.playerId = 0;
            this.smileyId = 0;
        };
        MoodSmileyUpdateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MoodSmileyUpdateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MoodSmileyUpdateMessage.prototype.serialize = function(output) {
            this.serializeAs_MoodSmileyUpdateMessage(output);
        };
        MoodSmileyUpdateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MoodSmileyUpdateMessage(input);
        };
        MoodSmileyUpdateMessage.prototype.serializeAs_MoodSmileyUpdateMessage = function(output) {
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element accountId.");
            }
            output.writeInt(this.accountId);
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
            if (this.smileyId < 0) {
                throw new Error("Forbidden value (" + this.smileyId + ") on element smileyId.");
            }
            output.writeVarShort(this.smileyId);
        };
        MoodSmileyUpdateMessage.prototype.deserializeAs_MoodSmileyUpdateMessage = function(input) {
            this.accountId = input.readInt();
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element of MoodSmileyUpdateMessage.accountId.");
            }
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of MoodSmileyUpdateMessage.playerId.");
            }
            this.smileyId = input.readVarUhShort();
            if (this.smileyId < 0) {
                throw new Error("Forbidden value (" + this.smileyId + ") on element of MoodSmileyUpdateMessage.smileyId.");
            }
        };
        MoodSmileyUpdateMessage.ID = 4794;
        return MoodSmileyUpdateMessage;
    })(NetworkMessage);
    Protocol.MoodSmileyUpdateMessage = MoodSmileyUpdateMessage;
    var DisplayNumericalValuePaddockMessage = (function(_super) {
        __extends(DisplayNumericalValuePaddockMessage, _super);

        function DisplayNumericalValuePaddockMessage() {
            this.rideId = 0;
            this.value = 0;
            this.type = 0;
            _super.call(this)
        }
        DisplayNumericalValuePaddockMessage.prototype.getMessageId = function() {
            return DisplayNumericalValuePaddockMessage.ID;
        };
        DisplayNumericalValuePaddockMessage.prototype.reset = function() {
            this.rideId = 0;
            this.value = 0;
            this.type = 0;
        };
        DisplayNumericalValuePaddockMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        DisplayNumericalValuePaddockMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        DisplayNumericalValuePaddockMessage.prototype.serialize = function(output) {
            this.serializeAs_DisplayNumericalValuePaddockMessage(output);
        };
        DisplayNumericalValuePaddockMessage.prototype.deserialize = function(input) {
            this.deserializeAs_DisplayNumericalValuePaddockMessage(input);
        };
        DisplayNumericalValuePaddockMessage.prototype.serializeAs_DisplayNumericalValuePaddockMessage = function(output) {
            output.writeInt(this.rideId);
            output.writeInt(this.value);
            output.writeByte(this.type);
        };
        DisplayNumericalValuePaddockMessage.prototype.deserializeAs_DisplayNumericalValuePaddockMessage = function(input) {
            this.rideId = input.readInt();
            this.value = input.readInt();
            this.type = input.readByte();
            if (this.type < 0) {
                throw new Error("Forbidden value (" + this.type + ") on element of DisplayNumericalValuePaddockMessage.type.");
            }
        };
        DisplayNumericalValuePaddockMessage.ID = 5004;
        return DisplayNumericalValuePaddockMessage;
    })(NetworkMessage);
    Protocol.DisplayNumericalValuePaddockMessage = DisplayNumericalValuePaddockMessage;
    var DungeonKeyRingMessage = (function(_super) {
        __extends(DungeonKeyRingMessage, _super);

        function DungeonKeyRingMessage() {
            this.availables = [];
            this.unavailables = [];
            _super.call(this)
        }
        DungeonKeyRingMessage.prototype.getMessageId = function() {
            return DungeonKeyRingMessage.ID;
        };
        DungeonKeyRingMessage.prototype.reset = function() {
            this.availables = [];
            this.unavailables = [];
        };
        DungeonKeyRingMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        DungeonKeyRingMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        DungeonKeyRingMessage.prototype.serialize = function(output) {
            this.serializeAs_DungeonKeyRingMessage(output);
        };
        DungeonKeyRingMessage.prototype.deserialize = function(input) {
            this.deserializeAs_DungeonKeyRingMessage(input);
        };
        DungeonKeyRingMessage.prototype.serializeAs_DungeonKeyRingMessage = function(output) {
            output.writeShort(this.availables.length);
            for (var _i1 = 0; _i1 < this.availables.length; _i1++) {
                if (this.availables[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.availables[_i1] + ") on element 1 (starting at 1) of availables.");
                }
                output.writeVarShort(this.availables[_i1]);
            }
            output.writeShort(this.unavailables.length);
            for (var _i2 = 0; _i2 < this.unavailables.length; _i2++) {
                if (this.unavailables[_i2] < 0) {
                    throw new Error("Forbidden value (" + this.unavailables[_i2] + ") on element 2 (starting at 1) of unavailables.");
                }
                output.writeVarShort(this.unavailables[_i2]);
            }
        };
        DungeonKeyRingMessage.prototype.deserializeAs_DungeonKeyRingMessage = function(input) {
            var _val1 = 0;
            var _val2 = 0;
            var _availablesLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _availablesLen; _i1++) {
                _val1 = input.readVarUhShort();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of availables.");
                }
                this.availables.push(_val1);
            }
            var _unavailablesLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _unavailablesLen; _i2++) {
                _val2 = input.readVarUhShort();
                if (_val2 < 0) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of unavailables.");
                }
                this.unavailables.push(_val2);
            }
        };
        DungeonKeyRingMessage.ID = 4148;
        return DungeonKeyRingMessage;
    })(NetworkMessage);
    Protocol.DungeonKeyRingMessage = DungeonKeyRingMessage;
    var DungeonKeyRingUpdateMessage = (function(_super) {
        __extends(DungeonKeyRingUpdateMessage, _super);

        function DungeonKeyRingUpdateMessage() {
            this.dungeonId = 0;
            this.available = false;
            _super.call(this)
        }
        DungeonKeyRingUpdateMessage.prototype.getMessageId = function() {
            return DungeonKeyRingUpdateMessage.ID;
        };
        DungeonKeyRingUpdateMessage.prototype.reset = function() {
            this.dungeonId = 0;
            this.available = false;
        };
        DungeonKeyRingUpdateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        DungeonKeyRingUpdateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        DungeonKeyRingUpdateMessage.prototype.serialize = function(output) {
            this.serializeAs_DungeonKeyRingUpdateMessage(output);
        };
        DungeonKeyRingUpdateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_DungeonKeyRingUpdateMessage(input);
        };
        DungeonKeyRingUpdateMessage.prototype.serializeAs_DungeonKeyRingUpdateMessage = function(output) {
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
            }
            output.writeVarShort(this.dungeonId);
            output.writeBoolean(this.available);
        };
        DungeonKeyRingUpdateMessage.prototype.deserializeAs_DungeonKeyRingUpdateMessage = function(input) {
            this.dungeonId = input.readVarUhShort();
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element of DungeonKeyRingUpdateMessage.dungeonId.");
            }
            this.available = input.readBoolean();
        };
        DungeonKeyRingUpdateMessage.ID = 4979;
        return DungeonKeyRingUpdateMessage;
    })(NetworkMessage);
    Protocol.DungeonKeyRingUpdateMessage = DungeonKeyRingUpdateMessage;
    var ArenaFighterLeaveMessage = (function(_super) {
        __extends(ArenaFighterLeaveMessage, _super);

        function ArenaFighterLeaveMessage() {
            this.leaver = new CharacterBasicMinimalInformations();
            _super.call(this)
        }
        ArenaFighterLeaveMessage.prototype.getMessageId = function() {
            return ArenaFighterLeaveMessage.ID;
        };
        ArenaFighterLeaveMessage.prototype.reset = function() {
            this.leaver = new CharacterBasicMinimalInformations();
        };
        ArenaFighterLeaveMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ArenaFighterLeaveMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ArenaFighterLeaveMessage.prototype.serialize = function(output) {
            this.serializeAs_ArenaFighterLeaveMessage(output);
        };
        ArenaFighterLeaveMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ArenaFighterLeaveMessage(input);
        };
        ArenaFighterLeaveMessage.prototype.serializeAs_ArenaFighterLeaveMessage = function(output) {
            this.leaver.serializeAs_CharacterBasicMinimalInformations(output);
        };
        ArenaFighterLeaveMessage.prototype.deserializeAs_ArenaFighterLeaveMessage = function(input) {
            this.leaver = new CharacterBasicMinimalInformations();
            this.leaver.deserialize(input);
        };
        ArenaFighterLeaveMessage.ID = 2158;
        return ArenaFighterLeaveMessage;
    })(NetworkMessage);
    Protocol.ArenaFighterLeaveMessage = ArenaFighterLeaveMessage;
    var GameFightEndMessage = (function(_super) {
        __extends(GameFightEndMessage, _super);

        function GameFightEndMessage() {
            this.duration = 0;
            this.rewardRate = 0;
            this.lootShareLimitMalus = 0;
            this.results = [];
            this.namedPartyTeamsOutcomes = [];
            _super.call(this)
        }
        GameFightEndMessage.prototype.getMessageId = function() {
            return GameFightEndMessage.ID;
        };
        GameFightEndMessage.prototype.reset = function() {
            this.duration = 0;
            this.rewardRate = 0;
            this.lootShareLimitMalus = 0;
            this.results = [];
            this.namedPartyTeamsOutcomes = [];
        };
        GameFightEndMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameFightEndMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameFightEndMessage.prototype.serialize = function(output) {
            this.serializeAs_GameFightEndMessage(output);
        };
        GameFightEndMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightEndMessage(input);
        };
        GameFightEndMessage.prototype.serializeAs_GameFightEndMessage = function(output) {
            if (this.duration < 0) {
                throw new Error("Forbidden value (" + this.duration + ") on element duration.");
            }
            output.writeInt(this.duration);
            output.writeVarShort(this.rewardRate);
            output.writeShort(this.lootShareLimitMalus);
            output.writeShort(this.results.length);
            for (var _i4 = 0; _i4 < this.results.length; _i4++) {
                output.writeShort((this.results[_i4]).getTypeId());
                (this.results[_i4]).serialize(output);
            }
            output.writeShort(this.namedPartyTeamsOutcomes.length);
            for (var _i5 = 0; _i5 < this.namedPartyTeamsOutcomes.length; _i5++) {
                (this.namedPartyTeamsOutcomes[_i5]).serializeAs_NamedPartyTeamWithOutcome(output);
            }
        };
        GameFightEndMessage.prototype.deserializeAs_GameFightEndMessage = function(input) {
            var _id4 = 0;
            var _item4 = null;
            var _item5 = null;
            this.duration = input.readInt();
            if (this.duration < 0) {
                throw new Error("Forbidden value (" + this.duration + ") on element of GameFightEndMessage.duration.");
            }
            this.rewardRate = input.readVarShort();
            this.lootShareLimitMalus = input.readShort();
            var _resultsLen = input.readUnsignedShort();
            for (var _i4 = 0; _i4 < _resultsLen; _i4++) {
                _id4 = input.readUnsignedShort();
                _item4 = ProtocolTypeManager.getInstance(FightResultListEntry, _id4);
                _item4.deserialize(input);
                this.results.push(_item4);
            }
            var _namedPartyTeamsOutcomesLen = input.readUnsignedShort();
            for (var _i5 = 0; _i5 < _namedPartyTeamsOutcomesLen; _i5++) {
                _item5 = new NamedPartyTeamWithOutcome();
                _item5.deserialize(input);
                this.namedPartyTeamsOutcomes.push(_item5);
            }
        };
        GameFightEndMessage.ID = 6612;
        return GameFightEndMessage;
    })(NetworkMessage);
    Protocol.GameFightEndMessage = GameFightEndMessage;
    var BreachGameFightEndMessage = (function(_super) {
        __extends(BreachGameFightEndMessage, _super);

        function BreachGameFightEndMessage() {
            this.budget = 0;
            _super.call(this)
        }
        BreachGameFightEndMessage.prototype.getMessageId = function() {
            return BreachGameFightEndMessage.ID;
        };
        BreachGameFightEndMessage.prototype.reset = function() {
            this.budget = 0;
        };
        BreachGameFightEndMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        BreachGameFightEndMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        BreachGameFightEndMessage.prototype.serialize = function(output) {
            this.serializeAs_BreachGameFightEndMessage(output);
        };
        BreachGameFightEndMessage.prototype.deserialize = function(input) {
            this.deserializeAs_BreachGameFightEndMessage(input);
        };
        BreachGameFightEndMessage.prototype.serializeAs_BreachGameFightEndMessage = function(output) {
            _super.prototype.serializeAs_GameFightEndMessage.call(this, output);
            output.writeInt(this.budget);
        };
        BreachGameFightEndMessage.prototype.deserializeAs_BreachGameFightEndMessage = function(input) {
            _super.prototype.deserializeAs_GameFightEndMessage.call(this, input);
            this.budget = input.readInt();
        };
        BreachGameFightEndMessage.ID = 6696;
        return BreachGameFightEndMessage;
    })(GameFightEndMessage);
    Protocol.BreachGameFightEndMessage = BreachGameFightEndMessage;
    var ChallengeInfoMessage = (function(_super) {
        __extends(ChallengeInfoMessage, _super);

        function ChallengeInfoMessage() {
            this.challengeId = 0;
            this.targetId = 0;
            this.xpBonus = 0;
            this.dropBonus = 0;
            _super.call(this)
        }
        ChallengeInfoMessage.prototype.getMessageId = function() {
            return ChallengeInfoMessage.ID;
        };
        ChallengeInfoMessage.prototype.reset = function() {
            this.challengeId = 0;
            this.targetId = 0;
            this.xpBonus = 0;
            this.dropBonus = 0;
        };
        ChallengeInfoMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ChallengeInfoMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ChallengeInfoMessage.prototype.serialize = function(output) {
            this.serializeAs_ChallengeInfoMessage(output);
        };
        ChallengeInfoMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ChallengeInfoMessage(input);
        };
        ChallengeInfoMessage.prototype.serializeAs_ChallengeInfoMessage = function(output) {
            if (this.challengeId < 0) {
                throw new Error("Forbidden value (" + this.challengeId + ") on element challengeId.");
            }
            output.writeVarShort(this.challengeId);
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            if (this.xpBonus < 0) {
                throw new Error("Forbidden value (" + this.xpBonus + ") on element xpBonus.");
            }
            output.writeVarInt(this.xpBonus);
            if (this.dropBonus < 0) {
                throw new Error("Forbidden value (" + this.dropBonus + ") on element dropBonus.");
            }
            output.writeVarInt(this.dropBonus);
        };
        ChallengeInfoMessage.prototype.deserializeAs_ChallengeInfoMessage = function(input) {
            this.challengeId = input.readVarUhShort();
            if (this.challengeId < 0) {
                throw new Error("Forbidden value (" + this.challengeId + ") on element of ChallengeInfoMessage.challengeId.");
            }
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of ChallengeInfoMessage.targetId.");
            }
            this.xpBonus = input.readVarUhInt();
            if (this.xpBonus < 0) {
                throw new Error("Forbidden value (" + this.xpBonus + ") on element of ChallengeInfoMessage.xpBonus.");
            }
            this.dropBonus = input.readVarUhInt();
            if (this.dropBonus < 0) {
                throw new Error("Forbidden value (" + this.dropBonus + ") on element of ChallengeInfoMessage.dropBonus.");
            }
        };
        ChallengeInfoMessage.ID = 9675;
        return ChallengeInfoMessage;
    })(NetworkMessage);
    Protocol.ChallengeInfoMessage = ChallengeInfoMessage;
    var ChallengeResultMessage = (function(_super) {
        __extends(ChallengeResultMessage, _super);

        function ChallengeResultMessage() {
            this.challengeId = 0;
            this.success = false;
            _super.call(this)
        }
        ChallengeResultMessage.prototype.getMessageId = function() {
            return ChallengeResultMessage.ID;
        };
        ChallengeResultMessage.prototype.reset = function() {
            this.challengeId = 0;
            this.success = false;
        };
        ChallengeResultMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ChallengeResultMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ChallengeResultMessage.prototype.serialize = function(output) {
            this.serializeAs_ChallengeResultMessage(output);
        };
        ChallengeResultMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ChallengeResultMessage(input);
        };
        ChallengeResultMessage.prototype.serializeAs_ChallengeResultMessage = function(output) {
            if (this.challengeId < 0) {
                throw new Error("Forbidden value (" + this.challengeId + ") on element challengeId.");
            }
            output.writeVarShort(this.challengeId);
            output.writeBoolean(this.success);
        };
        ChallengeResultMessage.prototype.deserializeAs_ChallengeResultMessage = function(input) {
            this.challengeId = input.readVarUhShort();
            if (this.challengeId < 0) {
                throw new Error("Forbidden value (" + this.challengeId + ") on element of ChallengeResultMessage.challengeId.");
            }
            this.success = input.readBoolean();
        };
        ChallengeResultMessage.ID = 2089;
        return ChallengeResultMessage;
    })(NetworkMessage);
    Protocol.ChallengeResultMessage = ChallengeResultMessage;
    var ChallengeTargetsListMessage = (function(_super) {
        __extends(ChallengeTargetsListMessage, _super);

        function ChallengeTargetsListMessage() {
            this.targetIds = [];
            this.targetCells = [];
            _super.call(this)
        }
        ChallengeTargetsListMessage.prototype.getMessageId = function() {
            return ChallengeTargetsListMessage.ID;
        };
        ChallengeTargetsListMessage.prototype.reset = function() {
            this.targetIds = [];
            this.targetCells = [];
        };
        ChallengeTargetsListMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ChallengeTargetsListMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ChallengeTargetsListMessage.prototype.serialize = function(output) {
            this.serializeAs_ChallengeTargetsListMessage(output);
        };
        ChallengeTargetsListMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ChallengeTargetsListMessage(input);
        };
        ChallengeTargetsListMessage.prototype.serializeAs_ChallengeTargetsListMessage = function(output) {
            output.writeShort(this.targetIds.length);
            for (var _i1 = 0; _i1 < this.targetIds.length; _i1++) {
                if (this.targetIds[_i1] < -9007199254740990 || this.targetIds[_i1] > 9007199254740990) {
                    throw new Error("Forbidden value (" + this.targetIds[_i1] + ") on element 1 (starting at 1) of targetIds.");
                }
                output.writeDouble(this.targetIds[_i1]);
            }
            output.writeShort(this.targetCells.length);
            for (var _i2 = 0; _i2 < this.targetCells.length; _i2++) {
                if (this.targetCells[_i2] < -1 || this.targetCells[_i2] > 559) {
                    throw new Error("Forbidden value (" + this.targetCells[_i2] + ") on element 2 (starting at 1) of targetCells.");
                }
                output.writeShort(this.targetCells[_i2]);
            }
        };
        ChallengeTargetsListMessage.prototype.deserializeAs_ChallengeTargetsListMessage = function(input) {
            var _val1 = NaN;
            var _val2 = 0;
            var _targetIdsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _targetIdsLen; _i1++) {
                _val1 = input.readDouble();
                if (_val1 < -9007199254740990 || _val1 > 9007199254740990) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of targetIds.");
                }
                this.targetIds.push(_val1);
            }
            var _targetCellsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _targetCellsLen; _i2++) {
                _val2 = input.readShort();
                if (_val2 < -1 || _val2 > 559) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of targetCells.");
                }
                this.targetCells.push(_val2);
            }
        };
        ChallengeTargetsListMessage.ID = 2009;
        return ChallengeTargetsListMessage;
    })(NetworkMessage);
    Protocol.ChallengeTargetsListMessage = ChallengeTargetsListMessage;
    var ChallengeTargetsListRequestMessage = (function(_super) {
        __extends(ChallengeTargetsListRequestMessage, _super);

        function ChallengeTargetsListRequestMessage() {
            this.challengeId = 0;
            _super.call(this)
        }
        ChallengeTargetsListRequestMessage.prototype.getMessageId = function() {
            return ChallengeTargetsListRequestMessage.ID;
        };
        ChallengeTargetsListRequestMessage.prototype.reset = function() {
            this.challengeId = 0;
        };
        ChallengeTargetsListRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ChallengeTargetsListRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ChallengeTargetsListRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_ChallengeTargetsListRequestMessage(output);
        };
        ChallengeTargetsListRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ChallengeTargetsListRequestMessage(input);
        };
        ChallengeTargetsListRequestMessage.prototype.serializeAs_ChallengeTargetsListRequestMessage = function(output) {
            if (this.challengeId < 0) {
                throw new Error("Forbidden value (" + this.challengeId + ") on element challengeId.");
            }
            output.writeVarShort(this.challengeId);
        };
        ChallengeTargetsListRequestMessage.prototype.deserializeAs_ChallengeTargetsListRequestMessage = function(input) {
            this.challengeId = input.readVarUhShort();
            if (this.challengeId < 0) {
                throw new Error("Forbidden value (" + this.challengeId + ") on element of ChallengeTargetsListRequestMessage.challengeId.");
            }
        };
        ChallengeTargetsListRequestMessage.ID = 2250;
        return ChallengeTargetsListRequestMessage;
    })(NetworkMessage);
    Protocol.ChallengeTargetsListRequestMessage = ChallengeTargetsListRequestMessage;
    var ChallengeTargetUpdateMessage = (function(_super) {
        __extends(ChallengeTargetUpdateMessage, _super);

        function ChallengeTargetUpdateMessage() {
            this.challengeId = 0;
            this.targetId = 0;
            _super.call(this)
        }
        ChallengeTargetUpdateMessage.prototype.getMessageId = function() {
            return ChallengeTargetUpdateMessage.ID;
        };
        ChallengeTargetUpdateMessage.prototype.reset = function() {
            this.challengeId = 0;
            this.targetId = 0;
        };
        ChallengeTargetUpdateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ChallengeTargetUpdateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ChallengeTargetUpdateMessage.prototype.serialize = function(output) {
            this.serializeAs_ChallengeTargetUpdateMessage(output);
        };
        ChallengeTargetUpdateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ChallengeTargetUpdateMessage(input);
        };
        ChallengeTargetUpdateMessage.prototype.serializeAs_ChallengeTargetUpdateMessage = function(output) {
            if (this.challengeId < 0) {
                throw new Error("Forbidden value (" + this.challengeId + ") on element challengeId.");
            }
            output.writeVarShort(this.challengeId);
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
        };
        ChallengeTargetUpdateMessage.prototype.deserializeAs_ChallengeTargetUpdateMessage = function(input) {
            this.challengeId = input.readVarUhShort();
            if (this.challengeId < 0) {
                throw new Error("Forbidden value (" + this.challengeId + ") on element of ChallengeTargetUpdateMessage.challengeId.");
            }
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of ChallengeTargetUpdateMessage.targetId.");
            }
        };
        ChallengeTargetUpdateMessage.ID = 4069;
        return ChallengeTargetUpdateMessage;
    })(NetworkMessage);
    Protocol.ChallengeTargetUpdateMessage = ChallengeTargetUpdateMessage;
    var GameFightRefreshFighterMessage = (function(_super) {
        __extends(GameFightRefreshFighterMessage, _super);

        function GameFightRefreshFighterMessage() {
            this.informations = new GameContextActorInformations();
            _super.call(this)
        }
        GameFightRefreshFighterMessage.prototype.getMessageId = function() {
            return GameFightRefreshFighterMessage.ID;
        };
        GameFightRefreshFighterMessage.prototype.reset = function() {
            this.informations = new GameContextActorInformations();
        };
        GameFightRefreshFighterMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameFightRefreshFighterMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameFightRefreshFighterMessage.prototype.serialize = function(output) {
            this.serializeAs_GameFightRefreshFighterMessage(output);
        };
        GameFightRefreshFighterMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightRefreshFighterMessage(input);
        };
        GameFightRefreshFighterMessage.prototype.serializeAs_GameFightRefreshFighterMessage = function(output) {
            output.writeShort(this.informations.getTypeId());
            this.informations.serialize(output);
        };
        GameFightRefreshFighterMessage.prototype.deserializeAs_GameFightRefreshFighterMessage = function(input) {
            var _id1 = input.readUnsignedShort();
            this.informations = ProtocolTypeManager.getInstance(GameContextActorInformations, _id1);
            this.informations.deserialize(input);
        };
        GameFightRefreshFighterMessage.ID = 986;
        return GameFightRefreshFighterMessage;
    })(NetworkMessage);
    Protocol.GameFightRefreshFighterMessage = GameFightRefreshFighterMessage;
    var GameFightShowFighterMessage = (function(_super) {
        __extends(GameFightShowFighterMessage, _super);

        function GameFightShowFighterMessage() {
            this.informations = new GameFightFighterInformations();
            _super.call(this)
        }
        GameFightShowFighterMessage.prototype.getMessageId = function() {
            return GameFightShowFighterMessage.ID;
        };
        GameFightShowFighterMessage.prototype.reset = function() {
            this.informations = new GameFightFighterInformations();
        };
        GameFightShowFighterMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameFightShowFighterMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameFightShowFighterMessage.prototype.serialize = function(output) {
            this.serializeAs_GameFightShowFighterMessage(output);
        };
        GameFightShowFighterMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightShowFighterMessage(input);
        };
        GameFightShowFighterMessage.prototype.serializeAs_GameFightShowFighterMessage = function(output) {
            output.writeShort(this.informations.getTypeId());
            this.informations.serialize(output);
        };
        GameFightShowFighterMessage.prototype.deserializeAs_GameFightShowFighterMessage = function(input) {
            var _id1 = input.readUnsignedShort();
            this.informations = ProtocolTypeManager.getInstance(GameFightFighterInformations, _id1);
            this.informations.deserialize(input);
        };
        GameFightShowFighterMessage.ID = 3884;
        return GameFightShowFighterMessage;
    })(NetworkMessage);
    Protocol.GameFightShowFighterMessage = GameFightShowFighterMessage;
    var GameFightShowFighterRandomStaticPoseMessage = (function(_super) {
        __extends(GameFightShowFighterRandomStaticPoseMessage, _super);

        function GameFightShowFighterRandomStaticPoseMessage() {

            _super.call(this)
        }
        GameFightShowFighterRandomStaticPoseMessage.prototype.getMessageId = function() {
            return GameFightShowFighterRandomStaticPoseMessage.ID;
        };
        GameFightShowFighterRandomStaticPoseMessage.prototype.reset = function() {

        };
        GameFightShowFighterRandomStaticPoseMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameFightShowFighterRandomStaticPoseMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameFightShowFighterRandomStaticPoseMessage.prototype.serialize = function(output) {
            this.serializeAs_GameFightShowFighterRandomStaticPoseMessage(output);
        };
        GameFightShowFighterRandomStaticPoseMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightShowFighterRandomStaticPoseMessage(input);
        };
        GameFightShowFighterRandomStaticPoseMessage.prototype.serializeAs_GameFightShowFighterRandomStaticPoseMessage = function(output) {
            _super.prototype.serializeAs_GameFightShowFighterMessage.call(this, output);
        };
        GameFightShowFighterRandomStaticPoseMessage.prototype.deserializeAs_GameFightShowFighterRandomStaticPoseMessage = function(input) {
            _super.prototype.deserializeAs_GameFightShowFighterMessage.call(this, input);
        };
        GameFightShowFighterRandomStaticPoseMessage.ID = 6588;
        return GameFightShowFighterRandomStaticPoseMessage;
    })(GameFightShowFighterMessage);
    Protocol.GameFightShowFighterRandomStaticPoseMessage = GameFightShowFighterRandomStaticPoseMessage;
    var GameFightHumanReadyStateMessage = (function(_super) {
        __extends(GameFightHumanReadyStateMessage, _super);

        function GameFightHumanReadyStateMessage() {
            this.characterId = 0;
            this.isReady = false;
            _super.call(this)
        }
        GameFightHumanReadyStateMessage.prototype.getMessageId = function() {
            return GameFightHumanReadyStateMessage.ID;
        };
        GameFightHumanReadyStateMessage.prototype.reset = function() {
            this.characterId = 0;
            this.isReady = false;
        };
        GameFightHumanReadyStateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameFightHumanReadyStateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameFightHumanReadyStateMessage.prototype.serialize = function(output) {
            this.serializeAs_GameFightHumanReadyStateMessage(output);
        };
        GameFightHumanReadyStateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightHumanReadyStateMessage(input);
        };
        GameFightHumanReadyStateMessage.prototype.serializeAs_GameFightHumanReadyStateMessage = function(output) {
            if (this.characterId < 0 || this.characterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.characterId + ") on element characterId.");
            }
            output.writeVarLong(this.characterId);
            output.writeBoolean(this.isReady);
        };
        GameFightHumanReadyStateMessage.prototype.deserializeAs_GameFightHumanReadyStateMessage = function(input) {
            this.characterId = input.readVarUhLong();
            if (this.characterId < 0 || this.characterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.characterId + ") on element of GameFightHumanReadyStateMessage.characterId.");
            }
            this.isReady = input.readBoolean();
        };
        GameFightHumanReadyStateMessage.ID = 5755;
        return GameFightHumanReadyStateMessage;
    })(NetworkMessage);
    Protocol.GameFightHumanReadyStateMessage = GameFightHumanReadyStateMessage;
    var GameFightJoinMessage = (function(_super) {
        __extends(GameFightJoinMessage, _super);

        function GameFightJoinMessage() {
            this.isTeamPhase = false;
            this.canBeCancelled = false;
            this.canSayReady = false;
            this.isFightStarted = false;
            this.timeMaxBeforeFightStart = 0;
            this.fightType = 0;
            _super.call(this)
        }
        GameFightJoinMessage.prototype.getMessageId = function() {
            return GameFightJoinMessage.ID;
        };
        GameFightJoinMessage.prototype.reset = function() {
            this.isTeamPhase = false;
            this.canBeCancelled = false;
            this.canSayReady = false;
            this.isFightStarted = false;
            this.timeMaxBeforeFightStart = 0;
            this.fightType = 0;
        };
        GameFightJoinMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameFightJoinMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameFightJoinMessage.prototype.serialize = function(output) {
            this.serializeAs_GameFightJoinMessage(output);
        };
        GameFightJoinMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightJoinMessage(input);
        };
        GameFightJoinMessage.prototype.serializeAs_GameFightJoinMessage = function(output) {
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.isTeamPhase);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.canBeCancelled);
            _box0 = BooleanByteWrapper.setFlag(_box0, 2, this.canSayReady);
            _box0 = BooleanByteWrapper.setFlag(_box0, 3, this.isFightStarted);
            output.writeByte(_box0);
            if (this.timeMaxBeforeFightStart < 0) {
                throw new Error("Forbidden value (" + this.timeMaxBeforeFightStart + ") on element timeMaxBeforeFightStart.");
            }
            output.writeShort(this.timeMaxBeforeFightStart);
            output.writeByte(this.fightType);
        };
        GameFightJoinMessage.prototype.deserializeAs_GameFightJoinMessage = function(input) {
            this.deserializeByteBoxes(input);
            this.timeMaxBeforeFightStart = input.readShort();
            if (this.timeMaxBeforeFightStart < 0) {
                throw new Error("Forbidden value (" + this.timeMaxBeforeFightStart + ") on element of GameFightJoinMessage.timeMaxBeforeFightStart.");
            }
            this.fightType = input.readByte();
            if (this.fightType < 0) {
                throw new Error("Forbidden value (" + this.fightType + ") on element of GameFightJoinMessage.fightType.");
            }
        };
        GameFightJoinMessage.ID = 685;
        return GameFightJoinMessage;
    })(NetworkMessage);
    Protocol.GameFightJoinMessage = GameFightJoinMessage;
    var GameFightJoinRequestMessage = (function(_super) {
        __extends(GameFightJoinRequestMessage, _super);

        function GameFightJoinRequestMessage() {
            this.fighterId = 0;
            this.fightId = 0;
            _super.call(this)
        }
        GameFightJoinRequestMessage.prototype.getMessageId = function() {
            return GameFightJoinRequestMessage.ID;
        };
        GameFightJoinRequestMessage.prototype.reset = function() {
            this.fighterId = 0;
            this.fightId = 0;
        };
        GameFightJoinRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameFightJoinRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameFightJoinRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_GameFightJoinRequestMessage(output);
        };
        GameFightJoinRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightJoinRequestMessage(input);
        };
        GameFightJoinRequestMessage.prototype.serializeAs_GameFightJoinRequestMessage = function(output) {
            if (this.fighterId < -9007199254740990 || this.fighterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.fighterId + ") on element fighterId.");
            }
            output.writeDouble(this.fighterId);
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeVarShort(this.fightId);
        };
        GameFightJoinRequestMessage.prototype.deserializeAs_GameFightJoinRequestMessage = function(input) {
            this.fighterId = input.readDouble();
            if (this.fighterId < -9007199254740990 || this.fighterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.fighterId + ") on element of GameFightJoinRequestMessage.fighterId.");
            }
            this.fightId = input.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of GameFightJoinRequestMessage.fightId.");
            }
        };
        GameFightJoinRequestMessage.ID = 6133;
        return GameFightJoinRequestMessage;
    })(NetworkMessage);
    Protocol.GameFightJoinRequestMessage = GameFightJoinRequestMessage;
    var GameFightLeaveMessage = (function(_super) {
        __extends(GameFightLeaveMessage, _super);

        function GameFightLeaveMessage() {
            this.charId = 0;
            _super.call(this)
        }
        GameFightLeaveMessage.prototype.getMessageId = function() {
            return GameFightLeaveMessage.ID;
        };
        GameFightLeaveMessage.prototype.reset = function() {
            this.charId = 0;
        };
        GameFightLeaveMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameFightLeaveMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameFightLeaveMessage.prototype.serialize = function(output) {
            this.serializeAs_GameFightLeaveMessage(output);
        };
        GameFightLeaveMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightLeaveMessage(input);
        };
        GameFightLeaveMessage.prototype.serializeAs_GameFightLeaveMessage = function(output) {
            if (this.charId < -9007199254740990 || this.charId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.charId + ") on element charId.");
            }
            output.writeDouble(this.charId);
        };
        GameFightLeaveMessage.prototype.deserializeAs_GameFightLeaveMessage = function(input) {
            this.charId = input.readDouble();
            if (this.charId < -9007199254740990 || this.charId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.charId + ") on element of GameFightLeaveMessage.charId.");
            }
        };
        GameFightLeaveMessage.ID = 4491;
        return GameFightLeaveMessage;
    })(NetworkMessage);
    Protocol.GameFightLeaveMessage = GameFightLeaveMessage;
    var GameFightNewRoundMessage = (function(_super) {
        __extends(GameFightNewRoundMessage, _super);

        function GameFightNewRoundMessage() {
            this.roundNumber = 0;
            _super.call(this)
        }
        GameFightNewRoundMessage.prototype.getMessageId = function() {
            return GameFightNewRoundMessage.ID;
        };
        GameFightNewRoundMessage.prototype.reset = function() {
            this.roundNumber = 0;
        };
        GameFightNewRoundMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameFightNewRoundMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameFightNewRoundMessage.prototype.serialize = function(output) {
            this.serializeAs_GameFightNewRoundMessage(output);
        };
        GameFightNewRoundMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightNewRoundMessage(input);
        };
        GameFightNewRoundMessage.prototype.serializeAs_GameFightNewRoundMessage = function(output) {
            if (this.roundNumber < 0) {
                throw new Error("Forbidden value (" + this.roundNumber + ") on element roundNumber.");
            }
            output.writeVarInt(this.roundNumber);
        };
        GameFightNewRoundMessage.prototype.deserializeAs_GameFightNewRoundMessage = function(input) {
            this.roundNumber = input.readVarUhInt();
            if (this.roundNumber < 0) {
                throw new Error("Forbidden value (" + this.roundNumber + ") on element of GameFightNewRoundMessage.roundNumber.");
            }
        };
        GameFightNewRoundMessage.ID = 4660;
        return GameFightNewRoundMessage;
    })(NetworkMessage);
    Protocol.GameFightNewRoundMessage = GameFightNewRoundMessage;
    var GameFightNewWaveMessage = (function(_super) {
        __extends(GameFightNewWaveMessage, _super);

        function GameFightNewWaveMessage() {
            this.id = 0;
            this.teamId = 2;
            this.nbTurnBeforeNextWave = 0;
            _super.call(this)
        }
        GameFightNewWaveMessage.prototype.getMessageId = function() {
            return GameFightNewWaveMessage.ID;
        };
        GameFightNewWaveMessage.prototype.reset = function() {
            this.id = 0;
            this.teamId = 2;
            this.nbTurnBeforeNextWave = 0;
        };
        GameFightNewWaveMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameFightNewWaveMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameFightNewWaveMessage.prototype.serialize = function(output) {
            this.serializeAs_GameFightNewWaveMessage(output);
        };
        GameFightNewWaveMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightNewWaveMessage(input);
        };
        GameFightNewWaveMessage.prototype.serializeAs_GameFightNewWaveMessage = function(output) {
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeByte(this.id);
            output.writeByte(this.teamId);
            output.writeShort(this.nbTurnBeforeNextWave);
        };
        GameFightNewWaveMessage.prototype.deserializeAs_GameFightNewWaveMessage = function(input) {
            this.id = input.readByte();
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element of GameFightNewWaveMessage.id.");
            }
            this.teamId = input.readByte();
            if (this.teamId < 0) {
                throw new Error("Forbidden value (" + this.teamId + ") on element of GameFightNewWaveMessage.teamId.");
            }
            this.nbTurnBeforeNextWave = input.readShort();
        };
        GameFightNewWaveMessage.ID = 6575;
        return GameFightNewWaveMessage;
    })(NetworkMessage);
    Protocol.GameFightNewWaveMessage = GameFightNewWaveMessage;
    var GameFightOptionStateUpdateMessage = (function(_super) {
        __extends(GameFightOptionStateUpdateMessage, _super);

        function GameFightOptionStateUpdateMessage() {
            this.fightId = 0;
            this.teamId = 2;
            this.option = 3;
            this.state = false;
            _super.call(this)
        }
        GameFightOptionStateUpdateMessage.prototype.getMessageId = function() {
            return GameFightOptionStateUpdateMessage.ID;
        };
        GameFightOptionStateUpdateMessage.prototype.reset = function() {
            this.fightId = 0;
            this.teamId = 2;
            this.option = 3;
            this.state = false;
        };
        GameFightOptionStateUpdateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameFightOptionStateUpdateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameFightOptionStateUpdateMessage.prototype.serialize = function(output) {
            this.serializeAs_GameFightOptionStateUpdateMessage(output);
        };
        GameFightOptionStateUpdateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightOptionStateUpdateMessage(input);
        };
        GameFightOptionStateUpdateMessage.prototype.serializeAs_GameFightOptionStateUpdateMessage = function(output) {
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeVarShort(this.fightId);
            output.writeByte(this.teamId);
            output.writeByte(this.option);
            output.writeBoolean(this.state);
        };
        GameFightOptionStateUpdateMessage.prototype.deserializeAs_GameFightOptionStateUpdateMessage = function(input) {
            this.fightId = input.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of GameFightOptionStateUpdateMessage.fightId.");
            }
            this.teamId = input.readByte();
            if (this.teamId < 0) {
                throw new Error("Forbidden value (" + this.teamId + ") on element of GameFightOptionStateUpdateMessage.teamId.");
            }
            this.option = input.readByte();
            if (this.option < 0) {
                throw new Error("Forbidden value (" + this.option + ") on element of GameFightOptionStateUpdateMessage.option.");
            }
            this.state = input.readBoolean();
        };
        GameFightOptionStateUpdateMessage.ID = 3750;
        return GameFightOptionStateUpdateMessage;
    })(NetworkMessage);
    Protocol.GameFightOptionStateUpdateMessage = GameFightOptionStateUpdateMessage;
    var GameFightOptionToggleMessage = (function(_super) {
        __extends(GameFightOptionToggleMessage, _super);

        function GameFightOptionToggleMessage() {
            this.option = 3;
            _super.call(this)
        }
        GameFightOptionToggleMessage.prototype.getMessageId = function() {
            return GameFightOptionToggleMessage.ID;
        };
        GameFightOptionToggleMessage.prototype.reset = function() {
            this.option = 3;
        };
        GameFightOptionToggleMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameFightOptionToggleMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameFightOptionToggleMessage.prototype.serialize = function(output) {
            this.serializeAs_GameFightOptionToggleMessage(output);
        };
        GameFightOptionToggleMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightOptionToggleMessage(input);
        };
        GameFightOptionToggleMessage.prototype.serializeAs_GameFightOptionToggleMessage = function(output) {
            output.writeByte(this.option);
        };
        GameFightOptionToggleMessage.prototype.deserializeAs_GameFightOptionToggleMessage = function(input) {
            this.option = input.readByte();
            if (this.option < 0) {
                throw new Error("Forbidden value (" + this.option + ") on element of GameFightOptionToggleMessage.option.");
            }
        };
        GameFightOptionToggleMessage.ID = 5444;
        return GameFightOptionToggleMessage;
    })(NetworkMessage);
    Protocol.GameFightOptionToggleMessage = GameFightOptionToggleMessage;
    var GameFightPauseMessage = (function(_super) {
        __extends(GameFightPauseMessage, _super);

        function GameFightPauseMessage() {
            this.isPaused = false;
            _super.call(this)
        }
        GameFightPauseMessage.prototype.getMessageId = function() {
            return GameFightPauseMessage.ID;
        };
        GameFightPauseMessage.prototype.reset = function() {
            this.isPaused = false;
        };
        GameFightPauseMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameFightPauseMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameFightPauseMessage.prototype.serialize = function(output) {
            this.serializeAs_GameFightPauseMessage(output);
        };
        GameFightPauseMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightPauseMessage(input);
        };
        GameFightPauseMessage.prototype.serializeAs_GameFightPauseMessage = function(output) {
            output.writeBoolean(this.isPaused);
        };
        GameFightPauseMessage.prototype.deserializeAs_GameFightPauseMessage = function(input) {
            this.isPaused = input.readBoolean();
        };
        GameFightPauseMessage.ID = 6427;
        return GameFightPauseMessage;
    })(NetworkMessage);
    Protocol.GameFightPauseMessage = GameFightPauseMessage;
    var GameFightPlacementPositionRequestMessage = (function(_super) {
        __extends(GameFightPlacementPositionRequestMessage, _super);

        function GameFightPlacementPositionRequestMessage() {
            this.cellId = 0;
            _super.call(this)
        }
        GameFightPlacementPositionRequestMessage.prototype.getMessageId = function() {
            return GameFightPlacementPositionRequestMessage.ID;
        };
        GameFightPlacementPositionRequestMessage.prototype.reset = function() {
            this.cellId = 0;
        };
        GameFightPlacementPositionRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameFightPlacementPositionRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameFightPlacementPositionRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_GameFightPlacementPositionRequestMessage(output);
        };
        GameFightPlacementPositionRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightPlacementPositionRequestMessage(input);
        };
        GameFightPlacementPositionRequestMessage.prototype.serializeAs_GameFightPlacementPositionRequestMessage = function(output) {
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
            }
            output.writeVarShort(this.cellId);
        };
        GameFightPlacementPositionRequestMessage.prototype.deserializeAs_GameFightPlacementPositionRequestMessage = function(input) {
            this.cellId = input.readVarUhShort();
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element of GameFightPlacementPositionRequestMessage.cellId.");
            }
        };
        GameFightPlacementPositionRequestMessage.ID = 8878;
        return GameFightPlacementPositionRequestMessage;
    })(NetworkMessage);
    Protocol.GameFightPlacementPositionRequestMessage = GameFightPlacementPositionRequestMessage;
    var GameFightPlacementPossiblePositionsMessage = (function(_super) {
        __extends(GameFightPlacementPossiblePositionsMessage, _super);

        function GameFightPlacementPossiblePositionsMessage() {
            this.positionsForChallengers = [];
            this.positionsForDefenders = [];
            this.teamNumber = 2;
            _super.call(this)
        }
        GameFightPlacementPossiblePositionsMessage.prototype.getMessageId = function() {
            return GameFightPlacementPossiblePositionsMessage.ID;
        };
        GameFightPlacementPossiblePositionsMessage.prototype.reset = function() {
            this.positionsForChallengers = [];
            this.positionsForDefenders = [];
            this.teamNumber = 2;
        };
        GameFightPlacementPossiblePositionsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameFightPlacementPossiblePositionsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameFightPlacementPossiblePositionsMessage.prototype.serialize = function(output) {
            this.serializeAs_GameFightPlacementPossiblePositionsMessage(output);
        };
        GameFightPlacementPossiblePositionsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightPlacementPossiblePositionsMessage(input);
        };
        GameFightPlacementPossiblePositionsMessage.prototype.serializeAs_GameFightPlacementPossiblePositionsMessage = function(output) {
            output.writeShort(this.positionsForChallengers.length);
            for (var _i1 = 0; _i1 < this.positionsForChallengers.length; _i1++) {
                if (this.positionsForChallengers[_i1] < 0 || this.positionsForChallengers[_i1] > 559) {
                    throw new Error("Forbidden value (" + this.positionsForChallengers[_i1] + ") on element 1 (starting at 1) of positionsForChallengers.");
                }
                output.writeVarShort(this.positionsForChallengers[_i1]);
            }
            output.writeShort(this.positionsForDefenders.length);
            for (var _i2 = 0; _i2 < this.positionsForDefenders.length; _i2++) {
                if (this.positionsForDefenders[_i2] < 0 || this.positionsForDefenders[_i2] > 559) {
                    throw new Error("Forbidden value (" + this.positionsForDefenders[_i2] + ") on element 2 (starting at 1) of positionsForDefenders.");
                }
                output.writeVarShort(this.positionsForDefenders[_i2]);
            }
            output.writeByte(this.teamNumber);
        };
        GameFightPlacementPossiblePositionsMessage.prototype.deserializeAs_GameFightPlacementPossiblePositionsMessage = function(input) {
            var _val1 = 0;
            var _val2 = 0;
            var _positionsForChallengersLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _positionsForChallengersLen; _i1++) {
                _val1 = input.readVarUhShort();
                if (_val1 < 0 || _val1 > 559) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of positionsForChallengers.");
                }
                this.positionsForChallengers.push(_val1);
            }
            var _positionsForDefendersLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _positionsForDefendersLen; _i2++) {
                _val2 = input.readVarUhShort();
                if (_val2 < 0 || _val2 > 559) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of positionsForDefenders.");
                }
                this.positionsForDefenders.push(_val2);
            }
            this.teamNumber = input.readByte();
            if (this.teamNumber < 0) {
                throw new Error("Forbidden value (" + this.teamNumber + ") on element of GameFightPlacementPossiblePositionsMessage.teamNumber.");
            }
        };
        GameFightPlacementPossiblePositionsMessage.ID = 4098;
        return GameFightPlacementPossiblePositionsMessage;
    })(NetworkMessage);
    Protocol.GameFightPlacementPossiblePositionsMessage = GameFightPlacementPossiblePositionsMessage;
    var GameFightPlacementSwapPositionsAcceptMessage = (function(_super) {
        __extends(GameFightPlacementSwapPositionsAcceptMessage, _super);

        function GameFightPlacementSwapPositionsAcceptMessage() {
            this.requestId = 0;
            _super.call(this)
        }
        GameFightPlacementSwapPositionsAcceptMessage.prototype.getMessageId = function() {
            return GameFightPlacementSwapPositionsAcceptMessage.ID;
        };
        GameFightPlacementSwapPositionsAcceptMessage.prototype.reset = function() {
            this.requestId = 0;
        };
        GameFightPlacementSwapPositionsAcceptMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameFightPlacementSwapPositionsAcceptMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameFightPlacementSwapPositionsAcceptMessage.prototype.serialize = function(output) {
            this.serializeAs_GameFightPlacementSwapPositionsAcceptMessage(output);
        };
        GameFightPlacementSwapPositionsAcceptMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightPlacementSwapPositionsAcceptMessage(input);
        };
        GameFightPlacementSwapPositionsAcceptMessage.prototype.serializeAs_GameFightPlacementSwapPositionsAcceptMessage = function(output) {
            if (this.requestId < 0) {
                throw new Error("Forbidden value (" + this.requestId + ") on element requestId.");
            }
            output.writeInt(this.requestId);
        };
        GameFightPlacementSwapPositionsAcceptMessage.prototype.deserializeAs_GameFightPlacementSwapPositionsAcceptMessage = function(input) {
            this.requestId = input.readInt();
            if (this.requestId < 0) {
                throw new Error("Forbidden value (" + this.requestId + ") on element of GameFightPlacementSwapPositionsAcceptMessage.requestId.");
            }
        };
        GameFightPlacementSwapPositionsAcceptMessage.ID = 3893;
        return GameFightPlacementSwapPositionsAcceptMessage;
    })(NetworkMessage);
    Protocol.GameFightPlacementSwapPositionsAcceptMessage = GameFightPlacementSwapPositionsAcceptMessage;
    var GameFightPlacementSwapPositionsCancelledMessage = (function(_super) {
        __extends(GameFightPlacementSwapPositionsCancelledMessage, _super);

        function GameFightPlacementSwapPositionsCancelledMessage() {
            this.requestId = 0;
            this.cancellerId = 0;
            _super.call(this)
        }
        GameFightPlacementSwapPositionsCancelledMessage.prototype.getMessageId = function() {
            return GameFightPlacementSwapPositionsCancelledMessage.ID;
        };
        GameFightPlacementSwapPositionsCancelledMessage.prototype.reset = function() {
            this.requestId = 0;
            this.cancellerId = 0;
        };
        GameFightPlacementSwapPositionsCancelledMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameFightPlacementSwapPositionsCancelledMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameFightPlacementSwapPositionsCancelledMessage.prototype.serialize = function(output) {
            this.serializeAs_GameFightPlacementSwapPositionsCancelledMessage(output);
        };
        GameFightPlacementSwapPositionsCancelledMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightPlacementSwapPositionsCancelledMessage(input);
        };
        GameFightPlacementSwapPositionsCancelledMessage.prototype.serializeAs_GameFightPlacementSwapPositionsCancelledMessage = function(output) {
            if (this.requestId < 0) {
                throw new Error("Forbidden value (" + this.requestId + ") on element requestId.");
            }
            output.writeInt(this.requestId);
            if (this.cancellerId < -9007199254740990 || this.cancellerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.cancellerId + ") on element cancellerId.");
            }
            output.writeDouble(this.cancellerId);
        };
        GameFightPlacementSwapPositionsCancelledMessage.prototype.deserializeAs_GameFightPlacementSwapPositionsCancelledMessage = function(input) {
            this.requestId = input.readInt();
            if (this.requestId < 0) {
                throw new Error("Forbidden value (" + this.requestId + ") on element of GameFightPlacementSwapPositionsCancelledMessage.requestId.");
            }
            this.cancellerId = input.readDouble();
            if (this.cancellerId < -9007199254740990 || this.cancellerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.cancellerId + ") on element of GameFightPlacementSwapPositionsCancelledMessage.cancellerId.");
            }
        };
        GameFightPlacementSwapPositionsCancelledMessage.ID = 5500;
        return GameFightPlacementSwapPositionsCancelledMessage;
    })(NetworkMessage);
    Protocol.GameFightPlacementSwapPositionsCancelledMessage = GameFightPlacementSwapPositionsCancelledMessage;
    var GameFightPlacementSwapPositionsCancelMessage = (function(_super) {
        __extends(GameFightPlacementSwapPositionsCancelMessage, _super);

        function GameFightPlacementSwapPositionsCancelMessage() {
            this.requestId = 0;
            _super.call(this)
        }
        GameFightPlacementSwapPositionsCancelMessage.prototype.getMessageId = function() {
            return GameFightPlacementSwapPositionsCancelMessage.ID;
        };
        GameFightPlacementSwapPositionsCancelMessage.prototype.reset = function() {
            this.requestId = 0;
        };
        GameFightPlacementSwapPositionsCancelMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameFightPlacementSwapPositionsCancelMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameFightPlacementSwapPositionsCancelMessage.prototype.serialize = function(output) {
            this.serializeAs_GameFightPlacementSwapPositionsCancelMessage(output);
        };
        GameFightPlacementSwapPositionsCancelMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightPlacementSwapPositionsCancelMessage(input);
        };
        GameFightPlacementSwapPositionsCancelMessage.prototype.serializeAs_GameFightPlacementSwapPositionsCancelMessage = function(output) {
            if (this.requestId < 0) {
                throw new Error("Forbidden value (" + this.requestId + ") on element requestId.");
            }
            output.writeInt(this.requestId);
        };
        GameFightPlacementSwapPositionsCancelMessage.prototype.deserializeAs_GameFightPlacementSwapPositionsCancelMessage = function(input) {
            this.requestId = input.readInt();
            if (this.requestId < 0) {
                throw new Error("Forbidden value (" + this.requestId + ") on element of GameFightPlacementSwapPositionsCancelMessage.requestId.");
            }
        };
        GameFightPlacementSwapPositionsCancelMessage.ID = 9929;
        return GameFightPlacementSwapPositionsCancelMessage;
    })(NetworkMessage);
    Protocol.GameFightPlacementSwapPositionsCancelMessage = GameFightPlacementSwapPositionsCancelMessage;
    var GameFightPlacementSwapPositionsErrorMessage = (function(_super) {
        __extends(GameFightPlacementSwapPositionsErrorMessage, _super);

        function GameFightPlacementSwapPositionsErrorMessage() {

            _super.call(this)
        }
        GameFightPlacementSwapPositionsErrorMessage.prototype.getMessageId = function() {
            return GameFightPlacementSwapPositionsErrorMessage.ID;
        };
        GameFightPlacementSwapPositionsErrorMessage.prototype.reset = function() {

        };
        GameFightPlacementSwapPositionsErrorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameFightPlacementSwapPositionsErrorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameFightPlacementSwapPositionsErrorMessage.prototype.serialize = function(output) {
            this.serializeAs_GameFightPlacementSwapPositionsErrorMessage(output);
        };
        GameFightPlacementSwapPositionsErrorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightPlacementSwapPositionsErrorMessage(input);
        };
        GameFightPlacementSwapPositionsErrorMessage.prototype.serializeAs_GameFightPlacementSwapPositionsErrorMessage = function(output) {

        };
        GameFightPlacementSwapPositionsErrorMessage.prototype.deserializeAs_GameFightPlacementSwapPositionsErrorMessage = function(input) {

        };
        GameFightPlacementSwapPositionsErrorMessage.ID = 139;
        return GameFightPlacementSwapPositionsErrorMessage;
    })(NetworkMessage);
    Protocol.GameFightPlacementSwapPositionsErrorMessage = GameFightPlacementSwapPositionsErrorMessage;
    var GameFightPlacementSwapPositionsMessage = (function(_super) {
        __extends(GameFightPlacementSwapPositionsMessage, _super);

        function GameFightPlacementSwapPositionsMessage() {
            this.dispositions = [];
            _super.call(this)
        }
        GameFightPlacementSwapPositionsMessage.prototype.getMessageId = function() {
            return GameFightPlacementSwapPositionsMessage.ID;
        };
        GameFightPlacementSwapPositionsMessage.prototype.reset = function() {
            this.dispositions = [];
        };
        GameFightPlacementSwapPositionsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameFightPlacementSwapPositionsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameFightPlacementSwapPositionsMessage.prototype.serialize = function(output) {
            this.serializeAs_GameFightPlacementSwapPositionsMessage(output);
        };
        GameFightPlacementSwapPositionsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightPlacementSwapPositionsMessage(input);
        };
        GameFightPlacementSwapPositionsMessage.prototype.serializeAs_GameFightPlacementSwapPositionsMessage = function(output) {
            for (var _i1 = 0; _i1 < 2; _i1++) {
                this.dispositions[_i1].serializeAs_IdentifiedEntityDispositionInformations(output);
            }
        };
        GameFightPlacementSwapPositionsMessage.prototype.deserializeAs_GameFightPlacementSwapPositionsMessage = function(input) {
            for (var _i1 = 0; _i1 < 2; _i1++) {
                this.dispositions[_i1] = new IdentifiedEntityDispositionInformations();
                this.dispositions[_i1].deserialize(input);
            }
        };
        GameFightPlacementSwapPositionsMessage.ID = 866;
        return GameFightPlacementSwapPositionsMessage;
    })(NetworkMessage);
    Protocol.GameFightPlacementSwapPositionsMessage = GameFightPlacementSwapPositionsMessage;
    var GameFightPlacementSwapPositionsOfferMessage = (function(_super) {
        __extends(GameFightPlacementSwapPositionsOfferMessage, _super);

        function GameFightPlacementSwapPositionsOfferMessage() {
            this.requestId = 0;
            this.requesterId = 0;
            this.requesterCellId = 0;
            this.requestedId = 0;
            this.requestedCellId = 0;
            _super.call(this)
        }
        GameFightPlacementSwapPositionsOfferMessage.prototype.getMessageId = function() {
            return GameFightPlacementSwapPositionsOfferMessage.ID;
        };
        GameFightPlacementSwapPositionsOfferMessage.prototype.reset = function() {
            this.requestId = 0;
            this.requesterId = 0;
            this.requesterCellId = 0;
            this.requestedId = 0;
            this.requestedCellId = 0;
        };
        GameFightPlacementSwapPositionsOfferMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameFightPlacementSwapPositionsOfferMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameFightPlacementSwapPositionsOfferMessage.prototype.serialize = function(output) {
            this.serializeAs_GameFightPlacementSwapPositionsOfferMessage(output);
        };
        GameFightPlacementSwapPositionsOfferMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightPlacementSwapPositionsOfferMessage(input);
        };
        GameFightPlacementSwapPositionsOfferMessage.prototype.serializeAs_GameFightPlacementSwapPositionsOfferMessage = function(output) {
            if (this.requestId < 0) {
                throw new Error("Forbidden value (" + this.requestId + ") on element requestId.");
            }
            output.writeInt(this.requestId);
            if (this.requesterId < -9007199254740990 || this.requesterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.requesterId + ") on element requesterId.");
            }
            output.writeDouble(this.requesterId);
            if (this.requesterCellId < 0 || this.requesterCellId > 559) {
                throw new Error("Forbidden value (" + this.requesterCellId + ") on element requesterCellId.");
            }
            output.writeVarShort(this.requesterCellId);
            if (this.requestedId < -9007199254740990 || this.requestedId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.requestedId + ") on element requestedId.");
            }
            output.writeDouble(this.requestedId);
            if (this.requestedCellId < 0 || this.requestedCellId > 559) {
                throw new Error("Forbidden value (" + this.requestedCellId + ") on element requestedCellId.");
            }
            output.writeVarShort(this.requestedCellId);
        };
        GameFightPlacementSwapPositionsOfferMessage.prototype.deserializeAs_GameFightPlacementSwapPositionsOfferMessage = function(input) {
            this.requestId = input.readInt();
            if (this.requestId < 0) {
                throw new Error("Forbidden value (" + this.requestId + ") on element of GameFightPlacementSwapPositionsOfferMessage.requestId.");
            }
            this.requesterId = input.readDouble();
            if (this.requesterId < -9007199254740990 || this.requesterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.requesterId + ") on element of GameFightPlacementSwapPositionsOfferMessage.requesterId.");
            }
            this.requesterCellId = input.readVarUhShort();
            if (this.requesterCellId < 0 || this.requesterCellId > 559) {
                throw new Error("Forbidden value (" + this.requesterCellId + ") on element of GameFightPlacementSwapPositionsOfferMessage.requesterCellId.");
            }
            this.requestedId = input.readDouble();
            if (this.requestedId < -9007199254740990 || this.requestedId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.requestedId + ") on element of GameFightPlacementSwapPositionsOfferMessage.requestedId.");
            }
            this.requestedCellId = input.readVarUhShort();
            if (this.requestedCellId < 0 || this.requestedCellId > 559) {
                throw new Error("Forbidden value (" + this.requestedCellId + ") on element of GameFightPlacementSwapPositionsOfferMessage.requestedCellId.");
            }
        };
        GameFightPlacementSwapPositionsOfferMessage.ID = 725;
        return GameFightPlacementSwapPositionsOfferMessage;
    })(NetworkMessage);
    Protocol.GameFightPlacementSwapPositionsOfferMessage = GameFightPlacementSwapPositionsOfferMessage;
    var GameFightPlacementSwapPositionsRequestMessage = (function(_super) {
        __extends(GameFightPlacementSwapPositionsRequestMessage, _super);

        function GameFightPlacementSwapPositionsRequestMessage() {
            this.requestedId = 0;
            _super.call(this)
        }
        GameFightPlacementSwapPositionsRequestMessage.prototype.getMessageId = function() {
            return GameFightPlacementSwapPositionsRequestMessage.ID;
        };
        GameFightPlacementSwapPositionsRequestMessage.prototype.reset = function() {
            this.requestedId = 0;
        };
        GameFightPlacementSwapPositionsRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameFightPlacementSwapPositionsRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameFightPlacementSwapPositionsRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_GameFightPlacementSwapPositionsRequestMessage(output);
        };
        GameFightPlacementSwapPositionsRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightPlacementSwapPositionsRequestMessage(input);
        };
        GameFightPlacementSwapPositionsRequestMessage.prototype.serializeAs_GameFightPlacementSwapPositionsRequestMessage = function(output) {
            _super.prototype.serializeAs_GameFightPlacementPositionRequestMessage.call(this, output);
            if (this.requestedId < -9007199254740990 || this.requestedId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.requestedId + ") on element requestedId.");
            }
            output.writeDouble(this.requestedId);
        };
        GameFightPlacementSwapPositionsRequestMessage.prototype.deserializeAs_GameFightPlacementSwapPositionsRequestMessage = function(input) {
            _super.prototype.deserializeAs_GameFightPlacementPositionRequestMessage.call(this, input);
            this.requestedId = input.readDouble();
            if (this.requestedId < -9007199254740990 || this.requestedId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.requestedId + ") on element of GameFightPlacementSwapPositionsRequestMessage.requestedId.");
            }
        };
        GameFightPlacementSwapPositionsRequestMessage.ID = 1380;
        return GameFightPlacementSwapPositionsRequestMessage;
    })(GameFightPlacementPositionRequestMessage);
    Protocol.GameFightPlacementSwapPositionsRequestMessage = GameFightPlacementSwapPositionsRequestMessage;
    var GameFightReadyMessage = (function(_super) {
        __extends(GameFightReadyMessage, _super);

        function GameFightReadyMessage() {
            this.isReady = false;
            _super.call(this)
        }
        GameFightReadyMessage.prototype.getMessageId = function() {
            return GameFightReadyMessage.ID;
        };
        GameFightReadyMessage.prototype.reset = function() {
            this.isReady = false;
        };
        GameFightReadyMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameFightReadyMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameFightReadyMessage.prototype.serialize = function(output) {
            this.serializeAs_GameFightReadyMessage(output);
        };
        GameFightReadyMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightReadyMessage(input);
        };
        GameFightReadyMessage.prototype.serializeAs_GameFightReadyMessage = function(output) {
            output.writeBoolean(this.isReady);
        };
        GameFightReadyMessage.prototype.deserializeAs_GameFightReadyMessage = function(input) {
            this.isReady = input.readBoolean();
        };
        GameFightReadyMessage.ID = 266;
        return GameFightReadyMessage;
    })(NetworkMessage);
    Protocol.GameFightReadyMessage = GameFightReadyMessage;
    var GameFightRemoveTeamMemberMessage = (function(_super) {
        __extends(GameFightRemoveTeamMemberMessage, _super);

        function GameFightRemoveTeamMemberMessage() {
            this.fightId = 0;
            this.teamId = 2;
            this.charId = 0;
            _super.call(this)
        }
        GameFightRemoveTeamMemberMessage.prototype.getMessageId = function() {
            return GameFightRemoveTeamMemberMessage.ID;
        };
        GameFightRemoveTeamMemberMessage.prototype.reset = function() {
            this.fightId = 0;
            this.teamId = 2;
            this.charId = 0;
        };
        GameFightRemoveTeamMemberMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameFightRemoveTeamMemberMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameFightRemoveTeamMemberMessage.prototype.serialize = function(output) {
            this.serializeAs_GameFightRemoveTeamMemberMessage(output);
        };
        GameFightRemoveTeamMemberMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightRemoveTeamMemberMessage(input);
        };
        GameFightRemoveTeamMemberMessage.prototype.serializeAs_GameFightRemoveTeamMemberMessage = function(output) {
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeVarShort(this.fightId);
            output.writeByte(this.teamId);
            if (this.charId < -9007199254740990 || this.charId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.charId + ") on element charId.");
            }
            output.writeDouble(this.charId);
        };
        GameFightRemoveTeamMemberMessage.prototype.deserializeAs_GameFightRemoveTeamMemberMessage = function(input) {
            this.fightId = input.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of GameFightRemoveTeamMemberMessage.fightId.");
            }
            this.teamId = input.readByte();
            if (this.teamId < 0) {
                throw new Error("Forbidden value (" + this.teamId + ") on element of GameFightRemoveTeamMemberMessage.teamId.");
            }
            this.charId = input.readDouble();
            if (this.charId < -9007199254740990 || this.charId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.charId + ") on element of GameFightRemoveTeamMemberMessage.charId.");
            }
        };
        GameFightRemoveTeamMemberMessage.ID = 8993;
        return GameFightRemoveTeamMemberMessage;
    })(NetworkMessage);
    Protocol.GameFightRemoveTeamMemberMessage = GameFightRemoveTeamMemberMessage;
    var GameFightSpectateMessage = (function(_super) {
        __extends(GameFightSpectateMessage, _super);

        function GameFightSpectateMessage() {
            this.effects = [];
            this.marks = [];
            this.gameTurn = 0;
            this.fightStart = 0;
            this.idols = [];
            this.fxTriggerCounts = [];
            _super.call(this)
        }
        GameFightSpectateMessage.prototype.getMessageId = function() {
            return GameFightSpectateMessage.ID;
        };
        GameFightSpectateMessage.prototype.reset = function() {
            this.effects = [];
            this.marks = [];
            this.gameTurn = 0;
            this.fightStart = 0;
            this.idols = [];
            this.fxTriggerCounts = [];
        };
        GameFightSpectateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameFightSpectateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameFightSpectateMessage.prototype.serialize = function(output) {
            this.serializeAs_GameFightSpectateMessage(output);
        };
        GameFightSpectateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightSpectateMessage(input);
        };
        GameFightSpectateMessage.prototype.serializeAs_GameFightSpectateMessage = function(output) {
            output.writeShort(this.effects.length);
            for (var _i1 = 0; _i1 < this.effects.length; _i1++) {
                (this.effects[_i1]).serializeAs_FightDispellableEffectExtendedInformations(output);
            }
            output.writeShort(this.marks.length);
            for (var _i2 = 0; _i2 < this.marks.length; _i2++) {
                (this.marks[_i2]).serializeAs_GameActionMark(output);
            }
            if (this.gameTurn < 0) {
                throw new Error("Forbidden value (" + this.gameTurn + ") on element gameTurn.");
            }
            output.writeVarShort(this.gameTurn);
            if (this.fightStart < 0) {
                throw new Error("Forbidden value (" + this.fightStart + ") on element fightStart.");
            }
            output.writeInt(this.fightStart);
            output.writeShort(this.idols.length);
            for (var _i5 = 0; _i5 < this.idols.length; _i5++) {
                (this.idols[_i5]).serializeAs_Idol(output);
            }
            output.writeShort(this.fxTriggerCounts.length);
            for (var _i6 = 0; _i6 < this.fxTriggerCounts.length; _i6++) {
                (this.fxTriggerCounts[_i6]).serializeAs_GameFightEffectTriggerCount(output);
            }
        };
        GameFightSpectateMessage.prototype.deserializeAs_GameFightSpectateMessage = function(input) {
            var _item1 = null;
            var _item2 = null;
            var _item5 = null;
            var _item6 = null;
            var _effectsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _effectsLen; _i1++) {
                _item1 = new FightDispellableEffectExtendedInformations();
                _item1.deserialize(input);
                this.effects.push(_item1);
            }
            var _marksLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _marksLen; _i2++) {
                _item2 = new GameActionMark();
                _item2.deserialize(input);
                this.marks.push(_item2);
            }
            this.gameTurn = input.readVarUhShort();
            if (this.gameTurn < 0) {
                throw new Error("Forbidden value (" + this.gameTurn + ") on element of GameFightSpectateMessage.gameTurn.");
            }
            this.fightStart = input.readInt();
            if (this.fightStart < 0) {
                throw new Error("Forbidden value (" + this.fightStart + ") on element of GameFightSpectateMessage.fightStart.");
            }
            var _idolsLen = input.readUnsignedShort();
            for (var _i5 = 0; _i5 < _idolsLen; _i5++) {
                _item5 = new Idol();
                _item5.deserialize(input);
                this.idols.push(_item5);
            }
            var _fxTriggerCountsLen = input.readUnsignedShort();
            for (var _i6 = 0; _i6 < _fxTriggerCountsLen; _i6++) {
                _item6 = new GameFightEffectTriggerCount();
                _item6.deserialize(input);
                this.fxTriggerCounts.push(_item6);
            }
        };
        GameFightSpectateMessage.ID = 9624;
        return GameFightSpectateMessage;
    })(NetworkMessage);
    Protocol.GameFightSpectateMessage = GameFightSpectateMessage;
    var GameFightResumeMessage = (function(_super) {
        __extends(GameFightResumeMessage, _super);

        function GameFightResumeMessage() {
            this.spellCooldowns = [];
            this.summonCount = 0;
            this.bombCount = 0;
            _super.call(this)
        }
        GameFightResumeMessage.prototype.getMessageId = function() {
            return GameFightResumeMessage.ID;
        };
        GameFightResumeMessage.prototype.reset = function() {
            this.spellCooldowns = [];
            this.summonCount = 0;
            this.bombCount = 0;
        };
        GameFightResumeMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameFightResumeMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameFightResumeMessage.prototype.serialize = function(output) {
            this.serializeAs_GameFightResumeMessage(output);
        };
        GameFightResumeMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightResumeMessage(input);
        };
        GameFightResumeMessage.prototype.serializeAs_GameFightResumeMessage = function(output) {
            _super.prototype.serializeAs_GameFightSpectateMessage.call(this, output);
            output.writeShort(this.spellCooldowns.length);
            for (var _i1 = 0; _i1 < this.spellCooldowns.length; _i1++) {
                (this.spellCooldowns[_i1]).serializeAs_GameFightSpellCooldown(output);
            }
            if (this.summonCount < 0) {
                throw new Error("Forbidden value (" + this.summonCount + ") on element summonCount.");
            }
            output.writeByte(this.summonCount);
            if (this.bombCount < 0) {
                throw new Error("Forbidden value (" + this.bombCount + ") on element bombCount.");
            }
            output.writeByte(this.bombCount);
        };
        GameFightResumeMessage.prototype.deserializeAs_GameFightResumeMessage = function(input) {
            var _item1 = null;
            _super.prototype.deserializeAs_GameFightSpectateMessage.call(this, input);
            var _spellCooldownsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _spellCooldownsLen; _i1++) {
                _item1 = new GameFightSpellCooldown();
                _item1.deserialize(input);
                this.spellCooldowns.push(_item1);
            }
            this.summonCount = input.readByte();
            if (this.summonCount < 0) {
                throw new Error("Forbidden value (" + this.summonCount + ") on element of GameFightResumeMessage.summonCount.");
            }
            this.bombCount = input.readByte();
            if (this.bombCount < 0) {
                throw new Error("Forbidden value (" + this.bombCount + ") on element of GameFightResumeMessage.bombCount.");
            }
        };
        GameFightResumeMessage.ID = 8007;
        return GameFightResumeMessage;
    })(GameFightSpectateMessage);
    Protocol.GameFightResumeMessage = GameFightResumeMessage;
    var GameFightResumeWithSlavesMessage = (function(_super) {
        __extends(GameFightResumeWithSlavesMessage, _super);

        function GameFightResumeWithSlavesMessage() {
            this.slavesInfo = [];
            _super.call(this)
        }
        GameFightResumeWithSlavesMessage.prototype.getMessageId = function() {
            return GameFightResumeWithSlavesMessage.ID;
        };
        GameFightResumeWithSlavesMessage.prototype.reset = function() {
            this.slavesInfo = [];
        };
        GameFightResumeWithSlavesMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameFightResumeWithSlavesMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameFightResumeWithSlavesMessage.prototype.serialize = function(output) {
            this.serializeAs_GameFightResumeWithSlavesMessage(output);
        };
        GameFightResumeWithSlavesMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightResumeWithSlavesMessage(input);
        };
        GameFightResumeWithSlavesMessage.prototype.serializeAs_GameFightResumeWithSlavesMessage = function(output) {
            _super.prototype.serializeAs_GameFightResumeMessage.call(this, output);
            output.writeShort(this.slavesInfo.length);
            for (var _i1 = 0; _i1 < this.slavesInfo.length; _i1++) {
                (this.slavesInfo[_i1]).serializeAs_GameFightResumeSlaveInfo(output);
            }
        };
        GameFightResumeWithSlavesMessage.prototype.deserializeAs_GameFightResumeWithSlavesMessage = function(input) {
            var _item1 = null;
            _super.prototype.deserializeAs_GameFightResumeMessage.call(this, input);
            var _slavesInfoLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _slavesInfoLen; _i1++) {
                _item1 = new GameFightResumeSlaveInfo();
                _item1.deserialize(input);
                this.slavesInfo.push(_item1);
            }
        };
        GameFightResumeWithSlavesMessage.ID = 3940;
        return GameFightResumeWithSlavesMessage;
    })(GameFightResumeMessage);
    Protocol.GameFightResumeWithSlavesMessage = GameFightResumeWithSlavesMessage;
    var GameFightSpectatePlayerRequestMessage = (function(_super) {
        __extends(GameFightSpectatePlayerRequestMessage, _super);

        function GameFightSpectatePlayerRequestMessage() {
            this.playerId = 0;
            _super.call(this)
        }
        GameFightSpectatePlayerRequestMessage.prototype.getMessageId = function() {
            return GameFightSpectatePlayerRequestMessage.ID;
        };
        GameFightSpectatePlayerRequestMessage.prototype.reset = function() {
            this.playerId = 0;
        };
        GameFightSpectatePlayerRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameFightSpectatePlayerRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameFightSpectatePlayerRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_GameFightSpectatePlayerRequestMessage(output);
        };
        GameFightSpectatePlayerRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightSpectatePlayerRequestMessage(input);
        };
        GameFightSpectatePlayerRequestMessage.prototype.serializeAs_GameFightSpectatePlayerRequestMessage = function(output) {
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
        };
        GameFightSpectatePlayerRequestMessage.prototype.deserializeAs_GameFightSpectatePlayerRequestMessage = function(input) {
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of GameFightSpectatePlayerRequestMessage.playerId.");
            }
        };
        GameFightSpectatePlayerRequestMessage.ID = 5035;
        return GameFightSpectatePlayerRequestMessage;
    })(NetworkMessage);
    Protocol.GameFightSpectatePlayerRequestMessage = GameFightSpectatePlayerRequestMessage;
    var GameFightSpectatorJoinMessage = (function(_super) {
        __extends(GameFightSpectatorJoinMessage, _super);

        function GameFightSpectatorJoinMessage() {
            this.namedPartyTeams = [];
            _super.call(this)
        }
        GameFightSpectatorJoinMessage.prototype.getMessageId = function() {
            return GameFightSpectatorJoinMessage.ID;
        };
        GameFightSpectatorJoinMessage.prototype.reset = function() {
            this.namedPartyTeams = [];
        };
        GameFightSpectatorJoinMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameFightSpectatorJoinMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameFightSpectatorJoinMessage.prototype.serialize = function(output) {
            this.serializeAs_GameFightSpectatorJoinMessage(output);
        };
        GameFightSpectatorJoinMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightSpectatorJoinMessage(input);
        };
        GameFightSpectatorJoinMessage.prototype.serializeAs_GameFightSpectatorJoinMessage = function(output) {
            _super.prototype.serializeAs_GameFightJoinMessage.call(this, output);
            output.writeShort(this.namedPartyTeams.length);
            for (var _i1 = 0; _i1 < this.namedPartyTeams.length; _i1++) {
                (this.namedPartyTeams[_i1]).serializeAs_NamedPartyTeam(output);
            }
        };
        GameFightSpectatorJoinMessage.prototype.deserializeAs_GameFightSpectatorJoinMessage = function(input) {
            var _item1 = null;
            _super.prototype.deserializeAs_GameFightJoinMessage.call(this, input);
            var _namedPartyTeamsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _namedPartyTeamsLen; _i1++) {
                _item1 = new NamedPartyTeam();
                _item1.deserialize(input);
                this.namedPartyTeams.push(_item1);
            }
        };
        GameFightSpectatorJoinMessage.ID = 6930;
        return GameFightSpectatorJoinMessage;
    })(GameFightJoinMessage);
    Protocol.GameFightSpectatorJoinMessage = GameFightSpectatorJoinMessage;
    var GameFightStartingMessage = (function(_super) {
        __extends(GameFightStartingMessage, _super);

        function GameFightStartingMessage() {
            this.fightType = 0;
            this.fightId = 0;
            this.attackerId = 0;
            this.defenderId = 0;
            this.containsBoss = false;
            _super.call(this)
        }
        GameFightStartingMessage.prototype.getMessageId = function() {
            return GameFightStartingMessage.ID;
        };
        GameFightStartingMessage.prototype.reset = function() {
            this.fightType = 0;
            this.fightId = 0;
            this.attackerId = 0;
            this.defenderId = 0;
            this.containsBoss = false;
        };
        GameFightStartingMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameFightStartingMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameFightStartingMessage.prototype.serialize = function(output) {
            this.serializeAs_GameFightStartingMessage(output);
        };
        GameFightStartingMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightStartingMessage(input);
        };
        GameFightStartingMessage.prototype.serializeAs_GameFightStartingMessage = function(output) {
            output.writeByte(this.fightType);
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeVarShort(this.fightId);
            if (this.attackerId < -9007199254740990 || this.attackerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.attackerId + ") on element attackerId.");
            }
            output.writeDouble(this.attackerId);
            if (this.defenderId < -9007199254740990 || this.defenderId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.defenderId + ") on element defenderId.");
            }
            output.writeDouble(this.defenderId);
            output.writeBoolean(this.containsBoss);
        };
        GameFightStartingMessage.prototype.deserializeAs_GameFightStartingMessage = function(input) {
            this.fightType = input.readByte();
            if (this.fightType < 0) {
                throw new Error("Forbidden value (" + this.fightType + ") on element of GameFightStartingMessage.fightType.");
            }
            this.fightId = input.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of GameFightStartingMessage.fightId.");
            }
            this.attackerId = input.readDouble();
            if (this.attackerId < -9007199254740990 || this.attackerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.attackerId + ") on element of GameFightStartingMessage.attackerId.");
            }
            this.defenderId = input.readDouble();
            if (this.defenderId < -9007199254740990 || this.defenderId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.defenderId + ") on element of GameFightStartingMessage.defenderId.");
            }
            this.containsBoss = input.readBoolean();
        };
        GameFightStartingMessage.ID = 3960;
        return GameFightStartingMessage;
    })(NetworkMessage);
    Protocol.GameFightStartingMessage = GameFightStartingMessage;
    var GameFightStartMessage = (function(_super) {
        __extends(GameFightStartMessage, _super);

        function GameFightStartMessage() {
            this.idols = [];
            _super.call(this)
        }
        GameFightStartMessage.prototype.getMessageId = function() {
            return GameFightStartMessage.ID;
        };
        GameFightStartMessage.prototype.reset = function() {
            this.idols = [];
        };
        GameFightStartMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameFightStartMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameFightStartMessage.prototype.serialize = function(output) {
            this.serializeAs_GameFightStartMessage(output);
        };
        GameFightStartMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightStartMessage(input);
        };
        GameFightStartMessage.prototype.serializeAs_GameFightStartMessage = function(output) {
            output.writeShort(this.idols.length);
            for (var _i1 = 0; _i1 < this.idols.length; _i1++) {
                (this.idols[_i1]).serializeAs_Idol(output);
            }
        };
        GameFightStartMessage.prototype.deserializeAs_GameFightStartMessage = function(input) {
            var _item1 = null;
            var _idolsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _idolsLen; _i1++) {
                _item1 = new Idol();
                _item1.deserialize(input);
                this.idols.push(_item1);
            }
        };
        GameFightStartMessage.ID = 7439;
        return GameFightStartMessage;
    })(NetworkMessage);
    Protocol.GameFightStartMessage = GameFightStartMessage;
    var GameFightSynchronizeMessage = (function(_super) {
        __extends(GameFightSynchronizeMessage, _super);

        function GameFightSynchronizeMessage() {
            this.fighters = [];
            _super.call(this)
        }
        GameFightSynchronizeMessage.prototype.getMessageId = function() {
            return GameFightSynchronizeMessage.ID;
        };
        GameFightSynchronizeMessage.prototype.reset = function() {
            this.fighters = [];
        };
        GameFightSynchronizeMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameFightSynchronizeMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameFightSynchronizeMessage.prototype.serialize = function(output) {
            this.serializeAs_GameFightSynchronizeMessage(output);
        };
        GameFightSynchronizeMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightSynchronizeMessage(input);
        };
        GameFightSynchronizeMessage.prototype.serializeAs_GameFightSynchronizeMessage = function(output) {
            output.writeShort(this.fighters.length);
            for (var _i1 = 0; _i1 < this.fighters.length; _i1++) {
                output.writeShort((this.fighters[_i1]).getTypeId());
                (this.fighters[_i1]).serialize(output);
            }
        };
        GameFightSynchronizeMessage.prototype.deserializeAs_GameFightSynchronizeMessage = function(input) {
            var _id1 = 0;
            var _item1 = null;
            var _fightersLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _fightersLen; _i1++) {
                _id1 = input.readUnsignedShort();
                _item1 = ProtocolTypeManager.getInstance(GameFightFighterInformations, _id1);
                _item1.deserialize(input);
                this.fighters.push(_item1);
            }
        };
        GameFightSynchronizeMessage.ID = 4824;
        return GameFightSynchronizeMessage;
    })(NetworkMessage);
    Protocol.GameFightSynchronizeMessage = GameFightSynchronizeMessage;
    var GameFightTurnEndMessage = (function(_super) {
        __extends(GameFightTurnEndMessage, _super);

        function GameFightTurnEndMessage() {
            this.id = 0;
            _super.call(this)
        }
        GameFightTurnEndMessage.prototype.getMessageId = function() {
            return GameFightTurnEndMessage.ID;
        };
        GameFightTurnEndMessage.prototype.reset = function() {
            this.id = 0;
        };
        GameFightTurnEndMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameFightTurnEndMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameFightTurnEndMessage.prototype.serialize = function(output) {
            this.serializeAs_GameFightTurnEndMessage(output);
        };
        GameFightTurnEndMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightTurnEndMessage(input);
        };
        GameFightTurnEndMessage.prototype.serializeAs_GameFightTurnEndMessage = function(output) {
            if (this.id < -9007199254740990 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeDouble(this.id);
        };
        GameFightTurnEndMessage.prototype.deserializeAs_GameFightTurnEndMessage = function(input) {
            this.id = input.readDouble();
            if (this.id < -9007199254740990 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element of GameFightTurnEndMessage.id.");
            }
        };
        GameFightTurnEndMessage.ID = 8856;
        return GameFightTurnEndMessage;
    })(NetworkMessage);
    Protocol.GameFightTurnEndMessage = GameFightTurnEndMessage;
    var GameFightTurnFinishMessage = (function(_super) {
        __extends(GameFightTurnFinishMessage, _super);

        function GameFightTurnFinishMessage() {
            this.isAfk = false;
            _super.call(this)
        }
        GameFightTurnFinishMessage.prototype.getMessageId = function() {
            return GameFightTurnFinishMessage.ID;
        };
        GameFightTurnFinishMessage.prototype.reset = function() {
            this.isAfk = false;
        };
        GameFightTurnFinishMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameFightTurnFinishMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameFightTurnFinishMessage.prototype.serialize = function(output) {
            this.serializeAs_GameFightTurnFinishMessage(output);
        };
        GameFightTurnFinishMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightTurnFinishMessage(input);
        };
        GameFightTurnFinishMessage.prototype.serializeAs_GameFightTurnFinishMessage = function(output) {
            output.writeBoolean(this.isAfk);
        };
        GameFightTurnFinishMessage.prototype.deserializeAs_GameFightTurnFinishMessage = function(input) {
            this.isAfk = input.readBoolean();
        };
        GameFightTurnFinishMessage.ID = 1536;
        return GameFightTurnFinishMessage;
    })(NetworkMessage);
    Protocol.GameFightTurnFinishMessage = GameFightTurnFinishMessage;
    var GameFightTurnListMessage = (function(_super) {
        __extends(GameFightTurnListMessage, _super);

        function GameFightTurnListMessage() {
            this.ids = [];
            this.deadsIds = [];
            _super.call(this)
        }
        GameFightTurnListMessage.prototype.getMessageId = function() {
            return GameFightTurnListMessage.ID;
        };
        GameFightTurnListMessage.prototype.reset = function() {
            this.ids = [];
            this.deadsIds = [];
        };
        GameFightTurnListMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameFightTurnListMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameFightTurnListMessage.prototype.serialize = function(output) {
            this.serializeAs_GameFightTurnListMessage(output);
        };
        GameFightTurnListMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightTurnListMessage(input);
        };
        GameFightTurnListMessage.prototype.serializeAs_GameFightTurnListMessage = function(output) {
            output.writeShort(this.ids.length);
            for (var _i1 = 0; _i1 < this.ids.length; _i1++) {
                if (this.ids[_i1] < -9007199254740990 || this.ids[_i1] > 9007199254740990) {
                    throw new Error("Forbidden value (" + this.ids[_i1] + ") on element 1 (starting at 1) of ids.");
                }
                output.writeDouble(this.ids[_i1]);
            }
            output.writeShort(this.deadsIds.length);
            for (var _i2 = 0; _i2 < this.deadsIds.length; _i2++) {
                if (this.deadsIds[_i2] < -9007199254740990 || this.deadsIds[_i2] > 9007199254740990) {
                    throw new Error("Forbidden value (" + this.deadsIds[_i2] + ") on element 2 (starting at 1) of deadsIds.");
                }
                output.writeDouble(this.deadsIds[_i2]);
            }
        };
        GameFightTurnListMessage.prototype.deserializeAs_GameFightTurnListMessage = function(input) {
            var _val1 = NaN;
            var _val2 = NaN;
            var _idsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _idsLen; _i1++) {
                _val1 = input.readDouble();
                if (_val1 < -9007199254740990 || _val1 > 9007199254740990) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of ids.");
                }
                this.ids.push(_val1);
            }
            var _deadsIdsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _deadsIdsLen; _i2++) {
                _val2 = input.readDouble();
                if (_val2 < -9007199254740990 || _val2 > 9007199254740990) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of deadsIds.");
                }
                this.deadsIds.push(_val2);
            }
        };
        GameFightTurnListMessage.ID = 9365;
        return GameFightTurnListMessage;
    })(NetworkMessage);
    Protocol.GameFightTurnListMessage = GameFightTurnListMessage;
    var GameFightTurnReadyMessage = (function(_super) {
        __extends(GameFightTurnReadyMessage, _super);

        function GameFightTurnReadyMessage() {
            this.isReady = false;
            _super.call(this)
        }
        GameFightTurnReadyMessage.prototype.getMessageId = function() {
            return GameFightTurnReadyMessage.ID;
        };
        GameFightTurnReadyMessage.prototype.reset = function() {
            this.isReady = false;
        };
        GameFightTurnReadyMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameFightTurnReadyMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameFightTurnReadyMessage.prototype.serialize = function(output) {
            this.serializeAs_GameFightTurnReadyMessage(output);
        };
        GameFightTurnReadyMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightTurnReadyMessage(input);
        };
        GameFightTurnReadyMessage.prototype.serializeAs_GameFightTurnReadyMessage = function(output) {
            output.writeBoolean(this.isReady);
        };
        GameFightTurnReadyMessage.prototype.deserializeAs_GameFightTurnReadyMessage = function(input) {
            this.isReady = input.readBoolean();
        };
        GameFightTurnReadyMessage.ID = 765;
        return GameFightTurnReadyMessage;
    })(NetworkMessage);
    Protocol.GameFightTurnReadyMessage = GameFightTurnReadyMessage;
    var GameFightTurnReadyRequestMessage = (function(_super) {
        __extends(GameFightTurnReadyRequestMessage, _super);

        function GameFightTurnReadyRequestMessage() {
            this.id = 0;
            _super.call(this)
        }
        GameFightTurnReadyRequestMessage.prototype.getMessageId = function() {
            return GameFightTurnReadyRequestMessage.ID;
        };
        GameFightTurnReadyRequestMessage.prototype.reset = function() {
            this.id = 0;
        };
        GameFightTurnReadyRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameFightTurnReadyRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameFightTurnReadyRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_GameFightTurnReadyRequestMessage(output);
        };
        GameFightTurnReadyRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightTurnReadyRequestMessage(input);
        };
        GameFightTurnReadyRequestMessage.prototype.serializeAs_GameFightTurnReadyRequestMessage = function(output) {
            if (this.id < -9007199254740990 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeDouble(this.id);
        };
        GameFightTurnReadyRequestMessage.prototype.deserializeAs_GameFightTurnReadyRequestMessage = function(input) {
            this.id = input.readDouble();
            if (this.id < -9007199254740990 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element of GameFightTurnReadyRequestMessage.id.");
            }
        };
        GameFightTurnReadyRequestMessage.ID = 6293;
        return GameFightTurnReadyRequestMessage;
    })(NetworkMessage);
    Protocol.GameFightTurnReadyRequestMessage = GameFightTurnReadyRequestMessage;
    var GameFightTurnStartMessage = (function(_super) {
        __extends(GameFightTurnStartMessage, _super);

        function GameFightTurnStartMessage() {
            this.id = 0;
            this.waitTime = 0;
            _super.call(this)
        }
        GameFightTurnStartMessage.prototype.getMessageId = function() {
            return GameFightTurnStartMessage.ID;
        };
        GameFightTurnStartMessage.prototype.reset = function() {
            this.id = 0;
            this.waitTime = 0;
        };
        GameFightTurnStartMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameFightTurnStartMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameFightTurnStartMessage.prototype.serialize = function(output) {
            this.serializeAs_GameFightTurnStartMessage(output);
        };
        GameFightTurnStartMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightTurnStartMessage(input);
        };
        GameFightTurnStartMessage.prototype.serializeAs_GameFightTurnStartMessage = function(output) {
            if (this.id < -9007199254740990 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeDouble(this.id);
            if (this.waitTime < 0) {
                throw new Error("Forbidden value (" + this.waitTime + ") on element waitTime.");
            }
            output.writeVarInt(this.waitTime);
        };
        GameFightTurnStartMessage.prototype.deserializeAs_GameFightTurnStartMessage = function(input) {
            this.id = input.readDouble();
            if (this.id < -9007199254740990 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element of GameFightTurnStartMessage.id.");
            }
            this.waitTime = input.readVarUhInt();
            if (this.waitTime < 0) {
                throw new Error("Forbidden value (" + this.waitTime + ") on element of GameFightTurnStartMessage.waitTime.");
            }
        };
        GameFightTurnStartMessage.ID = 7110;
        return GameFightTurnStartMessage;
    })(NetworkMessage);
    Protocol.GameFightTurnStartMessage = GameFightTurnStartMessage;
    var GameFightTurnResumeMessage = (function(_super) {
        __extends(GameFightTurnResumeMessage, _super);

        function GameFightTurnResumeMessage() {
            this.remainingTime = 0;
            _super.call(this)
        }
        GameFightTurnResumeMessage.prototype.getMessageId = function() {
            return GameFightTurnResumeMessage.ID;
        };
        GameFightTurnResumeMessage.prototype.reset = function() {
            this.remainingTime = 0;
        };
        GameFightTurnResumeMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameFightTurnResumeMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameFightTurnResumeMessage.prototype.serialize = function(output) {
            this.serializeAs_GameFightTurnResumeMessage(output);
        };
        GameFightTurnResumeMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightTurnResumeMessage(input);
        };
        GameFightTurnResumeMessage.prototype.serializeAs_GameFightTurnResumeMessage = function(output) {
            _super.prototype.serializeAs_GameFightTurnStartMessage.call(this, output);
            if (this.remainingTime < 0) {
                throw new Error("Forbidden value (" + this.remainingTime + ") on element remainingTime.");
            }
            output.writeVarInt(this.remainingTime);
        };
        GameFightTurnResumeMessage.prototype.deserializeAs_GameFightTurnResumeMessage = function(input) {
            _super.prototype.deserializeAs_GameFightTurnStartMessage.call(this, input);
            this.remainingTime = input.readVarUhInt();
            if (this.remainingTime < 0) {
                throw new Error("Forbidden value (" + this.remainingTime + ") on element of GameFightTurnResumeMessage.remainingTime.");
            }
        };
        GameFightTurnResumeMessage.ID = 2330;
        return GameFightTurnResumeMessage;
    })(GameFightTurnStartMessage);
    Protocol.GameFightTurnResumeMessage = GameFightTurnResumeMessage;
    var GameFightTurnStartPlayingMessage = (function(_super) {
        __extends(GameFightTurnStartPlayingMessage, _super);

        function GameFightTurnStartPlayingMessage() {

            _super.call(this)
        }
        GameFightTurnStartPlayingMessage.prototype.getMessageId = function() {
            return GameFightTurnStartPlayingMessage.ID;
        };
        GameFightTurnStartPlayingMessage.prototype.reset = function() {

        };
        GameFightTurnStartPlayingMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameFightTurnStartPlayingMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameFightTurnStartPlayingMessage.prototype.serialize = function(output) {
            this.serializeAs_GameFightTurnStartPlayingMessage(output);
        };
        GameFightTurnStartPlayingMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightTurnStartPlayingMessage(input);
        };
        GameFightTurnStartPlayingMessage.prototype.serializeAs_GameFightTurnStartPlayingMessage = function(output) {

        };
        GameFightTurnStartPlayingMessage.prototype.deserializeAs_GameFightTurnStartPlayingMessage = function(input) {

        };
        GameFightTurnStartPlayingMessage.ID = 5330;
        return GameFightTurnStartPlayingMessage;
    })(NetworkMessage);
    Protocol.GameFightTurnStartPlayingMessage = GameFightTurnStartPlayingMessage;
    var GameFightUpdateTeamMessage = (function(_super) {
        __extends(GameFightUpdateTeamMessage, _super);

        function GameFightUpdateTeamMessage() {
            this.fightId = 0;
            this.team = new FightTeamInformations();
            _super.call(this)
        }
        GameFightUpdateTeamMessage.prototype.getMessageId = function() {
            return GameFightUpdateTeamMessage.ID;
        };
        GameFightUpdateTeamMessage.prototype.reset = function() {
            this.fightId = 0;
            this.team = new FightTeamInformations();
        };
        GameFightUpdateTeamMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameFightUpdateTeamMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameFightUpdateTeamMessage.prototype.serialize = function(output) {
            this.serializeAs_GameFightUpdateTeamMessage(output);
        };
        GameFightUpdateTeamMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameFightUpdateTeamMessage(input);
        };
        GameFightUpdateTeamMessage.prototype.serializeAs_GameFightUpdateTeamMessage = function(output) {
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeVarShort(this.fightId);
            this.team.serializeAs_FightTeamInformations(output);
        };
        GameFightUpdateTeamMessage.prototype.deserializeAs_GameFightUpdateTeamMessage = function(input) {
            this.fightId = input.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of GameFightUpdateTeamMessage.fightId.");
            }
            this.team = new FightTeamInformations();
            this.team.deserialize(input);
        };
        GameFightUpdateTeamMessage.ID = 9746;
        return GameFightUpdateTeamMessage;
    })(NetworkMessage);
    Protocol.GameFightUpdateTeamMessage = GameFightUpdateTeamMessage;
    var RefreshCharacterStatsMessage = (function(_super) {
        __extends(RefreshCharacterStatsMessage, _super);

        function RefreshCharacterStatsMessage() {
            this.fighterId = 0;
            this.stats = new GameFightMinimalStats();
            _super.call(this)
        }
        RefreshCharacterStatsMessage.prototype.getMessageId = function() {
            return RefreshCharacterStatsMessage.ID;
        };
        RefreshCharacterStatsMessage.prototype.reset = function() {
            this.fighterId = 0;
            this.stats = new GameFightMinimalStats();
        };
        RefreshCharacterStatsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        RefreshCharacterStatsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        RefreshCharacterStatsMessage.prototype.serialize = function(output) {
            this.serializeAs_RefreshCharacterStatsMessage(output);
        };
        RefreshCharacterStatsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_RefreshCharacterStatsMessage(input);
        };
        RefreshCharacterStatsMessage.prototype.serializeAs_RefreshCharacterStatsMessage = function(output) {
            if (this.fighterId < -9007199254740990 || this.fighterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.fighterId + ") on element fighterId.");
            }
            output.writeDouble(this.fighterId);
            this.stats.serializeAs_GameFightMinimalStats(output);
        };
        RefreshCharacterStatsMessage.prototype.deserializeAs_RefreshCharacterStatsMessage = function(input) {
            this.fighterId = input.readDouble();
            if (this.fighterId < -9007199254740990 || this.fighterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.fighterId + ") on element of RefreshCharacterStatsMessage.fighterId.");
            }
            this.stats = new GameFightMinimalStats();
            this.stats.deserialize(input);
        };
        RefreshCharacterStatsMessage.ID = 1497;
        return RefreshCharacterStatsMessage;
    })(NetworkMessage);
    Protocol.RefreshCharacterStatsMessage = RefreshCharacterStatsMessage;
    var SlaveNoLongerControledMessage = (function(_super) {
        __extends(SlaveNoLongerControledMessage, _super);

        function SlaveNoLongerControledMessage() {
            this.masterId = 0;
            this.slaveId = 0;
            _super.call(this)
        }
        SlaveNoLongerControledMessage.prototype.getMessageId = function() {
            return SlaveNoLongerControledMessage.ID;
        };
        SlaveNoLongerControledMessage.prototype.reset = function() {
            this.masterId = 0;
            this.slaveId = 0;
        };
        SlaveNoLongerControledMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        SlaveNoLongerControledMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        SlaveNoLongerControledMessage.prototype.serialize = function(output) {
            this.serializeAs_SlaveNoLongerControledMessage(output);
        };
        SlaveNoLongerControledMessage.prototype.deserialize = function(input) {
            this.deserializeAs_SlaveNoLongerControledMessage(input);
        };
        SlaveNoLongerControledMessage.prototype.serializeAs_SlaveNoLongerControledMessage = function(output) {
            if (this.masterId < -9007199254740990 || this.masterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.masterId + ") on element masterId.");
            }
            output.writeDouble(this.masterId);
            if (this.slaveId < -9007199254740990 || this.slaveId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.slaveId + ") on element slaveId.");
            }
            output.writeDouble(this.slaveId);
        };
        SlaveNoLongerControledMessage.prototype.deserializeAs_SlaveNoLongerControledMessage = function(input) {
            this.masterId = input.readDouble();
            if (this.masterId < -9007199254740990 || this.masterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.masterId + ") on element of SlaveNoLongerControledMessage.masterId.");
            }
            this.slaveId = input.readDouble();
            if (this.slaveId < -9007199254740990 || this.slaveId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.slaveId + ") on element of SlaveNoLongerControledMessage.slaveId.");
            }
        };
        SlaveNoLongerControledMessage.ID = 6112;
        return SlaveNoLongerControledMessage;
    })(NetworkMessage);
    Protocol.SlaveNoLongerControledMessage = SlaveNoLongerControledMessage;
    var SlaveSwitchContextMessage = (function(_super) {
        __extends(SlaveSwitchContextMessage, _super);

        function SlaveSwitchContextMessage() {
            this.masterId = 0;
            this.slaveId = 0;
            this.slaveSpells = [];
            this.slaveStats = new CharacterCharacteristicsInformations();
            this.shortcuts = [];
            _super.call(this)
        }
        SlaveSwitchContextMessage.prototype.getMessageId = function() {
            return SlaveSwitchContextMessage.ID;
        };
        SlaveSwitchContextMessage.prototype.reset = function() {
            this.masterId = 0;
            this.slaveId = 0;
            this.slaveSpells = [];
            this.slaveStats = new CharacterCharacteristicsInformations();
            this.shortcuts = [];
        };
        SlaveSwitchContextMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        SlaveSwitchContextMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        SlaveSwitchContextMessage.prototype.serialize = function(output) {
            this.serializeAs_SlaveSwitchContextMessage(output);
        };
        SlaveSwitchContextMessage.prototype.deserialize = function(input) {
            this.deserializeAs_SlaveSwitchContextMessage(input);
        };
        SlaveSwitchContextMessage.prototype.serializeAs_SlaveSwitchContextMessage = function(output) {
            if (this.masterId < -9007199254740990 || this.masterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.masterId + ") on element masterId.");
            }
            output.writeDouble(this.masterId);
            if (this.slaveId < -9007199254740990 || this.slaveId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.slaveId + ") on element slaveId.");
            }
            output.writeDouble(this.slaveId);
            output.writeShort(this.slaveSpells.length);
            for (var _i3 = 0; _i3 < this.slaveSpells.length; _i3++) {
                (this.slaveSpells[_i3]).serializeAs_SpellItem(output);
            }
            this.slaveStats.serializeAs_CharacterCharacteristicsInformations(output);
            output.writeShort(this.shortcuts.length);
            for (var _i5 = 0; _i5 < this.shortcuts.length; _i5++) {
                output.writeShort((this.shortcuts[_i5]).getTypeId());
                (this.shortcuts[_i5]).serialize(output);
            }
        };
        SlaveSwitchContextMessage.prototype.deserializeAs_SlaveSwitchContextMessage = function(input) {
            var _item3 = null;
            var _id5 = 0;
            var _item5 = null;
            this.masterId = input.readDouble();
            if (this.masterId < -9007199254740990 || this.masterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.masterId + ") on element of SlaveSwitchContextMessage.masterId.");
            }
            this.slaveId = input.readDouble();
            if (this.slaveId < -9007199254740990 || this.slaveId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.slaveId + ") on element of SlaveSwitchContextMessage.slaveId.");
            }
            var _slaveSpellsLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _slaveSpellsLen; _i3++) {
                _item3 = new SpellItem();
                _item3.deserialize(input);
                this.slaveSpells.push(_item3);
            }
            this.slaveStats = new CharacterCharacteristicsInformations();
            this.slaveStats.deserialize(input);
            var _shortcutsLen = input.readUnsignedShort();
            for (var _i5 = 0; _i5 < _shortcutsLen; _i5++) {
                _id5 = input.readUnsignedShort();
                _item5 = ProtocolTypeManager.getInstance(Shortcut, _id5);
                _item5.deserialize(input);
                this.shortcuts.push(_item5);
            }
        };
        SlaveSwitchContextMessage.ID = 5295;
        return SlaveSwitchContextMessage;
    })(NetworkMessage);
    Protocol.SlaveSwitchContextMessage = SlaveSwitchContextMessage;
    var GameMapMovementMessage = (function(_super) {
        __extends(GameMapMovementMessage, _super);

        function GameMapMovementMessage() {
            this.keyMovements = [];
            this.forcedDirection = 0;
            this.actorId = 0;
            _super.call(this)
        }
        GameMapMovementMessage.prototype.getMessageId = function() {
            return GameMapMovementMessage.ID;
        };
        GameMapMovementMessage.prototype.reset = function() {
            this.keyMovements = [];
            this.forcedDirection = 0;
            this.actorId = 0;
        };
        GameMapMovementMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameMapMovementMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameMapMovementMessage.prototype.serialize = function(output) {
            this.serializeAs_GameMapMovementMessage(output);
        };
        GameMapMovementMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameMapMovementMessage(input);
        };
        GameMapMovementMessage.prototype.serializeAs_GameMapMovementMessage = function(output) {
            output.writeShort(this.keyMovements.length);
            for (var _i1 = 0; _i1 < this.keyMovements.length; _i1++) {
                if (this.keyMovements[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.keyMovements[_i1] + ") on element 1 (starting at 1) of keyMovements.");
                }
                output.writeShort(this.keyMovements[_i1]);
            }
            output.writeShort(this.forcedDirection);
            if (this.actorId < -9007199254740990 || this.actorId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.actorId + ") on element actorId.");
            }
            output.writeDouble(this.actorId);
        };
        GameMapMovementMessage.prototype.deserializeAs_GameMapMovementMessage = function(input) {
            var _val1 = 0;
            var _keyMovementsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _keyMovementsLen; _i1++) {
                _val1 = input.readShort();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of keyMovements.");
                }
                this.keyMovements.push(_val1);
            }
            this.forcedDirection = input.readShort();
            this.actorId = input.readDouble();
            if (this.actorId < -9007199254740990 || this.actorId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.actorId + ") on element of GameMapMovementMessage.actorId.");
            }
        };
        GameMapMovementMessage.ID = 5538;
        return GameMapMovementMessage;
    })(NetworkMessage);
    Protocol.GameMapMovementMessage = GameMapMovementMessage;
    var GameCautiousMapMovementMessage = (function(_super) {
        __extends(GameCautiousMapMovementMessage, _super);

        function GameCautiousMapMovementMessage() {

            _super.call(this)
        }
        GameCautiousMapMovementMessage.prototype.getMessageId = function() {
            return GameCautiousMapMovementMessage.ID;
        };
        GameCautiousMapMovementMessage.prototype.reset = function() {

        };
        GameCautiousMapMovementMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameCautiousMapMovementMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameCautiousMapMovementMessage.prototype.serialize = function(output) {
            this.serializeAs_GameCautiousMapMovementMessage(output);
        };
        GameCautiousMapMovementMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameCautiousMapMovementMessage(input);
        };
        GameCautiousMapMovementMessage.prototype.serializeAs_GameCautiousMapMovementMessage = function(output) {
            _super.prototype.serializeAs_GameMapMovementMessage.call(this, output);
        };
        GameCautiousMapMovementMessage.prototype.deserializeAs_GameCautiousMapMovementMessage = function(input) {
            _super.prototype.deserializeAs_GameMapMovementMessage.call(this, input);
        };
        GameCautiousMapMovementMessage.ID = 3954;
        return GameCautiousMapMovementMessage;
    })(GameMapMovementMessage);
    Protocol.GameCautiousMapMovementMessage = GameCautiousMapMovementMessage;
    var GameMapMovementRequestMessage = (function(_super) {
        __extends(GameMapMovementRequestMessage, _super);

        function GameMapMovementRequestMessage() {
            this.keyMovements = [];
            this.mapId = 0;
            _super.call(this)
        }
        GameMapMovementRequestMessage.prototype.getMessageId = function() {
            return GameMapMovementRequestMessage.ID;
        };
        GameMapMovementRequestMessage.prototype.reset = function() {
            this.keyMovements = [];
            this.mapId = 0;
        };
        GameMapMovementRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameMapMovementRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameMapMovementRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_GameMapMovementRequestMessage(output);
        };
        GameMapMovementRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameMapMovementRequestMessage(input);
        };
        GameMapMovementRequestMessage.prototype.serializeAs_GameMapMovementRequestMessage = function(output) {
            output.writeShort(this.keyMovements.length);
            for (var _i1 = 0; _i1 < this.keyMovements.length; _i1++) {
                if (this.keyMovements[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.keyMovements[_i1] + ") on element 1 (starting at 1) of keyMovements.");
                }
                output.writeShort(this.keyMovements[_i1]);
            }
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
        };
        GameMapMovementRequestMessage.prototype.deserializeAs_GameMapMovementRequestMessage = function(input) {
            var _val1 = 0;
            var _keyMovementsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _keyMovementsLen; _i1++) {
                _val1 = input.readShort();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of keyMovements.");
                }
                this.keyMovements.push(_val1);
            }
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of GameMapMovementRequestMessage.mapId.");
            }
        };
        GameMapMovementRequestMessage.ID = 3376;
        return GameMapMovementRequestMessage;
    })(NetworkMessage);
    Protocol.GameMapMovementRequestMessage = GameMapMovementRequestMessage;
    var GameCautiousMapMovementRequestMessage = (function(_super) {
        __extends(GameCautiousMapMovementRequestMessage, _super);

        function GameCautiousMapMovementRequestMessage() {

            _super.call(this)
        }
        GameCautiousMapMovementRequestMessage.prototype.getMessageId = function() {
            return GameCautiousMapMovementRequestMessage.ID;
        };
        GameCautiousMapMovementRequestMessage.prototype.reset = function() {

        };
        GameCautiousMapMovementRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameCautiousMapMovementRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameCautiousMapMovementRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_GameCautiousMapMovementRequestMessage(output);
        };
        GameCautiousMapMovementRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameCautiousMapMovementRequestMessage(input);
        };
        GameCautiousMapMovementRequestMessage.prototype.serializeAs_GameCautiousMapMovementRequestMessage = function(output) {
            _super.prototype.serializeAs_GameMapMovementRequestMessage.call(this, output);
        };
        GameCautiousMapMovementRequestMessage.prototype.deserializeAs_GameCautiousMapMovementRequestMessage = function(input) {
            _super.prototype.deserializeAs_GameMapMovementRequestMessage.call(this, input);
        };
        GameCautiousMapMovementRequestMessage.ID = 5883;
        return GameCautiousMapMovementRequestMessage;
    })(GameMapMovementRequestMessage);
    Protocol.GameCautiousMapMovementRequestMessage = GameCautiousMapMovementRequestMessage;
    var GameContextCreateErrorMessage = (function(_super) {
        __extends(GameContextCreateErrorMessage, _super);

        function GameContextCreateErrorMessage() {

            _super.call(this)
        }
        GameContextCreateErrorMessage.prototype.getMessageId = function() {
            return GameContextCreateErrorMessage.ID;
        };
        GameContextCreateErrorMessage.prototype.reset = function() {

        };
        GameContextCreateErrorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameContextCreateErrorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameContextCreateErrorMessage.prototype.serialize = function(output) {
            this.serializeAs_GameContextCreateErrorMessage(output);
        };
        GameContextCreateErrorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameContextCreateErrorMessage(input);
        };
        GameContextCreateErrorMessage.prototype.serializeAs_GameContextCreateErrorMessage = function(output) {

        };
        GameContextCreateErrorMessage.prototype.deserializeAs_GameContextCreateErrorMessage = function(input) {

        };
        GameContextCreateErrorMessage.ID = 6223;
        return GameContextCreateErrorMessage;
    })(NetworkMessage);
    Protocol.GameContextCreateErrorMessage = GameContextCreateErrorMessage;
    var GameContextCreateMessage = (function(_super) {
        __extends(GameContextCreateMessage, _super);

        function GameContextCreateMessage() {
            this.context = 1;
            _super.call(this)
        }
        GameContextCreateMessage.prototype.getMessageId = function() {
            return GameContextCreateMessage.ID;
        };
        GameContextCreateMessage.prototype.reset = function() {
            this.context = 1;
        };
        GameContextCreateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameContextCreateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameContextCreateMessage.prototype.serialize = function(output) {
            this.serializeAs_GameContextCreateMessage(output);
        };
        GameContextCreateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameContextCreateMessage(input);
        };
        GameContextCreateMessage.prototype.serializeAs_GameContextCreateMessage = function(output) {
            output.writeByte(this.context);
        };
        GameContextCreateMessage.prototype.deserializeAs_GameContextCreateMessage = function(input) {
            this.context = input.readByte();
            if (this.context < 0) {
                throw new Error("Forbidden value (" + this.context + ") on element of GameContextCreateMessage.context.");
            }
        };
        GameContextCreateMessage.ID = 8097;
        return GameContextCreateMessage;
    })(NetworkMessage);
    Protocol.GameContextCreateMessage = GameContextCreateMessage;
    var GameContextCreateRequestMessage = (function(_super) {
        __extends(GameContextCreateRequestMessage, _super);

        function GameContextCreateRequestMessage() {

            _super.call(this)
        }
        GameContextCreateRequestMessage.prototype.getMessageId = function() {
            return GameContextCreateRequestMessage.ID;
        };
        GameContextCreateRequestMessage.prototype.reset = function() {

        };
        GameContextCreateRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameContextCreateRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameContextCreateRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_GameContextCreateRequestMessage(output);
        };
        GameContextCreateRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameContextCreateRequestMessage(input);
        };
        GameContextCreateRequestMessage.prototype.serializeAs_GameContextCreateRequestMessage = function(output) {

        };
        GameContextCreateRequestMessage.prototype.deserializeAs_GameContextCreateRequestMessage = function(input) {

        };
        GameContextCreateRequestMessage.ID = 8305;
        return GameContextCreateRequestMessage;
    })(NetworkMessage);
    Protocol.GameContextCreateRequestMessage = GameContextCreateRequestMessage;
    var GameContextDestroyMessage = (function(_super) {
        __extends(GameContextDestroyMessage, _super);

        function GameContextDestroyMessage() {

            _super.call(this)
        }
        GameContextDestroyMessage.prototype.getMessageId = function() {
            return GameContextDestroyMessage.ID;
        };
        GameContextDestroyMessage.prototype.reset = function() {

        };
        GameContextDestroyMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameContextDestroyMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameContextDestroyMessage.prototype.serialize = function(output) {
            this.serializeAs_GameContextDestroyMessage(output);
        };
        GameContextDestroyMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameContextDestroyMessage(input);
        };
        GameContextDestroyMessage.prototype.serializeAs_GameContextDestroyMessage = function(output) {

        };
        GameContextDestroyMessage.prototype.deserializeAs_GameContextDestroyMessage = function(input) {

        };
        GameContextDestroyMessage.ID = 1226;
        return GameContextDestroyMessage;
    })(NetworkMessage);
    Protocol.GameContextDestroyMessage = GameContextDestroyMessage;
    var GameContextKickMessage = (function(_super) {
        __extends(GameContextKickMessage, _super);

        function GameContextKickMessage() {
            this.targetId = 0;
            _super.call(this)
        }
        GameContextKickMessage.prototype.getMessageId = function() {
            return GameContextKickMessage.ID;
        };
        GameContextKickMessage.prototype.reset = function() {
            this.targetId = 0;
        };
        GameContextKickMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameContextKickMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameContextKickMessage.prototype.serialize = function(output) {
            this.serializeAs_GameContextKickMessage(output);
        };
        GameContextKickMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameContextKickMessage(input);
        };
        GameContextKickMessage.prototype.serializeAs_GameContextKickMessage = function(output) {
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
        };
        GameContextKickMessage.prototype.deserializeAs_GameContextKickMessage = function(input) {
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameContextKickMessage.targetId.");
            }
        };
        GameContextKickMessage.ID = 4471;
        return GameContextKickMessage;
    })(NetworkMessage);
    Protocol.GameContextKickMessage = GameContextKickMessage;
    var GameContextMoveElementMessage = (function(_super) {
        __extends(GameContextMoveElementMessage, _super);

        function GameContextMoveElementMessage() {
            this.movement = new EntityMovementInformations();
            _super.call(this)
        }
        GameContextMoveElementMessage.prototype.getMessageId = function() {
            return GameContextMoveElementMessage.ID;
        };
        GameContextMoveElementMessage.prototype.reset = function() {
            this.movement = new EntityMovementInformations();
        };
        GameContextMoveElementMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameContextMoveElementMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameContextMoveElementMessage.prototype.serialize = function(output) {
            this.serializeAs_GameContextMoveElementMessage(output);
        };
        GameContextMoveElementMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameContextMoveElementMessage(input);
        };
        GameContextMoveElementMessage.prototype.serializeAs_GameContextMoveElementMessage = function(output) {
            this.movement.serializeAs_EntityMovementInformations(output);
        };
        GameContextMoveElementMessage.prototype.deserializeAs_GameContextMoveElementMessage = function(input) {
            this.movement = new EntityMovementInformations();
            this.movement.deserialize(input);
        };
        GameContextMoveElementMessage.ID = 7867;
        return GameContextMoveElementMessage;
    })(NetworkMessage);
    Protocol.GameContextMoveElementMessage = GameContextMoveElementMessage;
    var GameContextMoveMultipleElementsMessage = (function(_super) {
        __extends(GameContextMoveMultipleElementsMessage, _super);

        function GameContextMoveMultipleElementsMessage() {
            this.movements = [];
            _super.call(this)
        }
        GameContextMoveMultipleElementsMessage.prototype.getMessageId = function() {
            return GameContextMoveMultipleElementsMessage.ID;
        };
        GameContextMoveMultipleElementsMessage.prototype.reset = function() {
            this.movements = [];
        };
        GameContextMoveMultipleElementsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameContextMoveMultipleElementsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameContextMoveMultipleElementsMessage.prototype.serialize = function(output) {
            this.serializeAs_GameContextMoveMultipleElementsMessage(output);
        };
        GameContextMoveMultipleElementsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameContextMoveMultipleElementsMessage(input);
        };
        GameContextMoveMultipleElementsMessage.prototype.serializeAs_GameContextMoveMultipleElementsMessage = function(output) {
            output.writeShort(this.movements.length);
            for (var _i1 = 0; _i1 < this.movements.length; _i1++) {
                (this.movements[_i1]).serializeAs_EntityMovementInformations(output);
            }
        };
        GameContextMoveMultipleElementsMessage.prototype.deserializeAs_GameContextMoveMultipleElementsMessage = function(input) {
            var _item1 = null;
            var _movementsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _movementsLen; _i1++) {
                _item1 = new EntityMovementInformations();
                _item1.deserialize(input);
                this.movements.push(_item1);
            }
        };
        GameContextMoveMultipleElementsMessage.ID = 721;
        return GameContextMoveMultipleElementsMessage;
    })(NetworkMessage);
    Protocol.GameContextMoveMultipleElementsMessage = GameContextMoveMultipleElementsMessage;
    var GameContextQuitMessage = (function(_super) {
        __extends(GameContextQuitMessage, _super);

        function GameContextQuitMessage() {

            _super.call(this)
        }
        GameContextQuitMessage.prototype.getMessageId = function() {
            return GameContextQuitMessage.ID;
        };
        GameContextQuitMessage.prototype.reset = function() {

        };
        GameContextQuitMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameContextQuitMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameContextQuitMessage.prototype.serialize = function(output) {
            this.serializeAs_GameContextQuitMessage(output);
        };
        GameContextQuitMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameContextQuitMessage(input);
        };
        GameContextQuitMessage.prototype.serializeAs_GameContextQuitMessage = function(output) {

        };
        GameContextQuitMessage.prototype.deserializeAs_GameContextQuitMessage = function(input) {

        };
        GameContextQuitMessage.ID = 927;
        return GameContextQuitMessage;
    })(NetworkMessage);
    Protocol.GameContextQuitMessage = GameContextQuitMessage;
    var GameContextReadyMessage = (function(_super) {
        __extends(GameContextReadyMessage, _super);

        function GameContextReadyMessage() {
            this.mapId = 0;
            _super.call(this)
        }
        GameContextReadyMessage.prototype.getMessageId = function() {
            return GameContextReadyMessage.ID;
        };
        GameContextReadyMessage.prototype.reset = function() {
            this.mapId = 0;
        };
        GameContextReadyMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameContextReadyMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameContextReadyMessage.prototype.serialize = function(output) {
            this.serializeAs_GameContextReadyMessage(output);
        };
        GameContextReadyMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameContextReadyMessage(input);
        };
        GameContextReadyMessage.prototype.serializeAs_GameContextReadyMessage = function(output) {
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
        };
        GameContextReadyMessage.prototype.deserializeAs_GameContextReadyMessage = function(input) {
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of GameContextReadyMessage.mapId.");
            }
        };
        GameContextReadyMessage.ID = 5960;
        return GameContextReadyMessage;
    })(NetworkMessage);
    Protocol.GameContextReadyMessage = GameContextReadyMessage;
    var GameContextRefreshEntityLookMessage = (function(_super) {
        __extends(GameContextRefreshEntityLookMessage, _super);

        function GameContextRefreshEntityLookMessage() {
            this.id = 0;
            this.look = new EntityLook();
            _super.call(this)
        }
        GameContextRefreshEntityLookMessage.prototype.getMessageId = function() {
            return GameContextRefreshEntityLookMessage.ID;
        };
        GameContextRefreshEntityLookMessage.prototype.reset = function() {
            this.id = 0;
            this.look = new EntityLook();
        };
        GameContextRefreshEntityLookMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameContextRefreshEntityLookMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameContextRefreshEntityLookMessage.prototype.serialize = function(output) {
            this.serializeAs_GameContextRefreshEntityLookMessage(output);
        };
        GameContextRefreshEntityLookMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameContextRefreshEntityLookMessage(input);
        };
        GameContextRefreshEntityLookMessage.prototype.serializeAs_GameContextRefreshEntityLookMessage = function(output) {
            if (this.id < -9007199254740990 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeDouble(this.id);
            this.look.serializeAs_EntityLook(output);
        };
        GameContextRefreshEntityLookMessage.prototype.deserializeAs_GameContextRefreshEntityLookMessage = function(input) {
            this.id = input.readDouble();
            if (this.id < -9007199254740990 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element of GameContextRefreshEntityLookMessage.id.");
            }
            this.look = new EntityLook();
            this.look.deserialize(input);
        };
        GameContextRefreshEntityLookMessage.ID = 2017;
        return GameContextRefreshEntityLookMessage;
    })(NetworkMessage);
    Protocol.GameContextRefreshEntityLookMessage = GameContextRefreshEntityLookMessage;
    var GameContextRemoveElementMessage = (function(_super) {
        __extends(GameContextRemoveElementMessage, _super);

        function GameContextRemoveElementMessage() {
            this.id = 0;
            _super.call(this)
        }
        GameContextRemoveElementMessage.prototype.getMessageId = function() {
            return GameContextRemoveElementMessage.ID;
        };
        GameContextRemoveElementMessage.prototype.reset = function() {
            this.id = 0;
        };
        GameContextRemoveElementMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameContextRemoveElementMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameContextRemoveElementMessage.prototype.serialize = function(output) {
            this.serializeAs_GameContextRemoveElementMessage(output);
        };
        GameContextRemoveElementMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameContextRemoveElementMessage(input);
        };
        GameContextRemoveElementMessage.prototype.serializeAs_GameContextRemoveElementMessage = function(output) {
            if (this.id < -9007199254740990 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeDouble(this.id);
        };
        GameContextRemoveElementMessage.prototype.deserializeAs_GameContextRemoveElementMessage = function(input) {
            this.id = input.readDouble();
            if (this.id < -9007199254740990 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element of GameContextRemoveElementMessage.id.");
            }
        };
        GameContextRemoveElementMessage.ID = 6344;
        return GameContextRemoveElementMessage;
    })(NetworkMessage);
    Protocol.GameContextRemoveElementMessage = GameContextRemoveElementMessage;
    var GameContextRemoveElementWithEventMessage = (function(_super) {
        __extends(GameContextRemoveElementWithEventMessage, _super);

        function GameContextRemoveElementWithEventMessage() {
            this.elementEventId = 0;
            _super.call(this)
        }
        GameContextRemoveElementWithEventMessage.prototype.getMessageId = function() {
            return GameContextRemoveElementWithEventMessage.ID;
        };
        GameContextRemoveElementWithEventMessage.prototype.reset = function() {
            this.elementEventId = 0;
        };
        GameContextRemoveElementWithEventMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameContextRemoveElementWithEventMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameContextRemoveElementWithEventMessage.prototype.serialize = function(output) {
            this.serializeAs_GameContextRemoveElementWithEventMessage(output);
        };
        GameContextRemoveElementWithEventMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameContextRemoveElementWithEventMessage(input);
        };
        GameContextRemoveElementWithEventMessage.prototype.serializeAs_GameContextRemoveElementWithEventMessage = function(output) {
            _super.prototype.serializeAs_GameContextRemoveElementMessage.call(this, output);
            if (this.elementEventId < 0) {
                throw new Error("Forbidden value (" + this.elementEventId + ") on element elementEventId.");
            }
            output.writeByte(this.elementEventId);
        };
        GameContextRemoveElementWithEventMessage.prototype.deserializeAs_GameContextRemoveElementWithEventMessage = function(input) {
            _super.prototype.deserializeAs_GameContextRemoveElementMessage.call(this, input);
            this.elementEventId = input.readByte();
            if (this.elementEventId < 0) {
                throw new Error("Forbidden value (" + this.elementEventId + ") on element of GameContextRemoveElementWithEventMessage.elementEventId.");
            }
        };
        GameContextRemoveElementWithEventMessage.ID = 6005;
        return GameContextRemoveElementWithEventMessage;
    })(GameContextRemoveElementMessage);
    Protocol.GameContextRemoveElementWithEventMessage = GameContextRemoveElementWithEventMessage;
    var GameContextRemoveMultipleElementsMessage = (function(_super) {
        __extends(GameContextRemoveMultipleElementsMessage, _super);

        function GameContextRemoveMultipleElementsMessage() {
            this.elementsIds = [];
            _super.call(this)
        }
        GameContextRemoveMultipleElementsMessage.prototype.getMessageId = function() {
            return GameContextRemoveMultipleElementsMessage.ID;
        };
        GameContextRemoveMultipleElementsMessage.prototype.reset = function() {
            this.elementsIds = [];
        };
        GameContextRemoveMultipleElementsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameContextRemoveMultipleElementsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameContextRemoveMultipleElementsMessage.prototype.serialize = function(output) {
            this.serializeAs_GameContextRemoveMultipleElementsMessage(output);
        };
        GameContextRemoveMultipleElementsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameContextRemoveMultipleElementsMessage(input);
        };
        GameContextRemoveMultipleElementsMessage.prototype.serializeAs_GameContextRemoveMultipleElementsMessage = function(output) {
            output.writeShort(this.elementsIds.length);
            for (var _i1 = 0; _i1 < this.elementsIds.length; _i1++) {
                if (this.elementsIds[_i1] < -9007199254740990 || this.elementsIds[_i1] > 9007199254740990) {
                    throw new Error("Forbidden value (" + this.elementsIds[_i1] + ") on element 1 (starting at 1) of elementsIds.");
                }
                output.writeDouble(this.elementsIds[_i1]);
            }
        };
        GameContextRemoveMultipleElementsMessage.prototype.deserializeAs_GameContextRemoveMultipleElementsMessage = function(input) {
            var _val1 = NaN;
            var _elementsIdsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _elementsIdsLen; _i1++) {
                _val1 = input.readDouble();
                if (_val1 < -9007199254740990 || _val1 > 9007199254740990) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of elementsIds.");
                }
                this.elementsIds.push(_val1);
            }
        };
        GameContextRemoveMultipleElementsMessage.ID = 849;
        return GameContextRemoveMultipleElementsMessage;
    })(NetworkMessage);
    Protocol.GameContextRemoveMultipleElementsMessage = GameContextRemoveMultipleElementsMessage;
    var GameContextRemoveMultipleElementsWithEventsMessage = (function(_super) {
        __extends(GameContextRemoveMultipleElementsWithEventsMessage, _super);

        function GameContextRemoveMultipleElementsWithEventsMessage() {
            this.elementEventIds = [];
            _super.call(this)
        }
        GameContextRemoveMultipleElementsWithEventsMessage.prototype.getMessageId = function() {
            return GameContextRemoveMultipleElementsWithEventsMessage.ID;
        };
        GameContextRemoveMultipleElementsWithEventsMessage.prototype.reset = function() {
            this.elementEventIds = [];
        };
        GameContextRemoveMultipleElementsWithEventsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameContextRemoveMultipleElementsWithEventsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameContextRemoveMultipleElementsWithEventsMessage.prototype.serialize = function(output) {
            this.serializeAs_GameContextRemoveMultipleElementsWithEventsMessage(output);
        };
        GameContextRemoveMultipleElementsWithEventsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameContextRemoveMultipleElementsWithEventsMessage(input);
        };
        GameContextRemoveMultipleElementsWithEventsMessage.prototype.serializeAs_GameContextRemoveMultipleElementsWithEventsMessage = function(output) {
            _super.prototype.serializeAs_GameContextRemoveMultipleElementsMessage.call(this, output);
            output.writeShort(this.elementEventIds.length);
            for (var _i1 = 0; _i1 < this.elementEventIds.length; _i1++) {
                if (this.elementEventIds[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.elementEventIds[_i1] + ") on element 1 (starting at 1) of elementEventIds.");
                }
                output.writeByte(this.elementEventIds[_i1]);
            }
        };
        GameContextRemoveMultipleElementsWithEventsMessage.prototype.deserializeAs_GameContextRemoveMultipleElementsWithEventsMessage = function(input) {
            var _val1 = 0;
            _super.prototype.deserializeAs_GameContextRemoveMultipleElementsMessage.call(this, input);
            var _elementEventIdsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _elementEventIdsLen; _i1++) {
                _val1 = input.readByte();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of elementEventIds.");
                }
                this.elementEventIds.push(_val1);
            }
        };
        GameContextRemoveMultipleElementsWithEventsMessage.ID = 9998;
        return GameContextRemoveMultipleElementsWithEventsMessage;
    })(GameContextRemoveMultipleElementsMessage);
    Protocol.GameContextRemoveMultipleElementsWithEventsMessage = GameContextRemoveMultipleElementsWithEventsMessage;
    var GameEntitiesDispositionMessage = (function(_super) {
        __extends(GameEntitiesDispositionMessage, _super);

        function GameEntitiesDispositionMessage() {
            this.dispositions = [];
            _super.call(this)
        }
        GameEntitiesDispositionMessage.prototype.getMessageId = function() {
            return GameEntitiesDispositionMessage.ID;
        };
        GameEntitiesDispositionMessage.prototype.reset = function() {
            this.dispositions = [];
        };
        GameEntitiesDispositionMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameEntitiesDispositionMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameEntitiesDispositionMessage.prototype.serialize = function(output) {
            this.serializeAs_GameEntitiesDispositionMessage(output);
        };
        GameEntitiesDispositionMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameEntitiesDispositionMessage(input);
        };
        GameEntitiesDispositionMessage.prototype.serializeAs_GameEntitiesDispositionMessage = function(output) {
            output.writeShort(this.dispositions.length);
            for (var _i1 = 0; _i1 < this.dispositions.length; _i1++) {
                (this.dispositions[_i1]).serializeAs_IdentifiedEntityDispositionInformations(output);
            }
        };
        GameEntitiesDispositionMessage.prototype.deserializeAs_GameEntitiesDispositionMessage = function(input) {
            var _item1 = null;
            var _dispositionsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _dispositionsLen; _i1++) {
                _item1 = new IdentifiedEntityDispositionInformations();
                _item1.deserialize(input);
                this.dispositions.push(_item1);
            }
        };
        GameEntitiesDispositionMessage.ID = 5646;
        return GameEntitiesDispositionMessage;
    })(NetworkMessage);
    Protocol.GameEntitiesDispositionMessage = GameEntitiesDispositionMessage;
    var GameEntityDispositionErrorMessage = (function(_super) {
        __extends(GameEntityDispositionErrorMessage, _super);

        function GameEntityDispositionErrorMessage() {

            _super.call(this)
        }
        GameEntityDispositionErrorMessage.prototype.getMessageId = function() {
            return GameEntityDispositionErrorMessage.ID;
        };
        GameEntityDispositionErrorMessage.prototype.reset = function() {

        };
        GameEntityDispositionErrorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameEntityDispositionErrorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameEntityDispositionErrorMessage.prototype.serialize = function(output) {
            this.serializeAs_GameEntityDispositionErrorMessage(output);
        };
        GameEntityDispositionErrorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameEntityDispositionErrorMessage(input);
        };
        GameEntityDispositionErrorMessage.prototype.serializeAs_GameEntityDispositionErrorMessage = function(output) {

        };
        GameEntityDispositionErrorMessage.prototype.deserializeAs_GameEntityDispositionErrorMessage = function(input) {

        };
        GameEntityDispositionErrorMessage.ID = 7003;
        return GameEntityDispositionErrorMessage;
    })(NetworkMessage);
    Protocol.GameEntityDispositionErrorMessage = GameEntityDispositionErrorMessage;
    var GameEntityDispositionMessage = (function(_super) {
        __extends(GameEntityDispositionMessage, _super);

        function GameEntityDispositionMessage() {
            this.disposition = new IdentifiedEntityDispositionInformations();
            _super.call(this)
        }
        GameEntityDispositionMessage.prototype.getMessageId = function() {
            return GameEntityDispositionMessage.ID;
        };
        GameEntityDispositionMessage.prototype.reset = function() {
            this.disposition = new IdentifiedEntityDispositionInformations();
        };
        GameEntityDispositionMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameEntityDispositionMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameEntityDispositionMessage.prototype.serialize = function(output) {
            this.serializeAs_GameEntityDispositionMessage(output);
        };
        GameEntityDispositionMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameEntityDispositionMessage(input);
        };
        GameEntityDispositionMessage.prototype.serializeAs_GameEntityDispositionMessage = function(output) {
            this.disposition.serializeAs_IdentifiedEntityDispositionInformations(output);
        };
        GameEntityDispositionMessage.prototype.deserializeAs_GameEntityDispositionMessage = function(input) {
            this.disposition = new IdentifiedEntityDispositionInformations();
            this.disposition.deserialize(input);
        };
        GameEntityDispositionMessage.ID = 3636;
        return GameEntityDispositionMessage;
    })(NetworkMessage);
    Protocol.GameEntityDispositionMessage = GameEntityDispositionMessage;
    var GameMapChangeOrientationMessage = (function(_super) {
        __extends(GameMapChangeOrientationMessage, _super);

        function GameMapChangeOrientationMessage() {
            this.orientation = new ActorOrientation();
            _super.call(this)
        }
        GameMapChangeOrientationMessage.prototype.getMessageId = function() {
            return GameMapChangeOrientationMessage.ID;
        };
        GameMapChangeOrientationMessage.prototype.reset = function() {
            this.orientation = new ActorOrientation();
        };
        GameMapChangeOrientationMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameMapChangeOrientationMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameMapChangeOrientationMessage.prototype.serialize = function(output) {
            this.serializeAs_GameMapChangeOrientationMessage(output);
        };
        GameMapChangeOrientationMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameMapChangeOrientationMessage(input);
        };
        GameMapChangeOrientationMessage.prototype.serializeAs_GameMapChangeOrientationMessage = function(output) {
            this.orientation.serializeAs_ActorOrientation(output);
        };
        GameMapChangeOrientationMessage.prototype.deserializeAs_GameMapChangeOrientationMessage = function(input) {
            this.orientation = new ActorOrientation();
            this.orientation.deserialize(input);
        };
        GameMapChangeOrientationMessage.ID = 5147;
        return GameMapChangeOrientationMessage;
    })(NetworkMessage);
    Protocol.GameMapChangeOrientationMessage = GameMapChangeOrientationMessage;
    var GameMapChangeOrientationRequestMessage = (function(_super) {
        __extends(GameMapChangeOrientationRequestMessage, _super);

        function GameMapChangeOrientationRequestMessage() {
            this.direction = 1;
            _super.call(this)
        }
        GameMapChangeOrientationRequestMessage.prototype.getMessageId = function() {
            return GameMapChangeOrientationRequestMessage.ID;
        };
        GameMapChangeOrientationRequestMessage.prototype.reset = function() {
            this.direction = 1;
        };
        GameMapChangeOrientationRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameMapChangeOrientationRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameMapChangeOrientationRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_GameMapChangeOrientationRequestMessage(output);
        };
        GameMapChangeOrientationRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameMapChangeOrientationRequestMessage(input);
        };
        GameMapChangeOrientationRequestMessage.prototype.serializeAs_GameMapChangeOrientationRequestMessage = function(output) {
            output.writeByte(this.direction);
        };
        GameMapChangeOrientationRequestMessage.prototype.deserializeAs_GameMapChangeOrientationRequestMessage = function(input) {
            this.direction = input.readByte();
            if (this.direction < 0) {
                throw new Error("Forbidden value (" + this.direction + ") on element of GameMapChangeOrientationRequestMessage.direction.");
            }
        };
        GameMapChangeOrientationRequestMessage.ID = 5569;
        return GameMapChangeOrientationRequestMessage;
    })(NetworkMessage);
    Protocol.GameMapChangeOrientationRequestMessage = GameMapChangeOrientationRequestMessage;
    var GameMapChangeOrientationsMessage = (function(_super) {
        __extends(GameMapChangeOrientationsMessage, _super);

        function GameMapChangeOrientationsMessage() {
            this.orientations = [];
            _super.call(this)
        }
        GameMapChangeOrientationsMessage.prototype.getMessageId = function() {
            return GameMapChangeOrientationsMessage.ID;
        };
        GameMapChangeOrientationsMessage.prototype.reset = function() {
            this.orientations = [];
        };
        GameMapChangeOrientationsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameMapChangeOrientationsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameMapChangeOrientationsMessage.prototype.serialize = function(output) {
            this.serializeAs_GameMapChangeOrientationsMessage(output);
        };
        GameMapChangeOrientationsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameMapChangeOrientationsMessage(input);
        };
        GameMapChangeOrientationsMessage.prototype.serializeAs_GameMapChangeOrientationsMessage = function(output) {
            output.writeShort(this.orientations.length);
            for (var _i1 = 0; _i1 < this.orientations.length; _i1++) {
                (this.orientations[_i1]).serializeAs_ActorOrientation(output);
            }
        };
        GameMapChangeOrientationsMessage.prototype.deserializeAs_GameMapChangeOrientationsMessage = function(input) {
            var _item1 = null;
            var _orientationsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _orientationsLen; _i1++) {
                _item1 = new ActorOrientation();
                _item1.deserialize(input);
                this.orientations.push(_item1);
            }
        };
        GameMapChangeOrientationsMessage.ID = 9422;
        return GameMapChangeOrientationsMessage;
    })(NetworkMessage);
    Protocol.GameMapChangeOrientationsMessage = GameMapChangeOrientationsMessage;
    var GameMapMovementCancelMessage = (function(_super) {
        __extends(GameMapMovementCancelMessage, _super);

        function GameMapMovementCancelMessage() {
            this.cellId = 0;
            _super.call(this)
        }
        GameMapMovementCancelMessage.prototype.getMessageId = function() {
            return GameMapMovementCancelMessage.ID;
        };
        GameMapMovementCancelMessage.prototype.reset = function() {
            this.cellId = 0;
        };
        GameMapMovementCancelMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameMapMovementCancelMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameMapMovementCancelMessage.prototype.serialize = function(output) {
            this.serializeAs_GameMapMovementCancelMessage(output);
        };
        GameMapMovementCancelMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameMapMovementCancelMessage(input);
        };
        GameMapMovementCancelMessage.prototype.serializeAs_GameMapMovementCancelMessage = function(output) {
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
            }
            output.writeVarShort(this.cellId);
        };
        GameMapMovementCancelMessage.prototype.deserializeAs_GameMapMovementCancelMessage = function(input) {
            this.cellId = input.readVarUhShort();
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element of GameMapMovementCancelMessage.cellId.");
            }
        };
        GameMapMovementCancelMessage.ID = 5266;
        return GameMapMovementCancelMessage;
    })(NetworkMessage);
    Protocol.GameMapMovementCancelMessage = GameMapMovementCancelMessage;
    var GameMapMovementConfirmMessage = (function(_super) {
        __extends(GameMapMovementConfirmMessage, _super);

        function GameMapMovementConfirmMessage() {

            _super.call(this)
        }
        GameMapMovementConfirmMessage.prototype.getMessageId = function() {
            return GameMapMovementConfirmMessage.ID;
        };
        GameMapMovementConfirmMessage.prototype.reset = function() {

        };
        GameMapMovementConfirmMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameMapMovementConfirmMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameMapMovementConfirmMessage.prototype.serialize = function(output) {
            this.serializeAs_GameMapMovementConfirmMessage(output);
        };
        GameMapMovementConfirmMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameMapMovementConfirmMessage(input);
        };
        GameMapMovementConfirmMessage.prototype.serializeAs_GameMapMovementConfirmMessage = function(output) {

        };
        GameMapMovementConfirmMessage.prototype.deserializeAs_GameMapMovementConfirmMessage = function(input) {

        };
        GameMapMovementConfirmMessage.ID = 1882;
        return GameMapMovementConfirmMessage;
    })(NetworkMessage);
    Protocol.GameMapMovementConfirmMessage = GameMapMovementConfirmMessage;
    var GameMapNoMovementMessage = (function(_super) {
        __extends(GameMapNoMovementMessage, _super);

        function GameMapNoMovementMessage() {
            this.cellX = 0;
            this.cellY = 0;
            _super.call(this)
        }
        GameMapNoMovementMessage.prototype.getMessageId = function() {
            return GameMapNoMovementMessage.ID;
        };
        GameMapNoMovementMessage.prototype.reset = function() {
            this.cellX = 0;
            this.cellY = 0;
        };
        GameMapNoMovementMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameMapNoMovementMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameMapNoMovementMessage.prototype.serialize = function(output) {
            this.serializeAs_GameMapNoMovementMessage(output);
        };
        GameMapNoMovementMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameMapNoMovementMessage(input);
        };
        GameMapNoMovementMessage.prototype.serializeAs_GameMapNoMovementMessage = function(output) {
            output.writeShort(this.cellX);
            output.writeShort(this.cellY);
        };
        GameMapNoMovementMessage.prototype.deserializeAs_GameMapNoMovementMessage = function(input) {
            this.cellX = input.readShort();
            this.cellY = input.readShort();
        };
        GameMapNoMovementMessage.ID = 5382;
        return GameMapNoMovementMessage;
    })(NetworkMessage);
    Protocol.GameMapNoMovementMessage = GameMapNoMovementMessage;
    var GameRefreshMonsterBoostsMessage = (function(_super) {
        __extends(GameRefreshMonsterBoostsMessage, _super);

        function GameRefreshMonsterBoostsMessage() {
            this.monsterBoosts = [];
            this.familyBoosts = [];
            _super.call(this)
        }
        GameRefreshMonsterBoostsMessage.prototype.getMessageId = function() {
            return GameRefreshMonsterBoostsMessage.ID;
        };
        GameRefreshMonsterBoostsMessage.prototype.reset = function() {
            this.monsterBoosts = [];
            this.familyBoosts = [];
        };
        GameRefreshMonsterBoostsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameRefreshMonsterBoostsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameRefreshMonsterBoostsMessage.prototype.serialize = function(output) {
            this.serializeAs_GameRefreshMonsterBoostsMessage(output);
        };
        GameRefreshMonsterBoostsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameRefreshMonsterBoostsMessage(input);
        };
        GameRefreshMonsterBoostsMessage.prototype.serializeAs_GameRefreshMonsterBoostsMessage = function(output) {
            output.writeShort(this.monsterBoosts.length);
            for (var _i1 = 0; _i1 < this.monsterBoosts.length; _i1++) {
                (this.monsterBoosts[_i1]).serializeAs_MonsterBoosts(output);
            }
            output.writeShort(this.familyBoosts.length);
            for (var _i2 = 0; _i2 < this.familyBoosts.length; _i2++) {
                (this.familyBoosts[_i2]).serializeAs_MonsterBoosts(output);
            }
        };
        GameRefreshMonsterBoostsMessage.prototype.deserializeAs_GameRefreshMonsterBoostsMessage = function(input) {
            var _item1 = null;
            var _item2 = null;
            var _monsterBoostsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _monsterBoostsLen; _i1++) {
                _item1 = new MonsterBoosts();
                _item1.deserialize(input);
                this.monsterBoosts.push(_item1);
            }
            var _familyBoostsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _familyBoostsLen; _i2++) {
                _item2 = new MonsterBoosts();
                _item2.deserialize(input);
                this.familyBoosts.push(_item2);
            }
        };
        GameRefreshMonsterBoostsMessage.ID = 979;
        return GameRefreshMonsterBoostsMessage;
    })(NetworkMessage);
    Protocol.GameRefreshMonsterBoostsMessage = GameRefreshMonsterBoostsMessage;
    var GameDataPaddockObjectAddMessage = (function(_super) {
        __extends(GameDataPaddockObjectAddMessage, _super);

        function GameDataPaddockObjectAddMessage() {
            this.paddockItemDescription = new PaddockItem();
            _super.call(this)
        }
        GameDataPaddockObjectAddMessage.prototype.getMessageId = function() {
            return GameDataPaddockObjectAddMessage.ID;
        };
        GameDataPaddockObjectAddMessage.prototype.reset = function() {
            this.paddockItemDescription = new PaddockItem();
        };
        GameDataPaddockObjectAddMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameDataPaddockObjectAddMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameDataPaddockObjectAddMessage.prototype.serialize = function(output) {
            this.serializeAs_GameDataPaddockObjectAddMessage(output);
        };
        GameDataPaddockObjectAddMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameDataPaddockObjectAddMessage(input);
        };
        GameDataPaddockObjectAddMessage.prototype.serializeAs_GameDataPaddockObjectAddMessage = function(output) {
            this.paddockItemDescription.serializeAs_PaddockItem(output);
        };
        GameDataPaddockObjectAddMessage.prototype.deserializeAs_GameDataPaddockObjectAddMessage = function(input) {
            this.paddockItemDescription = new PaddockItem();
            this.paddockItemDescription.deserialize(input);
        };
        GameDataPaddockObjectAddMessage.ID = 5993;
        return GameDataPaddockObjectAddMessage;
    })(NetworkMessage);
    Protocol.GameDataPaddockObjectAddMessage = GameDataPaddockObjectAddMessage;
    var GameDataPaddockObjectListAddMessage = (function(_super) {
        __extends(GameDataPaddockObjectListAddMessage, _super);

        function GameDataPaddockObjectListAddMessage() {
            this.paddockItemDescription = [];
            _super.call(this)
        }
        GameDataPaddockObjectListAddMessage.prototype.getMessageId = function() {
            return GameDataPaddockObjectListAddMessage.ID;
        };
        GameDataPaddockObjectListAddMessage.prototype.reset = function() {
            this.paddockItemDescription = [];
        };
        GameDataPaddockObjectListAddMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameDataPaddockObjectListAddMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameDataPaddockObjectListAddMessage.prototype.serialize = function(output) {
            this.serializeAs_GameDataPaddockObjectListAddMessage(output);
        };
        GameDataPaddockObjectListAddMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameDataPaddockObjectListAddMessage(input);
        };
        GameDataPaddockObjectListAddMessage.prototype.serializeAs_GameDataPaddockObjectListAddMessage = function(output) {
            output.writeShort(this.paddockItemDescription.length);
            for (var _i1 = 0; _i1 < this.paddockItemDescription.length; _i1++) {
                (this.paddockItemDescription[_i1]).serializeAs_PaddockItem(output);
            }
        };
        GameDataPaddockObjectListAddMessage.prototype.deserializeAs_GameDataPaddockObjectListAddMessage = function(input) {
            var _item1 = null;
            var _paddockItemDescriptionLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _paddockItemDescriptionLen; _i1++) {
                _item1 = new PaddockItem();
                _item1.deserialize(input);
                this.paddockItemDescription.push(_item1);
            }
        };
        GameDataPaddockObjectListAddMessage.ID = 8033;
        return GameDataPaddockObjectListAddMessage;
    })(NetworkMessage);
    Protocol.GameDataPaddockObjectListAddMessage = GameDataPaddockObjectListAddMessage;
    var GameDataPaddockObjectRemoveMessage = (function(_super) {
        __extends(GameDataPaddockObjectRemoveMessage, _super);

        function GameDataPaddockObjectRemoveMessage() {
            this.cellId = 0;
            _super.call(this)
        }
        GameDataPaddockObjectRemoveMessage.prototype.getMessageId = function() {
            return GameDataPaddockObjectRemoveMessage.ID;
        };
        GameDataPaddockObjectRemoveMessage.prototype.reset = function() {
            this.cellId = 0;
        };
        GameDataPaddockObjectRemoveMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameDataPaddockObjectRemoveMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameDataPaddockObjectRemoveMessage.prototype.serialize = function(output) {
            this.serializeAs_GameDataPaddockObjectRemoveMessage(output);
        };
        GameDataPaddockObjectRemoveMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameDataPaddockObjectRemoveMessage(input);
        };
        GameDataPaddockObjectRemoveMessage.prototype.serializeAs_GameDataPaddockObjectRemoveMessage = function(output) {
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
            }
            output.writeVarShort(this.cellId);
        };
        GameDataPaddockObjectRemoveMessage.prototype.deserializeAs_GameDataPaddockObjectRemoveMessage = function(input) {
            this.cellId = input.readVarUhShort();
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element of GameDataPaddockObjectRemoveMessage.cellId.");
            }
        };
        GameDataPaddockObjectRemoveMessage.ID = 5650;
        return GameDataPaddockObjectRemoveMessage;
    })(NetworkMessage);
    Protocol.GameDataPaddockObjectRemoveMessage = GameDataPaddockObjectRemoveMessage;
    var MountDataErrorMessage = (function(_super) {
        __extends(MountDataErrorMessage, _super);

        function MountDataErrorMessage() {
            this.reason = 0;
            _super.call(this)
        }
        MountDataErrorMessage.prototype.getMessageId = function() {
            return MountDataErrorMessage.ID;
        };
        MountDataErrorMessage.prototype.reset = function() {
            this.reason = 0;
        };
        MountDataErrorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MountDataErrorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MountDataErrorMessage.prototype.serialize = function(output) {
            this.serializeAs_MountDataErrorMessage(output);
        };
        MountDataErrorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MountDataErrorMessage(input);
        };
        MountDataErrorMessage.prototype.serializeAs_MountDataErrorMessage = function(output) {
            output.writeByte(this.reason);
        };
        MountDataErrorMessage.prototype.deserializeAs_MountDataErrorMessage = function(input) {
            this.reason = input.readByte();
            if (this.reason < 0) {
                throw new Error("Forbidden value (" + this.reason + ") on element of MountDataErrorMessage.reason.");
            }
        };
        MountDataErrorMessage.ID = 5783;
        return MountDataErrorMessage;
    })(NetworkMessage);
    Protocol.MountDataErrorMessage = MountDataErrorMessage;
    var MountDataMessage = (function(_super) {
        __extends(MountDataMessage, _super);

        function MountDataMessage() {
            this.mountData = new MountClientData();
            _super.call(this)
        }
        MountDataMessage.prototype.getMessageId = function() {
            return MountDataMessage.ID;
        };
        MountDataMessage.prototype.reset = function() {
            this.mountData = new MountClientData();
        };
        MountDataMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MountDataMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MountDataMessage.prototype.serialize = function(output) {
            this.serializeAs_MountDataMessage(output);
        };
        MountDataMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MountDataMessage(input);
        };
        MountDataMessage.prototype.serializeAs_MountDataMessage = function(output) {
            this.mountData.serializeAs_MountClientData(output);
        };
        MountDataMessage.prototype.deserializeAs_MountDataMessage = function(input) {
            this.mountData = new MountClientData();
            this.mountData.deserialize(input);
        };
        MountDataMessage.ID = 7426;
        return MountDataMessage;
    })(NetworkMessage);
    Protocol.MountDataMessage = MountDataMessage;
    var MountEmoteIconUsedOkMessage = (function(_super) {
        __extends(MountEmoteIconUsedOkMessage, _super);

        function MountEmoteIconUsedOkMessage() {
            this.mountId = 0;
            this.reactionType = 0;
            _super.call(this)
        }
        MountEmoteIconUsedOkMessage.prototype.getMessageId = function() {
            return MountEmoteIconUsedOkMessage.ID;
        };
        MountEmoteIconUsedOkMessage.prototype.reset = function() {
            this.mountId = 0;
            this.reactionType = 0;
        };
        MountEmoteIconUsedOkMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MountEmoteIconUsedOkMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MountEmoteIconUsedOkMessage.prototype.serialize = function(output) {
            this.serializeAs_MountEmoteIconUsedOkMessage(output);
        };
        MountEmoteIconUsedOkMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MountEmoteIconUsedOkMessage(input);
        };
        MountEmoteIconUsedOkMessage.prototype.serializeAs_MountEmoteIconUsedOkMessage = function(output) {
            output.writeVarInt(this.mountId);
            if (this.reactionType < 0) {
                throw new Error("Forbidden value (" + this.reactionType + ") on element reactionType.");
            }
            output.writeByte(this.reactionType);
        };
        MountEmoteIconUsedOkMessage.prototype.deserializeAs_MountEmoteIconUsedOkMessage = function(input) {
            this.mountId = input.readVarInt();
            this.reactionType = input.readByte();
            if (this.reactionType < 0) {
                throw new Error("Forbidden value (" + this.reactionType + ") on element of MountEmoteIconUsedOkMessage.reactionType.");
            }
        };
        MountEmoteIconUsedOkMessage.ID = 2786;
        return MountEmoteIconUsedOkMessage;
    })(NetworkMessage);
    Protocol.MountEmoteIconUsedOkMessage = MountEmoteIconUsedOkMessage;
    var MountEquipedErrorMessage = (function(_super) {
        __extends(MountEquipedErrorMessage, _super);

        function MountEquipedErrorMessage() {
            this.errorType = 0;
            _super.call(this)
        }
        MountEquipedErrorMessage.prototype.getMessageId = function() {
            return MountEquipedErrorMessage.ID;
        };
        MountEquipedErrorMessage.prototype.reset = function() {
            this.errorType = 0;
        };
        MountEquipedErrorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MountEquipedErrorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MountEquipedErrorMessage.prototype.serialize = function(output) {
            this.serializeAs_MountEquipedErrorMessage(output);
        };
        MountEquipedErrorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MountEquipedErrorMessage(input);
        };
        MountEquipedErrorMessage.prototype.serializeAs_MountEquipedErrorMessage = function(output) {
            output.writeByte(this.errorType);
        };
        MountEquipedErrorMessage.prototype.deserializeAs_MountEquipedErrorMessage = function(input) {
            this.errorType = input.readByte();
            if (this.errorType < 0) {
                throw new Error("Forbidden value (" + this.errorType + ") on element of MountEquipedErrorMessage.errorType.");
            }
        };
        MountEquipedErrorMessage.ID = 9127;
        return MountEquipedErrorMessage;
    })(NetworkMessage);
    Protocol.MountEquipedErrorMessage = MountEquipedErrorMessage;
    var MountFeedRequestMessage = (function(_super) {
        __extends(MountFeedRequestMessage, _super);

        function MountFeedRequestMessage() {
            this.mountUid = 0;
            this.mountLocation = 0;
            this.mountFoodUid = 0;
            this.quantity = 0;
            _super.call(this)
        }
        MountFeedRequestMessage.prototype.getMessageId = function() {
            return MountFeedRequestMessage.ID;
        };
        MountFeedRequestMessage.prototype.reset = function() {
            this.mountUid = 0;
            this.mountLocation = 0;
            this.mountFoodUid = 0;
            this.quantity = 0;
        };
        MountFeedRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MountFeedRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MountFeedRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_MountFeedRequestMessage(output);
        };
        MountFeedRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MountFeedRequestMessage(input);
        };
        MountFeedRequestMessage.prototype.serializeAs_MountFeedRequestMessage = function(output) {
            if (this.mountUid < 0) {
                throw new Error("Forbidden value (" + this.mountUid + ") on element mountUid.");
            }
            output.writeVarInt(this.mountUid);
            output.writeByte(this.mountLocation);
            if (this.mountFoodUid < 0) {
                throw new Error("Forbidden value (" + this.mountFoodUid + ") on element mountFoodUid.");
            }
            output.writeVarInt(this.mountFoodUid);
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
            }
            output.writeVarInt(this.quantity);
        };
        MountFeedRequestMessage.prototype.deserializeAs_MountFeedRequestMessage = function(input) {
            this.mountUid = input.readVarUhInt();
            if (this.mountUid < 0) {
                throw new Error("Forbidden value (" + this.mountUid + ") on element of MountFeedRequestMessage.mountUid.");
            }
            this.mountLocation = input.readByte();
            this.mountFoodUid = input.readVarUhInt();
            if (this.mountFoodUid < 0) {
                throw new Error("Forbidden value (" + this.mountFoodUid + ") on element of MountFeedRequestMessage.mountFoodUid.");
            }
            this.quantity = input.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element of MountFeedRequestMessage.quantity.");
            }
        };
        MountFeedRequestMessage.ID = 9525;
        return MountFeedRequestMessage;
    })(NetworkMessage);
    Protocol.MountFeedRequestMessage = MountFeedRequestMessage;
    var MountHarnessColorsUpdateRequestMessage = (function(_super) {
        __extends(MountHarnessColorsUpdateRequestMessage, _super);

        function MountHarnessColorsUpdateRequestMessage() {
            this.useHarnessColors = false;
            _super.call(this)
        }
        MountHarnessColorsUpdateRequestMessage.prototype.getMessageId = function() {
            return MountHarnessColorsUpdateRequestMessage.ID;
        };
        MountHarnessColorsUpdateRequestMessage.prototype.reset = function() {
            this.useHarnessColors = false;
        };
        MountHarnessColorsUpdateRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MountHarnessColorsUpdateRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MountHarnessColorsUpdateRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_MountHarnessColorsUpdateRequestMessage(output);
        };
        MountHarnessColorsUpdateRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MountHarnessColorsUpdateRequestMessage(input);
        };
        MountHarnessColorsUpdateRequestMessage.prototype.serializeAs_MountHarnessColorsUpdateRequestMessage = function(output) {
            output.writeBoolean(this.useHarnessColors);
        };
        MountHarnessColorsUpdateRequestMessage.prototype.deserializeAs_MountHarnessColorsUpdateRequestMessage = function(input) {
            this.useHarnessColors = input.readBoolean();
        };
        MountHarnessColorsUpdateRequestMessage.ID = 1532;
        return MountHarnessColorsUpdateRequestMessage;
    })(NetworkMessage);
    Protocol.MountHarnessColorsUpdateRequestMessage = MountHarnessColorsUpdateRequestMessage;
    var MountHarnessDissociateRequestMessage = (function(_super) {
        __extends(MountHarnessDissociateRequestMessage, _super);

        function MountHarnessDissociateRequestMessage() {

            _super.call(this)
        }
        MountHarnessDissociateRequestMessage.prototype.getMessageId = function() {
            return MountHarnessDissociateRequestMessage.ID;
        };
        MountHarnessDissociateRequestMessage.prototype.reset = function() {

        };
        MountHarnessDissociateRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MountHarnessDissociateRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MountHarnessDissociateRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_MountHarnessDissociateRequestMessage(output);
        };
        MountHarnessDissociateRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MountHarnessDissociateRequestMessage(input);
        };
        MountHarnessDissociateRequestMessage.prototype.serializeAs_MountHarnessDissociateRequestMessage = function(output) {

        };
        MountHarnessDissociateRequestMessage.prototype.deserializeAs_MountHarnessDissociateRequestMessage = function(input) {

        };
        MountHarnessDissociateRequestMessage.ID = 3596;
        return MountHarnessDissociateRequestMessage;
    })(NetworkMessage);
    Protocol.MountHarnessDissociateRequestMessage = MountHarnessDissociateRequestMessage;
    var MountInformationInPaddockRequestMessage = (function(_super) {
        __extends(MountInformationInPaddockRequestMessage, _super);

        function MountInformationInPaddockRequestMessage() {
            this.mapRideId = 0;
            _super.call(this)
        }
        MountInformationInPaddockRequestMessage.prototype.getMessageId = function() {
            return MountInformationInPaddockRequestMessage.ID;
        };
        MountInformationInPaddockRequestMessage.prototype.reset = function() {
            this.mapRideId = 0;
        };
        MountInformationInPaddockRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MountInformationInPaddockRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MountInformationInPaddockRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_MountInformationInPaddockRequestMessage(output);
        };
        MountInformationInPaddockRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MountInformationInPaddockRequestMessage(input);
        };
        MountInformationInPaddockRequestMessage.prototype.serializeAs_MountInformationInPaddockRequestMessage = function(output) {
            output.writeVarInt(this.mapRideId);
        };
        MountInformationInPaddockRequestMessage.prototype.deserializeAs_MountInformationInPaddockRequestMessage = function(input) {
            this.mapRideId = input.readVarInt();
        };
        MountInformationInPaddockRequestMessage.ID = 6271;
        return MountInformationInPaddockRequestMessage;
    })(NetworkMessage);
    Protocol.MountInformationInPaddockRequestMessage = MountInformationInPaddockRequestMessage;
    var MountInformationRequestMessage = (function(_super) {
        __extends(MountInformationRequestMessage, _super);

        function MountInformationRequestMessage() {
            this.id = 0;
            this.time = 0;
            _super.call(this)
        }
        MountInformationRequestMessage.prototype.getMessageId = function() {
            return MountInformationRequestMessage.ID;
        };
        MountInformationRequestMessage.prototype.reset = function() {
            this.id = 0;
            this.time = 0;
        };
        MountInformationRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MountInformationRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MountInformationRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_MountInformationRequestMessage(output);
        };
        MountInformationRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MountInformationRequestMessage(input);
        };
        MountInformationRequestMessage.prototype.serializeAs_MountInformationRequestMessage = function(output) {
            if (this.id < -9007199254740990 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeDouble(this.id);
            if (this.time < -9007199254740990 || this.time > 9007199254740990) {
                throw new Error("Forbidden value (" + this.time + ") on element time.");
            }
            output.writeDouble(this.time);
        };
        MountInformationRequestMessage.prototype.deserializeAs_MountInformationRequestMessage = function(input) {
            this.id = input.readDouble();
            if (this.id < -9007199254740990 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element of MountInformationRequestMessage.id.");
            }
            this.time = input.readDouble();
            if (this.time < -9007199254740990 || this.time > 9007199254740990) {
                throw new Error("Forbidden value (" + this.time + ") on element of MountInformationRequestMessage.time.");
            }
        };
        MountInformationRequestMessage.ID = 8339;
        return MountInformationRequestMessage;
    })(NetworkMessage);
    Protocol.MountInformationRequestMessage = MountInformationRequestMessage;
    var MountReleasedMessage = (function(_super) {
        __extends(MountReleasedMessage, _super);

        function MountReleasedMessage() {
            this.mountId = 0;
            _super.call(this)
        }
        MountReleasedMessage.prototype.getMessageId = function() {
            return MountReleasedMessage.ID;
        };
        MountReleasedMessage.prototype.reset = function() {
            this.mountId = 0;
        };
        MountReleasedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MountReleasedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MountReleasedMessage.prototype.serialize = function(output) {
            this.serializeAs_MountReleasedMessage(output);
        };
        MountReleasedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MountReleasedMessage(input);
        };
        MountReleasedMessage.prototype.serializeAs_MountReleasedMessage = function(output) {
            output.writeVarInt(this.mountId);
        };
        MountReleasedMessage.prototype.deserializeAs_MountReleasedMessage = function(input) {
            this.mountId = input.readVarInt();
        };
        MountReleasedMessage.ID = 6105;
        return MountReleasedMessage;
    })(NetworkMessage);
    Protocol.MountReleasedMessage = MountReleasedMessage;
    var MountReleaseRequestMessage = (function(_super) {
        __extends(MountReleaseRequestMessage, _super);

        function MountReleaseRequestMessage() {

            _super.call(this)
        }
        MountReleaseRequestMessage.prototype.getMessageId = function() {
            return MountReleaseRequestMessage.ID;
        };
        MountReleaseRequestMessage.prototype.reset = function() {

        };
        MountReleaseRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MountReleaseRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MountReleaseRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_MountReleaseRequestMessage(output);
        };
        MountReleaseRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MountReleaseRequestMessage(input);
        };
        MountReleaseRequestMessage.prototype.serializeAs_MountReleaseRequestMessage = function(output) {

        };
        MountReleaseRequestMessage.prototype.deserializeAs_MountReleaseRequestMessage = function(input) {

        };
        MountReleaseRequestMessage.ID = 460;
        return MountReleaseRequestMessage;
    })(NetworkMessage);
    Protocol.MountReleaseRequestMessage = MountReleaseRequestMessage;
    var MountRenamedMessage = (function(_super) {
        __extends(MountRenamedMessage, _super);

        function MountRenamedMessage() {
            this.mountId = 0;
            this.name = "";
            _super.call(this)
        }
        MountRenamedMessage.prototype.getMessageId = function() {
            return MountRenamedMessage.ID;
        };
        MountRenamedMessage.prototype.reset = function() {
            this.mountId = 0;
            this.name = "";
        };
        MountRenamedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MountRenamedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MountRenamedMessage.prototype.serialize = function(output) {
            this.serializeAs_MountRenamedMessage(output);
        };
        MountRenamedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MountRenamedMessage(input);
        };
        MountRenamedMessage.prototype.serializeAs_MountRenamedMessage = function(output) {
            output.writeVarInt(this.mountId);
            output.writeUTF(this.name);
        };
        MountRenamedMessage.prototype.deserializeAs_MountRenamedMessage = function(input) {
            this.mountId = input.readVarInt();
            this.name = input.readUTF();
        };
        MountRenamedMessage.ID = 2798;
        return MountRenamedMessage;
    })(NetworkMessage);
    Protocol.MountRenamedMessage = MountRenamedMessage;
    var MountRenameRequestMessage = (function(_super) {
        __extends(MountRenameRequestMessage, _super);

        function MountRenameRequestMessage() {
            this.name = "";
            this.mountId = 0;
            _super.call(this)
        }
        MountRenameRequestMessage.prototype.getMessageId = function() {
            return MountRenameRequestMessage.ID;
        };
        MountRenameRequestMessage.prototype.reset = function() {
            this.name = "";
            this.mountId = 0;
        };
        MountRenameRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MountRenameRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MountRenameRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_MountRenameRequestMessage(output);
        };
        MountRenameRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MountRenameRequestMessage(input);
        };
        MountRenameRequestMessage.prototype.serializeAs_MountRenameRequestMessage = function(output) {
            output.writeUTF(this.name);
            output.writeVarInt(this.mountId);
        };
        MountRenameRequestMessage.prototype.deserializeAs_MountRenameRequestMessage = function(input) {
            this.name = input.readUTF();
            this.mountId = input.readVarInt();
        };
        MountRenameRequestMessage.ID = 9033;
        return MountRenameRequestMessage;
    })(NetworkMessage);
    Protocol.MountRenameRequestMessage = MountRenameRequestMessage;
    var MountRidingMessage = (function(_super) {
        __extends(MountRidingMessage, _super);

        function MountRidingMessage() {
            this.isRiding = false;
            this.isAutopilot = false;
            _super.call(this)
        }
        MountRidingMessage.prototype.getMessageId = function() {
            return MountRidingMessage.ID;
        };
        MountRidingMessage.prototype.reset = function() {
            this.isRiding = false;
            this.isAutopilot = false;
        };
        MountRidingMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MountRidingMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MountRidingMessage.prototype.serialize = function(output) {
            this.serializeAs_MountRidingMessage(output);
        };
        MountRidingMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MountRidingMessage(input);
        };
        MountRidingMessage.prototype.serializeAs_MountRidingMessage = function(output) {
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.isRiding);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.isAutopilot);
            output.writeByte(_box0);
        };
        MountRidingMessage.prototype.deserializeAs_MountRidingMessage = function(input) {
            this.deserializeByteBoxes(input);
        };
        MountRidingMessage.ID = 7744;
        return MountRidingMessage;
    })(NetworkMessage);
    Protocol.MountRidingMessage = MountRidingMessage;
    var MountSetMessage = (function(_super) {
        __extends(MountSetMessage, _super);

        function MountSetMessage() {
            this.mountData = new MountClientData();
            _super.call(this)
        }
        MountSetMessage.prototype.getMessageId = function() {
            return MountSetMessage.ID;
        };
        MountSetMessage.prototype.reset = function() {
            this.mountData = new MountClientData();
        };
        MountSetMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MountSetMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MountSetMessage.prototype.serialize = function(output) {
            this.serializeAs_MountSetMessage(output);
        };
        MountSetMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MountSetMessage(input);
        };
        MountSetMessage.prototype.serializeAs_MountSetMessage = function(output) {
            this.mountData.serializeAs_MountClientData(output);
        };
        MountSetMessage.prototype.deserializeAs_MountSetMessage = function(input) {
            this.mountData = new MountClientData();
            this.mountData.deserialize(input);
        };
        MountSetMessage.ID = 7836;
        return MountSetMessage;
    })(NetworkMessage);
    Protocol.MountSetMessage = MountSetMessage;
    var MountSetXpRatioRequestMessage = (function(_super) {
        __extends(MountSetXpRatioRequestMessage, _super);

        function MountSetXpRatioRequestMessage() {
            this.xpRatio = 0;
            _super.call(this)
        }
        MountSetXpRatioRequestMessage.prototype.getMessageId = function() {
            return MountSetXpRatioRequestMessage.ID;
        };
        MountSetXpRatioRequestMessage.prototype.reset = function() {
            this.xpRatio = 0;
        };
        MountSetXpRatioRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MountSetXpRatioRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MountSetXpRatioRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_MountSetXpRatioRequestMessage(output);
        };
        MountSetXpRatioRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MountSetXpRatioRequestMessage(input);
        };
        MountSetXpRatioRequestMessage.prototype.serializeAs_MountSetXpRatioRequestMessage = function(output) {
            if (this.xpRatio < 0) {
                throw new Error("Forbidden value (" + this.xpRatio + ") on element xpRatio.");
            }
            output.writeByte(this.xpRatio);
        };
        MountSetXpRatioRequestMessage.prototype.deserializeAs_MountSetXpRatioRequestMessage = function(input) {
            this.xpRatio = input.readByte();
            if (this.xpRatio < 0) {
                throw new Error("Forbidden value (" + this.xpRatio + ") on element of MountSetXpRatioRequestMessage.xpRatio.");
            }
        };
        MountSetXpRatioRequestMessage.ID = 4796;
        return MountSetXpRatioRequestMessage;
    })(NetworkMessage);
    Protocol.MountSetXpRatioRequestMessage = MountSetXpRatioRequestMessage;
    var MountSterilizedMessage = (function(_super) {
        __extends(MountSterilizedMessage, _super);

        function MountSterilizedMessage() {
            this.mountId = 0;
            _super.call(this)
        }
        MountSterilizedMessage.prototype.getMessageId = function() {
            return MountSterilizedMessage.ID;
        };
        MountSterilizedMessage.prototype.reset = function() {
            this.mountId = 0;
        };
        MountSterilizedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MountSterilizedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MountSterilizedMessage.prototype.serialize = function(output) {
            this.serializeAs_MountSterilizedMessage(output);
        };
        MountSterilizedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MountSterilizedMessage(input);
        };
        MountSterilizedMessage.prototype.serializeAs_MountSterilizedMessage = function(output) {
            output.writeVarInt(this.mountId);
        };
        MountSterilizedMessage.prototype.deserializeAs_MountSterilizedMessage = function(input) {
            this.mountId = input.readVarInt();
        };
        MountSterilizedMessage.ID = 1248;
        return MountSterilizedMessage;
    })(NetworkMessage);
    Protocol.MountSterilizedMessage = MountSterilizedMessage;
    var MountSterilizeRequestMessage = (function(_super) {
        __extends(MountSterilizeRequestMessage, _super);

        function MountSterilizeRequestMessage() {

            _super.call(this)
        }
        MountSterilizeRequestMessage.prototype.getMessageId = function() {
            return MountSterilizeRequestMessage.ID;
        };
        MountSterilizeRequestMessage.prototype.reset = function() {

        };
        MountSterilizeRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MountSterilizeRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MountSterilizeRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_MountSterilizeRequestMessage(output);
        };
        MountSterilizeRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MountSterilizeRequestMessage(input);
        };
        MountSterilizeRequestMessage.prototype.serializeAs_MountSterilizeRequestMessage = function(output) {

        };
        MountSterilizeRequestMessage.prototype.deserializeAs_MountSterilizeRequestMessage = function(input) {

        };
        MountSterilizeRequestMessage.ID = 5528;
        return MountSterilizeRequestMessage;
    })(NetworkMessage);
    Protocol.MountSterilizeRequestMessage = MountSterilizeRequestMessage;
    var MountToggleRidingRequestMessage = (function(_super) {
        __extends(MountToggleRidingRequestMessage, _super);

        function MountToggleRidingRequestMessage() {

            _super.call(this)
        }
        MountToggleRidingRequestMessage.prototype.getMessageId = function() {
            return MountToggleRidingRequestMessage.ID;
        };
        MountToggleRidingRequestMessage.prototype.reset = function() {

        };
        MountToggleRidingRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MountToggleRidingRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MountToggleRidingRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_MountToggleRidingRequestMessage(output);
        };
        MountToggleRidingRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MountToggleRidingRequestMessage(input);
        };
        MountToggleRidingRequestMessage.prototype.serializeAs_MountToggleRidingRequestMessage = function(output) {

        };
        MountToggleRidingRequestMessage.prototype.deserializeAs_MountToggleRidingRequestMessage = function(input) {

        };
        MountToggleRidingRequestMessage.ID = 581;
        return MountToggleRidingRequestMessage;
    })(NetworkMessage);
    Protocol.MountToggleRidingRequestMessage = MountToggleRidingRequestMessage;
    var MountUnSetMessage = (function(_super) {
        __extends(MountUnSetMessage, _super);

        function MountUnSetMessage() {

            _super.call(this)
        }
        MountUnSetMessage.prototype.getMessageId = function() {
            return MountUnSetMessage.ID;
        };
        MountUnSetMessage.prototype.reset = function() {

        };
        MountUnSetMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MountUnSetMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MountUnSetMessage.prototype.serialize = function(output) {
            this.serializeAs_MountUnSetMessage(output);
        };
        MountUnSetMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MountUnSetMessage(input);
        };
        MountUnSetMessage.prototype.serializeAs_MountUnSetMessage = function(output) {

        };
        MountUnSetMessage.prototype.deserializeAs_MountUnSetMessage = function(input) {

        };
        MountUnSetMessage.ID = 1968;
        return MountUnSetMessage;
    })(NetworkMessage);
    Protocol.MountUnSetMessage = MountUnSetMessage;
    var MountXpRatioMessage = (function(_super) {
        __extends(MountXpRatioMessage, _super);

        function MountXpRatioMessage() {
            this.ratio = 0;
            _super.call(this)
        }
        MountXpRatioMessage.prototype.getMessageId = function() {
            return MountXpRatioMessage.ID;
        };
        MountXpRatioMessage.prototype.reset = function() {
            this.ratio = 0;
        };
        MountXpRatioMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MountXpRatioMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MountXpRatioMessage.prototype.serialize = function(output) {
            this.serializeAs_MountXpRatioMessage(output);
        };
        MountXpRatioMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MountXpRatioMessage(input);
        };
        MountXpRatioMessage.prototype.serializeAs_MountXpRatioMessage = function(output) {
            if (this.ratio < 0) {
                throw new Error("Forbidden value (" + this.ratio + ") on element ratio.");
            }
            output.writeByte(this.ratio);
        };
        MountXpRatioMessage.prototype.deserializeAs_MountXpRatioMessage = function(input) {
            this.ratio = input.readByte();
            if (this.ratio < 0) {
                throw new Error("Forbidden value (" + this.ratio + ") on element of MountXpRatioMessage.ratio.");
            }
        };
        MountXpRatioMessage.ID = 5404;
        return MountXpRatioMessage;
    })(NetworkMessage);
    Protocol.MountXpRatioMessage = MountXpRatioMessage;
    var PaddockBuyRequestMessage = (function(_super) {
        __extends(PaddockBuyRequestMessage, _super);

        function PaddockBuyRequestMessage() {
            this.proposedPrice = 0;
            _super.call(this)
        }
        PaddockBuyRequestMessage.prototype.getMessageId = function() {
            return PaddockBuyRequestMessage.ID;
        };
        PaddockBuyRequestMessage.prototype.reset = function() {
            this.proposedPrice = 0;
        };
        PaddockBuyRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PaddockBuyRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PaddockBuyRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_PaddockBuyRequestMessage(output);
        };
        PaddockBuyRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PaddockBuyRequestMessage(input);
        };
        PaddockBuyRequestMessage.prototype.serializeAs_PaddockBuyRequestMessage = function(output) {
            if (this.proposedPrice < 0 || this.proposedPrice > 9007199254740990) {
                throw new Error("Forbidden value (" + this.proposedPrice + ") on element proposedPrice.");
            }
            output.writeVarLong(this.proposedPrice);
        };
        PaddockBuyRequestMessage.prototype.deserializeAs_PaddockBuyRequestMessage = function(input) {
            this.proposedPrice = input.readVarUhLong();
            if (this.proposedPrice < 0 || this.proposedPrice > 9007199254740990) {
                throw new Error("Forbidden value (" + this.proposedPrice + ") on element of PaddockBuyRequestMessage.proposedPrice.");
            }
        };
        PaddockBuyRequestMessage.ID = 9656;
        return PaddockBuyRequestMessage;
    })(NetworkMessage);
    Protocol.PaddockBuyRequestMessage = PaddockBuyRequestMessage;
    var PaddockBuyResultMessage = (function(_super) {
        __extends(PaddockBuyResultMessage, _super);

        function PaddockBuyResultMessage() {
            this.paddockId = 0;
            this.bought = false;
            this.realPrice = 0;
            _super.call(this)
        }
        PaddockBuyResultMessage.prototype.getMessageId = function() {
            return PaddockBuyResultMessage.ID;
        };
        PaddockBuyResultMessage.prototype.reset = function() {
            this.paddockId = 0;
            this.bought = false;
            this.realPrice = 0;
        };
        PaddockBuyResultMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PaddockBuyResultMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PaddockBuyResultMessage.prototype.serialize = function(output) {
            this.serializeAs_PaddockBuyResultMessage(output);
        };
        PaddockBuyResultMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PaddockBuyResultMessage(input);
        };
        PaddockBuyResultMessage.prototype.serializeAs_PaddockBuyResultMessage = function(output) {
            if (this.paddockId < 0 || this.paddockId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.paddockId + ") on element paddockId.");
            }
            output.writeDouble(this.paddockId);
            output.writeBoolean(this.bought);
            if (this.realPrice < 0 || this.realPrice > 9007199254740990) {
                throw new Error("Forbidden value (" + this.realPrice + ") on element realPrice.");
            }
            output.writeVarLong(this.realPrice);
        };
        PaddockBuyResultMessage.prototype.deserializeAs_PaddockBuyResultMessage = function(input) {
            this.paddockId = input.readDouble();
            if (this.paddockId < 0 || this.paddockId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.paddockId + ") on element of PaddockBuyResultMessage.paddockId.");
            }
            this.bought = input.readBoolean();
            this.realPrice = input.readVarUhLong();
            if (this.realPrice < 0 || this.realPrice > 9007199254740990) {
                throw new Error("Forbidden value (" + this.realPrice + ") on element of PaddockBuyResultMessage.realPrice.");
            }
        };
        PaddockBuyResultMessage.ID = 6312;
        return PaddockBuyResultMessage;
    })(NetworkMessage);
    Protocol.PaddockBuyResultMessage = PaddockBuyResultMessage;
    var PaddockMoveItemRequestMessage = (function(_super) {
        __extends(PaddockMoveItemRequestMessage, _super);

        function PaddockMoveItemRequestMessage() {
            this.oldCellId = 0;
            this.newCellId = 0;
            _super.call(this)
        }
        PaddockMoveItemRequestMessage.prototype.getMessageId = function() {
            return PaddockMoveItemRequestMessage.ID;
        };
        PaddockMoveItemRequestMessage.prototype.reset = function() {
            this.oldCellId = 0;
            this.newCellId = 0;
        };
        PaddockMoveItemRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PaddockMoveItemRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PaddockMoveItemRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_PaddockMoveItemRequestMessage(output);
        };
        PaddockMoveItemRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PaddockMoveItemRequestMessage(input);
        };
        PaddockMoveItemRequestMessage.prototype.serializeAs_PaddockMoveItemRequestMessage = function(output) {
            if (this.oldCellId < 0 || this.oldCellId > 559) {
                throw new Error("Forbidden value (" + this.oldCellId + ") on element oldCellId.");
            }
            output.writeVarShort(this.oldCellId);
            if (this.newCellId < 0 || this.newCellId > 559) {
                throw new Error("Forbidden value (" + this.newCellId + ") on element newCellId.");
            }
            output.writeVarShort(this.newCellId);
        };
        PaddockMoveItemRequestMessage.prototype.deserializeAs_PaddockMoveItemRequestMessage = function(input) {
            this.oldCellId = input.readVarUhShort();
            if (this.oldCellId < 0 || this.oldCellId > 559) {
                throw new Error("Forbidden value (" + this.oldCellId + ") on element of PaddockMoveItemRequestMessage.oldCellId.");
            }
            this.newCellId = input.readVarUhShort();
            if (this.newCellId < 0 || this.newCellId > 559) {
                throw new Error("Forbidden value (" + this.newCellId + ") on element of PaddockMoveItemRequestMessage.newCellId.");
            }
        };
        PaddockMoveItemRequestMessage.ID = 5652;
        return PaddockMoveItemRequestMessage;
    })(NetworkMessage);
    Protocol.PaddockMoveItemRequestMessage = PaddockMoveItemRequestMessage;
    var PaddockRemoveItemRequestMessage = (function(_super) {
        __extends(PaddockRemoveItemRequestMessage, _super);

        function PaddockRemoveItemRequestMessage() {
            this.cellId = 0;
            _super.call(this)
        }
        PaddockRemoveItemRequestMessage.prototype.getMessageId = function() {
            return PaddockRemoveItemRequestMessage.ID;
        };
        PaddockRemoveItemRequestMessage.prototype.reset = function() {
            this.cellId = 0;
        };
        PaddockRemoveItemRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PaddockRemoveItemRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PaddockRemoveItemRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_PaddockRemoveItemRequestMessage(output);
        };
        PaddockRemoveItemRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PaddockRemoveItemRequestMessage(input);
        };
        PaddockRemoveItemRequestMessage.prototype.serializeAs_PaddockRemoveItemRequestMessage = function(output) {
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
            }
            output.writeVarShort(this.cellId);
        };
        PaddockRemoveItemRequestMessage.prototype.deserializeAs_PaddockRemoveItemRequestMessage = function(input) {
            this.cellId = input.readVarUhShort();
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element of PaddockRemoveItemRequestMessage.cellId.");
            }
        };
        PaddockRemoveItemRequestMessage.ID = 7954;
        return PaddockRemoveItemRequestMessage;
    })(NetworkMessage);
    Protocol.PaddockRemoveItemRequestMessage = PaddockRemoveItemRequestMessage;
    var PaddockSellRequestMessage = (function(_super) {
        __extends(PaddockSellRequestMessage, _super);

        function PaddockSellRequestMessage() {
            this.price = 0;
            this.forSale = false;
            _super.call(this)
        }
        PaddockSellRequestMessage.prototype.getMessageId = function() {
            return PaddockSellRequestMessage.ID;
        };
        PaddockSellRequestMessage.prototype.reset = function() {
            this.price = 0;
            this.forSale = false;
        };
        PaddockSellRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PaddockSellRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PaddockSellRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_PaddockSellRequestMessage(output);
        };
        PaddockSellRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PaddockSellRequestMessage(input);
        };
        PaddockSellRequestMessage.prototype.serializeAs_PaddockSellRequestMessage = function(output) {
            if (this.price < 0 || this.price > 9007199254740990) {
                throw new Error("Forbidden value (" + this.price + ") on element price.");
            }
            output.writeVarLong(this.price);
            output.writeBoolean(this.forSale);
        };
        PaddockSellRequestMessage.prototype.deserializeAs_PaddockSellRequestMessage = function(input) {
            this.price = input.readVarUhLong();
            if (this.price < 0 || this.price > 9007199254740990) {
                throw new Error("Forbidden value (" + this.price + ") on element of PaddockSellRequestMessage.price.");
            }
            this.forSale = input.readBoolean();
        };
        PaddockSellRequestMessage.ID = 663;
        return PaddockSellRequestMessage;
    })(NetworkMessage);
    Protocol.PaddockSellRequestMessage = PaddockSellRequestMessage;
    var NotificationByServerMessage = (function(_super) {
        __extends(NotificationByServerMessage, _super);

        function NotificationByServerMessage() {
            this.id = 0;
            this.parameters = [];
            this.forceOpen = false;
            _super.call(this)
        }
        NotificationByServerMessage.prototype.getMessageId = function() {
            return NotificationByServerMessage.ID;
        };
        NotificationByServerMessage.prototype.reset = function() {
            this.id = 0;
            this.parameters = [];
            this.forceOpen = false;
        };
        NotificationByServerMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        NotificationByServerMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        NotificationByServerMessage.prototype.serialize = function(output) {
            this.serializeAs_NotificationByServerMessage(output);
        };
        NotificationByServerMessage.prototype.deserialize = function(input) {
            this.deserializeAs_NotificationByServerMessage(input);
        };
        NotificationByServerMessage.prototype.serializeAs_NotificationByServerMessage = function(output) {
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarShort(this.id);
            output.writeShort(this.parameters.length);
            for (var _i2 = 0; _i2 < this.parameters.length; _i2++) {
                output.writeUTF(this.parameters[_i2]);
            }
            output.writeBoolean(this.forceOpen);
        };
        NotificationByServerMessage.prototype.deserializeAs_NotificationByServerMessage = function(input) {
            var _val2 = null;
            this.id = input.readVarUhShort();
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element of NotificationByServerMessage.id.");
            }
            var _parametersLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _parametersLen; _i2++) {
                _val2 = input.readUTF();
                this.parameters.push(_val2);
            }
            this.forceOpen = input.readBoolean();
        };
        NotificationByServerMessage.ID = 1287;
        return NotificationByServerMessage;
    })(NetworkMessage);
    Protocol.NotificationByServerMessage = NotificationByServerMessage;
    var NotificationListMessage = (function(_super) {
        __extends(NotificationListMessage, _super);

        function NotificationListMessage() {
            this.flags = [];
            _super.call(this)
        }
        NotificationListMessage.prototype.getMessageId = function() {
            return NotificationListMessage.ID;
        };
        NotificationListMessage.prototype.reset = function() {
            this.flags = [];
        };
        NotificationListMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        NotificationListMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        NotificationListMessage.prototype.serialize = function(output) {
            this.serializeAs_NotificationListMessage(output);
        };
        NotificationListMessage.prototype.deserialize = function(input) {
            this.deserializeAs_NotificationListMessage(input);
        };
        NotificationListMessage.prototype.serializeAs_NotificationListMessage = function(output) {
            output.writeShort(this.flags.length);
            for (var _i1 = 0; _i1 < this.flags.length; _i1++) {
                output.writeVarInt(this.flags[_i1]);
            }
        };
        NotificationListMessage.prototype.deserializeAs_NotificationListMessage = function(input) {
            var _val1 = 0;
            var _flagsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _flagsLen; _i1++) {
                _val1 = input.readVarInt();
                this.flags.push(_val1);
            }
        };
        NotificationListMessage.ID = 4711;
        return NotificationListMessage;
    })(NetworkMessage);
    Protocol.NotificationListMessage = NotificationListMessage;
    var NotificationResetMessage = (function(_super) {
        __extends(NotificationResetMessage, _super);

        function NotificationResetMessage() {

            _super.call(this)
        }
        NotificationResetMessage.prototype.getMessageId = function() {
            return NotificationResetMessage.ID;
        };
        NotificationResetMessage.prototype.reset = function() {

        };
        NotificationResetMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        NotificationResetMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        NotificationResetMessage.prototype.serialize = function(output) {
            this.serializeAs_NotificationResetMessage(output);
        };
        NotificationResetMessage.prototype.deserialize = function(input) {
            this.deserializeAs_NotificationResetMessage(input);
        };
        NotificationResetMessage.prototype.serializeAs_NotificationResetMessage = function(output) {

        };
        NotificationResetMessage.prototype.deserializeAs_NotificationResetMessage = function(input) {

        };
        NotificationResetMessage.ID = 9352;
        return NotificationResetMessage;
    })(NetworkMessage);
    Protocol.NotificationResetMessage = NotificationResetMessage;
    var NotificationUpdateFlagMessage = (function(_super) {
        __extends(NotificationUpdateFlagMessage, _super);

        function NotificationUpdateFlagMessage() {
            this.index = 0;
            _super.call(this)
        }
        NotificationUpdateFlagMessage.prototype.getMessageId = function() {
            return NotificationUpdateFlagMessage.ID;
        };
        NotificationUpdateFlagMessage.prototype.reset = function() {
            this.index = 0;
        };
        NotificationUpdateFlagMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        NotificationUpdateFlagMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        NotificationUpdateFlagMessage.prototype.serialize = function(output) {
            this.serializeAs_NotificationUpdateFlagMessage(output);
        };
        NotificationUpdateFlagMessage.prototype.deserialize = function(input) {
            this.deserializeAs_NotificationUpdateFlagMessage(input);
        };
        NotificationUpdateFlagMessage.prototype.serializeAs_NotificationUpdateFlagMessage = function(output) {
            if (this.index < 0) {
                throw new Error("Forbidden value (" + this.index + ") on element index.");
            }
            output.writeVarShort(this.index);
        };
        NotificationUpdateFlagMessage.prototype.deserializeAs_NotificationUpdateFlagMessage = function(input) {
            this.index = input.readVarUhShort();
            if (this.index < 0) {
                throw new Error("Forbidden value (" + this.index + ") on element of NotificationUpdateFlagMessage.index.");
            }
        };
        NotificationUpdateFlagMessage.ID = 534;
        return NotificationUpdateFlagMessage;
    })(NetworkMessage);
    Protocol.NotificationUpdateFlagMessage = NotificationUpdateFlagMessage;
    var AlignmentWarEffortProgressionMessage = (function(_super) {
        __extends(AlignmentWarEffortProgressionMessage, _super);

        function AlignmentWarEffortProgressionMessage() {
            this.effortProgressions = [];
            _super.call(this)
        }
        AlignmentWarEffortProgressionMessage.prototype.getMessageId = function() {
            return AlignmentWarEffortProgressionMessage.ID;
        };
        AlignmentWarEffortProgressionMessage.prototype.reset = function() {
            this.effortProgressions = [];
        };
        AlignmentWarEffortProgressionMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AlignmentWarEffortProgressionMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AlignmentWarEffortProgressionMessage.prototype.serialize = function(output) {
            this.serializeAs_AlignmentWarEffortProgressionMessage(output);
        };
        AlignmentWarEffortProgressionMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AlignmentWarEffortProgressionMessage(input);
        };
        AlignmentWarEffortProgressionMessage.prototype.serializeAs_AlignmentWarEffortProgressionMessage = function(output) {
            output.writeShort(this.effortProgressions.length);
            for (var _i1 = 0; _i1 < this.effortProgressions.length; _i1++) {
                (this.effortProgressions[_i1]).serializeAs_AlignmentWarEffortInformation(output);
            }
        };
        AlignmentWarEffortProgressionMessage.prototype.deserializeAs_AlignmentWarEffortProgressionMessage = function(input) {
            var _item1 = null;
            var _effortProgressionsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _effortProgressionsLen; _i1++) {
                _item1 = new AlignmentWarEffortInformation();
                _item1.deserialize(input);
                this.effortProgressions.push(_item1);
            }
        };
        AlignmentWarEffortProgressionMessage.ID = 1424;
        return AlignmentWarEffortProgressionMessage;
    })(NetworkMessage);
    Protocol.AlignmentWarEffortProgressionMessage = AlignmentWarEffortProgressionMessage;
    var AlignmentWarEffortProgressionRequestMessage = (function(_super) {
        __extends(AlignmentWarEffortProgressionRequestMessage, _super);

        function AlignmentWarEffortProgressionRequestMessage() {

            _super.call(this)
        }
        AlignmentWarEffortProgressionRequestMessage.prototype.getMessageId = function() {
            return AlignmentWarEffortProgressionRequestMessage.ID;
        };
        AlignmentWarEffortProgressionRequestMessage.prototype.reset = function() {

        };
        AlignmentWarEffortProgressionRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AlignmentWarEffortProgressionRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AlignmentWarEffortProgressionRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_AlignmentWarEffortProgressionRequestMessage(output);
        };
        AlignmentWarEffortProgressionRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AlignmentWarEffortProgressionRequestMessage(input);
        };
        AlignmentWarEffortProgressionRequestMessage.prototype.serializeAs_AlignmentWarEffortProgressionRequestMessage = function(output) {

        };
        AlignmentWarEffortProgressionRequestMessage.prototype.deserializeAs_AlignmentWarEffortProgressionRequestMessage = function(input) {

        };
        AlignmentWarEffortProgressionRequestMessage.ID = 8769;
        return AlignmentWarEffortProgressionRequestMessage;
    })(NetworkMessage);
    Protocol.AlignmentWarEffortProgressionRequestMessage = AlignmentWarEffortProgressionRequestMessage;
    var AnomalyStateMessage = (function(_super) {
        __extends(AnomalyStateMessage, _super);

        function AnomalyStateMessage() {
            this.subAreaId = 0;
            this.open = false;
            this.closingTime = 0;
            _super.call(this)
        }
        AnomalyStateMessage.prototype.getMessageId = function() {
            return AnomalyStateMessage.ID;
        };
        AnomalyStateMessage.prototype.reset = function() {
            this.subAreaId = 0;
            this.open = false;
            this.closingTime = 0;
        };
        AnomalyStateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AnomalyStateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AnomalyStateMessage.prototype.serialize = function(output) {
            this.serializeAs_AnomalyStateMessage(output);
        };
        AnomalyStateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AnomalyStateMessage(input);
        };
        AnomalyStateMessage.prototype.serializeAs_AnomalyStateMessage = function(output) {
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
            output.writeBoolean(this.open);
            if (this.closingTime < 0 || this.closingTime > 9007199254740990) {
                throw new Error("Forbidden value (" + this.closingTime + ") on element closingTime.");
            }
            output.writeVarLong(this.closingTime);
        };
        AnomalyStateMessage.prototype.deserializeAs_AnomalyStateMessage = function(input) {
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of AnomalyStateMessage.subAreaId.");
            }
            this.open = input.readBoolean();
            this.closingTime = input.readVarUhLong();
            if (this.closingTime < 0 || this.closingTime > 9007199254740990) {
                throw new Error("Forbidden value (" + this.closingTime + ") on element of AnomalyStateMessage.closingTime.");
            }
        };
        AnomalyStateMessage.ID = 5822;
        return AnomalyStateMessage;
    })(NetworkMessage);
    Protocol.AnomalyStateMessage = AnomalyStateMessage;
    var MapComplementaryInformationsDataMessage = (function(_super) {
        __extends(MapComplementaryInformationsDataMessage, _super);

        function MapComplementaryInformationsDataMessage() {
            this.subAreaId = 0;
            this.mapId = 0;
            this.houses = [];
            this.actors = [];
            this.interactiveElements = [];
            this.statedElements = [];
            this.obstacles = [];
            this.fights = [];
            this.hasAggressiveMonsters = false;
            this.fightStartPositions = new FightStartingPositions();
            _super.call(this)
        }
        MapComplementaryInformationsDataMessage.prototype.getMessageId = function() {
            return MapComplementaryInformationsDataMessage.ID;
        };
        MapComplementaryInformationsDataMessage.prototype.reset = function() {
            this.subAreaId = 0;
            this.mapId = 0;
            this.houses = [];
            this.actors = [];
            this.interactiveElements = [];
            this.statedElements = [];
            this.obstacles = [];
            this.fights = [];
            this.hasAggressiveMonsters = false;
            this.fightStartPositions = new FightStartingPositions();
        };
        MapComplementaryInformationsDataMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MapComplementaryInformationsDataMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MapComplementaryInformationsDataMessage.prototype.serialize = function(output) {
            this.serializeAs_MapComplementaryInformationsDataMessage(output);
        };
        MapComplementaryInformationsDataMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MapComplementaryInformationsDataMessage(input);
        };
        MapComplementaryInformationsDataMessage.prototype.serializeAs_MapComplementaryInformationsDataMessage = function(output) {
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            output.writeShort(this.houses.length);
            for (var _i3 = 0; _i3 < this.houses.length; _i3++) {
                output.writeShort((this.houses[_i3]).getTypeId());
                (this.houses[_i3]).serialize(output);
            }
            output.writeShort(this.actors.length);
            for (var _i4 = 0; _i4 < this.actors.length; _i4++) {
                output.writeShort((this.actors[_i4]).getTypeId());
                (this.actors[_i4]).serialize(output);
            }
            output.writeShort(this.interactiveElements.length);
            for (var _i5 = 0; _i5 < this.interactiveElements.length; _i5++) {
                output.writeShort((this.interactiveElements[_i5]).getTypeId());
                (this.interactiveElements[_i5]).serialize(output);
            }
            output.writeShort(this.statedElements.length);
            for (var _i6 = 0; _i6 < this.statedElements.length; _i6++) {
                (this.statedElements[_i6]).serializeAs_StatedElement(output);
            }
            output.writeShort(this.obstacles.length);
            for (var _i7 = 0; _i7 < this.obstacles.length; _i7++) {
                (this.obstacles[_i7]).serializeAs_MapObstacle(output);
            }
            output.writeShort(this.fights.length);
            for (var _i8 = 0; _i8 < this.fights.length; _i8++) {
                (this.fights[_i8]).serializeAs_FightCommonInformations(output);
            }
            output.writeBoolean(this.hasAggressiveMonsters);
            this.fightStartPositions.serializeAs_FightStartingPositions(output);
        };
        MapComplementaryInformationsDataMessage.prototype.deserializeAs_MapComplementaryInformationsDataMessage = function(input) {
            var _id3 = 0;
            var _item3 = null;
            var _id4 = 0;
            var _item4 = null;
            var _id5 = 0;
            var _item5 = null;
            var _item6 = null;
            var _item7 = null;
            var _item8 = null;
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of MapComplementaryInformationsDataMessage.subAreaId.");
            }
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of MapComplementaryInformationsDataMessage.mapId.");
            }
            var _housesLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _housesLen; _i3++) {
                _id3 = input.readUnsignedShort();
                _item3 = ProtocolTypeManager.getInstance(HouseInformations, _id3);
                _item3.deserialize(input);
                this.houses.push(_item3);
            }
            var _actorsLen = input.readUnsignedShort();
            for (var _i4 = 0; _i4 < _actorsLen; _i4++) {
                _id4 = input.readUnsignedShort();
                _item4 = ProtocolTypeManager.getInstance(GameRolePlayActorInformations, _id4);
                _item4.deserialize(input);
                this.actors.push(_item4);
            }
            var _interactiveElementsLen = input.readUnsignedShort();
            for (var _i5 = 0; _i5 < _interactiveElementsLen; _i5++) {
                _id5 = input.readUnsignedShort();
                _item5 = ProtocolTypeManager.getInstance(InteractiveElement, _id5);
                _item5.deserialize(input);
                this.interactiveElements.push(_item5);
            }
            var _statedElementsLen = input.readUnsignedShort();
            for (var _i6 = 0; _i6 < _statedElementsLen; _i6++) {
                _item6 = new StatedElement();
                _item6.deserialize(input);
                this.statedElements.push(_item6);
            }
            var _obstaclesLen = input.readUnsignedShort();
            for (var _i7 = 0; _i7 < _obstaclesLen; _i7++) {
                _item7 = new MapObstacle();
                _item7.deserialize(input);
                this.obstacles.push(_item7);
            }
            var _fightsLen = input.readUnsignedShort();
            for (var _i8 = 0; _i8 < _fightsLen; _i8++) {
                _item8 = new FightCommonInformations();
                _item8.deserialize(input);
                this.fights.push(_item8);
            }
            this.hasAggressiveMonsters = input.readBoolean();
            this.fightStartPositions = new FightStartingPositions();
            this.fightStartPositions.deserialize(input);
        };
        MapComplementaryInformationsDataMessage.ID = 5176;
        return MapComplementaryInformationsDataMessage;
    })(NetworkMessage);
    Protocol.MapComplementaryInformationsDataMessage = MapComplementaryInformationsDataMessage;
    var MapComplementaryInformationsAnomalyMessage = (function(_super) {
        __extends(MapComplementaryInformationsAnomalyMessage, _super);

        function MapComplementaryInformationsAnomalyMessage() {
            this.level = 0;
            this.closingTime = 0;
            _super.call(this)
        }
        MapComplementaryInformationsAnomalyMessage.prototype.getMessageId = function() {
            return MapComplementaryInformationsAnomalyMessage.ID;
        };
        MapComplementaryInformationsAnomalyMessage.prototype.reset = function() {
            this.level = 0;
            this.closingTime = 0;
        };
        MapComplementaryInformationsAnomalyMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MapComplementaryInformationsAnomalyMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MapComplementaryInformationsAnomalyMessage.prototype.serialize = function(output) {
            this.serializeAs_MapComplementaryInformationsAnomalyMessage(output);
        };
        MapComplementaryInformationsAnomalyMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MapComplementaryInformationsAnomalyMessage(input);
        };
        MapComplementaryInformationsAnomalyMessage.prototype.serializeAs_MapComplementaryInformationsAnomalyMessage = function(output) {
            _super.prototype.serializeAs_MapComplementaryInformationsDataMessage.call(this, output);
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeVarShort(this.level);
            if (this.closingTime < 0 || this.closingTime > 9007199254740990) {
                throw new Error("Forbidden value (" + this.closingTime + ") on element closingTime.");
            }
            output.writeVarLong(this.closingTime);
        };
        MapComplementaryInformationsAnomalyMessage.prototype.deserializeAs_MapComplementaryInformationsAnomalyMessage = function(input) {
            _super.prototype.deserializeAs_MapComplementaryInformationsDataMessage.call(this, input);
            this.level = input.readVarUhShort();
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element of MapComplementaryInformationsAnomalyMessage.level.");
            }
            this.closingTime = input.readVarUhLong();
            if (this.closingTime < 0 || this.closingTime > 9007199254740990) {
                throw new Error("Forbidden value (" + this.closingTime + ") on element of MapComplementaryInformationsAnomalyMessage.closingTime.");
            }
        };
        MapComplementaryInformationsAnomalyMessage.ID = 8604;
        return MapComplementaryInformationsAnomalyMessage;
    })(MapComplementaryInformationsDataMessage);
    Protocol.MapComplementaryInformationsAnomalyMessage = MapComplementaryInformationsAnomalyMessage;
    var AnomalySubareaInformationRequestMessage = (function(_super) {
        __extends(AnomalySubareaInformationRequestMessage, _super);

        function AnomalySubareaInformationRequestMessage() {

            _super.call(this)
        }
        AnomalySubareaInformationRequestMessage.prototype.getMessageId = function() {
            return AnomalySubareaInformationRequestMessage.ID;
        };
        AnomalySubareaInformationRequestMessage.prototype.reset = function() {

        };
        AnomalySubareaInformationRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AnomalySubareaInformationRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AnomalySubareaInformationRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_AnomalySubareaInformationRequestMessage(output);
        };
        AnomalySubareaInformationRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AnomalySubareaInformationRequestMessage(input);
        };
        AnomalySubareaInformationRequestMessage.prototype.serializeAs_AnomalySubareaInformationRequestMessage = function(output) {

        };
        AnomalySubareaInformationRequestMessage.prototype.deserializeAs_AnomalySubareaInformationRequestMessage = function(input) {

        };
        AnomalySubareaInformationRequestMessage.ID = 5450;
        return AnomalySubareaInformationRequestMessage;
    })(NetworkMessage);
    Protocol.AnomalySubareaInformationRequestMessage = AnomalySubareaInformationRequestMessage;
    var AnomalySubareaInformationResponseMessage = (function(_super) {
        __extends(AnomalySubareaInformationResponseMessage, _super);

        function AnomalySubareaInformationResponseMessage() {
            this.subareas = [];
            _super.call(this)
        }
        AnomalySubareaInformationResponseMessage.prototype.getMessageId = function() {
            return AnomalySubareaInformationResponseMessage.ID;
        };
        AnomalySubareaInformationResponseMessage.prototype.reset = function() {
            this.subareas = [];
        };
        AnomalySubareaInformationResponseMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AnomalySubareaInformationResponseMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AnomalySubareaInformationResponseMessage.prototype.serialize = function(output) {
            this.serializeAs_AnomalySubareaInformationResponseMessage(output);
        };
        AnomalySubareaInformationResponseMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AnomalySubareaInformationResponseMessage(input);
        };
        AnomalySubareaInformationResponseMessage.prototype.serializeAs_AnomalySubareaInformationResponseMessage = function(output) {
            output.writeShort(this.subareas.length);
            for (var _i1 = 0; _i1 < this.subareas.length; _i1++) {
                (this.subareas[_i1]).serializeAs_AnomalySubareaInformation(output);
            }
        };
        AnomalySubareaInformationResponseMessage.prototype.deserializeAs_AnomalySubareaInformationResponseMessage = function(input) {
            var _item1 = null;
            var _subareasLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _subareasLen; _i1++) {
                _item1 = new AnomalySubareaInformation();
                _item1.deserialize(input);
                this.subareas.push(_item1);
            }
        };
        AnomalySubareaInformationResponseMessage.ID = 9391;
        return AnomalySubareaInformationResponseMessage;
    })(NetworkMessage);
    Protocol.AnomalySubareaInformationResponseMessage = AnomalySubareaInformationResponseMessage;
    var BreachBranchesMessage = (function(_super) {
        __extends(BreachBranchesMessage, _super);

        function BreachBranchesMessage() {
            this.branches = [];
            _super.call(this)
        }
        BreachBranchesMessage.prototype.getMessageId = function() {
            return BreachBranchesMessage.ID;
        };
        BreachBranchesMessage.prototype.reset = function() {
            this.branches = [];
        };
        BreachBranchesMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        BreachBranchesMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        BreachBranchesMessage.prototype.serialize = function(output) {
            this.serializeAs_BreachBranchesMessage(output);
        };
        BreachBranchesMessage.prototype.deserialize = function(input) {
            this.deserializeAs_BreachBranchesMessage(input);
        };
        BreachBranchesMessage.prototype.serializeAs_BreachBranchesMessage = function(output) {
            output.writeShort(this.branches.length);
            for (var _i1 = 0; _i1 < this.branches.length; _i1++) {
                output.writeShort((this.branches[_i1]).getTypeId());
                (this.branches[_i1]).serialize(output);
            }
        };
        BreachBranchesMessage.prototype.deserializeAs_BreachBranchesMessage = function(input) {
            var _id1 = 0;
            var _item1 = null;
            var _branchesLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _branchesLen; _i1++) {
                _id1 = input.readUnsignedShort();
                _item1 = ProtocolTypeManager.getInstance(ExtendedBreachBranch, _id1);
                _item1.deserialize(input);
                this.branches.push(_item1);
            }
        };
        BreachBranchesMessage.ID = 913;
        return BreachBranchesMessage;
    })(NetworkMessage);
    Protocol.BreachBranchesMessage = BreachBranchesMessage;
    var BreachBonusMessage = (function(_super) {
        __extends(BreachBonusMessage, _super);

        function BreachBonusMessage() {
            this.bonus = new ObjectEffectInteger();
            _super.call(this)
        }
        BreachBonusMessage.prototype.getMessageId = function() {
            return BreachBonusMessage.ID;
        };
        BreachBonusMessage.prototype.reset = function() {
            this.bonus = new ObjectEffectInteger();
        };
        BreachBonusMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        BreachBonusMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        BreachBonusMessage.prototype.serialize = function(output) {
            this.serializeAs_BreachBonusMessage(output);
        };
        BreachBonusMessage.prototype.deserialize = function(input) {
            this.deserializeAs_BreachBonusMessage(input);
        };
        BreachBonusMessage.prototype.serializeAs_BreachBonusMessage = function(output) {
            this.bonus.serializeAs_ObjectEffectInteger(output);
        };
        BreachBonusMessage.prototype.deserializeAs_BreachBonusMessage = function(input) {
            this.bonus = new ObjectEffectInteger();
            this.bonus.deserialize(input);
        };
        BreachBonusMessage.ID = 3478;
        return BreachBonusMessage;
    })(NetworkMessage);
    Protocol.BreachBonusMessage = BreachBonusMessage;
    var BreachBudgetMessage = (function(_super) {
        __extends(BreachBudgetMessage, _super);

        function BreachBudgetMessage() {
            this.bugdet = 0;
            _super.call(this)
        }
        BreachBudgetMessage.prototype.getMessageId = function() {
            return BreachBudgetMessage.ID;
        };
        BreachBudgetMessage.prototype.reset = function() {
            this.bugdet = 0;
        };
        BreachBudgetMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        BreachBudgetMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        BreachBudgetMessage.prototype.serialize = function(output) {
            this.serializeAs_BreachBudgetMessage(output);
        };
        BreachBudgetMessage.prototype.deserialize = function(input) {
            this.deserializeAs_BreachBudgetMessage(input);
        };
        BreachBudgetMessage.prototype.serializeAs_BreachBudgetMessage = function(output) {
            if (this.bugdet < 0) {
                throw new Error("Forbidden value (" + this.bugdet + ") on element bugdet.");
            }
            output.writeVarInt(this.bugdet);
        };
        BreachBudgetMessage.prototype.deserializeAs_BreachBudgetMessage = function(input) {
            this.bugdet = input.readVarUhInt();
            if (this.bugdet < 0) {
                throw new Error("Forbidden value (" + this.bugdet + ") on element of BreachBudgetMessage.bugdet.");
            }
        };
        BreachBudgetMessage.ID = 2375;
        return BreachBudgetMessage;
    })(NetworkMessage);
    Protocol.BreachBudgetMessage = BreachBudgetMessage;
    var BreachCharactersMessage = (function(_super) {
        __extends(BreachCharactersMessage, _super);

        function BreachCharactersMessage() {
            this.characters = [];
            _super.call(this)
        }
        BreachCharactersMessage.prototype.getMessageId = function() {
            return BreachCharactersMessage.ID;
        };
        BreachCharactersMessage.prototype.reset = function() {
            this.characters = [];
        };
        BreachCharactersMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        BreachCharactersMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        BreachCharactersMessage.prototype.serialize = function(output) {
            this.serializeAs_BreachCharactersMessage(output);
        };
        BreachCharactersMessage.prototype.deserialize = function(input) {
            this.deserializeAs_BreachCharactersMessage(input);
        };
        BreachCharactersMessage.prototype.serializeAs_BreachCharactersMessage = function(output) {
            output.writeShort(this.characters.length);
            for (var _i1 = 0; _i1 < this.characters.length; _i1++) {
                if (this.characters[_i1] < 0 || this.characters[_i1] > 9007199254740990) {
                    throw new Error("Forbidden value (" + this.characters[_i1] + ") on element 1 (starting at 1) of characters.");
                }
                output.writeVarLong(this.characters[_i1]);
            }
        };
        BreachCharactersMessage.prototype.deserializeAs_BreachCharactersMessage = function(input) {
            var _val1 = NaN;
            var _charactersLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _charactersLen; _i1++) {
                _val1 = input.readVarUhLong();
                if (_val1 < 0 || _val1 > 9007199254740990) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of characters.");
                }
                this.characters.push(_val1);
            }
        };
        BreachCharactersMessage.ID = 6961;
        return BreachCharactersMessage;
    })(NetworkMessage);
    Protocol.BreachCharactersMessage = BreachCharactersMessage;
    var BreachEnterMessage = (function(_super) {
        __extends(BreachEnterMessage, _super);

        function BreachEnterMessage() {
            this.owner = 0;
            _super.call(this)
        }
        BreachEnterMessage.prototype.getMessageId = function() {
            return BreachEnterMessage.ID;
        };
        BreachEnterMessage.prototype.reset = function() {
            this.owner = 0;
        };
        BreachEnterMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        BreachEnterMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        BreachEnterMessage.prototype.serialize = function(output) {
            this.serializeAs_BreachEnterMessage(output);
        };
        BreachEnterMessage.prototype.deserialize = function(input) {
            this.deserializeAs_BreachEnterMessage(input);
        };
        BreachEnterMessage.prototype.serializeAs_BreachEnterMessage = function(output) {
            if (this.owner < 0 || this.owner > 9007199254740990) {
                throw new Error("Forbidden value (" + this.owner + ") on element owner.");
            }
            output.writeVarLong(this.owner);
        };
        BreachEnterMessage.prototype.deserializeAs_BreachEnterMessage = function(input) {
            this.owner = input.readVarUhLong();
            if (this.owner < 0 || this.owner > 9007199254740990) {
                throw new Error("Forbidden value (" + this.owner + ") on element of BreachEnterMessage.owner.");
            }
        };
        BreachEnterMessage.ID = 9979;
        return BreachEnterMessage;
    })(NetworkMessage);
    Protocol.BreachEnterMessage = BreachEnterMessage;
    var BreachExitRequestMessage = (function(_super) {
        __extends(BreachExitRequestMessage, _super);

        function BreachExitRequestMessage() {

            _super.call(this)
        }
        BreachExitRequestMessage.prototype.getMessageId = function() {
            return BreachExitRequestMessage.ID;
        };
        BreachExitRequestMessage.prototype.reset = function() {

        };
        BreachExitRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        BreachExitRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        BreachExitRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_BreachExitRequestMessage(output);
        };
        BreachExitRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_BreachExitRequestMessage(input);
        };
        BreachExitRequestMessage.prototype.serializeAs_BreachExitRequestMessage = function(output) {

        };
        BreachExitRequestMessage.prototype.deserializeAs_BreachExitRequestMessage = function(input) {

        };
        BreachExitRequestMessage.ID = 9437;
        return BreachExitRequestMessage;
    })(NetworkMessage);
    Protocol.BreachExitRequestMessage = BreachExitRequestMessage;
    var BreachExitResponseMessage = (function(_super) {
        __extends(BreachExitResponseMessage, _super);

        function BreachExitResponseMessage() {
            this.exited = false;
            _super.call(this)
        }
        BreachExitResponseMessage.prototype.getMessageId = function() {
            return BreachExitResponseMessage.ID;
        };
        BreachExitResponseMessage.prototype.reset = function() {
            this.exited = false;
        };
        BreachExitResponseMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        BreachExitResponseMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        BreachExitResponseMessage.prototype.serialize = function(output) {
            this.serializeAs_BreachExitResponseMessage(output);
        };
        BreachExitResponseMessage.prototype.deserialize = function(input) {
            this.deserializeAs_BreachExitResponseMessage(input);
        };
        BreachExitResponseMessage.prototype.serializeAs_BreachExitResponseMessage = function(output) {
            output.writeBoolean(this.exited);
        };
        BreachExitResponseMessage.prototype.deserializeAs_BreachExitResponseMessage = function(input) {
            this.exited = input.readBoolean();
        };
        BreachExitResponseMessage.ID = 3311;
        return BreachExitResponseMessage;
    })(NetworkMessage);
    Protocol.BreachExitResponseMessage = BreachExitResponseMessage;
    var BreachRoomLockedMessage = (function(_super) {
        __extends(BreachRoomLockedMessage, _super);

        function BreachRoomLockedMessage() {

            _super.call(this)
        }
        BreachRoomLockedMessage.prototype.getMessageId = function() {
            return BreachRoomLockedMessage.ID;
        };
        BreachRoomLockedMessage.prototype.reset = function() {

        };
        BreachRoomLockedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        BreachRoomLockedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        BreachRoomLockedMessage.prototype.serialize = function(output) {
            this.serializeAs_BreachRoomLockedMessage(output);
        };
        BreachRoomLockedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_BreachRoomLockedMessage(input);
        };
        BreachRoomLockedMessage.prototype.serializeAs_BreachRoomLockedMessage = function(output) {

        };
        BreachRoomLockedMessage.prototype.deserializeAs_BreachRoomLockedMessage = function(input) {

        };
        BreachRoomLockedMessage.ID = 335;
        return BreachRoomLockedMessage;
    })(NetworkMessage);
    Protocol.BreachRoomLockedMessage = BreachRoomLockedMessage;
    var BreachRoomUnlockRequestMessage = (function(_super) {
        __extends(BreachRoomUnlockRequestMessage, _super);

        function BreachRoomUnlockRequestMessage() {
            this.roomId = 0;
            _super.call(this)
        }
        BreachRoomUnlockRequestMessage.prototype.getMessageId = function() {
            return BreachRoomUnlockRequestMessage.ID;
        };
        BreachRoomUnlockRequestMessage.prototype.reset = function() {
            this.roomId = 0;
        };
        BreachRoomUnlockRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        BreachRoomUnlockRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        BreachRoomUnlockRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_BreachRoomUnlockRequestMessage(output);
        };
        BreachRoomUnlockRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_BreachRoomUnlockRequestMessage(input);
        };
        BreachRoomUnlockRequestMessage.prototype.serializeAs_BreachRoomUnlockRequestMessage = function(output) {
            if (this.roomId < 0) {
                throw new Error("Forbidden value (" + this.roomId + ") on element roomId.");
            }
            output.writeByte(this.roomId);
        };
        BreachRoomUnlockRequestMessage.prototype.deserializeAs_BreachRoomUnlockRequestMessage = function(input) {
            this.roomId = input.readByte();
            if (this.roomId < 0) {
                throw new Error("Forbidden value (" + this.roomId + ") on element of BreachRoomUnlockRequestMessage.roomId.");
            }
        };
        BreachRoomUnlockRequestMessage.ID = 6725;
        return BreachRoomUnlockRequestMessage;
    })(NetworkMessage);
    Protocol.BreachRoomUnlockRequestMessage = BreachRoomUnlockRequestMessage;
    var BreachRoomUnlockResultMessage = (function(_super) {
        __extends(BreachRoomUnlockResultMessage, _super);

        function BreachRoomUnlockResultMessage() {
            this.roomId = 0;
            this.result = 0;
            _super.call(this)
        }
        BreachRoomUnlockResultMessage.prototype.getMessageId = function() {
            return BreachRoomUnlockResultMessage.ID;
        };
        BreachRoomUnlockResultMessage.prototype.reset = function() {
            this.roomId = 0;
            this.result = 0;
        };
        BreachRoomUnlockResultMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        BreachRoomUnlockResultMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        BreachRoomUnlockResultMessage.prototype.serialize = function(output) {
            this.serializeAs_BreachRoomUnlockResultMessage(output);
        };
        BreachRoomUnlockResultMessage.prototype.deserialize = function(input) {
            this.deserializeAs_BreachRoomUnlockResultMessage(input);
        };
        BreachRoomUnlockResultMessage.prototype.serializeAs_BreachRoomUnlockResultMessage = function(output) {
            if (this.roomId < 0) {
                throw new Error("Forbidden value (" + this.roomId + ") on element roomId.");
            }
            output.writeByte(this.roomId);
            output.writeByte(this.result);
        };
        BreachRoomUnlockResultMessage.prototype.deserializeAs_BreachRoomUnlockResultMessage = function(input) {
            this.roomId = input.readByte();
            if (this.roomId < 0) {
                throw new Error("Forbidden value (" + this.roomId + ") on element of BreachRoomUnlockResultMessage.roomId.");
            }
            this.result = input.readByte();
            if (this.result < 0) {
                throw new Error("Forbidden value (" + this.result + ") on element of BreachRoomUnlockResultMessage.result.");
            }
        };
        BreachRoomUnlockResultMessage.ID = 884;
        return BreachRoomUnlockResultMessage;
    })(NetworkMessage);
    Protocol.BreachRoomUnlockResultMessage = BreachRoomUnlockResultMessage;
    var BreachSavedMessage = (function(_super) {
        __extends(BreachSavedMessage, _super);

        function BreachSavedMessage() {
            this.saved = false;
            _super.call(this)
        }
        BreachSavedMessage.prototype.getMessageId = function() {
            return BreachSavedMessage.ID;
        };
        BreachSavedMessage.prototype.reset = function() {
            this.saved = false;
        };
        BreachSavedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        BreachSavedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        BreachSavedMessage.prototype.serialize = function(output) {
            this.serializeAs_BreachSavedMessage(output);
        };
        BreachSavedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_BreachSavedMessage(input);
        };
        BreachSavedMessage.prototype.serializeAs_BreachSavedMessage = function(output) {
            output.writeBoolean(this.saved);
        };
        BreachSavedMessage.prototype.deserializeAs_BreachSavedMessage = function(input) {
            this.saved = input.readBoolean();
        };
        BreachSavedMessage.ID = 8176;
        return BreachSavedMessage;
    })(NetworkMessage);
    Protocol.BreachSavedMessage = BreachSavedMessage;
    var BreachStateMessage = (function(_super) {
        __extends(BreachStateMessage, _super);

        function BreachStateMessage() {
            this.owner = new CharacterMinimalInformations();
            this.bonuses = [];
            this.bugdet = 0;
            this.saved = false;
            _super.call(this)
        }
        BreachStateMessage.prototype.getMessageId = function() {
            return BreachStateMessage.ID;
        };
        BreachStateMessage.prototype.reset = function() {
            this.owner = new CharacterMinimalInformations();
            this.bonuses = [];
            this.bugdet = 0;
            this.saved = false;
        };
        BreachStateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        BreachStateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        BreachStateMessage.prototype.serialize = function(output) {
            this.serializeAs_BreachStateMessage(output);
        };
        BreachStateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_BreachStateMessage(input);
        };
        BreachStateMessage.prototype.serializeAs_BreachStateMessage = function(output) {
            this.owner.serializeAs_CharacterMinimalInformations(output);
            output.writeShort(this.bonuses.length);
            for (var _i2 = 0; _i2 < this.bonuses.length; _i2++) {
                (this.bonuses[_i2]).serializeAs_ObjectEffectInteger(output);
            }
            if (this.bugdet < 0) {
                throw new Error("Forbidden value (" + this.bugdet + ") on element bugdet.");
            }
            output.writeVarInt(this.bugdet);
            output.writeBoolean(this.saved);
        };
        BreachStateMessage.prototype.deserializeAs_BreachStateMessage = function(input) {
            var _item2 = null;
            this.owner = new CharacterMinimalInformations();
            this.owner.deserialize(input);
            var _bonusesLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _bonusesLen; _i2++) {
                _item2 = new ObjectEffectInteger();
                _item2.deserialize(input);
                this.bonuses.push(_item2);
            }
            this.bugdet = input.readVarUhInt();
            if (this.bugdet < 0) {
                throw new Error("Forbidden value (" + this.bugdet + ") on element of BreachStateMessage.bugdet.");
            }
            this.saved = input.readBoolean();
        };
        BreachStateMessage.ID = 1220;
        return BreachStateMessage;
    })(NetworkMessage);
    Protocol.BreachStateMessage = BreachStateMessage;
    var BreachTeleportRequestMessage = (function(_super) {
        __extends(BreachTeleportRequestMessage, _super);

        function BreachTeleportRequestMessage() {

            _super.call(this)
        }
        BreachTeleportRequestMessage.prototype.getMessageId = function() {
            return BreachTeleportRequestMessage.ID;
        };
        BreachTeleportRequestMessage.prototype.reset = function() {

        };
        BreachTeleportRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        BreachTeleportRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        BreachTeleportRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_BreachTeleportRequestMessage(output);
        };
        BreachTeleportRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_BreachTeleportRequestMessage(input);
        };
        BreachTeleportRequestMessage.prototype.serializeAs_BreachTeleportRequestMessage = function(output) {

        };
        BreachTeleportRequestMessage.prototype.deserializeAs_BreachTeleportRequestMessage = function(input) {

        };
        BreachTeleportRequestMessage.ID = 6772;
        return BreachTeleportRequestMessage;
    })(NetworkMessage);
    Protocol.BreachTeleportRequestMessage = BreachTeleportRequestMessage;
    var BreachTeleportResponseMessage = (function(_super) {
        __extends(BreachTeleportResponseMessage, _super);

        function BreachTeleportResponseMessage() {
            this.teleported = false;
            _super.call(this)
        }
        BreachTeleportResponseMessage.prototype.getMessageId = function() {
            return BreachTeleportResponseMessage.ID;
        };
        BreachTeleportResponseMessage.prototype.reset = function() {
            this.teleported = false;
        };
        BreachTeleportResponseMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        BreachTeleportResponseMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        BreachTeleportResponseMessage.prototype.serialize = function(output) {
            this.serializeAs_BreachTeleportResponseMessage(output);
        };
        BreachTeleportResponseMessage.prototype.deserialize = function(input) {
            this.deserializeAs_BreachTeleportResponseMessage(input);
        };
        BreachTeleportResponseMessage.prototype.serializeAs_BreachTeleportResponseMessage = function(output) {
            output.writeBoolean(this.teleported);
        };
        BreachTeleportResponseMessage.prototype.deserializeAs_BreachTeleportResponseMessage = function(input) {
            this.teleported = input.readBoolean();
        };
        BreachTeleportResponseMessage.ID = 1936;
        return BreachTeleportResponseMessage;
    })(NetworkMessage);
    Protocol.BreachTeleportResponseMessage = BreachTeleportResponseMessage;
    var MapComplementaryInformationsBreachMessage = (function(_super) {
        __extends(MapComplementaryInformationsBreachMessage, _super);

        function MapComplementaryInformationsBreachMessage() {
            this.floor = 0;
            this.room = 0;
            this.infinityMode = 0;
            this.branches = [];
            _super.call(this)
        }
        MapComplementaryInformationsBreachMessage.prototype.getMessageId = function() {
            return MapComplementaryInformationsBreachMessage.ID;
        };
        MapComplementaryInformationsBreachMessage.prototype.reset = function() {
            this.floor = 0;
            this.room = 0;
            this.infinityMode = 0;
            this.branches = [];
        };
        MapComplementaryInformationsBreachMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MapComplementaryInformationsBreachMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MapComplementaryInformationsBreachMessage.prototype.serialize = function(output) {
            this.serializeAs_MapComplementaryInformationsBreachMessage(output);
        };
        MapComplementaryInformationsBreachMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MapComplementaryInformationsBreachMessage(input);
        };
        MapComplementaryInformationsBreachMessage.prototype.serializeAs_MapComplementaryInformationsBreachMessage = function(output) {
            _super.prototype.serializeAs_MapComplementaryInformationsDataMessage.call(this, output);
            if (this.floor < 0) {
                throw new Error("Forbidden value (" + this.floor + ") on element floor.");
            }
            output.writeVarInt(this.floor);
            if (this.room < 0) {
                throw new Error("Forbidden value (" + this.room + ") on element room.");
            }
            output.writeByte(this.room);
            if (this.infinityMode < 0) {
                throw new Error("Forbidden value (" + this.infinityMode + ") on element infinityMode.");
            }
            output.writeShort(this.infinityMode);
            output.writeShort(this.branches.length);
            for (var _i4 = 0; _i4 < this.branches.length; _i4++) {
                output.writeShort((this.branches[_i4]).getTypeId());
                (this.branches[_i4]).serialize(output);
            }
        };
        MapComplementaryInformationsBreachMessage.prototype.deserializeAs_MapComplementaryInformationsBreachMessage = function(input) {
            var _id4 = 0;
            var _item4 = null;
            _super.prototype.deserializeAs_MapComplementaryInformationsDataMessage.call(this, input);
            this.floor = input.readVarUhInt();
            if (this.floor < 0) {
                throw new Error("Forbidden value (" + this.floor + ") on element of MapComplementaryInformationsBreachMessage.floor.");
            }
            this.room = input.readByte();
            if (this.room < 0) {
                throw new Error("Forbidden value (" + this.room + ") on element of MapComplementaryInformationsBreachMessage.room.");
            }
            this.infinityMode = input.readShort();
            if (this.infinityMode < 0) {
                throw new Error("Forbidden value (" + this.infinityMode + ") on element of MapComplementaryInformationsBreachMessage.infinityMode.");
            }
            var _branchesLen = input.readUnsignedShort();
            for (var _i4 = 0; _i4 < _branchesLen; _i4++) {
                _id4 = input.readUnsignedShort();
                _item4 = ProtocolTypeManager.getInstance(BreachBranch, _id4);
                _item4.deserialize(input);
                this.branches.push(_item4);
            }
        };
        MapComplementaryInformationsBreachMessage.ID = 3106;
        return MapComplementaryInformationsBreachMessage;
    })(MapComplementaryInformationsDataMessage);
    Protocol.MapComplementaryInformationsBreachMessage = MapComplementaryInformationsBreachMessage;
    var BreachInvitationAnswerMessage = (function(_super) {
        __extends(BreachInvitationAnswerMessage, _super);

        function BreachInvitationAnswerMessage() {
            this.accept = false;
            _super.call(this)
        }
        BreachInvitationAnswerMessage.prototype.getMessageId = function() {
            return BreachInvitationAnswerMessage.ID;
        };
        BreachInvitationAnswerMessage.prototype.reset = function() {
            this.accept = false;
        };
        BreachInvitationAnswerMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        BreachInvitationAnswerMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        BreachInvitationAnswerMessage.prototype.serialize = function(output) {
            this.serializeAs_BreachInvitationAnswerMessage(output);
        };
        BreachInvitationAnswerMessage.prototype.deserialize = function(input) {
            this.deserializeAs_BreachInvitationAnswerMessage(input);
        };
        BreachInvitationAnswerMessage.prototype.serializeAs_BreachInvitationAnswerMessage = function(output) {
            output.writeBoolean(this.accept);
        };
        BreachInvitationAnswerMessage.prototype.deserializeAs_BreachInvitationAnswerMessage = function(input) {
            this.accept = input.readBoolean();
        };
        BreachInvitationAnswerMessage.ID = 7999;
        return BreachInvitationAnswerMessage;
    })(NetworkMessage);
    Protocol.BreachInvitationAnswerMessage = BreachInvitationAnswerMessage;
    var BreachInvitationCloseMessage = (function(_super) {
        __extends(BreachInvitationCloseMessage, _super);

        function BreachInvitationCloseMessage() {
            this.host = new CharacterMinimalInformations();
            _super.call(this)
        }
        BreachInvitationCloseMessage.prototype.getMessageId = function() {
            return BreachInvitationCloseMessage.ID;
        };
        BreachInvitationCloseMessage.prototype.reset = function() {
            this.host = new CharacterMinimalInformations();
        };
        BreachInvitationCloseMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        BreachInvitationCloseMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        BreachInvitationCloseMessage.prototype.serialize = function(output) {
            this.serializeAs_BreachInvitationCloseMessage(output);
        };
        BreachInvitationCloseMessage.prototype.deserialize = function(input) {
            this.deserializeAs_BreachInvitationCloseMessage(input);
        };
        BreachInvitationCloseMessage.prototype.serializeAs_BreachInvitationCloseMessage = function(output) {
            this.host.serializeAs_CharacterMinimalInformations(output);
        };
        BreachInvitationCloseMessage.prototype.deserializeAs_BreachInvitationCloseMessage = function(input) {
            this.host = new CharacterMinimalInformations();
            this.host.deserialize(input);
        };
        BreachInvitationCloseMessage.ID = 8376;
        return BreachInvitationCloseMessage;
    })(NetworkMessage);
    Protocol.BreachInvitationCloseMessage = BreachInvitationCloseMessage;
    var BreachInvitationOfferMessage = (function(_super) {
        __extends(BreachInvitationOfferMessage, _super);

        function BreachInvitationOfferMessage() {
            this.host = new CharacterMinimalInformations();
            this.timeLeftBeforeCancel = 0;
            _super.call(this)
        }
        BreachInvitationOfferMessage.prototype.getMessageId = function() {
            return BreachInvitationOfferMessage.ID;
        };
        BreachInvitationOfferMessage.prototype.reset = function() {
            this.host = new CharacterMinimalInformations();
            this.timeLeftBeforeCancel = 0;
        };
        BreachInvitationOfferMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        BreachInvitationOfferMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        BreachInvitationOfferMessage.prototype.serialize = function(output) {
            this.serializeAs_BreachInvitationOfferMessage(output);
        };
        BreachInvitationOfferMessage.prototype.deserialize = function(input) {
            this.deserializeAs_BreachInvitationOfferMessage(input);
        };
        BreachInvitationOfferMessage.prototype.serializeAs_BreachInvitationOfferMessage = function(output) {
            this.host.serializeAs_CharacterMinimalInformations(output);
            if (this.timeLeftBeforeCancel < 0) {
                throw new Error("Forbidden value (" + this.timeLeftBeforeCancel + ") on element timeLeftBeforeCancel.");
            }
            output.writeVarInt(this.timeLeftBeforeCancel);
        };
        BreachInvitationOfferMessage.prototype.deserializeAs_BreachInvitationOfferMessage = function(input) {
            this.host = new CharacterMinimalInformations();
            this.host.deserialize(input);
            this.timeLeftBeforeCancel = input.readVarUhInt();
            if (this.timeLeftBeforeCancel < 0) {
                throw new Error("Forbidden value (" + this.timeLeftBeforeCancel + ") on element of BreachInvitationOfferMessage.timeLeftBeforeCancel.");
            }
        };
        BreachInvitationOfferMessage.ID = 3906;
        return BreachInvitationOfferMessage;
    })(NetworkMessage);
    Protocol.BreachInvitationOfferMessage = BreachInvitationOfferMessage;
    var BreachInvitationRequestMessage = (function(_super) {
        __extends(BreachInvitationRequestMessage, _super);

        function BreachInvitationRequestMessage() {
            this.guests = [];
            _super.call(this)
        }
        BreachInvitationRequestMessage.prototype.getMessageId = function() {
            return BreachInvitationRequestMessage.ID;
        };
        BreachInvitationRequestMessage.prototype.reset = function() {
            this.guests = [];
        };
        BreachInvitationRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        BreachInvitationRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        BreachInvitationRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_BreachInvitationRequestMessage(output);
        };
        BreachInvitationRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_BreachInvitationRequestMessage(input);
        };
        BreachInvitationRequestMessage.prototype.serializeAs_BreachInvitationRequestMessage = function(output) {
            output.writeShort(this.guests.length);
            for (var _i1 = 0; _i1 < this.guests.length; _i1++) {
                if (this.guests[_i1] < 0 || this.guests[_i1] > 9007199254740990) {
                    throw new Error("Forbidden value (" + this.guests[_i1] + ") on element 1 (starting at 1) of guests.");
                }
                output.writeVarLong(this.guests[_i1]);
            }
        };
        BreachInvitationRequestMessage.prototype.deserializeAs_BreachInvitationRequestMessage = function(input) {
            var _val1 = NaN;
            var _guestsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _guestsLen; _i1++) {
                _val1 = input.readVarUhLong();
                if (_val1 < 0 || _val1 > 9007199254740990) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of guests.");
                }
                this.guests.push(_val1);
            }
        };
        BreachInvitationRequestMessage.ID = 4246;
        return BreachInvitationRequestMessage;
    })(NetworkMessage);
    Protocol.BreachInvitationRequestMessage = BreachInvitationRequestMessage;
    var BreachInvitationResponseMessage = (function(_super) {
        __extends(BreachInvitationResponseMessage, _super);

        function BreachInvitationResponseMessage() {
            this.guest = new CharacterMinimalInformations();
            this.accept = false;
            _super.call(this)
        }
        BreachInvitationResponseMessage.prototype.getMessageId = function() {
            return BreachInvitationResponseMessage.ID;
        };
        BreachInvitationResponseMessage.prototype.reset = function() {
            this.guest = new CharacterMinimalInformations();
            this.accept = false;
        };
        BreachInvitationResponseMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        BreachInvitationResponseMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        BreachInvitationResponseMessage.prototype.serialize = function(output) {
            this.serializeAs_BreachInvitationResponseMessage(output);
        };
        BreachInvitationResponseMessage.prototype.deserialize = function(input) {
            this.deserializeAs_BreachInvitationResponseMessage(input);
        };
        BreachInvitationResponseMessage.prototype.serializeAs_BreachInvitationResponseMessage = function(output) {
            this.guest.serializeAs_CharacterMinimalInformations(output);
            output.writeBoolean(this.accept);
        };
        BreachInvitationResponseMessage.prototype.deserializeAs_BreachInvitationResponseMessage = function(input) {
            this.guest = new CharacterMinimalInformations();
            this.guest.deserialize(input);
            this.accept = input.readBoolean();
        };
        BreachInvitationResponseMessage.ID = 6740;
        return BreachInvitationResponseMessage;
    })(NetworkMessage);
    Protocol.BreachInvitationResponseMessage = BreachInvitationResponseMessage;
    var BreachKickRequestMessage = (function(_super) {
        __extends(BreachKickRequestMessage, _super);

        function BreachKickRequestMessage() {
            this.target = 0;
            _super.call(this)
        }
        BreachKickRequestMessage.prototype.getMessageId = function() {
            return BreachKickRequestMessage.ID;
        };
        BreachKickRequestMessage.prototype.reset = function() {
            this.target = 0;
        };
        BreachKickRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        BreachKickRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        BreachKickRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_BreachKickRequestMessage(output);
        };
        BreachKickRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_BreachKickRequestMessage(input);
        };
        BreachKickRequestMessage.prototype.serializeAs_BreachKickRequestMessage = function(output) {
            if (this.target < 0 || this.target > 9007199254740990) {
                throw new Error("Forbidden value (" + this.target + ") on element target.");
            }
            output.writeVarLong(this.target);
        };
        BreachKickRequestMessage.prototype.deserializeAs_BreachKickRequestMessage = function(input) {
            this.target = input.readVarUhLong();
            if (this.target < 0 || this.target > 9007199254740990) {
                throw new Error("Forbidden value (" + this.target + ") on element of BreachKickRequestMessage.target.");
            }
        };
        BreachKickRequestMessage.ID = 1305;
        return BreachKickRequestMessage;
    })(NetworkMessage);
    Protocol.BreachKickRequestMessage = BreachKickRequestMessage;
    var BreachKickResponseMessage = (function(_super) {
        __extends(BreachKickResponseMessage, _super);

        function BreachKickResponseMessage() {
            this.target = new CharacterMinimalInformations();
            this.kicked = false;
            _super.call(this)
        }
        BreachKickResponseMessage.prototype.getMessageId = function() {
            return BreachKickResponseMessage.ID;
        };
        BreachKickResponseMessage.prototype.reset = function() {
            this.target = new CharacterMinimalInformations();
            this.kicked = false;
        };
        BreachKickResponseMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        BreachKickResponseMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        BreachKickResponseMessage.prototype.serialize = function(output) {
            this.serializeAs_BreachKickResponseMessage(output);
        };
        BreachKickResponseMessage.prototype.deserialize = function(input) {
            this.deserializeAs_BreachKickResponseMessage(input);
        };
        BreachKickResponseMessage.prototype.serializeAs_BreachKickResponseMessage = function(output) {
            this.target.serializeAs_CharacterMinimalInformations(output);
            output.writeBoolean(this.kicked);
        };
        BreachKickResponseMessage.prototype.deserializeAs_BreachKickResponseMessage = function(input) {
            this.target = new CharacterMinimalInformations();
            this.target.deserialize(input);
            this.kicked = input.readBoolean();
        };
        BreachKickResponseMessage.ID = 5951;
        return BreachKickResponseMessage;
    })(NetworkMessage);
    Protocol.BreachKickResponseMessage = BreachKickResponseMessage;
    var BreachRewardBoughtMessage = (function(_super) {
        __extends(BreachRewardBoughtMessage, _super);

        function BreachRewardBoughtMessage() {
            this.id = 0;
            this.bought = false;
            _super.call(this)
        }
        BreachRewardBoughtMessage.prototype.getMessageId = function() {
            return BreachRewardBoughtMessage.ID;
        };
        BreachRewardBoughtMessage.prototype.reset = function() {
            this.id = 0;
            this.bought = false;
        };
        BreachRewardBoughtMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        BreachRewardBoughtMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        BreachRewardBoughtMessage.prototype.serialize = function(output) {
            this.serializeAs_BreachRewardBoughtMessage(output);
        };
        BreachRewardBoughtMessage.prototype.deserialize = function(input) {
            this.deserializeAs_BreachRewardBoughtMessage(input);
        };
        BreachRewardBoughtMessage.prototype.serializeAs_BreachRewardBoughtMessage = function(output) {
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarInt(this.id);
            output.writeBoolean(this.bought);
        };
        BreachRewardBoughtMessage.prototype.deserializeAs_BreachRewardBoughtMessage = function(input) {
            this.id = input.readVarUhInt();
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element of BreachRewardBoughtMessage.id.");
            }
            this.bought = input.readBoolean();
        };
        BreachRewardBoughtMessage.ID = 1374;
        return BreachRewardBoughtMessage;
    })(NetworkMessage);
    Protocol.BreachRewardBoughtMessage = BreachRewardBoughtMessage;
    var BreachRewardBuyMessage = (function(_super) {
        __extends(BreachRewardBuyMessage, _super);

        function BreachRewardBuyMessage() {
            this.id = 0;
            _super.call(this)
        }
        BreachRewardBuyMessage.prototype.getMessageId = function() {
            return BreachRewardBuyMessage.ID;
        };
        BreachRewardBuyMessage.prototype.reset = function() {
            this.id = 0;
        };
        BreachRewardBuyMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        BreachRewardBuyMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        BreachRewardBuyMessage.prototype.serialize = function(output) {
            this.serializeAs_BreachRewardBuyMessage(output);
        };
        BreachRewardBuyMessage.prototype.deserialize = function(input) {
            this.deserializeAs_BreachRewardBuyMessage(input);
        };
        BreachRewardBuyMessage.prototype.serializeAs_BreachRewardBuyMessage = function(output) {
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarInt(this.id);
        };
        BreachRewardBuyMessage.prototype.deserializeAs_BreachRewardBuyMessage = function(input) {
            this.id = input.readVarUhInt();
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element of BreachRewardBuyMessage.id.");
            }
        };
        BreachRewardBuyMessage.ID = 836;
        return BreachRewardBuyMessage;
    })(NetworkMessage);
    Protocol.BreachRewardBuyMessage = BreachRewardBuyMessage;
    var BreachRewardsMessage = (function(_super) {
        __extends(BreachRewardsMessage, _super);

        function BreachRewardsMessage() {
            this.rewards = [];
            _super.call(this)
        }
        BreachRewardsMessage.prototype.getMessageId = function() {
            return BreachRewardsMessage.ID;
        };
        BreachRewardsMessage.prototype.reset = function() {
            this.rewards = [];
        };
        BreachRewardsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        BreachRewardsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        BreachRewardsMessage.prototype.serialize = function(output) {
            this.serializeAs_BreachRewardsMessage(output);
        };
        BreachRewardsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_BreachRewardsMessage(input);
        };
        BreachRewardsMessage.prototype.serializeAs_BreachRewardsMessage = function(output) {
            output.writeShort(this.rewards.length);
            for (var _i1 = 0; _i1 < this.rewards.length; _i1++) {
                (this.rewards[_i1]).serializeAs_BreachReward(output);
            }
        };
        BreachRewardsMessage.prototype.deserializeAs_BreachRewardsMessage = function(input) {
            var _item1 = null;
            var _rewardsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _rewardsLen; _i1++) {
                _item1 = new BreachReward();
                _item1.deserialize(input);
                this.rewards.push(_item1);
            }
        };
        BreachRewardsMessage.ID = 5563;
        return BreachRewardsMessage;
    })(NetworkMessage);
    Protocol.BreachRewardsMessage = BreachRewardsMessage;
    var ChangeMapMessage = (function(_super) {
        __extends(ChangeMapMessage, _super);

        function ChangeMapMessage() {
            this.mapId = 0;
            this.autopilot = false;
            _super.call(this)
        }
        ChangeMapMessage.prototype.getMessageId = function() {
            return ChangeMapMessage.ID;
        };
        ChangeMapMessage.prototype.reset = function() {
            this.mapId = 0;
            this.autopilot = false;
        };
        ChangeMapMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ChangeMapMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ChangeMapMessage.prototype.serialize = function(output) {
            this.serializeAs_ChangeMapMessage(output);
        };
        ChangeMapMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ChangeMapMessage(input);
        };
        ChangeMapMessage.prototype.serializeAs_ChangeMapMessage = function(output) {
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            output.writeBoolean(this.autopilot);
        };
        ChangeMapMessage.prototype.deserializeAs_ChangeMapMessage = function(input) {
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of ChangeMapMessage.mapId.");
            }
            this.autopilot = input.readBoolean();
        };
        ChangeMapMessage.ID = 3266;
        return ChangeMapMessage;
    })(NetworkMessage);
    Protocol.ChangeMapMessage = ChangeMapMessage;
    var CurrentMapMessage = (function(_super) {
        __extends(CurrentMapMessage, _super);

        function CurrentMapMessage() {
            this.mapId = 0;
            this.mapKey = "";
            _super.call(this)
        }
        CurrentMapMessage.prototype.getMessageId = function() {
            return CurrentMapMessage.ID;
        };
        CurrentMapMessage.prototype.reset = function() {
            this.mapId = 0;
            this.mapKey = "";
        };
        CurrentMapMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        CurrentMapMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        CurrentMapMessage.prototype.serialize = function(output) {
            this.serializeAs_CurrentMapMessage(output);
        };
        CurrentMapMessage.prototype.deserialize = function(input) {
            this.deserializeAs_CurrentMapMessage(input);
        };
        CurrentMapMessage.prototype.serializeAs_CurrentMapMessage = function(output) {
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            output.writeUTF(this.mapKey);
        };
        CurrentMapMessage.prototype.deserializeAs_CurrentMapMessage = function(input) {
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of CurrentMapMessage.mapId.");
            }
            this.mapKey = input.readUTF();
        };
        CurrentMapMessage.ID = 7796;
        return CurrentMapMessage;
    })(NetworkMessage);
    Protocol.CurrentMapMessage = CurrentMapMessage;
    var CurrentMapInstanceMessage = (function(_super) {
        __extends(CurrentMapInstanceMessage, _super);

        function CurrentMapInstanceMessage() {
            this.instantiatedMapId = 0;
            _super.call(this)
        }
        CurrentMapInstanceMessage.prototype.getMessageId = function() {
            return CurrentMapInstanceMessage.ID;
        };
        CurrentMapInstanceMessage.prototype.reset = function() {
            this.instantiatedMapId = 0;
        };
        CurrentMapInstanceMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        CurrentMapInstanceMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        CurrentMapInstanceMessage.prototype.serialize = function(output) {
            this.serializeAs_CurrentMapInstanceMessage(output);
        };
        CurrentMapInstanceMessage.prototype.deserialize = function(input) {
            this.deserializeAs_CurrentMapInstanceMessage(input);
        };
        CurrentMapInstanceMessage.prototype.serializeAs_CurrentMapInstanceMessage = function(output) {
            _super.prototype.serializeAs_CurrentMapMessage.call(this, output);
            if (this.instantiatedMapId < 0 || this.instantiatedMapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.instantiatedMapId + ") on element instantiatedMapId.");
            }
            output.writeDouble(this.instantiatedMapId);
        };
        CurrentMapInstanceMessage.prototype.deserializeAs_CurrentMapInstanceMessage = function(input) {
            _super.prototype.deserializeAs_CurrentMapMessage.call(this, input);
            this.instantiatedMapId = input.readDouble();
            if (this.instantiatedMapId < 0 || this.instantiatedMapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.instantiatedMapId + ") on element of CurrentMapInstanceMessage.instantiatedMapId.");
            }
        };
        CurrentMapInstanceMessage.ID = 3125;
        return CurrentMapInstanceMessage;
    })(CurrentMapMessage);
    Protocol.CurrentMapInstanceMessage = CurrentMapInstanceMessage;
    var GameRolePlayFreeSoulRequestMessage = (function(_super) {
        __extends(GameRolePlayFreeSoulRequestMessage, _super);

        function GameRolePlayFreeSoulRequestMessage() {

            _super.call(this)
        }
        GameRolePlayFreeSoulRequestMessage.prototype.getMessageId = function() {
            return GameRolePlayFreeSoulRequestMessage.ID;
        };
        GameRolePlayFreeSoulRequestMessage.prototype.reset = function() {

        };
        GameRolePlayFreeSoulRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameRolePlayFreeSoulRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameRolePlayFreeSoulRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayFreeSoulRequestMessage(output);
        };
        GameRolePlayFreeSoulRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayFreeSoulRequestMessage(input);
        };
        GameRolePlayFreeSoulRequestMessage.prototype.serializeAs_GameRolePlayFreeSoulRequestMessage = function(output) {

        };
        GameRolePlayFreeSoulRequestMessage.prototype.deserializeAs_GameRolePlayFreeSoulRequestMessage = function(input) {

        };
        GameRolePlayFreeSoulRequestMessage.ID = 6865;
        return GameRolePlayFreeSoulRequestMessage;
    })(NetworkMessage);
    Protocol.GameRolePlayFreeSoulRequestMessage = GameRolePlayFreeSoulRequestMessage;
    var GameRolePlayGameOverMessage = (function(_super) {
        __extends(GameRolePlayGameOverMessage, _super);

        function GameRolePlayGameOverMessage() {

            _super.call(this)
        }
        GameRolePlayGameOverMessage.prototype.getMessageId = function() {
            return GameRolePlayGameOverMessage.ID;
        };
        GameRolePlayGameOverMessage.prototype.reset = function() {

        };
        GameRolePlayGameOverMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameRolePlayGameOverMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameRolePlayGameOverMessage.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayGameOverMessage(output);
        };
        GameRolePlayGameOverMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayGameOverMessage(input);
        };
        GameRolePlayGameOverMessage.prototype.serializeAs_GameRolePlayGameOverMessage = function(output) {

        };
        GameRolePlayGameOverMessage.prototype.deserializeAs_GameRolePlayGameOverMessage = function(input) {

        };
        GameRolePlayGameOverMessage.ID = 7625;
        return GameRolePlayGameOverMessage;
    })(NetworkMessage);
    Protocol.GameRolePlayGameOverMessage = GameRolePlayGameOverMessage;
    var GameRolePlayPlayerLifeStatusMessage = (function(_super) {
        __extends(GameRolePlayPlayerLifeStatusMessage, _super);

        function GameRolePlayPlayerLifeStatusMessage() {
            this.state = 0;
            this.phenixMapId = 0;
            _super.call(this)
        }
        GameRolePlayPlayerLifeStatusMessage.prototype.getMessageId = function() {
            return GameRolePlayPlayerLifeStatusMessage.ID;
        };
        GameRolePlayPlayerLifeStatusMessage.prototype.reset = function() {
            this.state = 0;
            this.phenixMapId = 0;
        };
        GameRolePlayPlayerLifeStatusMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameRolePlayPlayerLifeStatusMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameRolePlayPlayerLifeStatusMessage.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayPlayerLifeStatusMessage(output);
        };
        GameRolePlayPlayerLifeStatusMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayPlayerLifeStatusMessage(input);
        };
        GameRolePlayPlayerLifeStatusMessage.prototype.serializeAs_GameRolePlayPlayerLifeStatusMessage = function(output) {
            output.writeByte(this.state);
            if (this.phenixMapId < 0 || this.phenixMapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.phenixMapId + ") on element phenixMapId.");
            }
            output.writeDouble(this.phenixMapId);
        };
        GameRolePlayPlayerLifeStatusMessage.prototype.deserializeAs_GameRolePlayPlayerLifeStatusMessage = function(input) {
            this.state = input.readByte();
            if (this.state < 0) {
                throw new Error("Forbidden value (" + this.state + ") on element of GameRolePlayPlayerLifeStatusMessage.state.");
            }
            this.phenixMapId = input.readDouble();
            if (this.phenixMapId < 0 || this.phenixMapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.phenixMapId + ") on element of GameRolePlayPlayerLifeStatusMessage.phenixMapId.");
            }
        };
        GameRolePlayPlayerLifeStatusMessage.ID = 528;
        return GameRolePlayPlayerLifeStatusMessage;
    })(NetworkMessage);
    Protocol.GameRolePlayPlayerLifeStatusMessage = GameRolePlayPlayerLifeStatusMessage;
    var WarnOnPermaDeathMessage = (function(_super) {
        __extends(WarnOnPermaDeathMessage, _super);

        function WarnOnPermaDeathMessage() {
            this.enable = false;
            _super.call(this)
        }
        WarnOnPermaDeathMessage.prototype.getMessageId = function() {
            return WarnOnPermaDeathMessage.ID;
        };
        WarnOnPermaDeathMessage.prototype.reset = function() {
            this.enable = false;
        };
        WarnOnPermaDeathMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        WarnOnPermaDeathMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        WarnOnPermaDeathMessage.prototype.serialize = function(output) {
            this.serializeAs_WarnOnPermaDeathMessage(output);
        };
        WarnOnPermaDeathMessage.prototype.deserialize = function(input) {
            this.deserializeAs_WarnOnPermaDeathMessage(input);
        };
        WarnOnPermaDeathMessage.prototype.serializeAs_WarnOnPermaDeathMessage = function(output) {
            output.writeBoolean(this.enable);
        };
        WarnOnPermaDeathMessage.prototype.deserializeAs_WarnOnPermaDeathMessage = function(input) {
            this.enable = input.readBoolean();
        };
        WarnOnPermaDeathMessage.ID = 8483;
        return WarnOnPermaDeathMessage;
    })(NetworkMessage);
    Protocol.WarnOnPermaDeathMessage = WarnOnPermaDeathMessage;
    var GameRolePlayDelayedActionFinishedMessage = (function(_super) {
        __extends(GameRolePlayDelayedActionFinishedMessage, _super);

        function GameRolePlayDelayedActionFinishedMessage() {
            this.delayedCharacterId = 0;
            this.delayTypeId = 0;
            _super.call(this)
        }
        GameRolePlayDelayedActionFinishedMessage.prototype.getMessageId = function() {
            return GameRolePlayDelayedActionFinishedMessage.ID;
        };
        GameRolePlayDelayedActionFinishedMessage.prototype.reset = function() {
            this.delayedCharacterId = 0;
            this.delayTypeId = 0;
        };
        GameRolePlayDelayedActionFinishedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameRolePlayDelayedActionFinishedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameRolePlayDelayedActionFinishedMessage.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayDelayedActionFinishedMessage(output);
        };
        GameRolePlayDelayedActionFinishedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayDelayedActionFinishedMessage(input);
        };
        GameRolePlayDelayedActionFinishedMessage.prototype.serializeAs_GameRolePlayDelayedActionFinishedMessage = function(output) {
            if (this.delayedCharacterId < -9007199254740990 || this.delayedCharacterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.delayedCharacterId + ") on element delayedCharacterId.");
            }
            output.writeDouble(this.delayedCharacterId);
            output.writeByte(this.delayTypeId);
        };
        GameRolePlayDelayedActionFinishedMessage.prototype.deserializeAs_GameRolePlayDelayedActionFinishedMessage = function(input) {
            this.delayedCharacterId = input.readDouble();
            if (this.delayedCharacterId < -9007199254740990 || this.delayedCharacterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.delayedCharacterId + ") on element of GameRolePlayDelayedActionFinishedMessage.delayedCharacterId.");
            }
            this.delayTypeId = input.readByte();
            if (this.delayTypeId < 0) {
                throw new Error("Forbidden value (" + this.delayTypeId + ") on element of GameRolePlayDelayedActionFinishedMessage.delayTypeId.");
            }
        };
        GameRolePlayDelayedActionFinishedMessage.ID = 2289;
        return GameRolePlayDelayedActionFinishedMessage;
    })(NetworkMessage);
    Protocol.GameRolePlayDelayedActionFinishedMessage = GameRolePlayDelayedActionFinishedMessage;
    var GameRolePlayDelayedActionMessage = (function(_super) {
        __extends(GameRolePlayDelayedActionMessage, _super);

        function GameRolePlayDelayedActionMessage() {
            this.delayedCharacterId = 0;
            this.delayTypeId = 0;
            this.delayEndTime = 0;
            _super.call(this)
        }
        GameRolePlayDelayedActionMessage.prototype.getMessageId = function() {
            return GameRolePlayDelayedActionMessage.ID;
        };
        GameRolePlayDelayedActionMessage.prototype.reset = function() {
            this.delayedCharacterId = 0;
            this.delayTypeId = 0;
            this.delayEndTime = 0;
        };
        GameRolePlayDelayedActionMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameRolePlayDelayedActionMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameRolePlayDelayedActionMessage.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayDelayedActionMessage(output);
        };
        GameRolePlayDelayedActionMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayDelayedActionMessage(input);
        };
        GameRolePlayDelayedActionMessage.prototype.serializeAs_GameRolePlayDelayedActionMessage = function(output) {
            if (this.delayedCharacterId < -9007199254740990 || this.delayedCharacterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.delayedCharacterId + ") on element delayedCharacterId.");
            }
            output.writeDouble(this.delayedCharacterId);
            output.writeByte(this.delayTypeId);
            if (this.delayEndTime < 0 || this.delayEndTime > 9007199254740990) {
                throw new Error("Forbidden value (" + this.delayEndTime + ") on element delayEndTime.");
            }
            output.writeDouble(this.delayEndTime);
        };
        GameRolePlayDelayedActionMessage.prototype.deserializeAs_GameRolePlayDelayedActionMessage = function(input) {
            this.delayedCharacterId = input.readDouble();
            if (this.delayedCharacterId < -9007199254740990 || this.delayedCharacterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.delayedCharacterId + ") on element of GameRolePlayDelayedActionMessage.delayedCharacterId.");
            }
            this.delayTypeId = input.readByte();
            if (this.delayTypeId < 0) {
                throw new Error("Forbidden value (" + this.delayTypeId + ") on element of GameRolePlayDelayedActionMessage.delayTypeId.");
            }
            this.delayEndTime = input.readDouble();
            if (this.delayEndTime < 0 || this.delayEndTime > 9007199254740990) {
                throw new Error("Forbidden value (" + this.delayEndTime + ") on element of GameRolePlayDelayedActionMessage.delayEndTime.");
            }
        };
        GameRolePlayDelayedActionMessage.ID = 1671;
        return GameRolePlayDelayedActionMessage;
    })(NetworkMessage);
    Protocol.GameRolePlayDelayedActionMessage = GameRolePlayDelayedActionMessage;
    var GameRolePlayDelayedObjectUseMessage = (function(_super) {
        __extends(GameRolePlayDelayedObjectUseMessage, _super);

        function GameRolePlayDelayedObjectUseMessage() {
            this.objectGID = 0;
            _super.call(this)
        }
        GameRolePlayDelayedObjectUseMessage.prototype.getMessageId = function() {
            return GameRolePlayDelayedObjectUseMessage.ID;
        };
        GameRolePlayDelayedObjectUseMessage.prototype.reset = function() {
            this.objectGID = 0;
        };
        GameRolePlayDelayedObjectUseMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameRolePlayDelayedObjectUseMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameRolePlayDelayedObjectUseMessage.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayDelayedObjectUseMessage(output);
        };
        GameRolePlayDelayedObjectUseMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayDelayedObjectUseMessage(input);
        };
        GameRolePlayDelayedObjectUseMessage.prototype.serializeAs_GameRolePlayDelayedObjectUseMessage = function(output) {
            _super.prototype.serializeAs_GameRolePlayDelayedActionMessage.call(this, output);
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element objectGID.");
            }
            output.writeVarShort(this.objectGID);
        };
        GameRolePlayDelayedObjectUseMessage.prototype.deserializeAs_GameRolePlayDelayedObjectUseMessage = function(input) {
            _super.prototype.deserializeAs_GameRolePlayDelayedActionMessage.call(this, input);
            this.objectGID = input.readVarUhShort();
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element of GameRolePlayDelayedObjectUseMessage.objectGID.");
            }
        };
        GameRolePlayDelayedObjectUseMessage.ID = 748;
        return GameRolePlayDelayedObjectUseMessage;
    })(GameRolePlayDelayedActionMessage);
    Protocol.GameRolePlayDelayedObjectUseMessage = GameRolePlayDelayedObjectUseMessage;
    var DocumentReadingBeginMessage = (function(_super) {
        __extends(DocumentReadingBeginMessage, _super);

        function DocumentReadingBeginMessage() {
            this.documentId = 0;
            _super.call(this)
        }
        DocumentReadingBeginMessage.prototype.getMessageId = function() {
            return DocumentReadingBeginMessage.ID;
        };
        DocumentReadingBeginMessage.prototype.reset = function() {
            this.documentId = 0;
        };
        DocumentReadingBeginMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        DocumentReadingBeginMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        DocumentReadingBeginMessage.prototype.serialize = function(output) {
            this.serializeAs_DocumentReadingBeginMessage(output);
        };
        DocumentReadingBeginMessage.prototype.deserialize = function(input) {
            this.deserializeAs_DocumentReadingBeginMessage(input);
        };
        DocumentReadingBeginMessage.prototype.serializeAs_DocumentReadingBeginMessage = function(output) {
            if (this.documentId < 0) {
                throw new Error("Forbidden value (" + this.documentId + ") on element documentId.");
            }
            output.writeVarShort(this.documentId);
        };
        DocumentReadingBeginMessage.prototype.deserializeAs_DocumentReadingBeginMessage = function(input) {
            this.documentId = input.readVarUhShort();
            if (this.documentId < 0) {
                throw new Error("Forbidden value (" + this.documentId + ") on element of DocumentReadingBeginMessage.documentId.");
            }
        };
        DocumentReadingBeginMessage.ID = 6648;
        return DocumentReadingBeginMessage;
    })(NetworkMessage);
    Protocol.DocumentReadingBeginMessage = DocumentReadingBeginMessage;
    var EmoteAddMessage = (function(_super) {
        __extends(EmoteAddMessage, _super);

        function EmoteAddMessage() {
            this.emoteId = 0;
            _super.call(this)
        }
        EmoteAddMessage.prototype.getMessageId = function() {
            return EmoteAddMessage.ID;
        };
        EmoteAddMessage.prototype.reset = function() {
            this.emoteId = 0;
        };
        EmoteAddMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        EmoteAddMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        EmoteAddMessage.prototype.serialize = function(output) {
            this.serializeAs_EmoteAddMessage(output);
        };
        EmoteAddMessage.prototype.deserialize = function(input) {
            this.deserializeAs_EmoteAddMessage(input);
        };
        EmoteAddMessage.prototype.serializeAs_EmoteAddMessage = function(output) {
            if (this.emoteId < 0 || this.emoteId > 255) {
                throw new Error("Forbidden value (" + this.emoteId + ") on element emoteId.");
            }
            output.writeByte(this.emoteId);
        };
        EmoteAddMessage.prototype.deserializeAs_EmoteAddMessage = function(input) {
            this.emoteId = input.readUnsignedByte();
            if (this.emoteId < 0 || this.emoteId > 255) {
                throw new Error("Forbidden value (" + this.emoteId + ") on element of EmoteAddMessage.emoteId.");
            }
        };
        EmoteAddMessage.ID = 8673;
        return EmoteAddMessage;
    })(NetworkMessage);
    Protocol.EmoteAddMessage = EmoteAddMessage;
    var EmoteListMessage = (function(_super) {
        __extends(EmoteListMessage, _super);

        function EmoteListMessage() {
            this.emoteIds = [];
            _super.call(this)
        }
        EmoteListMessage.prototype.getMessageId = function() {
            return EmoteListMessage.ID;
        };
        EmoteListMessage.prototype.reset = function() {
            this.emoteIds = [];
        };
        EmoteListMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        EmoteListMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        EmoteListMessage.prototype.serialize = function(output) {
            this.serializeAs_EmoteListMessage(output);
        };
        EmoteListMessage.prototype.deserialize = function(input) {
            this.deserializeAs_EmoteListMessage(input);
        };
        EmoteListMessage.prototype.serializeAs_EmoteListMessage = function(output) {
            output.writeShort(this.emoteIds.length);
            for (var _i1 = 0; _i1 < this.emoteIds.length; _i1++) {
                if (this.emoteIds[_i1] < 0 || this.emoteIds[_i1] > 255) {
                    throw new Error("Forbidden value (" + this.emoteIds[_i1] + ") on element 1 (starting at 1) of emoteIds.");
                }
                output.writeByte(this.emoteIds[_i1]);
            }
        };
        EmoteListMessage.prototype.deserializeAs_EmoteListMessage = function(input) {
            var _val1 = 0;
            var _emoteIdsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _emoteIdsLen; _i1++) {
                _val1 = input.readUnsignedByte();
                if (_val1 < 0 || _val1 > 255) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of emoteIds.");
                }
                this.emoteIds.push(_val1);
            }
        };
        EmoteListMessage.ID = 6335;
        return EmoteListMessage;
    })(NetworkMessage);
    Protocol.EmoteListMessage = EmoteListMessage;
    var EmotePlayAbstractMessage = (function(_super) {
        __extends(EmotePlayAbstractMessage, _super);

        function EmotePlayAbstractMessage() {
            this.emoteId = 0;
            this.emoteStartTime = 0;
            _super.call(this)
        }
        EmotePlayAbstractMessage.prototype.getMessageId = function() {
            return EmotePlayAbstractMessage.ID;
        };
        EmotePlayAbstractMessage.prototype.reset = function() {
            this.emoteId = 0;
            this.emoteStartTime = 0;
        };
        EmotePlayAbstractMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        EmotePlayAbstractMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        EmotePlayAbstractMessage.prototype.serialize = function(output) {
            this.serializeAs_EmotePlayAbstractMessage(output);
        };
        EmotePlayAbstractMessage.prototype.deserialize = function(input) {
            this.deserializeAs_EmotePlayAbstractMessage(input);
        };
        EmotePlayAbstractMessage.prototype.serializeAs_EmotePlayAbstractMessage = function(output) {
            if (this.emoteId < 0 || this.emoteId > 255) {
                throw new Error("Forbidden value (" + this.emoteId + ") on element emoteId.");
            }
            output.writeByte(this.emoteId);
            if (this.emoteStartTime < -9007199254740990 || this.emoteStartTime > 9007199254740990) {
                throw new Error("Forbidden value (" + this.emoteStartTime + ") on element emoteStartTime.");
            }
            output.writeDouble(this.emoteStartTime);
        };
        EmotePlayAbstractMessage.prototype.deserializeAs_EmotePlayAbstractMessage = function(input) {
            this.emoteId = input.readUnsignedByte();
            if (this.emoteId < 0 || this.emoteId > 255) {
                throw new Error("Forbidden value (" + this.emoteId + ") on element of EmotePlayAbstractMessage.emoteId.");
            }
            this.emoteStartTime = input.readDouble();
            if (this.emoteStartTime < -9007199254740990 || this.emoteStartTime > 9007199254740990) {
                throw new Error("Forbidden value (" + this.emoteStartTime + ") on element of EmotePlayAbstractMessage.emoteStartTime.");
            }
        };
        EmotePlayAbstractMessage.ID = 918;
        return EmotePlayAbstractMessage;
    })(NetworkMessage);
    Protocol.EmotePlayAbstractMessage = EmotePlayAbstractMessage;
    var EmotePlayErrorMessage = (function(_super) {
        __extends(EmotePlayErrorMessage, _super);

        function EmotePlayErrorMessage() {
            this.emoteId = 0;
            _super.call(this)
        }
        EmotePlayErrorMessage.prototype.getMessageId = function() {
            return EmotePlayErrorMessage.ID;
        };
        EmotePlayErrorMessage.prototype.reset = function() {
            this.emoteId = 0;
        };
        EmotePlayErrorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        EmotePlayErrorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        EmotePlayErrorMessage.prototype.serialize = function(output) {
            this.serializeAs_EmotePlayErrorMessage(output);
        };
        EmotePlayErrorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_EmotePlayErrorMessage(input);
        };
        EmotePlayErrorMessage.prototype.serializeAs_EmotePlayErrorMessage = function(output) {
            if (this.emoteId < 0 || this.emoteId > 255) {
                throw new Error("Forbidden value (" + this.emoteId + ") on element emoteId.");
            }
            output.writeByte(this.emoteId);
        };
        EmotePlayErrorMessage.prototype.deserializeAs_EmotePlayErrorMessage = function(input) {
            this.emoteId = input.readUnsignedByte();
            if (this.emoteId < 0 || this.emoteId > 255) {
                throw new Error("Forbidden value (" + this.emoteId + ") on element of EmotePlayErrorMessage.emoteId.");
            }
        };
        EmotePlayErrorMessage.ID = 790;
        return EmotePlayErrorMessage;
    })(NetworkMessage);
    Protocol.EmotePlayErrorMessage = EmotePlayErrorMessage;
    var EmotePlayMassiveMessage = (function(_super) {
        __extends(EmotePlayMassiveMessage, _super);

        function EmotePlayMassiveMessage() {
            this.actorIds = [];
            _super.call(this)
        }
        EmotePlayMassiveMessage.prototype.getMessageId = function() {
            return EmotePlayMassiveMessage.ID;
        };
        EmotePlayMassiveMessage.prototype.reset = function() {
            this.actorIds = [];
        };
        EmotePlayMassiveMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        EmotePlayMassiveMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        EmotePlayMassiveMessage.prototype.serialize = function(output) {
            this.serializeAs_EmotePlayMassiveMessage(output);
        };
        EmotePlayMassiveMessage.prototype.deserialize = function(input) {
            this.deserializeAs_EmotePlayMassiveMessage(input);
        };
        EmotePlayMassiveMessage.prototype.serializeAs_EmotePlayMassiveMessage = function(output) {
            _super.prototype.serializeAs_EmotePlayAbstractMessage.call(this, output);
            output.writeShort(this.actorIds.length);
            for (var _i1 = 0; _i1 < this.actorIds.length; _i1++) {
                if (this.actorIds[_i1] < -9007199254740990 || this.actorIds[_i1] > 9007199254740990) {
                    throw new Error("Forbidden value (" + this.actorIds[_i1] + ") on element 1 (starting at 1) of actorIds.");
                }
                output.writeDouble(this.actorIds[_i1]);
            }
        };
        EmotePlayMassiveMessage.prototype.deserializeAs_EmotePlayMassiveMessage = function(input) {
            var _val1 = NaN;
            _super.prototype.deserializeAs_EmotePlayAbstractMessage.call(this, input);
            var _actorIdsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _actorIdsLen; _i1++) {
                _val1 = input.readDouble();
                if (_val1 < -9007199254740990 || _val1 > 9007199254740990) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of actorIds.");
                }
                this.actorIds.push(_val1);
            }
        };
        EmotePlayMassiveMessage.ID = 2881;
        return EmotePlayMassiveMessage;
    })(EmotePlayAbstractMessage);
    Protocol.EmotePlayMassiveMessage = EmotePlayMassiveMessage;
    var EmotePlayMessage = (function(_super) {
        __extends(EmotePlayMessage, _super);

        function EmotePlayMessage() {
            this.actorId = 0;
            this.accountId = 0;
            _super.call(this)
        }
        EmotePlayMessage.prototype.getMessageId = function() {
            return EmotePlayMessage.ID;
        };
        EmotePlayMessage.prototype.reset = function() {
            this.actorId = 0;
            this.accountId = 0;
        };
        EmotePlayMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        EmotePlayMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        EmotePlayMessage.prototype.serialize = function(output) {
            this.serializeAs_EmotePlayMessage(output);
        };
        EmotePlayMessage.prototype.deserialize = function(input) {
            this.deserializeAs_EmotePlayMessage(input);
        };
        EmotePlayMessage.prototype.serializeAs_EmotePlayMessage = function(output) {
            _super.prototype.serializeAs_EmotePlayAbstractMessage.call(this, output);
            if (this.actorId < -9007199254740990 || this.actorId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.actorId + ") on element actorId.");
            }
            output.writeDouble(this.actorId);
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element accountId.");
            }
            output.writeInt(this.accountId);
        };
        EmotePlayMessage.prototype.deserializeAs_EmotePlayMessage = function(input) {
            _super.prototype.deserializeAs_EmotePlayAbstractMessage.call(this, input);
            this.actorId = input.readDouble();
            if (this.actorId < -9007199254740990 || this.actorId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.actorId + ") on element of EmotePlayMessage.actorId.");
            }
            this.accountId = input.readInt();
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element of EmotePlayMessage.accountId.");
            }
        };
        EmotePlayMessage.ID = 6496;
        return EmotePlayMessage;
    })(EmotePlayAbstractMessage);
    Protocol.EmotePlayMessage = EmotePlayMessage;
    var EmotePlayRequestMessage = (function(_super) {
        __extends(EmotePlayRequestMessage, _super);

        function EmotePlayRequestMessage() {
            this.emoteId = 0;
            _super.call(this)
        }
        EmotePlayRequestMessage.prototype.getMessageId = function() {
            return EmotePlayRequestMessage.ID;
        };
        EmotePlayRequestMessage.prototype.reset = function() {
            this.emoteId = 0;
        };
        EmotePlayRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        EmotePlayRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        EmotePlayRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_EmotePlayRequestMessage(output);
        };
        EmotePlayRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_EmotePlayRequestMessage(input);
        };
        EmotePlayRequestMessage.prototype.serializeAs_EmotePlayRequestMessage = function(output) {
            if (this.emoteId < 0 || this.emoteId > 255) {
                throw new Error("Forbidden value (" + this.emoteId + ") on element emoteId.");
            }
            output.writeByte(this.emoteId);
        };
        EmotePlayRequestMessage.prototype.deserializeAs_EmotePlayRequestMessage = function(input) {
            this.emoteId = input.readUnsignedByte();
            if (this.emoteId < 0 || this.emoteId > 255) {
                throw new Error("Forbidden value (" + this.emoteId + ") on element of EmotePlayRequestMessage.emoteId.");
            }
        };
        EmotePlayRequestMessage.ID = 4945;
        return EmotePlayRequestMessage;
    })(NetworkMessage);
    Protocol.EmotePlayRequestMessage = EmotePlayRequestMessage;
    var EmoteRemoveMessage = (function(_super) {
        __extends(EmoteRemoveMessage, _super);

        function EmoteRemoveMessage() {
            this.emoteId = 0;
            _super.call(this)
        }
        EmoteRemoveMessage.prototype.getMessageId = function() {
            return EmoteRemoveMessage.ID;
        };
        EmoteRemoveMessage.prototype.reset = function() {
            this.emoteId = 0;
        };
        EmoteRemoveMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        EmoteRemoveMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        EmoteRemoveMessage.prototype.serialize = function(output) {
            this.serializeAs_EmoteRemoveMessage(output);
        };
        EmoteRemoveMessage.prototype.deserialize = function(input) {
            this.deserializeAs_EmoteRemoveMessage(input);
        };
        EmoteRemoveMessage.prototype.serializeAs_EmoteRemoveMessage = function(output) {
            if (this.emoteId < 0 || this.emoteId > 255) {
                throw new Error("Forbidden value (" + this.emoteId + ") on element emoteId.");
            }
            output.writeByte(this.emoteId);
        };
        EmoteRemoveMessage.prototype.deserializeAs_EmoteRemoveMessage = function(input) {
            this.emoteId = input.readUnsignedByte();
            if (this.emoteId < 0 || this.emoteId > 255) {
                throw new Error("Forbidden value (" + this.emoteId + ") on element of EmoteRemoveMessage.emoteId.");
            }
        };
        EmoteRemoveMessage.ID = 3309;
        return EmoteRemoveMessage;
    })(NetworkMessage);
    Protocol.EmoteRemoveMessage = EmoteRemoveMessage;
    var ErrorMapNotFoundMessage = (function(_super) {
        __extends(ErrorMapNotFoundMessage, _super);

        function ErrorMapNotFoundMessage() {
            this.mapId = 0;
            _super.call(this)
        }
        ErrorMapNotFoundMessage.prototype.getMessageId = function() {
            return ErrorMapNotFoundMessage.ID;
        };
        ErrorMapNotFoundMessage.prototype.reset = function() {
            this.mapId = 0;
        };
        ErrorMapNotFoundMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ErrorMapNotFoundMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ErrorMapNotFoundMessage.prototype.serialize = function(output) {
            this.serializeAs_ErrorMapNotFoundMessage(output);
        };
        ErrorMapNotFoundMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ErrorMapNotFoundMessage(input);
        };
        ErrorMapNotFoundMessage.prototype.serializeAs_ErrorMapNotFoundMessage = function(output) {
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
        };
        ErrorMapNotFoundMessage.prototype.deserializeAs_ErrorMapNotFoundMessage = function(input) {
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of ErrorMapNotFoundMessage.mapId.");
            }
        };
        ErrorMapNotFoundMessage.ID = 6086;
        return ErrorMapNotFoundMessage;
    })(NetworkMessage);
    Protocol.ErrorMapNotFoundMessage = ErrorMapNotFoundMessage;
    var GameRolePlayArenaFightAnswerMessage = (function(_super) {
        __extends(GameRolePlayArenaFightAnswerMessage, _super);

        function GameRolePlayArenaFightAnswerMessage() {
            this.fightId = 0;
            this.accept = false;
            _super.call(this)
        }
        GameRolePlayArenaFightAnswerMessage.prototype.getMessageId = function() {
            return GameRolePlayArenaFightAnswerMessage.ID;
        };
        GameRolePlayArenaFightAnswerMessage.prototype.reset = function() {
            this.fightId = 0;
            this.accept = false;
        };
        GameRolePlayArenaFightAnswerMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameRolePlayArenaFightAnswerMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameRolePlayArenaFightAnswerMessage.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayArenaFightAnswerMessage(output);
        };
        GameRolePlayArenaFightAnswerMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayArenaFightAnswerMessage(input);
        };
        GameRolePlayArenaFightAnswerMessage.prototype.serializeAs_GameRolePlayArenaFightAnswerMessage = function(output) {
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeVarShort(this.fightId);
            output.writeBoolean(this.accept);
        };
        GameRolePlayArenaFightAnswerMessage.prototype.deserializeAs_GameRolePlayArenaFightAnswerMessage = function(input) {
            this.fightId = input.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of GameRolePlayArenaFightAnswerMessage.fightId.");
            }
            this.accept = input.readBoolean();
        };
        GameRolePlayArenaFightAnswerMessage.ID = 2536;
        return GameRolePlayArenaFightAnswerMessage;
    })(NetworkMessage);
    Protocol.GameRolePlayArenaFightAnswerMessage = GameRolePlayArenaFightAnswerMessage;
    var GameRolePlayArenaFighterStatusMessage = (function(_super) {
        __extends(GameRolePlayArenaFighterStatusMessage, _super);

        function GameRolePlayArenaFighterStatusMessage() {
            this.fightId = 0;
            this.playerId = 0;
            this.accepted = false;
            _super.call(this)
        }
        GameRolePlayArenaFighterStatusMessage.prototype.getMessageId = function() {
            return GameRolePlayArenaFighterStatusMessage.ID;
        };
        GameRolePlayArenaFighterStatusMessage.prototype.reset = function() {
            this.fightId = 0;
            this.playerId = 0;
            this.accepted = false;
        };
        GameRolePlayArenaFighterStatusMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameRolePlayArenaFighterStatusMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameRolePlayArenaFighterStatusMessage.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayArenaFighterStatusMessage(output);
        };
        GameRolePlayArenaFighterStatusMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayArenaFighterStatusMessage(input);
        };
        GameRolePlayArenaFighterStatusMessage.prototype.serializeAs_GameRolePlayArenaFighterStatusMessage = function(output) {
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeVarShort(this.fightId);
            if (this.playerId < -9007199254740990 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeDouble(this.playerId);
            output.writeBoolean(this.accepted);
        };
        GameRolePlayArenaFighterStatusMessage.prototype.deserializeAs_GameRolePlayArenaFighterStatusMessage = function(input) {
            this.fightId = input.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of GameRolePlayArenaFighterStatusMessage.fightId.");
            }
            this.playerId = input.readDouble();
            if (this.playerId < -9007199254740990 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of GameRolePlayArenaFighterStatusMessage.playerId.");
            }
            this.accepted = input.readBoolean();
        };
        GameRolePlayArenaFighterStatusMessage.ID = 4175;
        return GameRolePlayArenaFighterStatusMessage;
    })(NetworkMessage);
    Protocol.GameRolePlayArenaFighterStatusMessage = GameRolePlayArenaFighterStatusMessage;
    var GameRolePlayArenaFightPropositionMessage = (function(_super) {
        __extends(GameRolePlayArenaFightPropositionMessage, _super);

        function GameRolePlayArenaFightPropositionMessage() {
            this.fightId = 0;
            this.alliesId = [];
            this.duration = 0;
            _super.call(this)
        }
        GameRolePlayArenaFightPropositionMessage.prototype.getMessageId = function() {
            return GameRolePlayArenaFightPropositionMessage.ID;
        };
        GameRolePlayArenaFightPropositionMessage.prototype.reset = function() {
            this.fightId = 0;
            this.alliesId = [];
            this.duration = 0;
        };
        GameRolePlayArenaFightPropositionMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameRolePlayArenaFightPropositionMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameRolePlayArenaFightPropositionMessage.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayArenaFightPropositionMessage(output);
        };
        GameRolePlayArenaFightPropositionMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayArenaFightPropositionMessage(input);
        };
        GameRolePlayArenaFightPropositionMessage.prototype.serializeAs_GameRolePlayArenaFightPropositionMessage = function(output) {
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeVarShort(this.fightId);
            output.writeShort(this.alliesId.length);
            for (var _i2 = 0; _i2 < this.alliesId.length; _i2++) {
                if (this.alliesId[_i2] < -9007199254740990 || this.alliesId[_i2] > 9007199254740990) {
                    throw new Error("Forbidden value (" + this.alliesId[_i2] + ") on element 2 (starting at 1) of alliesId.");
                }
                output.writeDouble(this.alliesId[_i2]);
            }
            if (this.duration < 0) {
                throw new Error("Forbidden value (" + this.duration + ") on element duration.");
            }
            output.writeVarShort(this.duration);
        };
        GameRolePlayArenaFightPropositionMessage.prototype.deserializeAs_GameRolePlayArenaFightPropositionMessage = function(input) {
            var _val2 = NaN;
            this.fightId = input.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of GameRolePlayArenaFightPropositionMessage.fightId.");
            }
            var _alliesIdLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _alliesIdLen; _i2++) {
                _val2 = input.readDouble();
                if (_val2 < -9007199254740990 || _val2 > 9007199254740990) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of alliesId.");
                }
                this.alliesId.push(_val2);
            }
            this.duration = input.readVarUhShort();
            if (this.duration < 0) {
                throw new Error("Forbidden value (" + this.duration + ") on element of GameRolePlayArenaFightPropositionMessage.duration.");
            }
        };
        GameRolePlayArenaFightPropositionMessage.ID = 3669;
        return GameRolePlayArenaFightPropositionMessage;
    })(NetworkMessage);
    Protocol.GameRolePlayArenaFightPropositionMessage = GameRolePlayArenaFightPropositionMessage;
    var GameRolePlayArenaInvitationCandidatesAnswer = (function(_super) {
        __extends(GameRolePlayArenaInvitationCandidatesAnswer, _super);

        function GameRolePlayArenaInvitationCandidatesAnswer() {
            this.candidates = [];
            _super.call(this)
        }
        GameRolePlayArenaInvitationCandidatesAnswer.prototype.getMessageId = function() {
            return GameRolePlayArenaInvitationCandidatesAnswer.ID;
        };
        GameRolePlayArenaInvitationCandidatesAnswer.prototype.reset = function() {
            this.candidates = [];
        };
        GameRolePlayArenaInvitationCandidatesAnswer.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameRolePlayArenaInvitationCandidatesAnswer.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameRolePlayArenaInvitationCandidatesAnswer.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayArenaInvitationCandidatesAnswer(output);
        };
        GameRolePlayArenaInvitationCandidatesAnswer.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayArenaInvitationCandidatesAnswer(input);
        };
        GameRolePlayArenaInvitationCandidatesAnswer.prototype.serializeAs_GameRolePlayArenaInvitationCandidatesAnswer = function(output) {
            output.writeShort(this.candidates.length);
            for (var _i1 = 0; _i1 < this.candidates.length; _i1++) {
                (this.candidates[_i1]).serializeAs_LeagueFriendInformations(output);
            }
        };
        GameRolePlayArenaInvitationCandidatesAnswer.prototype.deserializeAs_GameRolePlayArenaInvitationCandidatesAnswer = function(input) {
            var _item1 = null;
            var _candidatesLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _candidatesLen; _i1++) {
                _item1 = new LeagueFriendInformations();
                _item1.deserialize(input);
                this.candidates.push(_item1);
            }
        };
        GameRolePlayArenaInvitationCandidatesAnswer.ID = 6871;
        return GameRolePlayArenaInvitationCandidatesAnswer;
    })(NetworkMessage);
    Protocol.GameRolePlayArenaInvitationCandidatesAnswer = GameRolePlayArenaInvitationCandidatesAnswer;
    var GameRolePlayArenaLeagueRewardsMessage = (function(_super) {
        __extends(GameRolePlayArenaLeagueRewardsMessage, _super);

        function GameRolePlayArenaLeagueRewardsMessage() {
            this.seasonId = 0;
            this.leagueId = 0;
            this.ladderPosition = 0;
            this.endSeasonReward = false;
            _super.call(this)
        }
        GameRolePlayArenaLeagueRewardsMessage.prototype.getMessageId = function() {
            return GameRolePlayArenaLeagueRewardsMessage.ID;
        };
        GameRolePlayArenaLeagueRewardsMessage.prototype.reset = function() {
            this.seasonId = 0;
            this.leagueId = 0;
            this.ladderPosition = 0;
            this.endSeasonReward = false;
        };
        GameRolePlayArenaLeagueRewardsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameRolePlayArenaLeagueRewardsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameRolePlayArenaLeagueRewardsMessage.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayArenaLeagueRewardsMessage(output);
        };
        GameRolePlayArenaLeagueRewardsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayArenaLeagueRewardsMessage(input);
        };
        GameRolePlayArenaLeagueRewardsMessage.prototype.serializeAs_GameRolePlayArenaLeagueRewardsMessage = function(output) {
            if (this.seasonId < 0) {
                throw new Error("Forbidden value (" + this.seasonId + ") on element seasonId.");
            }
            output.writeVarShort(this.seasonId);
            if (this.leagueId < 0) {
                throw new Error("Forbidden value (" + this.leagueId + ") on element leagueId.");
            }
            output.writeVarShort(this.leagueId);
            output.writeInt(this.ladderPosition);
            output.writeBoolean(this.endSeasonReward);
        };
        GameRolePlayArenaLeagueRewardsMessage.prototype.deserializeAs_GameRolePlayArenaLeagueRewardsMessage = function(input) {
            this.seasonId = input.readVarUhShort();
            if (this.seasonId < 0) {
                throw new Error("Forbidden value (" + this.seasonId + ") on element of GameRolePlayArenaLeagueRewardsMessage.seasonId.");
            }
            this.leagueId = input.readVarUhShort();
            if (this.leagueId < 0) {
                throw new Error("Forbidden value (" + this.leagueId + ") on element of GameRolePlayArenaLeagueRewardsMessage.leagueId.");
            }
            this.ladderPosition = input.readInt();
            this.endSeasonReward = input.readBoolean();
        };
        GameRolePlayArenaLeagueRewardsMessage.ID = 8309;
        return GameRolePlayArenaLeagueRewardsMessage;
    })(NetworkMessage);
    Protocol.GameRolePlayArenaLeagueRewardsMessage = GameRolePlayArenaLeagueRewardsMessage;
    var GameRolePlayArenaRegisterMessage = (function(_super) {
        __extends(GameRolePlayArenaRegisterMessage, _super);

        function GameRolePlayArenaRegisterMessage() {
            this.battleMode = 3;
            _super.call(this)
        }
        GameRolePlayArenaRegisterMessage.prototype.getMessageId = function() {
            return GameRolePlayArenaRegisterMessage.ID;
        };
        GameRolePlayArenaRegisterMessage.prototype.reset = function() {
            this.battleMode = 3;
        };
        GameRolePlayArenaRegisterMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameRolePlayArenaRegisterMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameRolePlayArenaRegisterMessage.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayArenaRegisterMessage(output);
        };
        GameRolePlayArenaRegisterMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayArenaRegisterMessage(input);
        };
        GameRolePlayArenaRegisterMessage.prototype.serializeAs_GameRolePlayArenaRegisterMessage = function(output) {
            output.writeInt(this.battleMode);
        };
        GameRolePlayArenaRegisterMessage.prototype.deserializeAs_GameRolePlayArenaRegisterMessage = function(input) {
            this.battleMode = input.readInt();
            if (this.battleMode < 0) {
                throw new Error("Forbidden value (" + this.battleMode + ") on element of GameRolePlayArenaRegisterMessage.battleMode.");
            }
        };
        GameRolePlayArenaRegisterMessage.ID = 4371;
        return GameRolePlayArenaRegisterMessage;
    })(NetworkMessage);
    Protocol.GameRolePlayArenaRegisterMessage = GameRolePlayArenaRegisterMessage;
    var GameRolePlayArenaRegistrationStatusMessage = (function(_super) {
        __extends(GameRolePlayArenaRegistrationStatusMessage, _super);

        function GameRolePlayArenaRegistrationStatusMessage() {
            this.registered = false;
            this.step = 0;
            this.battleMode = 3;
            _super.call(this)
        }
        GameRolePlayArenaRegistrationStatusMessage.prototype.getMessageId = function() {
            return GameRolePlayArenaRegistrationStatusMessage.ID;
        };
        GameRolePlayArenaRegistrationStatusMessage.prototype.reset = function() {
            this.registered = false;
            this.step = 0;
            this.battleMode = 3;
        };
        GameRolePlayArenaRegistrationStatusMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameRolePlayArenaRegistrationStatusMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameRolePlayArenaRegistrationStatusMessage.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayArenaRegistrationStatusMessage(output);
        };
        GameRolePlayArenaRegistrationStatusMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayArenaRegistrationStatusMessage(input);
        };
        GameRolePlayArenaRegistrationStatusMessage.prototype.serializeAs_GameRolePlayArenaRegistrationStatusMessage = function(output) {
            output.writeBoolean(this.registered);
            output.writeByte(this.step);
            output.writeInt(this.battleMode);
        };
        GameRolePlayArenaRegistrationStatusMessage.prototype.deserializeAs_GameRolePlayArenaRegistrationStatusMessage = function(input) {
            this.registered = input.readBoolean();
            this.step = input.readByte();
            if (this.step < 0) {
                throw new Error("Forbidden value (" + this.step + ") on element of GameRolePlayArenaRegistrationStatusMessage.step.");
            }
            this.battleMode = input.readInt();
            if (this.battleMode < 0) {
                throw new Error("Forbidden value (" + this.battleMode + ") on element of GameRolePlayArenaRegistrationStatusMessage.battleMode.");
            }
        };
        GameRolePlayArenaRegistrationStatusMessage.ID = 9995;
        return GameRolePlayArenaRegistrationStatusMessage;
    })(NetworkMessage);
    Protocol.GameRolePlayArenaRegistrationStatusMessage = GameRolePlayArenaRegistrationStatusMessage;
    var GameRolePlayArenaSwitchToFightServerMessage = (function(_super) {
        __extends(GameRolePlayArenaSwitchToFightServerMessage, _super);

        function GameRolePlayArenaSwitchToFightServerMessage() {
            this.address = "";
            this.ports = [];
            this.ticket = [];
            _super.call(this)
        }
        GameRolePlayArenaSwitchToFightServerMessage.prototype.getMessageId = function() {
            return GameRolePlayArenaSwitchToFightServerMessage.ID;
        };
        GameRolePlayArenaSwitchToFightServerMessage.prototype.reset = function() {
            this.address = "";
            this.ports = [];
            this.ticket = [];
        };
        GameRolePlayArenaSwitchToFightServerMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameRolePlayArenaSwitchToFightServerMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameRolePlayArenaSwitchToFightServerMessage.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayArenaSwitchToFightServerMessage(output);
        };
        GameRolePlayArenaSwitchToFightServerMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayArenaSwitchToFightServerMessage(input);
        };
        GameRolePlayArenaSwitchToFightServerMessage.prototype.serializeAs_GameRolePlayArenaSwitchToFightServerMessage = function(output) {
            output.writeUTF(this.address);
            output.writeShort(this.ports.length);
            for (var _i2 = 0; _i2 < this.ports.length; _i2++) {
                if (this.ports[_i2] < 0) {
                    throw new Error("Forbidden value (" + this.ports[_i2] + ") on element 2 (starting at 1) of ports.");
                }
                output.writeVarShort(this.ports[_i2]);
            }
            output.writeVarInt(this.ticket.length);
            for (var _i3 = 0; _i3 < this.ticket.length; _i3++) {
                output.writeByte(this.ticket[_i3]);
            }
        };
        GameRolePlayArenaSwitchToFightServerMessage.prototype.deserializeAs_GameRolePlayArenaSwitchToFightServerMessage = function(input) {
            var _val2 = 0;
            var _val3 = 0;
            this.address = input.readUTF();
            var _portsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _portsLen; _i2++) {
                _val2 = input.readVarUhShort();
                if (_val2 < 0) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of ports.");
                }
                this.ports.push(_val2);
            }
            var _ticketLen = input.readVarInt();
            for (var _i3 = 0; _i3 < _ticketLen; _i3++) {
                _val3 = input.readByte();
                this.ticket.push(_val3);
            }
        };
        GameRolePlayArenaSwitchToFightServerMessage.ID = 9126;
        return GameRolePlayArenaSwitchToFightServerMessage;
    })(NetworkMessage);
    Protocol.GameRolePlayArenaSwitchToFightServerMessage = GameRolePlayArenaSwitchToFightServerMessage;
    var GameRolePlayArenaSwitchToGameServerMessage = (function(_super) {
        __extends(GameRolePlayArenaSwitchToGameServerMessage, _super);

        function GameRolePlayArenaSwitchToGameServerMessage() {
            this.validToken = false;
            this.ticket = [];
            this.homeServerId = 0;
            _super.call(this)
        }
        GameRolePlayArenaSwitchToGameServerMessage.prototype.getMessageId = function() {
            return GameRolePlayArenaSwitchToGameServerMessage.ID;
        };
        GameRolePlayArenaSwitchToGameServerMessage.prototype.reset = function() {
            this.validToken = false;
            this.ticket = [];
            this.homeServerId = 0;
        };
        GameRolePlayArenaSwitchToGameServerMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameRolePlayArenaSwitchToGameServerMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameRolePlayArenaSwitchToGameServerMessage.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayArenaSwitchToGameServerMessage(output);
        };
        GameRolePlayArenaSwitchToGameServerMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayArenaSwitchToGameServerMessage(input);
        };
        GameRolePlayArenaSwitchToGameServerMessage.prototype.serializeAs_GameRolePlayArenaSwitchToGameServerMessage = function(output) {
            output.writeBoolean(this.validToken);
            output.writeVarInt(this.ticket.length);
            for (var _i2 = 0; _i2 < this.ticket.length; _i2++) {
                output.writeByte(this.ticket[_i2]);
            }
            output.writeShort(this.homeServerId);
        };
        GameRolePlayArenaSwitchToGameServerMessage.prototype.deserializeAs_GameRolePlayArenaSwitchToGameServerMessage = function(input) {
            var _val2 = 0;
            this.validToken = input.readBoolean();
            var _ticketLen = input.readVarInt();
            for (var _i2 = 0; _i2 < _ticketLen; _i2++) {
                _val2 = input.readByte();
                this.ticket.push(_val2);
            }
            this.homeServerId = input.readShort();
        };
        GameRolePlayArenaSwitchToGameServerMessage.ID = 6943;
        return GameRolePlayArenaSwitchToGameServerMessage;
    })(NetworkMessage);
    Protocol.GameRolePlayArenaSwitchToGameServerMessage = GameRolePlayArenaSwitchToGameServerMessage;
    var GameRolePlayArenaUnregisterMessage = (function(_super) {
        __extends(GameRolePlayArenaUnregisterMessage, _super);

        function GameRolePlayArenaUnregisterMessage() {

            _super.call(this)
        }
        GameRolePlayArenaUnregisterMessage.prototype.getMessageId = function() {
            return GameRolePlayArenaUnregisterMessage.ID;
        };
        GameRolePlayArenaUnregisterMessage.prototype.reset = function() {

        };
        GameRolePlayArenaUnregisterMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameRolePlayArenaUnregisterMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameRolePlayArenaUnregisterMessage.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayArenaUnregisterMessage(output);
        };
        GameRolePlayArenaUnregisterMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayArenaUnregisterMessage(input);
        };
        GameRolePlayArenaUnregisterMessage.prototype.serializeAs_GameRolePlayArenaUnregisterMessage = function(output) {

        };
        GameRolePlayArenaUnregisterMessage.prototype.deserializeAs_GameRolePlayArenaUnregisterMessage = function(input) {

        };
        GameRolePlayArenaUnregisterMessage.ID = 6661;
        return GameRolePlayArenaUnregisterMessage;
    })(NetworkMessage);
    Protocol.GameRolePlayArenaUnregisterMessage = GameRolePlayArenaUnregisterMessage;
    var GameRolePlayArenaUpdatePlayerInfosMessage = (function(_super) {
        __extends(GameRolePlayArenaUpdatePlayerInfosMessage, _super);

        function GameRolePlayArenaUpdatePlayerInfosMessage() {
            this.solo = new ArenaRankInfos();
            _super.call(this)
        }
        GameRolePlayArenaUpdatePlayerInfosMessage.prototype.getMessageId = function() {
            return GameRolePlayArenaUpdatePlayerInfosMessage.ID;
        };
        GameRolePlayArenaUpdatePlayerInfosMessage.prototype.reset = function() {
            this.solo = new ArenaRankInfos();
        };
        GameRolePlayArenaUpdatePlayerInfosMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameRolePlayArenaUpdatePlayerInfosMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameRolePlayArenaUpdatePlayerInfosMessage.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayArenaUpdatePlayerInfosMessage(output);
        };
        GameRolePlayArenaUpdatePlayerInfosMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayArenaUpdatePlayerInfosMessage(input);
        };
        GameRolePlayArenaUpdatePlayerInfosMessage.prototype.serializeAs_GameRolePlayArenaUpdatePlayerInfosMessage = function(output) {
            this.solo.serializeAs_ArenaRankInfos(output);
        };
        GameRolePlayArenaUpdatePlayerInfosMessage.prototype.deserializeAs_GameRolePlayArenaUpdatePlayerInfosMessage = function(input) {
            this.solo = new ArenaRankInfos();
            this.solo.deserialize(input);
        };
        GameRolePlayArenaUpdatePlayerInfosMessage.ID = 2247;
        return GameRolePlayArenaUpdatePlayerInfosMessage;
    })(NetworkMessage);
    Protocol.GameRolePlayArenaUpdatePlayerInfosMessage = GameRolePlayArenaUpdatePlayerInfosMessage;
    var GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage = (function(_super) {
        __extends(GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage, _super);

        function GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage() {
            this.team = new ArenaRankInfos();
            this.duel = new ArenaRankInfos();
            _super.call(this)
        }
        GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage.prototype.getMessageId = function() {
            return GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage.ID;
        };
        GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage.prototype.reset = function() {
            this.team = new ArenaRankInfos();
            this.duel = new ArenaRankInfos();
        };
        GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage(output);
        };
        GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage(input);
        };
        GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage.prototype.serializeAs_GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage = function(output) {
            _super.prototype.serializeAs_GameRolePlayArenaUpdatePlayerInfosMessage.call(this, output);
            this.team.serializeAs_ArenaRankInfos(output);
            this.duel.serializeAs_ArenaRankInfos(output);
        };
        GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage.prototype.deserializeAs_GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage = function(input) {
            _super.prototype.deserializeAs_GameRolePlayArenaUpdatePlayerInfosMessage.call(this, input);
            this.team = new ArenaRankInfos();
            this.team.deserialize(input);
            this.duel = new ArenaRankInfos();
            this.duel.deserialize(input);
        };
        GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage.ID = 451;
        return GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage;
    })(GameRolePlayArenaUpdatePlayerInfosMessage);
    Protocol.GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage = GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage;
    var GameRolePlayAggressionMessage = (function(_super) {
        __extends(GameRolePlayAggressionMessage, _super);

        function GameRolePlayAggressionMessage() {
            this.attackerId = 0;
            this.defenderId = 0;
            _super.call(this)
        }
        GameRolePlayAggressionMessage.prototype.getMessageId = function() {
            return GameRolePlayAggressionMessage.ID;
        };
        GameRolePlayAggressionMessage.prototype.reset = function() {
            this.attackerId = 0;
            this.defenderId = 0;
        };
        GameRolePlayAggressionMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameRolePlayAggressionMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameRolePlayAggressionMessage.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayAggressionMessage(output);
        };
        GameRolePlayAggressionMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayAggressionMessage(input);
        };
        GameRolePlayAggressionMessage.prototype.serializeAs_GameRolePlayAggressionMessage = function(output) {
            if (this.attackerId < 0 || this.attackerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.attackerId + ") on element attackerId.");
            }
            output.writeVarLong(this.attackerId);
            if (this.defenderId < 0 || this.defenderId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.defenderId + ") on element defenderId.");
            }
            output.writeVarLong(this.defenderId);
        };
        GameRolePlayAggressionMessage.prototype.deserializeAs_GameRolePlayAggressionMessage = function(input) {
            this.attackerId = input.readVarUhLong();
            if (this.attackerId < 0 || this.attackerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.attackerId + ") on element of GameRolePlayAggressionMessage.attackerId.");
            }
            this.defenderId = input.readVarUhLong();
            if (this.defenderId < 0 || this.defenderId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.defenderId + ") on element of GameRolePlayAggressionMessage.defenderId.");
            }
        };
        GameRolePlayAggressionMessage.ID = 5626;
        return GameRolePlayAggressionMessage;
    })(NetworkMessage);
    Protocol.GameRolePlayAggressionMessage = GameRolePlayAggressionMessage;
    var GameRolePlayAttackMonsterRequestMessage = (function(_super) {
        __extends(GameRolePlayAttackMonsterRequestMessage, _super);

        function GameRolePlayAttackMonsterRequestMessage() {
            this.monsterGroupId = 0;
            _super.call(this)
        }
        GameRolePlayAttackMonsterRequestMessage.prototype.getMessageId = function() {
            return GameRolePlayAttackMonsterRequestMessage.ID;
        };
        GameRolePlayAttackMonsterRequestMessage.prototype.reset = function() {
            this.monsterGroupId = 0;
        };
        GameRolePlayAttackMonsterRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameRolePlayAttackMonsterRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameRolePlayAttackMonsterRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayAttackMonsterRequestMessage(output);
        };
        GameRolePlayAttackMonsterRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayAttackMonsterRequestMessage(input);
        };
        GameRolePlayAttackMonsterRequestMessage.prototype.serializeAs_GameRolePlayAttackMonsterRequestMessage = function(output) {
            if (this.monsterGroupId < -9007199254740990 || this.monsterGroupId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.monsterGroupId + ") on element monsterGroupId.");
            }
            output.writeDouble(this.monsterGroupId);
        };
        GameRolePlayAttackMonsterRequestMessage.prototype.deserializeAs_GameRolePlayAttackMonsterRequestMessage = function(input) {
            this.monsterGroupId = input.readDouble();
            if (this.monsterGroupId < -9007199254740990 || this.monsterGroupId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.monsterGroupId + ") on element of GameRolePlayAttackMonsterRequestMessage.monsterGroupId.");
            }
        };
        GameRolePlayAttackMonsterRequestMessage.ID = 9947;
        return GameRolePlayAttackMonsterRequestMessage;
    })(NetworkMessage);
    Protocol.GameRolePlayAttackMonsterRequestMessage = GameRolePlayAttackMonsterRequestMessage;
    var GameRolePlayFightRequestCanceledMessage = (function(_super) {
        __extends(GameRolePlayFightRequestCanceledMessage, _super);

        function GameRolePlayFightRequestCanceledMessage() {
            this.fightId = 0;
            this.sourceId = 0;
            this.targetId = 0;
            _super.call(this)
        }
        GameRolePlayFightRequestCanceledMessage.prototype.getMessageId = function() {
            return GameRolePlayFightRequestCanceledMessage.ID;
        };
        GameRolePlayFightRequestCanceledMessage.prototype.reset = function() {
            this.fightId = 0;
            this.sourceId = 0;
            this.targetId = 0;
        };
        GameRolePlayFightRequestCanceledMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameRolePlayFightRequestCanceledMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameRolePlayFightRequestCanceledMessage.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayFightRequestCanceledMessage(output);
        };
        GameRolePlayFightRequestCanceledMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayFightRequestCanceledMessage(input);
        };
        GameRolePlayFightRequestCanceledMessage.prototype.serializeAs_GameRolePlayFightRequestCanceledMessage = function(output) {
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeVarShort(this.fightId);
            if (this.sourceId < -9007199254740990 || this.sourceId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.sourceId + ") on element sourceId.");
            }
            output.writeDouble(this.sourceId);
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
        };
        GameRolePlayFightRequestCanceledMessage.prototype.deserializeAs_GameRolePlayFightRequestCanceledMessage = function(input) {
            this.fightId = input.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of GameRolePlayFightRequestCanceledMessage.fightId.");
            }
            this.sourceId = input.readDouble();
            if (this.sourceId < -9007199254740990 || this.sourceId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.sourceId + ") on element of GameRolePlayFightRequestCanceledMessage.sourceId.");
            }
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameRolePlayFightRequestCanceledMessage.targetId.");
            }
        };
        GameRolePlayFightRequestCanceledMessage.ID = 5454;
        return GameRolePlayFightRequestCanceledMessage;
    })(NetworkMessage);
    Protocol.GameRolePlayFightRequestCanceledMessage = GameRolePlayFightRequestCanceledMessage;
    var GameRolePlayMonsterAngryAtPlayerMessage = (function(_super) {
        __extends(GameRolePlayMonsterAngryAtPlayerMessage, _super);

        function GameRolePlayMonsterAngryAtPlayerMessage() {
            this.playerId = 0;
            this.monsterGroupId = 0;
            this.angryStartTime = 0;
            this.attackTime = 0;
            _super.call(this)
        }
        GameRolePlayMonsterAngryAtPlayerMessage.prototype.getMessageId = function() {
            return GameRolePlayMonsterAngryAtPlayerMessage.ID;
        };
        GameRolePlayMonsterAngryAtPlayerMessage.prototype.reset = function() {
            this.playerId = 0;
            this.monsterGroupId = 0;
            this.angryStartTime = 0;
            this.attackTime = 0;
        };
        GameRolePlayMonsterAngryAtPlayerMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameRolePlayMonsterAngryAtPlayerMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameRolePlayMonsterAngryAtPlayerMessage.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayMonsterAngryAtPlayerMessage(output);
        };
        GameRolePlayMonsterAngryAtPlayerMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayMonsterAngryAtPlayerMessage(input);
        };
        GameRolePlayMonsterAngryAtPlayerMessage.prototype.serializeAs_GameRolePlayMonsterAngryAtPlayerMessage = function(output) {
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
            if (this.monsterGroupId < -9007199254740990 || this.monsterGroupId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.monsterGroupId + ") on element monsterGroupId.");
            }
            output.writeDouble(this.monsterGroupId);
            if (this.angryStartTime < 0 || this.angryStartTime > 9007199254740990) {
                throw new Error("Forbidden value (" + this.angryStartTime + ") on element angryStartTime.");
            }
            output.writeDouble(this.angryStartTime);
            if (this.attackTime < 0 || this.attackTime > 9007199254740990) {
                throw new Error("Forbidden value (" + this.attackTime + ") on element attackTime.");
            }
            output.writeDouble(this.attackTime);
        };
        GameRolePlayMonsterAngryAtPlayerMessage.prototype.deserializeAs_GameRolePlayMonsterAngryAtPlayerMessage = function(input) {
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of GameRolePlayMonsterAngryAtPlayerMessage.playerId.");
            }
            this.monsterGroupId = input.readDouble();
            if (this.monsterGroupId < -9007199254740990 || this.monsterGroupId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.monsterGroupId + ") on element of GameRolePlayMonsterAngryAtPlayerMessage.monsterGroupId.");
            }
            this.angryStartTime = input.readDouble();
            if (this.angryStartTime < 0 || this.angryStartTime > 9007199254740990) {
                throw new Error("Forbidden value (" + this.angryStartTime + ") on element of GameRolePlayMonsterAngryAtPlayerMessage.angryStartTime.");
            }
            this.attackTime = input.readDouble();
            if (this.attackTime < 0 || this.attackTime > 9007199254740990) {
                throw new Error("Forbidden value (" + this.attackTime + ") on element of GameRolePlayMonsterAngryAtPlayerMessage.attackTime.");
            }
        };
        GameRolePlayMonsterAngryAtPlayerMessage.ID = 4325;
        return GameRolePlayMonsterAngryAtPlayerMessage;
    })(NetworkMessage);
    Protocol.GameRolePlayMonsterAngryAtPlayerMessage = GameRolePlayMonsterAngryAtPlayerMessage;
    var GameRolePlayMonsterNotAngryAtPlayerMessage = (function(_super) {
        __extends(GameRolePlayMonsterNotAngryAtPlayerMessage, _super);

        function GameRolePlayMonsterNotAngryAtPlayerMessage() {
            this.playerId = 0;
            this.monsterGroupId = 0;
            _super.call(this)
        }
        GameRolePlayMonsterNotAngryAtPlayerMessage.prototype.getMessageId = function() {
            return GameRolePlayMonsterNotAngryAtPlayerMessage.ID;
        };
        GameRolePlayMonsterNotAngryAtPlayerMessage.prototype.reset = function() {
            this.playerId = 0;
            this.monsterGroupId = 0;
        };
        GameRolePlayMonsterNotAngryAtPlayerMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameRolePlayMonsterNotAngryAtPlayerMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameRolePlayMonsterNotAngryAtPlayerMessage.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayMonsterNotAngryAtPlayerMessage(output);
        };
        GameRolePlayMonsterNotAngryAtPlayerMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayMonsterNotAngryAtPlayerMessage(input);
        };
        GameRolePlayMonsterNotAngryAtPlayerMessage.prototype.serializeAs_GameRolePlayMonsterNotAngryAtPlayerMessage = function(output) {
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
            if (this.monsterGroupId < -9007199254740990 || this.monsterGroupId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.monsterGroupId + ") on element monsterGroupId.");
            }
            output.writeDouble(this.monsterGroupId);
        };
        GameRolePlayMonsterNotAngryAtPlayerMessage.prototype.deserializeAs_GameRolePlayMonsterNotAngryAtPlayerMessage = function(input) {
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of GameRolePlayMonsterNotAngryAtPlayerMessage.playerId.");
            }
            this.monsterGroupId = input.readDouble();
            if (this.monsterGroupId < -9007199254740990 || this.monsterGroupId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.monsterGroupId + ") on element of GameRolePlayMonsterNotAngryAtPlayerMessage.monsterGroupId.");
            }
        };
        GameRolePlayMonsterNotAngryAtPlayerMessage.ID = 4276;
        return GameRolePlayMonsterNotAngryAtPlayerMessage;
    })(NetworkMessage);
    Protocol.GameRolePlayMonsterNotAngryAtPlayerMessage = GameRolePlayMonsterNotAngryAtPlayerMessage;
    var GameRolePlayPlayerFightFriendlyAnsweredMessage = (function(_super) {
        __extends(GameRolePlayPlayerFightFriendlyAnsweredMessage, _super);

        function GameRolePlayPlayerFightFriendlyAnsweredMessage() {
            this.fightId = 0;
            this.sourceId = 0;
            this.targetId = 0;
            this.accept = false;
            _super.call(this)
        }
        GameRolePlayPlayerFightFriendlyAnsweredMessage.prototype.getMessageId = function() {
            return GameRolePlayPlayerFightFriendlyAnsweredMessage.ID;
        };
        GameRolePlayPlayerFightFriendlyAnsweredMessage.prototype.reset = function() {
            this.fightId = 0;
            this.sourceId = 0;
            this.targetId = 0;
            this.accept = false;
        };
        GameRolePlayPlayerFightFriendlyAnsweredMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameRolePlayPlayerFightFriendlyAnsweredMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameRolePlayPlayerFightFriendlyAnsweredMessage.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayPlayerFightFriendlyAnsweredMessage(output);
        };
        GameRolePlayPlayerFightFriendlyAnsweredMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayPlayerFightFriendlyAnsweredMessage(input);
        };
        GameRolePlayPlayerFightFriendlyAnsweredMessage.prototype.serializeAs_GameRolePlayPlayerFightFriendlyAnsweredMessage = function(output) {
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeVarShort(this.fightId);
            if (this.sourceId < 0 || this.sourceId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.sourceId + ") on element sourceId.");
            }
            output.writeVarLong(this.sourceId);
            if (this.targetId < 0 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeVarLong(this.targetId);
            output.writeBoolean(this.accept);
        };
        GameRolePlayPlayerFightFriendlyAnsweredMessage.prototype.deserializeAs_GameRolePlayPlayerFightFriendlyAnsweredMessage = function(input) {
            this.fightId = input.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of GameRolePlayPlayerFightFriendlyAnsweredMessage.fightId.");
            }
            this.sourceId = input.readVarUhLong();
            if (this.sourceId < 0 || this.sourceId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.sourceId + ") on element of GameRolePlayPlayerFightFriendlyAnsweredMessage.sourceId.");
            }
            this.targetId = input.readVarUhLong();
            if (this.targetId < 0 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameRolePlayPlayerFightFriendlyAnsweredMessage.targetId.");
            }
            this.accept = input.readBoolean();
        };
        GameRolePlayPlayerFightFriendlyAnsweredMessage.ID = 2891;
        return GameRolePlayPlayerFightFriendlyAnsweredMessage;
    })(NetworkMessage);
    Protocol.GameRolePlayPlayerFightFriendlyAnsweredMessage = GameRolePlayPlayerFightFriendlyAnsweredMessage;
    var GameRolePlayPlayerFightFriendlyAnswerMessage = (function(_super) {
        __extends(GameRolePlayPlayerFightFriendlyAnswerMessage, _super);

        function GameRolePlayPlayerFightFriendlyAnswerMessage() {
            this.fightId = 0;
            this.accept = false;
            _super.call(this)
        }
        GameRolePlayPlayerFightFriendlyAnswerMessage.prototype.getMessageId = function() {
            return GameRolePlayPlayerFightFriendlyAnswerMessage.ID;
        };
        GameRolePlayPlayerFightFriendlyAnswerMessage.prototype.reset = function() {
            this.fightId = 0;
            this.accept = false;
        };
        GameRolePlayPlayerFightFriendlyAnswerMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameRolePlayPlayerFightFriendlyAnswerMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameRolePlayPlayerFightFriendlyAnswerMessage.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayPlayerFightFriendlyAnswerMessage(output);
        };
        GameRolePlayPlayerFightFriendlyAnswerMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayPlayerFightFriendlyAnswerMessage(input);
        };
        GameRolePlayPlayerFightFriendlyAnswerMessage.prototype.serializeAs_GameRolePlayPlayerFightFriendlyAnswerMessage = function(output) {
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeVarShort(this.fightId);
            output.writeBoolean(this.accept);
        };
        GameRolePlayPlayerFightFriendlyAnswerMessage.prototype.deserializeAs_GameRolePlayPlayerFightFriendlyAnswerMessage = function(input) {
            this.fightId = input.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of GameRolePlayPlayerFightFriendlyAnswerMessage.fightId.");
            }
            this.accept = input.readBoolean();
        };
        GameRolePlayPlayerFightFriendlyAnswerMessage.ID = 3588;
        return GameRolePlayPlayerFightFriendlyAnswerMessage;
    })(NetworkMessage);
    Protocol.GameRolePlayPlayerFightFriendlyAnswerMessage = GameRolePlayPlayerFightFriendlyAnswerMessage;
    var GameRolePlayPlayerFightFriendlyRequestedMessage = (function(_super) {
        __extends(GameRolePlayPlayerFightFriendlyRequestedMessage, _super);

        function GameRolePlayPlayerFightFriendlyRequestedMessage() {
            this.fightId = 0;
            this.sourceId = 0;
            this.targetId = 0;
            _super.call(this)
        }
        GameRolePlayPlayerFightFriendlyRequestedMessage.prototype.getMessageId = function() {
            return GameRolePlayPlayerFightFriendlyRequestedMessage.ID;
        };
        GameRolePlayPlayerFightFriendlyRequestedMessage.prototype.reset = function() {
            this.fightId = 0;
            this.sourceId = 0;
            this.targetId = 0;
        };
        GameRolePlayPlayerFightFriendlyRequestedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameRolePlayPlayerFightFriendlyRequestedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameRolePlayPlayerFightFriendlyRequestedMessage.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayPlayerFightFriendlyRequestedMessage(output);
        };
        GameRolePlayPlayerFightFriendlyRequestedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayPlayerFightFriendlyRequestedMessage(input);
        };
        GameRolePlayPlayerFightFriendlyRequestedMessage.prototype.serializeAs_GameRolePlayPlayerFightFriendlyRequestedMessage = function(output) {
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeVarShort(this.fightId);
            if (this.sourceId < 0 || this.sourceId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.sourceId + ") on element sourceId.");
            }
            output.writeVarLong(this.sourceId);
            if (this.targetId < 0 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeVarLong(this.targetId);
        };
        GameRolePlayPlayerFightFriendlyRequestedMessage.prototype.deserializeAs_GameRolePlayPlayerFightFriendlyRequestedMessage = function(input) {
            this.fightId = input.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of GameRolePlayPlayerFightFriendlyRequestedMessage.fightId.");
            }
            this.sourceId = input.readVarUhLong();
            if (this.sourceId < 0 || this.sourceId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.sourceId + ") on element of GameRolePlayPlayerFightFriendlyRequestedMessage.sourceId.");
            }
            this.targetId = input.readVarUhLong();
            if (this.targetId < 0 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameRolePlayPlayerFightFriendlyRequestedMessage.targetId.");
            }
        };
        GameRolePlayPlayerFightFriendlyRequestedMessage.ID = 8153;
        return GameRolePlayPlayerFightFriendlyRequestedMessage;
    })(NetworkMessage);
    Protocol.GameRolePlayPlayerFightFriendlyRequestedMessage = GameRolePlayPlayerFightFriendlyRequestedMessage;
    var GameRolePlayPlayerFightRequestMessage = (function(_super) {
        __extends(GameRolePlayPlayerFightRequestMessage, _super);

        function GameRolePlayPlayerFightRequestMessage() {
            this.targetId = 0;
            this.targetCellId = 0;
            this.friendly = false;
            _super.call(this)
        }
        GameRolePlayPlayerFightRequestMessage.prototype.getMessageId = function() {
            return GameRolePlayPlayerFightRequestMessage.ID;
        };
        GameRolePlayPlayerFightRequestMessage.prototype.reset = function() {
            this.targetId = 0;
            this.targetCellId = 0;
            this.friendly = false;
        };
        GameRolePlayPlayerFightRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameRolePlayPlayerFightRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameRolePlayPlayerFightRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayPlayerFightRequestMessage(output);
        };
        GameRolePlayPlayerFightRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayPlayerFightRequestMessage(input);
        };
        GameRolePlayPlayerFightRequestMessage.prototype.serializeAs_GameRolePlayPlayerFightRequestMessage = function(output) {
            if (this.targetId < 0 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeVarLong(this.targetId);
            if (this.targetCellId < -1 || this.targetCellId > 559) {
                throw new Error("Forbidden value (" + this.targetCellId + ") on element targetCellId.");
            }
            output.writeShort(this.targetCellId);
            output.writeBoolean(this.friendly);
        };
        GameRolePlayPlayerFightRequestMessage.prototype.deserializeAs_GameRolePlayPlayerFightRequestMessage = function(input) {
            this.targetId = input.readVarUhLong();
            if (this.targetId < 0 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameRolePlayPlayerFightRequestMessage.targetId.");
            }
            this.targetCellId = input.readShort();
            if (this.targetCellId < -1 || this.targetCellId > 559) {
                throw new Error("Forbidden value (" + this.targetCellId + ") on element of GameRolePlayPlayerFightRequestMessage.targetCellId.");
            }
            this.friendly = input.readBoolean();
        };
        GameRolePlayPlayerFightRequestMessage.ID = 8087;
        return GameRolePlayPlayerFightRequestMessage;
    })(NetworkMessage);
    Protocol.GameRolePlayPlayerFightRequestMessage = GameRolePlayPlayerFightRequestMessage;
    var GameRolePlayRemoveChallengeMessage = (function(_super) {
        __extends(GameRolePlayRemoveChallengeMessage, _super);

        function GameRolePlayRemoveChallengeMessage() {
            this.fightId = 0;
            _super.call(this)
        }
        GameRolePlayRemoveChallengeMessage.prototype.getMessageId = function() {
            return GameRolePlayRemoveChallengeMessage.ID;
        };
        GameRolePlayRemoveChallengeMessage.prototype.reset = function() {
            this.fightId = 0;
        };
        GameRolePlayRemoveChallengeMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameRolePlayRemoveChallengeMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameRolePlayRemoveChallengeMessage.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayRemoveChallengeMessage(output);
        };
        GameRolePlayRemoveChallengeMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayRemoveChallengeMessage(input);
        };
        GameRolePlayRemoveChallengeMessage.prototype.serializeAs_GameRolePlayRemoveChallengeMessage = function(output) {
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeVarShort(this.fightId);
        };
        GameRolePlayRemoveChallengeMessage.prototype.deserializeAs_GameRolePlayRemoveChallengeMessage = function(input) {
            this.fightId = input.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of GameRolePlayRemoveChallengeMessage.fightId.");
            }
        };
        GameRolePlayRemoveChallengeMessage.ID = 9279;
        return GameRolePlayRemoveChallengeMessage;
    })(NetworkMessage);
    Protocol.GameRolePlayRemoveChallengeMessage = GameRolePlayRemoveChallengeMessage;
    var GameRolePlayShowChallengeMessage = (function(_super) {
        __extends(GameRolePlayShowChallengeMessage, _super);

        function GameRolePlayShowChallengeMessage() {
            this.commonsInfos = new FightCommonInformations();
            _super.call(this)
        }
        GameRolePlayShowChallengeMessage.prototype.getMessageId = function() {
            return GameRolePlayShowChallengeMessage.ID;
        };
        GameRolePlayShowChallengeMessage.prototype.reset = function() {
            this.commonsInfos = new FightCommonInformations();
        };
        GameRolePlayShowChallengeMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameRolePlayShowChallengeMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameRolePlayShowChallengeMessage.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayShowChallengeMessage(output);
        };
        GameRolePlayShowChallengeMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayShowChallengeMessage(input);
        };
        GameRolePlayShowChallengeMessage.prototype.serializeAs_GameRolePlayShowChallengeMessage = function(output) {
            this.commonsInfos.serializeAs_FightCommonInformations(output);
        };
        GameRolePlayShowChallengeMessage.prototype.deserializeAs_GameRolePlayShowChallengeMessage = function(input) {
            this.commonsInfos = new FightCommonInformations();
            this.commonsInfos.deserialize(input);
        };
        GameRolePlayShowChallengeMessage.ID = 6006;
        return GameRolePlayShowChallengeMessage;
    })(NetworkMessage);
    Protocol.GameRolePlayShowChallengeMessage = GameRolePlayShowChallengeMessage;
    var GameRolePlayShowActorMessage = (function(_super) {
        __extends(GameRolePlayShowActorMessage, _super);

        function GameRolePlayShowActorMessage() {
            this.informations = new GameRolePlayActorInformations();
            _super.call(this)
        }
        GameRolePlayShowActorMessage.prototype.getMessageId = function() {
            return GameRolePlayShowActorMessage.ID;
        };
        GameRolePlayShowActorMessage.prototype.reset = function() {
            this.informations = new GameRolePlayActorInformations();
        };
        GameRolePlayShowActorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameRolePlayShowActorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameRolePlayShowActorMessage.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayShowActorMessage(output);
        };
        GameRolePlayShowActorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayShowActorMessage(input);
        };
        GameRolePlayShowActorMessage.prototype.serializeAs_GameRolePlayShowActorMessage = function(output) {
            output.writeShort(this.informations.getTypeId());
            this.informations.serialize(output);
        };
        GameRolePlayShowActorMessage.prototype.deserializeAs_GameRolePlayShowActorMessage = function(input) {
            var _id1 = input.readUnsignedShort();
            this.informations = ProtocolTypeManager.getInstance(GameRolePlayActorInformations, _id1);
            this.informations.deserialize(input);
        };
        GameRolePlayShowActorMessage.ID = 3267;
        return GameRolePlayShowActorMessage;
    })(NetworkMessage);
    Protocol.GameRolePlayShowActorMessage = GameRolePlayShowActorMessage;
    var GameRolePlayShowActorWithEventMessage = (function(_super) {
        __extends(GameRolePlayShowActorWithEventMessage, _super);

        function GameRolePlayShowActorWithEventMessage() {
            this.actorEventId = 0;
            _super.call(this)
        }
        GameRolePlayShowActorWithEventMessage.prototype.getMessageId = function() {
            return GameRolePlayShowActorWithEventMessage.ID;
        };
        GameRolePlayShowActorWithEventMessage.prototype.reset = function() {
            this.actorEventId = 0;
        };
        GameRolePlayShowActorWithEventMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameRolePlayShowActorWithEventMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameRolePlayShowActorWithEventMessage.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayShowActorWithEventMessage(output);
        };
        GameRolePlayShowActorWithEventMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayShowActorWithEventMessage(input);
        };
        GameRolePlayShowActorWithEventMessage.prototype.serializeAs_GameRolePlayShowActorWithEventMessage = function(output) {
            _super.prototype.serializeAs_GameRolePlayShowActorMessage.call(this, output);
            if (this.actorEventId < 0) {
                throw new Error("Forbidden value (" + this.actorEventId + ") on element actorEventId.");
            }
            output.writeByte(this.actorEventId);
        };
        GameRolePlayShowActorWithEventMessage.prototype.deserializeAs_GameRolePlayShowActorWithEventMessage = function(input) {
            _super.prototype.deserializeAs_GameRolePlayShowActorMessage.call(this, input);
            this.actorEventId = input.readByte();
            if (this.actorEventId < 0) {
                throw new Error("Forbidden value (" + this.actorEventId + ") on element of GameRolePlayShowActorWithEventMessage.actorEventId.");
            }
        };
        GameRolePlayShowActorWithEventMessage.ID = 6726;
        return GameRolePlayShowActorWithEventMessage;
    })(GameRolePlayShowActorMessage);
    Protocol.GameRolePlayShowActorWithEventMessage = GameRolePlayShowActorWithEventMessage;
    var GameRolePlayShowMultipleActorsMessage = (function(_super) {
        __extends(GameRolePlayShowMultipleActorsMessage, _super);

        function GameRolePlayShowMultipleActorsMessage() {
            this.informationsList = [];
            _super.call(this)
        }
        GameRolePlayShowMultipleActorsMessage.prototype.getMessageId = function() {
            return GameRolePlayShowMultipleActorsMessage.ID;
        };
        GameRolePlayShowMultipleActorsMessage.prototype.reset = function() {
            this.informationsList = [];
        };
        GameRolePlayShowMultipleActorsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameRolePlayShowMultipleActorsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameRolePlayShowMultipleActorsMessage.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayShowMultipleActorsMessage(output);
        };
        GameRolePlayShowMultipleActorsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayShowMultipleActorsMessage(input);
        };
        GameRolePlayShowMultipleActorsMessage.prototype.serializeAs_GameRolePlayShowMultipleActorsMessage = function(output) {
            output.writeShort(this.informationsList.length);
            for (var _i1 = 0; _i1 < this.informationsList.length; _i1++) {
                output.writeShort((this.informationsList[_i1]).getTypeId());
                (this.informationsList[_i1]).serialize(output);
            }
        };
        GameRolePlayShowMultipleActorsMessage.prototype.deserializeAs_GameRolePlayShowMultipleActorsMessage = function(input) {
            var _id1 = 0;
            var _item1 = null;
            var _informationsListLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _informationsListLen; _i1++) {
                _id1 = input.readUnsignedShort();
                _item1 = ProtocolTypeManager.getInstance(GameRolePlayActorInformations, _id1);
                _item1.deserialize(input);
                this.informationsList.push(_item1);
            }
        };
        GameRolePlayShowMultipleActorsMessage.ID = 224;
        return GameRolePlayShowMultipleActorsMessage;
    })(NetworkMessage);
    Protocol.GameRolePlayShowMultipleActorsMessage = GameRolePlayShowMultipleActorsMessage;
    var ChangeHavenBagRoomRequestMessage = (function(_super) {
        __extends(ChangeHavenBagRoomRequestMessage, _super);

        function ChangeHavenBagRoomRequestMessage() {
            this.roomId = 0;
            _super.call(this)
        }
        ChangeHavenBagRoomRequestMessage.prototype.getMessageId = function() {
            return ChangeHavenBagRoomRequestMessage.ID;
        };
        ChangeHavenBagRoomRequestMessage.prototype.reset = function() {
            this.roomId = 0;
        };
        ChangeHavenBagRoomRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ChangeHavenBagRoomRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ChangeHavenBagRoomRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_ChangeHavenBagRoomRequestMessage(output);
        };
        ChangeHavenBagRoomRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ChangeHavenBagRoomRequestMessage(input);
        };
        ChangeHavenBagRoomRequestMessage.prototype.serializeAs_ChangeHavenBagRoomRequestMessage = function(output) {
            if (this.roomId < 0) {
                throw new Error("Forbidden value (" + this.roomId + ") on element roomId.");
            }
            output.writeByte(this.roomId);
        };
        ChangeHavenBagRoomRequestMessage.prototype.deserializeAs_ChangeHavenBagRoomRequestMessage = function(input) {
            this.roomId = input.readByte();
            if (this.roomId < 0) {
                throw new Error("Forbidden value (" + this.roomId + ") on element of ChangeHavenBagRoomRequestMessage.roomId.");
            }
        };
        ChangeHavenBagRoomRequestMessage.ID = 5326;
        return ChangeHavenBagRoomRequestMessage;
    })(NetworkMessage);
    Protocol.ChangeHavenBagRoomRequestMessage = ChangeHavenBagRoomRequestMessage;
    var ChangeThemeRequestMessage = (function(_super) {
        __extends(ChangeThemeRequestMessage, _super);

        function ChangeThemeRequestMessage() {
            this.theme = 0;
            _super.call(this)
        }
        ChangeThemeRequestMessage.prototype.getMessageId = function() {
            return ChangeThemeRequestMessage.ID;
        };
        ChangeThemeRequestMessage.prototype.reset = function() {
            this.theme = 0;
        };
        ChangeThemeRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ChangeThemeRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ChangeThemeRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_ChangeThemeRequestMessage(output);
        };
        ChangeThemeRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ChangeThemeRequestMessage(input);
        };
        ChangeThemeRequestMessage.prototype.serializeAs_ChangeThemeRequestMessage = function(output) {
            output.writeByte(this.theme);
        };
        ChangeThemeRequestMessage.prototype.deserializeAs_ChangeThemeRequestMessage = function(input) {
            this.theme = input.readByte();
        };
        ChangeThemeRequestMessage.ID = 4026;
        return ChangeThemeRequestMessage;
    })(NetworkMessage);
    Protocol.ChangeThemeRequestMessage = ChangeThemeRequestMessage;
    var CloseHavenBagFurnitureSequenceRequestMessage = (function(_super) {
        __extends(CloseHavenBagFurnitureSequenceRequestMessage, _super);

        function CloseHavenBagFurnitureSequenceRequestMessage() {

            _super.call(this)
        }
        CloseHavenBagFurnitureSequenceRequestMessage.prototype.getMessageId = function() {
            return CloseHavenBagFurnitureSequenceRequestMessage.ID;
        };
        CloseHavenBagFurnitureSequenceRequestMessage.prototype.reset = function() {

        };
        CloseHavenBagFurnitureSequenceRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        CloseHavenBagFurnitureSequenceRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        CloseHavenBagFurnitureSequenceRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_CloseHavenBagFurnitureSequenceRequestMessage(output);
        };
        CloseHavenBagFurnitureSequenceRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_CloseHavenBagFurnitureSequenceRequestMessage(input);
        };
        CloseHavenBagFurnitureSequenceRequestMessage.prototype.serializeAs_CloseHavenBagFurnitureSequenceRequestMessage = function(output) {

        };
        CloseHavenBagFurnitureSequenceRequestMessage.prototype.deserializeAs_CloseHavenBagFurnitureSequenceRequestMessage = function(input) {

        };
        CloseHavenBagFurnitureSequenceRequestMessage.ID = 6985;
        return CloseHavenBagFurnitureSequenceRequestMessage;
    })(NetworkMessage);
    Protocol.CloseHavenBagFurnitureSequenceRequestMessage = CloseHavenBagFurnitureSequenceRequestMessage;
    var EditHavenBagCancelRequestMessage = (function(_super) {
        __extends(EditHavenBagCancelRequestMessage, _super);

        function EditHavenBagCancelRequestMessage() {

            _super.call(this)
        }
        EditHavenBagCancelRequestMessage.prototype.getMessageId = function() {
            return EditHavenBagCancelRequestMessage.ID;
        };
        EditHavenBagCancelRequestMessage.prototype.reset = function() {

        };
        EditHavenBagCancelRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        EditHavenBagCancelRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        EditHavenBagCancelRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_EditHavenBagCancelRequestMessage(output);
        };
        EditHavenBagCancelRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_EditHavenBagCancelRequestMessage(input);
        };
        EditHavenBagCancelRequestMessage.prototype.serializeAs_EditHavenBagCancelRequestMessage = function(output) {

        };
        EditHavenBagCancelRequestMessage.prototype.deserializeAs_EditHavenBagCancelRequestMessage = function(input) {

        };
        EditHavenBagCancelRequestMessage.ID = 9787;
        return EditHavenBagCancelRequestMessage;
    })(NetworkMessage);
    Protocol.EditHavenBagCancelRequestMessage = EditHavenBagCancelRequestMessage;
    var EditHavenBagFinishedMessage = (function(_super) {
        __extends(EditHavenBagFinishedMessage, _super);

        function EditHavenBagFinishedMessage() {

            _super.call(this)
        }
        EditHavenBagFinishedMessage.prototype.getMessageId = function() {
            return EditHavenBagFinishedMessage.ID;
        };
        EditHavenBagFinishedMessage.prototype.reset = function() {

        };
        EditHavenBagFinishedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        EditHavenBagFinishedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        EditHavenBagFinishedMessage.prototype.serialize = function(output) {
            this.serializeAs_EditHavenBagFinishedMessage(output);
        };
        EditHavenBagFinishedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_EditHavenBagFinishedMessage(input);
        };
        EditHavenBagFinishedMessage.prototype.serializeAs_EditHavenBagFinishedMessage = function(output) {

        };
        EditHavenBagFinishedMessage.prototype.deserializeAs_EditHavenBagFinishedMessage = function(input) {

        };
        EditHavenBagFinishedMessage.ID = 9636;
        return EditHavenBagFinishedMessage;
    })(NetworkMessage);
    Protocol.EditHavenBagFinishedMessage = EditHavenBagFinishedMessage;
    var EditHavenBagRequestMessage = (function(_super) {
        __extends(EditHavenBagRequestMessage, _super);

        function EditHavenBagRequestMessage() {

            _super.call(this)
        }
        EditHavenBagRequestMessage.prototype.getMessageId = function() {
            return EditHavenBagRequestMessage.ID;
        };
        EditHavenBagRequestMessage.prototype.reset = function() {

        };
        EditHavenBagRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        EditHavenBagRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        EditHavenBagRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_EditHavenBagRequestMessage(output);
        };
        EditHavenBagRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_EditHavenBagRequestMessage(input);
        };
        EditHavenBagRequestMessage.prototype.serializeAs_EditHavenBagRequestMessage = function(output) {

        };
        EditHavenBagRequestMessage.prototype.deserializeAs_EditHavenBagRequestMessage = function(input) {

        };
        EditHavenBagRequestMessage.ID = 2826;
        return EditHavenBagRequestMessage;
    })(NetworkMessage);
    Protocol.EditHavenBagRequestMessage = EditHavenBagRequestMessage;
    var EditHavenBagStartMessage = (function(_super) {
        __extends(EditHavenBagStartMessage, _super);

        function EditHavenBagStartMessage() {

            _super.call(this)
        }
        EditHavenBagStartMessage.prototype.getMessageId = function() {
            return EditHavenBagStartMessage.ID;
        };
        EditHavenBagStartMessage.prototype.reset = function() {

        };
        EditHavenBagStartMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        EditHavenBagStartMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        EditHavenBagStartMessage.prototype.serialize = function(output) {
            this.serializeAs_EditHavenBagStartMessage(output);
        };
        EditHavenBagStartMessage.prototype.deserialize = function(input) {
            this.deserializeAs_EditHavenBagStartMessage(input);
        };
        EditHavenBagStartMessage.prototype.serializeAs_EditHavenBagStartMessage = function(output) {

        };
        EditHavenBagStartMessage.prototype.deserializeAs_EditHavenBagStartMessage = function(input) {

        };
        EditHavenBagStartMessage.ID = 6189;
        return EditHavenBagStartMessage;
    })(NetworkMessage);
    Protocol.EditHavenBagStartMessage = EditHavenBagStartMessage;
    var EnterHavenBagRequestMessage = (function(_super) {
        __extends(EnterHavenBagRequestMessage, _super);

        function EnterHavenBagRequestMessage() {
            this.havenBagOwner = 0;
            _super.call(this)
        }
        EnterHavenBagRequestMessage.prototype.getMessageId = function() {
            return EnterHavenBagRequestMessage.ID;
        };
        EnterHavenBagRequestMessage.prototype.reset = function() {
            this.havenBagOwner = 0;
        };
        EnterHavenBagRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        EnterHavenBagRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        EnterHavenBagRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_EnterHavenBagRequestMessage(output);
        };
        EnterHavenBagRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_EnterHavenBagRequestMessage(input);
        };
        EnterHavenBagRequestMessage.prototype.serializeAs_EnterHavenBagRequestMessage = function(output) {
            if (this.havenBagOwner < 0 || this.havenBagOwner > 9007199254740990) {
                throw new Error("Forbidden value (" + this.havenBagOwner + ") on element havenBagOwner.");
            }
            output.writeVarLong(this.havenBagOwner);
        };
        EnterHavenBagRequestMessage.prototype.deserializeAs_EnterHavenBagRequestMessage = function(input) {
            this.havenBagOwner = input.readVarUhLong();
            if (this.havenBagOwner < 0 || this.havenBagOwner > 9007199254740990) {
                throw new Error("Forbidden value (" + this.havenBagOwner + ") on element of EnterHavenBagRequestMessage.havenBagOwner.");
            }
        };
        EnterHavenBagRequestMessage.ID = 6025;
        return EnterHavenBagRequestMessage;
    })(NetworkMessage);
    Protocol.EnterHavenBagRequestMessage = EnterHavenBagRequestMessage;
    var ExitHavenBagRequestMessage = (function(_super) {
        __extends(ExitHavenBagRequestMessage, _super);

        function ExitHavenBagRequestMessage() {

            _super.call(this)
        }
        ExitHavenBagRequestMessage.prototype.getMessageId = function() {
            return ExitHavenBagRequestMessage.ID;
        };
        ExitHavenBagRequestMessage.prototype.reset = function() {

        };
        ExitHavenBagRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExitHavenBagRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExitHavenBagRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_ExitHavenBagRequestMessage(output);
        };
        ExitHavenBagRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExitHavenBagRequestMessage(input);
        };
        ExitHavenBagRequestMessage.prototype.serializeAs_ExitHavenBagRequestMessage = function(output) {

        };
        ExitHavenBagRequestMessage.prototype.deserializeAs_ExitHavenBagRequestMessage = function(input) {

        };
        ExitHavenBagRequestMessage.ID = 9801;
        return ExitHavenBagRequestMessage;
    })(NetworkMessage);
    Protocol.ExitHavenBagRequestMessage = ExitHavenBagRequestMessage;
    var HavenBagDailyLoteryMessage = (function(_super) {
        __extends(HavenBagDailyLoteryMessage, _super);

        function HavenBagDailyLoteryMessage() {
            this.returnType = 0;
            this.gameActionId = "";
            _super.call(this)
        }
        HavenBagDailyLoteryMessage.prototype.getMessageId = function() {
            return HavenBagDailyLoteryMessage.ID;
        };
        HavenBagDailyLoteryMessage.prototype.reset = function() {
            this.returnType = 0;
            this.gameActionId = "";
        };
        HavenBagDailyLoteryMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        HavenBagDailyLoteryMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        HavenBagDailyLoteryMessage.prototype.serialize = function(output) {
            this.serializeAs_HavenBagDailyLoteryMessage(output);
        };
        HavenBagDailyLoteryMessage.prototype.deserialize = function(input) {
            this.deserializeAs_HavenBagDailyLoteryMessage(input);
        };
        HavenBagDailyLoteryMessage.prototype.serializeAs_HavenBagDailyLoteryMessage = function(output) {
            output.writeByte(this.returnType);
            output.writeUTF(this.gameActionId);
        };
        HavenBagDailyLoteryMessage.prototype.deserializeAs_HavenBagDailyLoteryMessage = function(input) {
            this.returnType = input.readByte();
            if (this.returnType < 0) {
                throw new Error("Forbidden value (" + this.returnType + ") on element of HavenBagDailyLoteryMessage.returnType.");
            }
            this.gameActionId = input.readUTF();
        };
        HavenBagDailyLoteryMessage.ID = 7129;
        return HavenBagDailyLoteryMessage;
    })(NetworkMessage);
    Protocol.HavenBagDailyLoteryMessage = HavenBagDailyLoteryMessage;
    var HavenBagFurnituresMessage = (function(_super) {
        __extends(HavenBagFurnituresMessage, _super);

        function HavenBagFurnituresMessage() {
            this.furnituresInfos = [];
            _super.call(this)
        }
        HavenBagFurnituresMessage.prototype.getMessageId = function() {
            return HavenBagFurnituresMessage.ID;
        };
        HavenBagFurnituresMessage.prototype.reset = function() {
            this.furnituresInfos = [];
        };
        HavenBagFurnituresMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        HavenBagFurnituresMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        HavenBagFurnituresMessage.prototype.serialize = function(output) {
            this.serializeAs_HavenBagFurnituresMessage(output);
        };
        HavenBagFurnituresMessage.prototype.deserialize = function(input) {
            this.deserializeAs_HavenBagFurnituresMessage(input);
        };
        HavenBagFurnituresMessage.prototype.serializeAs_HavenBagFurnituresMessage = function(output) {
            output.writeShort(this.furnituresInfos.length);
            for (var _i1 = 0; _i1 < this.furnituresInfos.length; _i1++) {
                (this.furnituresInfos[_i1]).serializeAs_HavenBagFurnitureInformation(output);
            }
        };
        HavenBagFurnituresMessage.prototype.deserializeAs_HavenBagFurnituresMessage = function(input) {
            var _item1 = null;
            var _furnituresInfosLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _furnituresInfosLen; _i1++) {
                _item1 = new HavenBagFurnitureInformation();
                _item1.deserialize(input);
                this.furnituresInfos.push(_item1);
            }
        };
        HavenBagFurnituresMessage.ID = 162;
        return HavenBagFurnituresMessage;
    })(NetworkMessage);
    Protocol.HavenBagFurnituresMessage = HavenBagFurnituresMessage;
    var HavenBagFurnituresRequestMessage = (function(_super) {
        __extends(HavenBagFurnituresRequestMessage, _super);

        function HavenBagFurnituresRequestMessage() {
            this.cellIds = [];
            this.funitureIds = [];
            this.orientations = [];
            _super.call(this)
        }
        HavenBagFurnituresRequestMessage.prototype.getMessageId = function() {
            return HavenBagFurnituresRequestMessage.ID;
        };
        HavenBagFurnituresRequestMessage.prototype.reset = function() {
            this.cellIds = [];
            this.funitureIds = [];
            this.orientations = [];
        };
        HavenBagFurnituresRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        HavenBagFurnituresRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        HavenBagFurnituresRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_HavenBagFurnituresRequestMessage(output);
        };
        HavenBagFurnituresRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_HavenBagFurnituresRequestMessage(input);
        };
        HavenBagFurnituresRequestMessage.prototype.serializeAs_HavenBagFurnituresRequestMessage = function(output) {
            output.writeShort(this.cellIds.length);
            for (var _i1 = 0; _i1 < this.cellIds.length; _i1++) {
                if (this.cellIds[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.cellIds[_i1] + ") on element 1 (starting at 1) of cellIds.");
                }
                output.writeVarShort(this.cellIds[_i1]);
            }
            output.writeShort(this.funitureIds.length);
            for (var _i2 = 0; _i2 < this.funitureIds.length; _i2++) {
                output.writeInt(this.funitureIds[_i2]);
            }
            output.writeShort(this.orientations.length);
            for (var _i3 = 0; _i3 < this.orientations.length; _i3++) {
                if (this.orientations[_i3] < 0) {
                    throw new Error("Forbidden value (" + this.orientations[_i3] + ") on element 3 (starting at 1) of orientations.");
                }
                output.writeByte(this.orientations[_i3]);
            }
        };
        HavenBagFurnituresRequestMessage.prototype.deserializeAs_HavenBagFurnituresRequestMessage = function(input) {
            var _val1 = 0;
            var _val2 = 0;
            var _val3 = 0;
            var _cellIdsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _cellIdsLen; _i1++) {
                _val1 = input.readVarUhShort();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of cellIds.");
                }
                this.cellIds.push(_val1);
            }
            var _funitureIdsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _funitureIdsLen; _i2++) {
                _val2 = input.readInt();
                this.funitureIds.push(_val2);
            }
            var _orientationsLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _orientationsLen; _i3++) {
                _val3 = input.readByte();
                if (_val3 < 0) {
                    throw new Error("Forbidden value (" + _val3 + ") on elements of orientations.");
                }
                this.orientations.push(_val3);
            }
        };
        HavenBagFurnituresRequestMessage.ID = 5848;
        return HavenBagFurnituresRequestMessage;
    })(NetworkMessage);
    Protocol.HavenBagFurnituresRequestMessage = HavenBagFurnituresRequestMessage;
    var HavenBagPackListMessage = (function(_super) {
        __extends(HavenBagPackListMessage, _super);

        function HavenBagPackListMessage() {
            this.packIds = [];
            _super.call(this)
        }
        HavenBagPackListMessage.prototype.getMessageId = function() {
            return HavenBagPackListMessage.ID;
        };
        HavenBagPackListMessage.prototype.reset = function() {
            this.packIds = [];
        };
        HavenBagPackListMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        HavenBagPackListMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        HavenBagPackListMessage.prototype.serialize = function(output) {
            this.serializeAs_HavenBagPackListMessage(output);
        };
        HavenBagPackListMessage.prototype.deserialize = function(input) {
            this.deserializeAs_HavenBagPackListMessage(input);
        };
        HavenBagPackListMessage.prototype.serializeAs_HavenBagPackListMessage = function(output) {
            output.writeShort(this.packIds.length);
            for (var _i1 = 0; _i1 < this.packIds.length; _i1++) {
                output.writeByte(this.packIds[_i1]);
            }
        };
        HavenBagPackListMessage.prototype.deserializeAs_HavenBagPackListMessage = function(input) {
            var _val1 = 0;
            var _packIdsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _packIdsLen; _i1++) {
                _val1 = input.readByte();
                this.packIds.push(_val1);
            }
        };
        HavenBagPackListMessage.ID = 7074;
        return HavenBagPackListMessage;
    })(NetworkMessage);
    Protocol.HavenBagPackListMessage = HavenBagPackListMessage;
    var HavenBagRoomUpdateMessage = (function(_super) {
        __extends(HavenBagRoomUpdateMessage, _super);

        function HavenBagRoomUpdateMessage() {
            this.action = 0;
            this.roomsPreview = [];
            _super.call(this)
        }
        HavenBagRoomUpdateMessage.prototype.getMessageId = function() {
            return HavenBagRoomUpdateMessage.ID;
        };
        HavenBagRoomUpdateMessage.prototype.reset = function() {
            this.action = 0;
            this.roomsPreview = [];
        };
        HavenBagRoomUpdateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        HavenBagRoomUpdateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        HavenBagRoomUpdateMessage.prototype.serialize = function(output) {
            this.serializeAs_HavenBagRoomUpdateMessage(output);
        };
        HavenBagRoomUpdateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_HavenBagRoomUpdateMessage(input);
        };
        HavenBagRoomUpdateMessage.prototype.serializeAs_HavenBagRoomUpdateMessage = function(output) {
            output.writeByte(this.action);
            output.writeShort(this.roomsPreview.length);
            for (var _i2 = 0; _i2 < this.roomsPreview.length; _i2++) {
                (this.roomsPreview[_i2]).serializeAs_HavenBagRoomPreviewInformation(output);
            }
        };
        HavenBagRoomUpdateMessage.prototype.deserializeAs_HavenBagRoomUpdateMessage = function(input) {
            var _item2 = null;
            this.action = input.readByte();
            if (this.action < 0) {
                throw new Error("Forbidden value (" + this.action + ") on element of HavenBagRoomUpdateMessage.action.");
            }
            var _roomsPreviewLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _roomsPreviewLen; _i2++) {
                _item2 = new HavenBagRoomPreviewInformation();
                _item2.deserialize(input);
                this.roomsPreview.push(_item2);
            }
        };
        HavenBagRoomUpdateMessage.ID = 1486;
        return HavenBagRoomUpdateMessage;
    })(NetworkMessage);
    Protocol.HavenBagRoomUpdateMessage = HavenBagRoomUpdateMessage;
    var KickHavenBagRequestMessage = (function(_super) {
        __extends(KickHavenBagRequestMessage, _super);

        function KickHavenBagRequestMessage() {
            this.guestId = 0;
            _super.call(this)
        }
        KickHavenBagRequestMessage.prototype.getMessageId = function() {
            return KickHavenBagRequestMessage.ID;
        };
        KickHavenBagRequestMessage.prototype.reset = function() {
            this.guestId = 0;
        };
        KickHavenBagRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        KickHavenBagRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        KickHavenBagRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_KickHavenBagRequestMessage(output);
        };
        KickHavenBagRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_KickHavenBagRequestMessage(input);
        };
        KickHavenBagRequestMessage.prototype.serializeAs_KickHavenBagRequestMessage = function(output) {
            if (this.guestId < 0 || this.guestId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.guestId + ") on element guestId.");
            }
            output.writeVarLong(this.guestId);
        };
        KickHavenBagRequestMessage.prototype.deserializeAs_KickHavenBagRequestMessage = function(input) {
            this.guestId = input.readVarUhLong();
            if (this.guestId < 0 || this.guestId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.guestId + ") on element of KickHavenBagRequestMessage.guestId.");
            }
        };
        KickHavenBagRequestMessage.ID = 9331;
        return KickHavenBagRequestMessage;
    })(NetworkMessage);
    Protocol.KickHavenBagRequestMessage = KickHavenBagRequestMessage;
    var HavenBagPermissionsUpdateMessage = (function(_super) {
        __extends(HavenBagPermissionsUpdateMessage, _super);

        function HavenBagPermissionsUpdateMessage() {
            this.permissions = 0;
            _super.call(this)
        }
        HavenBagPermissionsUpdateMessage.prototype.getMessageId = function() {
            return HavenBagPermissionsUpdateMessage.ID;
        };
        HavenBagPermissionsUpdateMessage.prototype.reset = function() {
            this.permissions = 0;
        };
        HavenBagPermissionsUpdateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        HavenBagPermissionsUpdateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        HavenBagPermissionsUpdateMessage.prototype.serialize = function(output) {
            this.serializeAs_HavenBagPermissionsUpdateMessage(output);
        };
        HavenBagPermissionsUpdateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_HavenBagPermissionsUpdateMessage(input);
        };
        HavenBagPermissionsUpdateMessage.prototype.serializeAs_HavenBagPermissionsUpdateMessage = function(output) {
            if (this.permissions < 0) {
                throw new Error("Forbidden value (" + this.permissions + ") on element permissions.");
            }
            output.writeInt(this.permissions);
        };
        HavenBagPermissionsUpdateMessage.prototype.deserializeAs_HavenBagPermissionsUpdateMessage = function(input) {
            this.permissions = input.readInt();
            if (this.permissions < 0) {
                throw new Error("Forbidden value (" + this.permissions + ") on element of HavenBagPermissionsUpdateMessage.permissions.");
            }
        };
        HavenBagPermissionsUpdateMessage.ID = 1466;
        return HavenBagPermissionsUpdateMessage;
    })(NetworkMessage);
    Protocol.HavenBagPermissionsUpdateMessage = HavenBagPermissionsUpdateMessage;
    var HavenBagPermissionsUpdateRequestMessage = (function(_super) {
        __extends(HavenBagPermissionsUpdateRequestMessage, _super);

        function HavenBagPermissionsUpdateRequestMessage() {
            this.permissions = 0;
            _super.call(this)
        }
        HavenBagPermissionsUpdateRequestMessage.prototype.getMessageId = function() {
            return HavenBagPermissionsUpdateRequestMessage.ID;
        };
        HavenBagPermissionsUpdateRequestMessage.prototype.reset = function() {
            this.permissions = 0;
        };
        HavenBagPermissionsUpdateRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        HavenBagPermissionsUpdateRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        HavenBagPermissionsUpdateRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_HavenBagPermissionsUpdateRequestMessage(output);
        };
        HavenBagPermissionsUpdateRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_HavenBagPermissionsUpdateRequestMessage(input);
        };
        HavenBagPermissionsUpdateRequestMessage.prototype.serializeAs_HavenBagPermissionsUpdateRequestMessage = function(output) {
            if (this.permissions < 0) {
                throw new Error("Forbidden value (" + this.permissions + ") on element permissions.");
            }
            output.writeInt(this.permissions);
        };
        HavenBagPermissionsUpdateRequestMessage.prototype.deserializeAs_HavenBagPermissionsUpdateRequestMessage = function(input) {
            this.permissions = input.readInt();
            if (this.permissions < 0) {
                throw new Error("Forbidden value (" + this.permissions + ") on element of HavenBagPermissionsUpdateRequestMessage.permissions.");
            }
        };
        HavenBagPermissionsUpdateRequestMessage.ID = 4397;
        return HavenBagPermissionsUpdateRequestMessage;
    })(NetworkMessage);
    Protocol.HavenBagPermissionsUpdateRequestMessage = HavenBagPermissionsUpdateRequestMessage;
    var InviteInHavenBagClosedMessage = (function(_super) {
        __extends(InviteInHavenBagClosedMessage, _super);

        function InviteInHavenBagClosedMessage() {
            this.hostInformations = new CharacterMinimalInformations();
            _super.call(this)
        }
        InviteInHavenBagClosedMessage.prototype.getMessageId = function() {
            return InviteInHavenBagClosedMessage.ID;
        };
        InviteInHavenBagClosedMessage.prototype.reset = function() {
            this.hostInformations = new CharacterMinimalInformations();
        };
        InviteInHavenBagClosedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        InviteInHavenBagClosedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        InviteInHavenBagClosedMessage.prototype.serialize = function(output) {
            this.serializeAs_InviteInHavenBagClosedMessage(output);
        };
        InviteInHavenBagClosedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_InviteInHavenBagClosedMessage(input);
        };
        InviteInHavenBagClosedMessage.prototype.serializeAs_InviteInHavenBagClosedMessage = function(output) {
            this.hostInformations.serializeAs_CharacterMinimalInformations(output);
        };
        InviteInHavenBagClosedMessage.prototype.deserializeAs_InviteInHavenBagClosedMessage = function(input) {
            this.hostInformations = new CharacterMinimalInformations();
            this.hostInformations.deserialize(input);
        };
        InviteInHavenBagClosedMessage.ID = 5649;
        return InviteInHavenBagClosedMessage;
    })(NetworkMessage);
    Protocol.InviteInHavenBagClosedMessage = InviteInHavenBagClosedMessage;
    var InviteInHavenBagMessage = (function(_super) {
        __extends(InviteInHavenBagMessage, _super);

        function InviteInHavenBagMessage() {
            this.guestInformations = new CharacterMinimalInformations();
            this.accept = false;
            _super.call(this)
        }
        InviteInHavenBagMessage.prototype.getMessageId = function() {
            return InviteInHavenBagMessage.ID;
        };
        InviteInHavenBagMessage.prototype.reset = function() {
            this.guestInformations = new CharacterMinimalInformations();
            this.accept = false;
        };
        InviteInHavenBagMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        InviteInHavenBagMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        InviteInHavenBagMessage.prototype.serialize = function(output) {
            this.serializeAs_InviteInHavenBagMessage(output);
        };
        InviteInHavenBagMessage.prototype.deserialize = function(input) {
            this.deserializeAs_InviteInHavenBagMessage(input);
        };
        InviteInHavenBagMessage.prototype.serializeAs_InviteInHavenBagMessage = function(output) {
            this.guestInformations.serializeAs_CharacterMinimalInformations(output);
            output.writeBoolean(this.accept);
        };
        InviteInHavenBagMessage.prototype.deserializeAs_InviteInHavenBagMessage = function(input) {
            this.guestInformations = new CharacterMinimalInformations();
            this.guestInformations.deserialize(input);
            this.accept = input.readBoolean();
        };
        InviteInHavenBagMessage.ID = 5627;
        return InviteInHavenBagMessage;
    })(NetworkMessage);
    Protocol.InviteInHavenBagMessage = InviteInHavenBagMessage;
    var InviteInHavenBagOfferMessage = (function(_super) {
        __extends(InviteInHavenBagOfferMessage, _super);

        function InviteInHavenBagOfferMessage() {
            this.hostInformations = new CharacterMinimalInformations();
            this.timeLeftBeforeCancel = 0;
            _super.call(this)
        }
        InviteInHavenBagOfferMessage.prototype.getMessageId = function() {
            return InviteInHavenBagOfferMessage.ID;
        };
        InviteInHavenBagOfferMessage.prototype.reset = function() {
            this.hostInformations = new CharacterMinimalInformations();
            this.timeLeftBeforeCancel = 0;
        };
        InviteInHavenBagOfferMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        InviteInHavenBagOfferMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        InviteInHavenBagOfferMessage.prototype.serialize = function(output) {
            this.serializeAs_InviteInHavenBagOfferMessage(output);
        };
        InviteInHavenBagOfferMessage.prototype.deserialize = function(input) {
            this.deserializeAs_InviteInHavenBagOfferMessage(input);
        };
        InviteInHavenBagOfferMessage.prototype.serializeAs_InviteInHavenBagOfferMessage = function(output) {
            this.hostInformations.serializeAs_CharacterMinimalInformations(output);
            output.writeVarInt(this.timeLeftBeforeCancel);
        };
        InviteInHavenBagOfferMessage.prototype.deserializeAs_InviteInHavenBagOfferMessage = function(input) {
            this.hostInformations = new CharacterMinimalInformations();
            this.hostInformations.deserialize(input);
            this.timeLeftBeforeCancel = input.readVarInt();
        };
        InviteInHavenBagOfferMessage.ID = 2889;
        return InviteInHavenBagOfferMessage;
    })(NetworkMessage);
    Protocol.InviteInHavenBagOfferMessage = InviteInHavenBagOfferMessage;
    var TeleportHavenBagAnswerMessage = (function(_super) {
        __extends(TeleportHavenBagAnswerMessage, _super);

        function TeleportHavenBagAnswerMessage() {
            this.accept = false;
            _super.call(this)
        }
        TeleportHavenBagAnswerMessage.prototype.getMessageId = function() {
            return TeleportHavenBagAnswerMessage.ID;
        };
        TeleportHavenBagAnswerMessage.prototype.reset = function() {
            this.accept = false;
        };
        TeleportHavenBagAnswerMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TeleportHavenBagAnswerMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TeleportHavenBagAnswerMessage.prototype.serialize = function(output) {
            this.serializeAs_TeleportHavenBagAnswerMessage(output);
        };
        TeleportHavenBagAnswerMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TeleportHavenBagAnswerMessage(input);
        };
        TeleportHavenBagAnswerMessage.prototype.serializeAs_TeleportHavenBagAnswerMessage = function(output) {
            output.writeBoolean(this.accept);
        };
        TeleportHavenBagAnswerMessage.prototype.deserializeAs_TeleportHavenBagAnswerMessage = function(input) {
            this.accept = input.readBoolean();
        };
        TeleportHavenBagAnswerMessage.ID = 205;
        return TeleportHavenBagAnswerMessage;
    })(NetworkMessage);
    Protocol.TeleportHavenBagAnswerMessage = TeleportHavenBagAnswerMessage;
    var TeleportHavenBagRequestMessage = (function(_super) {
        __extends(TeleportHavenBagRequestMessage, _super);

        function TeleportHavenBagRequestMessage() {
            this.guestId = 0;
            _super.call(this)
        }
        TeleportHavenBagRequestMessage.prototype.getMessageId = function() {
            return TeleportHavenBagRequestMessage.ID;
        };
        TeleportHavenBagRequestMessage.prototype.reset = function() {
            this.guestId = 0;
        };
        TeleportHavenBagRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TeleportHavenBagRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TeleportHavenBagRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_TeleportHavenBagRequestMessage(output);
        };
        TeleportHavenBagRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TeleportHavenBagRequestMessage(input);
        };
        TeleportHavenBagRequestMessage.prototype.serializeAs_TeleportHavenBagRequestMessage = function(output) {
            if (this.guestId < 0 || this.guestId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.guestId + ") on element guestId.");
            }
            output.writeVarLong(this.guestId);
        };
        TeleportHavenBagRequestMessage.prototype.deserializeAs_TeleportHavenBagRequestMessage = function(input) {
            this.guestId = input.readVarUhLong();
            if (this.guestId < 0 || this.guestId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.guestId + ") on element of TeleportHavenBagRequestMessage.guestId.");
            }
        };
        TeleportHavenBagRequestMessage.ID = 5508;
        return TeleportHavenBagRequestMessage;
    })(NetworkMessage);
    Protocol.TeleportHavenBagRequestMessage = TeleportHavenBagRequestMessage;
    var OpenHavenBagFurnitureSequenceRequestMessage = (function(_super) {
        __extends(OpenHavenBagFurnitureSequenceRequestMessage, _super);

        function OpenHavenBagFurnitureSequenceRequestMessage() {

            _super.call(this)
        }
        OpenHavenBagFurnitureSequenceRequestMessage.prototype.getMessageId = function() {
            return OpenHavenBagFurnitureSequenceRequestMessage.ID;
        };
        OpenHavenBagFurnitureSequenceRequestMessage.prototype.reset = function() {

        };
        OpenHavenBagFurnitureSequenceRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        OpenHavenBagFurnitureSequenceRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        OpenHavenBagFurnitureSequenceRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_OpenHavenBagFurnitureSequenceRequestMessage(output);
        };
        OpenHavenBagFurnitureSequenceRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_OpenHavenBagFurnitureSequenceRequestMessage(input);
        };
        OpenHavenBagFurnitureSequenceRequestMessage.prototype.serializeAs_OpenHavenBagFurnitureSequenceRequestMessage = function(output) {

        };
        OpenHavenBagFurnitureSequenceRequestMessage.prototype.deserializeAs_OpenHavenBagFurnitureSequenceRequestMessage = function(input) {

        };
        OpenHavenBagFurnitureSequenceRequestMessage.ID = 2398;
        return OpenHavenBagFurnitureSequenceRequestMessage;
    })(NetworkMessage);
    Protocol.OpenHavenBagFurnitureSequenceRequestMessage = OpenHavenBagFurnitureSequenceRequestMessage;
    var AccountHouseMessage = (function(_super) {
        __extends(AccountHouseMessage, _super);

        function AccountHouseMessage() {
            this.houses = [];
            _super.call(this)
        }
        AccountHouseMessage.prototype.getMessageId = function() {
            return AccountHouseMessage.ID;
        };
        AccountHouseMessage.prototype.reset = function() {
            this.houses = [];
        };
        AccountHouseMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AccountHouseMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AccountHouseMessage.prototype.serialize = function(output) {
            this.serializeAs_AccountHouseMessage(output);
        };
        AccountHouseMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AccountHouseMessage(input);
        };
        AccountHouseMessage.prototype.serializeAs_AccountHouseMessage = function(output) {
            output.writeShort(this.houses.length);
            for (var _i1 = 0; _i1 < this.houses.length; _i1++) {
                (this.houses[_i1]).serializeAs_AccountHouseInformations(output);
            }
        };
        AccountHouseMessage.prototype.deserializeAs_AccountHouseMessage = function(input) {
            var _item1 = null;
            var _housesLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _housesLen; _i1++) {
                _item1 = new AccountHouseInformations();
                _item1.deserialize(input);
                this.houses.push(_item1);
            }
        };
        AccountHouseMessage.ID = 6480;
        return AccountHouseMessage;
    })(NetworkMessage);
    Protocol.AccountHouseMessage = AccountHouseMessage;
    var HouseGuildNoneMessage = (function(_super) {
        __extends(HouseGuildNoneMessage, _super);

        function HouseGuildNoneMessage() {
            this.houseId = 0;
            this.instanceId = 0;
            this.secondHand = false;
            _super.call(this)
        }
        HouseGuildNoneMessage.prototype.getMessageId = function() {
            return HouseGuildNoneMessage.ID;
        };
        HouseGuildNoneMessage.prototype.reset = function() {
            this.houseId = 0;
            this.instanceId = 0;
            this.secondHand = false;
        };
        HouseGuildNoneMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        HouseGuildNoneMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        HouseGuildNoneMessage.prototype.serialize = function(output) {
            this.serializeAs_HouseGuildNoneMessage(output);
        };
        HouseGuildNoneMessage.prototype.deserialize = function(input) {
            this.deserializeAs_HouseGuildNoneMessage(input);
        };
        HouseGuildNoneMessage.prototype.serializeAs_HouseGuildNoneMessage = function(output) {
            if (this.houseId < 0) {
                throw new Error("Forbidden value (" + this.houseId + ") on element houseId.");
            }
            output.writeVarInt(this.houseId);
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element instanceId.");
            }
            output.writeInt(this.instanceId);
            output.writeBoolean(this.secondHand);
        };
        HouseGuildNoneMessage.prototype.deserializeAs_HouseGuildNoneMessage = function(input) {
            this.houseId = input.readVarUhInt();
            if (this.houseId < 0) {
                throw new Error("Forbidden value (" + this.houseId + ") on element of HouseGuildNoneMessage.houseId.");
            }
            this.instanceId = input.readInt();
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element of HouseGuildNoneMessage.instanceId.");
            }
            this.secondHand = input.readBoolean();
        };
        HouseGuildNoneMessage.ID = 9517;
        return HouseGuildNoneMessage;
    })(NetworkMessage);
    Protocol.HouseGuildNoneMessage = HouseGuildNoneMessage;
    var HouseGuildRightsMessage = (function(_super) {
        __extends(HouseGuildRightsMessage, _super);

        function HouseGuildRightsMessage() {
            this.houseId = 0;
            this.instanceId = 0;
            this.secondHand = false;
            this.guildInfo = new GuildInformations();
            this.rights = 0;
            _super.call(this)
        }
        HouseGuildRightsMessage.prototype.getMessageId = function() {
            return HouseGuildRightsMessage.ID;
        };
        HouseGuildRightsMessage.prototype.reset = function() {
            this.houseId = 0;
            this.instanceId = 0;
            this.secondHand = false;
            this.guildInfo = new GuildInformations();
            this.rights = 0;
        };
        HouseGuildRightsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        HouseGuildRightsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        HouseGuildRightsMessage.prototype.serialize = function(output) {
            this.serializeAs_HouseGuildRightsMessage(output);
        };
        HouseGuildRightsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_HouseGuildRightsMessage(input);
        };
        HouseGuildRightsMessage.prototype.serializeAs_HouseGuildRightsMessage = function(output) {
            if (this.houseId < 0) {
                throw new Error("Forbidden value (" + this.houseId + ") on element houseId.");
            }
            output.writeVarInt(this.houseId);
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element instanceId.");
            }
            output.writeInt(this.instanceId);
            output.writeBoolean(this.secondHand);
            this.guildInfo.serializeAs_GuildInformations(output);
            if (this.rights < 0) {
                throw new Error("Forbidden value (" + this.rights + ") on element rights.");
            }
            output.writeVarInt(this.rights);
        };
        HouseGuildRightsMessage.prototype.deserializeAs_HouseGuildRightsMessage = function(input) {
            this.houseId = input.readVarUhInt();
            if (this.houseId < 0) {
                throw new Error("Forbidden value (" + this.houseId + ") on element of HouseGuildRightsMessage.houseId.");
            }
            this.instanceId = input.readInt();
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element of HouseGuildRightsMessage.instanceId.");
            }
            this.secondHand = input.readBoolean();
            this.guildInfo = new GuildInformations();
            this.guildInfo.deserialize(input);
            this.rights = input.readVarUhInt();
            if (this.rights < 0) {
                throw new Error("Forbidden value (" + this.rights + ") on element of HouseGuildRightsMessage.rights.");
            }
        };
        HouseGuildRightsMessage.ID = 8301;
        return HouseGuildRightsMessage;
    })(NetworkMessage);
    Protocol.HouseGuildRightsMessage = HouseGuildRightsMessage;
    var HouseGuildRightsViewMessage = (function(_super) {
        __extends(HouseGuildRightsViewMessage, _super);

        function HouseGuildRightsViewMessage() {
            this.houseId = 0;
            this.instanceId = 0;
            _super.call(this)
        }
        HouseGuildRightsViewMessage.prototype.getMessageId = function() {
            return HouseGuildRightsViewMessage.ID;
        };
        HouseGuildRightsViewMessage.prototype.reset = function() {
            this.houseId = 0;
            this.instanceId = 0;
        };
        HouseGuildRightsViewMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        HouseGuildRightsViewMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        HouseGuildRightsViewMessage.prototype.serialize = function(output) {
            this.serializeAs_HouseGuildRightsViewMessage(output);
        };
        HouseGuildRightsViewMessage.prototype.deserialize = function(input) {
            this.deserializeAs_HouseGuildRightsViewMessage(input);
        };
        HouseGuildRightsViewMessage.prototype.serializeAs_HouseGuildRightsViewMessage = function(output) {
            if (this.houseId < 0) {
                throw new Error("Forbidden value (" + this.houseId + ") on element houseId.");
            }
            output.writeVarInt(this.houseId);
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element instanceId.");
            }
            output.writeInt(this.instanceId);
        };
        HouseGuildRightsViewMessage.prototype.deserializeAs_HouseGuildRightsViewMessage = function(input) {
            this.houseId = input.readVarUhInt();
            if (this.houseId < 0) {
                throw new Error("Forbidden value (" + this.houseId + ") on element of HouseGuildRightsViewMessage.houseId.");
            }
            this.instanceId = input.readInt();
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element of HouseGuildRightsViewMessage.instanceId.");
            }
        };
        HouseGuildRightsViewMessage.ID = 1431;
        return HouseGuildRightsViewMessage;
    })(NetworkMessage);
    Protocol.HouseGuildRightsViewMessage = HouseGuildRightsViewMessage;
    var HouseGuildShareRequestMessage = (function(_super) {
        __extends(HouseGuildShareRequestMessage, _super);

        function HouseGuildShareRequestMessage() {
            this.houseId = 0;
            this.instanceId = 0;
            this.enable = false;
            this.rights = 0;
            _super.call(this)
        }
        HouseGuildShareRequestMessage.prototype.getMessageId = function() {
            return HouseGuildShareRequestMessage.ID;
        };
        HouseGuildShareRequestMessage.prototype.reset = function() {
            this.houseId = 0;
            this.instanceId = 0;
            this.enable = false;
            this.rights = 0;
        };
        HouseGuildShareRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        HouseGuildShareRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        HouseGuildShareRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_HouseGuildShareRequestMessage(output);
        };
        HouseGuildShareRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_HouseGuildShareRequestMessage(input);
        };
        HouseGuildShareRequestMessage.prototype.serializeAs_HouseGuildShareRequestMessage = function(output) {
            if (this.houseId < 0) {
                throw new Error("Forbidden value (" + this.houseId + ") on element houseId.");
            }
            output.writeVarInt(this.houseId);
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element instanceId.");
            }
            output.writeInt(this.instanceId);
            output.writeBoolean(this.enable);
            if (this.rights < 0) {
                throw new Error("Forbidden value (" + this.rights + ") on element rights.");
            }
            output.writeVarInt(this.rights);
        };
        HouseGuildShareRequestMessage.prototype.deserializeAs_HouseGuildShareRequestMessage = function(input) {
            this.houseId = input.readVarUhInt();
            if (this.houseId < 0) {
                throw new Error("Forbidden value (" + this.houseId + ") on element of HouseGuildShareRequestMessage.houseId.");
            }
            this.instanceId = input.readInt();
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element of HouseGuildShareRequestMessage.instanceId.");
            }
            this.enable = input.readBoolean();
            this.rights = input.readVarUhInt();
            if (this.rights < 0) {
                throw new Error("Forbidden value (" + this.rights + ") on element of HouseGuildShareRequestMessage.rights.");
            }
        };
        HouseGuildShareRequestMessage.ID = 5396;
        return HouseGuildShareRequestMessage;
    })(NetworkMessage);
    Protocol.HouseGuildShareRequestMessage = HouseGuildShareRequestMessage;
    var HouseBuyRequestMessage = (function(_super) {
        __extends(HouseBuyRequestMessage, _super);

        function HouseBuyRequestMessage() {
            this.proposedPrice = 0;
            _super.call(this)
        }
        HouseBuyRequestMessage.prototype.getMessageId = function() {
            return HouseBuyRequestMessage.ID;
        };
        HouseBuyRequestMessage.prototype.reset = function() {
            this.proposedPrice = 0;
        };
        HouseBuyRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        HouseBuyRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        HouseBuyRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_HouseBuyRequestMessage(output);
        };
        HouseBuyRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_HouseBuyRequestMessage(input);
        };
        HouseBuyRequestMessage.prototype.serializeAs_HouseBuyRequestMessage = function(output) {
            if (this.proposedPrice < 0 || this.proposedPrice > 9007199254740990) {
                throw new Error("Forbidden value (" + this.proposedPrice + ") on element proposedPrice.");
            }
            output.writeVarLong(this.proposedPrice);
        };
        HouseBuyRequestMessage.prototype.deserializeAs_HouseBuyRequestMessage = function(input) {
            this.proposedPrice = input.readVarUhLong();
            if (this.proposedPrice < 0 || this.proposedPrice > 9007199254740990) {
                throw new Error("Forbidden value (" + this.proposedPrice + ") on element of HouseBuyRequestMessage.proposedPrice.");
            }
        };
        HouseBuyRequestMessage.ID = 3504;
        return HouseBuyRequestMessage;
    })(NetworkMessage);
    Protocol.HouseBuyRequestMessage = HouseBuyRequestMessage;
    var HouseBuyResultMessage = (function(_super) {
        __extends(HouseBuyResultMessage, _super);

        function HouseBuyResultMessage() {
            this.houseId = 0;
            this.instanceId = 0;
            this.secondHand = false;
            this.bought = false;
            this.realPrice = 0;
            _super.call(this)
        }
        HouseBuyResultMessage.prototype.getMessageId = function() {
            return HouseBuyResultMessage.ID;
        };
        HouseBuyResultMessage.prototype.reset = function() {
            this.houseId = 0;
            this.instanceId = 0;
            this.secondHand = false;
            this.bought = false;
            this.realPrice = 0;
        };
        HouseBuyResultMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        HouseBuyResultMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        HouseBuyResultMessage.prototype.serialize = function(output) {
            this.serializeAs_HouseBuyResultMessage(output);
        };
        HouseBuyResultMessage.prototype.deserialize = function(input) {
            this.deserializeAs_HouseBuyResultMessage(input);
        };
        HouseBuyResultMessage.prototype.serializeAs_HouseBuyResultMessage = function(output) {
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.secondHand);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.bought);
            output.writeByte(_box0);
            if (this.houseId < 0) {
                throw new Error("Forbidden value (" + this.houseId + ") on element houseId.");
            }
            output.writeVarInt(this.houseId);
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element instanceId.");
            }
            output.writeInt(this.instanceId);
            if (this.realPrice < 0 || this.realPrice > 9007199254740990) {
                throw new Error("Forbidden value (" + this.realPrice + ") on element realPrice.");
            }
            output.writeVarLong(this.realPrice);
        };
        HouseBuyResultMessage.prototype.deserializeAs_HouseBuyResultMessage = function(input) {
            this.deserializeByteBoxes(input);
            this.houseId = input.readVarUhInt();
            if (this.houseId < 0) {
                throw new Error("Forbidden value (" + this.houseId + ") on element of HouseBuyResultMessage.houseId.");
            }
            this.instanceId = input.readInt();
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element of HouseBuyResultMessage.instanceId.");
            }
            this.realPrice = input.readVarUhLong();
            if (this.realPrice < 0 || this.realPrice > 9007199254740990) {
                throw new Error("Forbidden value (" + this.realPrice + ") on element of HouseBuyResultMessage.realPrice.");
            }
        };
        HouseBuyResultMessage.ID = 7313;
        return HouseBuyResultMessage;
    })(NetworkMessage);
    Protocol.HouseBuyResultMessage = HouseBuyResultMessage;
    var HouseKickIndoorMerchantRequestMessage = (function(_super) {
        __extends(HouseKickIndoorMerchantRequestMessage, _super);

        function HouseKickIndoorMerchantRequestMessage() {
            this.cellId = 0;
            _super.call(this)
        }
        HouseKickIndoorMerchantRequestMessage.prototype.getMessageId = function() {
            return HouseKickIndoorMerchantRequestMessage.ID;
        };
        HouseKickIndoorMerchantRequestMessage.prototype.reset = function() {
            this.cellId = 0;
        };
        HouseKickIndoorMerchantRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        HouseKickIndoorMerchantRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        HouseKickIndoorMerchantRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_HouseKickIndoorMerchantRequestMessage(output);
        };
        HouseKickIndoorMerchantRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_HouseKickIndoorMerchantRequestMessage(input);
        };
        HouseKickIndoorMerchantRequestMessage.prototype.serializeAs_HouseKickIndoorMerchantRequestMessage = function(output) {
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
            }
            output.writeVarShort(this.cellId);
        };
        HouseKickIndoorMerchantRequestMessage.prototype.deserializeAs_HouseKickIndoorMerchantRequestMessage = function(input) {
            this.cellId = input.readVarUhShort();
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element of HouseKickIndoorMerchantRequestMessage.cellId.");
            }
        };
        HouseKickIndoorMerchantRequestMessage.ID = 3696;
        return HouseKickIndoorMerchantRequestMessage;
    })(NetworkMessage);
    Protocol.HouseKickIndoorMerchantRequestMessage = HouseKickIndoorMerchantRequestMessage;
    var HouseKickRequestMessage = (function(_super) {
        __extends(HouseKickRequestMessage, _super);

        function HouseKickRequestMessage() {
            this.id = 0;
            _super.call(this)
        }
        HouseKickRequestMessage.prototype.getMessageId = function() {
            return HouseKickRequestMessage.ID;
        };
        HouseKickRequestMessage.prototype.reset = function() {
            this.id = 0;
        };
        HouseKickRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        HouseKickRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        HouseKickRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_HouseKickRequestMessage(output);
        };
        HouseKickRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_HouseKickRequestMessage(input);
        };
        HouseKickRequestMessage.prototype.serializeAs_HouseKickRequestMessage = function(output) {
            if (this.id < 0 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarLong(this.id);
        };
        HouseKickRequestMessage.prototype.deserializeAs_HouseKickRequestMessage = function(input) {
            this.id = input.readVarUhLong();
            if (this.id < 0 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element of HouseKickRequestMessage.id.");
            }
        };
        HouseKickRequestMessage.ID = 3694;
        return HouseKickRequestMessage;
    })(NetworkMessage);
    Protocol.HouseKickRequestMessage = HouseKickRequestMessage;
    var LockableChangeCodeMessage = (function(_super) {
        __extends(LockableChangeCodeMessage, _super);

        function LockableChangeCodeMessage() {
            this.code = "";
            _super.call(this)
        }
        LockableChangeCodeMessage.prototype.getMessageId = function() {
            return LockableChangeCodeMessage.ID;
        };
        LockableChangeCodeMessage.prototype.reset = function() {
            this.code = "";
        };
        LockableChangeCodeMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        LockableChangeCodeMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        LockableChangeCodeMessage.prototype.serialize = function(output) {
            this.serializeAs_LockableChangeCodeMessage(output);
        };
        LockableChangeCodeMessage.prototype.deserialize = function(input) {
            this.deserializeAs_LockableChangeCodeMessage(input);
        };
        LockableChangeCodeMessage.prototype.serializeAs_LockableChangeCodeMessage = function(output) {
            output.writeUTF(this.code);
        };
        LockableChangeCodeMessage.prototype.deserializeAs_LockableChangeCodeMessage = function(input) {
            this.code = input.readUTF();
        };
        LockableChangeCodeMessage.ID = 2066;
        return LockableChangeCodeMessage;
    })(NetworkMessage);
    Protocol.LockableChangeCodeMessage = LockableChangeCodeMessage;
    var HouseLockFromInsideRequestMessage = (function(_super) {
        __extends(HouseLockFromInsideRequestMessage, _super);

        function HouseLockFromInsideRequestMessage() {

            _super.call(this)
        }
        HouseLockFromInsideRequestMessage.prototype.getMessageId = function() {
            return HouseLockFromInsideRequestMessage.ID;
        };
        HouseLockFromInsideRequestMessage.prototype.reset = function() {

        };
        HouseLockFromInsideRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        HouseLockFromInsideRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        HouseLockFromInsideRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_HouseLockFromInsideRequestMessage(output);
        };
        HouseLockFromInsideRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_HouseLockFromInsideRequestMessage(input);
        };
        HouseLockFromInsideRequestMessage.prototype.serializeAs_HouseLockFromInsideRequestMessage = function(output) {
            _super.prototype.serializeAs_LockableChangeCodeMessage.call(this, output);
        };
        HouseLockFromInsideRequestMessage.prototype.deserializeAs_HouseLockFromInsideRequestMessage = function(input) {
            _super.prototype.deserializeAs_LockableChangeCodeMessage.call(this, input);
        };
        HouseLockFromInsideRequestMessage.ID = 780;
        return HouseLockFromInsideRequestMessage;
    })(LockableChangeCodeMessage);
    Protocol.HouseLockFromInsideRequestMessage = HouseLockFromInsideRequestMessage;
    var HousePropertiesMessage = (function(_super) {
        __extends(HousePropertiesMessage, _super);

        function HousePropertiesMessage() {
            this.houseId = 0;
            this.doorsOnMap = [];
            this.properties = new HouseInstanceInformations();
            _super.call(this)
        }
        HousePropertiesMessage.prototype.getMessageId = function() {
            return HousePropertiesMessage.ID;
        };
        HousePropertiesMessage.prototype.reset = function() {
            this.houseId = 0;
            this.doorsOnMap = [];
            this.properties = new HouseInstanceInformations();
        };
        HousePropertiesMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        HousePropertiesMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        HousePropertiesMessage.prototype.serialize = function(output) {
            this.serializeAs_HousePropertiesMessage(output);
        };
        HousePropertiesMessage.prototype.deserialize = function(input) {
            this.deserializeAs_HousePropertiesMessage(input);
        };
        HousePropertiesMessage.prototype.serializeAs_HousePropertiesMessage = function(output) {
            if (this.houseId < 0) {
                throw new Error("Forbidden value (" + this.houseId + ") on element houseId.");
            }
            output.writeVarInt(this.houseId);
            output.writeShort(this.doorsOnMap.length);
            for (var _i2 = 0; _i2 < this.doorsOnMap.length; _i2++) {
                if (this.doorsOnMap[_i2] < 0) {
                    throw new Error("Forbidden value (" + this.doorsOnMap[_i2] + ") on element 2 (starting at 1) of doorsOnMap.");
                }
                output.writeInt(this.doorsOnMap[_i2]);
            }
            output.writeShort(this.properties.getTypeId());
            this.properties.serialize(output);
        };
        HousePropertiesMessage.prototype.deserializeAs_HousePropertiesMessage = function(input) {
            var _val2 = 0;
            this.houseId = input.readVarUhInt();
            if (this.houseId < 0) {
                throw new Error("Forbidden value (" + this.houseId + ") on element of HousePropertiesMessage.houseId.");
            }
            var _doorsOnMapLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _doorsOnMapLen; _i2++) {
                _val2 = input.readInt();
                if (_val2 < 0) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of doorsOnMap.");
                }
                this.doorsOnMap.push(_val2);
            }
            var _id3 = input.readUnsignedShort();
            this.properties = ProtocolTypeManager.getInstance(HouseInstanceInformations, _id3);
            this.properties.deserialize(input);
        };
        HousePropertiesMessage.ID = 3052;
        return HousePropertiesMessage;
    })(NetworkMessage);
    Protocol.HousePropertiesMessage = HousePropertiesMessage;
    var HouseSellRequestMessage = (function(_super) {
        __extends(HouseSellRequestMessage, _super);

        function HouseSellRequestMessage() {
            this.instanceId = 0;
            this.amount = 0;
            this.forSale = false;
            _super.call(this)
        }
        HouseSellRequestMessage.prototype.getMessageId = function() {
            return HouseSellRequestMessage.ID;
        };
        HouseSellRequestMessage.prototype.reset = function() {
            this.instanceId = 0;
            this.amount = 0;
            this.forSale = false;
        };
        HouseSellRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        HouseSellRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        HouseSellRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_HouseSellRequestMessage(output);
        };
        HouseSellRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_HouseSellRequestMessage(input);
        };
        HouseSellRequestMessage.prototype.serializeAs_HouseSellRequestMessage = function(output) {
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element instanceId.");
            }
            output.writeInt(this.instanceId);
            if (this.amount < 0 || this.amount > 9007199254740990) {
                throw new Error("Forbidden value (" + this.amount + ") on element amount.");
            }
            output.writeVarLong(this.amount);
            output.writeBoolean(this.forSale);
        };
        HouseSellRequestMessage.prototype.deserializeAs_HouseSellRequestMessage = function(input) {
            this.instanceId = input.readInt();
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element of HouseSellRequestMessage.instanceId.");
            }
            this.amount = input.readVarUhLong();
            if (this.amount < 0 || this.amount > 9007199254740990) {
                throw new Error("Forbidden value (" + this.amount + ") on element of HouseSellRequestMessage.amount.");
            }
            this.forSale = input.readBoolean();
        };
        HouseSellRequestMessage.ID = 1525;
        return HouseSellRequestMessage;
    })(NetworkMessage);
    Protocol.HouseSellRequestMessage = HouseSellRequestMessage;
    var HouseSellFromInsideRequestMessage = (function(_super) {
        __extends(HouseSellFromInsideRequestMessage, _super);

        function HouseSellFromInsideRequestMessage() {

            _super.call(this)
        }
        HouseSellFromInsideRequestMessage.prototype.getMessageId = function() {
            return HouseSellFromInsideRequestMessage.ID;
        };
        HouseSellFromInsideRequestMessage.prototype.reset = function() {

        };
        HouseSellFromInsideRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        HouseSellFromInsideRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        HouseSellFromInsideRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_HouseSellFromInsideRequestMessage(output);
        };
        HouseSellFromInsideRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_HouseSellFromInsideRequestMessage(input);
        };
        HouseSellFromInsideRequestMessage.prototype.serializeAs_HouseSellFromInsideRequestMessage = function(output) {
            _super.prototype.serializeAs_HouseSellRequestMessage.call(this, output);
        };
        HouseSellFromInsideRequestMessage.prototype.deserializeAs_HouseSellFromInsideRequestMessage = function(input) {
            _super.prototype.deserializeAs_HouseSellRequestMessage.call(this, input);
        };
        HouseSellFromInsideRequestMessage.ID = 6173;
        return HouseSellFromInsideRequestMessage;
    })(HouseSellRequestMessage);
    Protocol.HouseSellFromInsideRequestMessage = HouseSellFromInsideRequestMessage;
    var HouseSellingUpdateMessage = (function(_super) {
        __extends(HouseSellingUpdateMessage, _super);

        function HouseSellingUpdateMessage() {
            this.houseId = 0;
            this.instanceId = 0;
            this.secondHand = false;
            this.realPrice = 0;
            this.buyerName = "";
            _super.call(this)
        }
        HouseSellingUpdateMessage.prototype.getMessageId = function() {
            return HouseSellingUpdateMessage.ID;
        };
        HouseSellingUpdateMessage.prototype.reset = function() {
            this.houseId = 0;
            this.instanceId = 0;
            this.secondHand = false;
            this.realPrice = 0;
            this.buyerName = "";
        };
        HouseSellingUpdateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        HouseSellingUpdateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        HouseSellingUpdateMessage.prototype.serialize = function(output) {
            this.serializeAs_HouseSellingUpdateMessage(output);
        };
        HouseSellingUpdateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_HouseSellingUpdateMessage(input);
        };
        HouseSellingUpdateMessage.prototype.serializeAs_HouseSellingUpdateMessage = function(output) {
            if (this.houseId < 0) {
                throw new Error("Forbidden value (" + this.houseId + ") on element houseId.");
            }
            output.writeVarInt(this.houseId);
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element instanceId.");
            }
            output.writeInt(this.instanceId);
            output.writeBoolean(this.secondHand);
            if (this.realPrice < 0 || this.realPrice > 9007199254740990) {
                throw new Error("Forbidden value (" + this.realPrice + ") on element realPrice.");
            }
            output.writeVarLong(this.realPrice);
            output.writeUTF(this.buyerName);
        };
        HouseSellingUpdateMessage.prototype.deserializeAs_HouseSellingUpdateMessage = function(input) {
            this.houseId = input.readVarUhInt();
            if (this.houseId < 0) {
                throw new Error("Forbidden value (" + this.houseId + ") on element of HouseSellingUpdateMessage.houseId.");
            }
            this.instanceId = input.readInt();
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element of HouseSellingUpdateMessage.instanceId.");
            }
            this.secondHand = input.readBoolean();
            this.realPrice = input.readVarUhLong();
            if (this.realPrice < 0 || this.realPrice > 9007199254740990) {
                throw new Error("Forbidden value (" + this.realPrice + ") on element of HouseSellingUpdateMessage.realPrice.");
            }
            this.buyerName = input.readUTF();
        };
        HouseSellingUpdateMessage.ID = 8778;
        return HouseSellingUpdateMessage;
    })(NetworkMessage);
    Protocol.HouseSellingUpdateMessage = HouseSellingUpdateMessage;
    var HouseToSellFilterMessage = (function(_super) {
        __extends(HouseToSellFilterMessage, _super);

        function HouseToSellFilterMessage() {
            this.areaId = 0;
            this.atLeastNbRoom = 0;
            this.atLeastNbChest = 0;
            this.skillRequested = 0;
            this.maxPrice = 0;
            this.orderBy = 0;
            _super.call(this)
        }
        HouseToSellFilterMessage.prototype.getMessageId = function() {
            return HouseToSellFilterMessage.ID;
        };
        HouseToSellFilterMessage.prototype.reset = function() {
            this.areaId = 0;
            this.atLeastNbRoom = 0;
            this.atLeastNbChest = 0;
            this.skillRequested = 0;
            this.maxPrice = 0;
            this.orderBy = 0;
        };
        HouseToSellFilterMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        HouseToSellFilterMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        HouseToSellFilterMessage.prototype.serialize = function(output) {
            this.serializeAs_HouseToSellFilterMessage(output);
        };
        HouseToSellFilterMessage.prototype.deserialize = function(input) {
            this.deserializeAs_HouseToSellFilterMessage(input);
        };
        HouseToSellFilterMessage.prototype.serializeAs_HouseToSellFilterMessage = function(output) {
            output.writeInt(this.areaId);
            if (this.atLeastNbRoom < 0) {
                throw new Error("Forbidden value (" + this.atLeastNbRoom + ") on element atLeastNbRoom.");
            }
            output.writeByte(this.atLeastNbRoom);
            if (this.atLeastNbChest < 0) {
                throw new Error("Forbidden value (" + this.atLeastNbChest + ") on element atLeastNbChest.");
            }
            output.writeByte(this.atLeastNbChest);
            if (this.skillRequested < 0) {
                throw new Error("Forbidden value (" + this.skillRequested + ") on element skillRequested.");
            }
            output.writeVarShort(this.skillRequested);
            if (this.maxPrice < 0 || this.maxPrice > 9007199254740990) {
                throw new Error("Forbidden value (" + this.maxPrice + ") on element maxPrice.");
            }
            output.writeVarLong(this.maxPrice);
            output.writeByte(this.orderBy);
        };
        HouseToSellFilterMessage.prototype.deserializeAs_HouseToSellFilterMessage = function(input) {
            this.areaId = input.readInt();
            this.atLeastNbRoom = input.readByte();
            if (this.atLeastNbRoom < 0) {
                throw new Error("Forbidden value (" + this.atLeastNbRoom + ") on element of HouseToSellFilterMessage.atLeastNbRoom.");
            }
            this.atLeastNbChest = input.readByte();
            if (this.atLeastNbChest < 0) {
                throw new Error("Forbidden value (" + this.atLeastNbChest + ") on element of HouseToSellFilterMessage.atLeastNbChest.");
            }
            this.skillRequested = input.readVarUhShort();
            if (this.skillRequested < 0) {
                throw new Error("Forbidden value (" + this.skillRequested + ") on element of HouseToSellFilterMessage.skillRequested.");
            }
            this.maxPrice = input.readVarUhLong();
            if (this.maxPrice < 0 || this.maxPrice > 9007199254740990) {
                throw new Error("Forbidden value (" + this.maxPrice + ") on element of HouseToSellFilterMessage.maxPrice.");
            }
            this.orderBy = input.readByte();
            if (this.orderBy < 0) {
                throw new Error("Forbidden value (" + this.orderBy + ") on element of HouseToSellFilterMessage.orderBy.");
            }
        };
        HouseToSellFilterMessage.ID = 7868;
        return HouseToSellFilterMessage;
    })(NetworkMessage);
    Protocol.HouseToSellFilterMessage = HouseToSellFilterMessage;
    var HouseToSellListMessage = (function(_super) {
        __extends(HouseToSellListMessage, _super);

        function HouseToSellListMessage() {
            this.pageIndex = 0;
            this.totalPage = 0;
            this.houseList = [];
            _super.call(this)
        }
        HouseToSellListMessage.prototype.getMessageId = function() {
            return HouseToSellListMessage.ID;
        };
        HouseToSellListMessage.prototype.reset = function() {
            this.pageIndex = 0;
            this.totalPage = 0;
            this.houseList = [];
        };
        HouseToSellListMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        HouseToSellListMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        HouseToSellListMessage.prototype.serialize = function(output) {
            this.serializeAs_HouseToSellListMessage(output);
        };
        HouseToSellListMessage.prototype.deserialize = function(input) {
            this.deserializeAs_HouseToSellListMessage(input);
        };
        HouseToSellListMessage.prototype.serializeAs_HouseToSellListMessage = function(output) {
            if (this.pageIndex < 0) {
                throw new Error("Forbidden value (" + this.pageIndex + ") on element pageIndex.");
            }
            output.writeVarShort(this.pageIndex);
            if (this.totalPage < 0) {
                throw new Error("Forbidden value (" + this.totalPage + ") on element totalPage.");
            }
            output.writeVarShort(this.totalPage);
            output.writeShort(this.houseList.length);
            for (var _i3 = 0; _i3 < this.houseList.length; _i3++) {
                (this.houseList[_i3]).serializeAs_HouseInformationsForSell(output);
            }
        };
        HouseToSellListMessage.prototype.deserializeAs_HouseToSellListMessage = function(input) {
            var _item3 = null;
            this.pageIndex = input.readVarUhShort();
            if (this.pageIndex < 0) {
                throw new Error("Forbidden value (" + this.pageIndex + ") on element of HouseToSellListMessage.pageIndex.");
            }
            this.totalPage = input.readVarUhShort();
            if (this.totalPage < 0) {
                throw new Error("Forbidden value (" + this.totalPage + ") on element of HouseToSellListMessage.totalPage.");
            }
            var _houseListLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _houseListLen; _i3++) {
                _item3 = new HouseInformationsForSell();
                _item3.deserialize(input);
                this.houseList.push(_item3);
            }
        };
        HouseToSellListMessage.ID = 7851;
        return HouseToSellListMessage;
    })(NetworkMessage);
    Protocol.HouseToSellListMessage = HouseToSellListMessage;
    var HouseToSellListRequestMessage = (function(_super) {
        __extends(HouseToSellListRequestMessage, _super);

        function HouseToSellListRequestMessage() {
            this.pageIndex = 0;
            _super.call(this)
        }
        HouseToSellListRequestMessage.prototype.getMessageId = function() {
            return HouseToSellListRequestMessage.ID;
        };
        HouseToSellListRequestMessage.prototype.reset = function() {
            this.pageIndex = 0;
        };
        HouseToSellListRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        HouseToSellListRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        HouseToSellListRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_HouseToSellListRequestMessage(output);
        };
        HouseToSellListRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_HouseToSellListRequestMessage(input);
        };
        HouseToSellListRequestMessage.prototype.serializeAs_HouseToSellListRequestMessage = function(output) {
            if (this.pageIndex < 0) {
                throw new Error("Forbidden value (" + this.pageIndex + ") on element pageIndex.");
            }
            output.writeVarShort(this.pageIndex);
        };
        HouseToSellListRequestMessage.prototype.deserializeAs_HouseToSellListRequestMessage = function(input) {
            this.pageIndex = input.readVarUhShort();
            if (this.pageIndex < 0) {
                throw new Error("Forbidden value (" + this.pageIndex + ") on element of HouseToSellListRequestMessage.pageIndex.");
            }
        };
        HouseToSellListRequestMessage.ID = 5809;
        return HouseToSellListRequestMessage;
    })(NetworkMessage);
    Protocol.HouseToSellListRequestMessage = HouseToSellListRequestMessage;
    var JobAllowMultiCraftRequestMessage = (function(_super) {
        __extends(JobAllowMultiCraftRequestMessage, _super);

        function JobAllowMultiCraftRequestMessage() {
            this.enabled = false;
            _super.call(this)
        }
        JobAllowMultiCraftRequestMessage.prototype.getMessageId = function() {
            return JobAllowMultiCraftRequestMessage.ID;
        };
        JobAllowMultiCraftRequestMessage.prototype.reset = function() {
            this.enabled = false;
        };
        JobAllowMultiCraftRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        JobAllowMultiCraftRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        JobAllowMultiCraftRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_JobAllowMultiCraftRequestMessage(output);
        };
        JobAllowMultiCraftRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_JobAllowMultiCraftRequestMessage(input);
        };
        JobAllowMultiCraftRequestMessage.prototype.serializeAs_JobAllowMultiCraftRequestMessage = function(output) {
            output.writeBoolean(this.enabled);
        };
        JobAllowMultiCraftRequestMessage.prototype.deserializeAs_JobAllowMultiCraftRequestMessage = function(input) {
            this.enabled = input.readBoolean();
        };
        JobAllowMultiCraftRequestMessage.ID = 6296;
        return JobAllowMultiCraftRequestMessage;
    })(NetworkMessage);
    Protocol.JobAllowMultiCraftRequestMessage = JobAllowMultiCraftRequestMessage;
    var JobBookSubscriptionMessage = (function(_super) {
        __extends(JobBookSubscriptionMessage, _super);

        function JobBookSubscriptionMessage() {
            this.subscriptions = [];
            _super.call(this)
        }
        JobBookSubscriptionMessage.prototype.getMessageId = function() {
            return JobBookSubscriptionMessage.ID;
        };
        JobBookSubscriptionMessage.prototype.reset = function() {
            this.subscriptions = [];
        };
        JobBookSubscriptionMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        JobBookSubscriptionMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        JobBookSubscriptionMessage.prototype.serialize = function(output) {
            this.serializeAs_JobBookSubscriptionMessage(output);
        };
        JobBookSubscriptionMessage.prototype.deserialize = function(input) {
            this.deserializeAs_JobBookSubscriptionMessage(input);
        };
        JobBookSubscriptionMessage.prototype.serializeAs_JobBookSubscriptionMessage = function(output) {
            output.writeShort(this.subscriptions.length);
            for (var _i1 = 0; _i1 < this.subscriptions.length; _i1++) {
                (this.subscriptions[_i1]).serializeAs_JobBookSubscription(output);
            }
        };
        JobBookSubscriptionMessage.prototype.deserializeAs_JobBookSubscriptionMessage = function(input) {
            var _item1 = null;
            var _subscriptionsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _subscriptionsLen; _i1++) {
                _item1 = new JobBookSubscription();
                _item1.deserialize(input);
                this.subscriptions.push(_item1);
            }
        };
        JobBookSubscriptionMessage.ID = 7522;
        return JobBookSubscriptionMessage;
    })(NetworkMessage);
    Protocol.JobBookSubscriptionMessage = JobBookSubscriptionMessage;
    var JobCrafterDirectoryAddMessage = (function(_super) {
        __extends(JobCrafterDirectoryAddMessage, _super);

        function JobCrafterDirectoryAddMessage() {
            this.listEntry = new JobCrafterDirectoryListEntry();
            _super.call(this)
        }
        JobCrafterDirectoryAddMessage.prototype.getMessageId = function() {
            return JobCrafterDirectoryAddMessage.ID;
        };
        JobCrafterDirectoryAddMessage.prototype.reset = function() {
            this.listEntry = new JobCrafterDirectoryListEntry();
        };
        JobCrafterDirectoryAddMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        JobCrafterDirectoryAddMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        JobCrafterDirectoryAddMessage.prototype.serialize = function(output) {
            this.serializeAs_JobCrafterDirectoryAddMessage(output);
        };
        JobCrafterDirectoryAddMessage.prototype.deserialize = function(input) {
            this.deserializeAs_JobCrafterDirectoryAddMessage(input);
        };
        JobCrafterDirectoryAddMessage.prototype.serializeAs_JobCrafterDirectoryAddMessage = function(output) {
            this.listEntry.serializeAs_JobCrafterDirectoryListEntry(output);
        };
        JobCrafterDirectoryAddMessage.prototype.deserializeAs_JobCrafterDirectoryAddMessage = function(input) {
            this.listEntry = new JobCrafterDirectoryListEntry();
            this.listEntry.deserialize(input);
        };
        JobCrafterDirectoryAddMessage.ID = 1484;
        return JobCrafterDirectoryAddMessage;
    })(NetworkMessage);
    Protocol.JobCrafterDirectoryAddMessage = JobCrafterDirectoryAddMessage;
    var JobCrafterDirectoryDefineSettingsMessage = (function(_super) {
        __extends(JobCrafterDirectoryDefineSettingsMessage, _super);

        function JobCrafterDirectoryDefineSettingsMessage() {
            this.settings = new JobCrafterDirectorySettings();
            _super.call(this)
        }
        JobCrafterDirectoryDefineSettingsMessage.prototype.getMessageId = function() {
            return JobCrafterDirectoryDefineSettingsMessage.ID;
        };
        JobCrafterDirectoryDefineSettingsMessage.prototype.reset = function() {
            this.settings = new JobCrafterDirectorySettings();
        };
        JobCrafterDirectoryDefineSettingsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        JobCrafterDirectoryDefineSettingsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        JobCrafterDirectoryDefineSettingsMessage.prototype.serialize = function(output) {
            this.serializeAs_JobCrafterDirectoryDefineSettingsMessage(output);
        };
        JobCrafterDirectoryDefineSettingsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_JobCrafterDirectoryDefineSettingsMessage(input);
        };
        JobCrafterDirectoryDefineSettingsMessage.prototype.serializeAs_JobCrafterDirectoryDefineSettingsMessage = function(output) {
            this.settings.serializeAs_JobCrafterDirectorySettings(output);
        };
        JobCrafterDirectoryDefineSettingsMessage.prototype.deserializeAs_JobCrafterDirectoryDefineSettingsMessage = function(input) {
            this.settings = new JobCrafterDirectorySettings();
            this.settings.deserialize(input);
        };
        JobCrafterDirectoryDefineSettingsMessage.ID = 3428;
        return JobCrafterDirectoryDefineSettingsMessage;
    })(NetworkMessage);
    Protocol.JobCrafterDirectoryDefineSettingsMessage = JobCrafterDirectoryDefineSettingsMessage;
    var JobCrafterDirectoryEntryMessage = (function(_super) {
        __extends(JobCrafterDirectoryEntryMessage, _super);

        function JobCrafterDirectoryEntryMessage() {
            this.playerInfo = new JobCrafterDirectoryEntryPlayerInfo();
            this.jobInfoList = [];
            this.playerLook = new EntityLook();
            _super.call(this)
        }
        JobCrafterDirectoryEntryMessage.prototype.getMessageId = function() {
            return JobCrafterDirectoryEntryMessage.ID;
        };
        JobCrafterDirectoryEntryMessage.prototype.reset = function() {
            this.playerInfo = new JobCrafterDirectoryEntryPlayerInfo();
            this.jobInfoList = [];
            this.playerLook = new EntityLook();
        };
        JobCrafterDirectoryEntryMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        JobCrafterDirectoryEntryMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        JobCrafterDirectoryEntryMessage.prototype.serialize = function(output) {
            this.serializeAs_JobCrafterDirectoryEntryMessage(output);
        };
        JobCrafterDirectoryEntryMessage.prototype.deserialize = function(input) {
            this.deserializeAs_JobCrafterDirectoryEntryMessage(input);
        };
        JobCrafterDirectoryEntryMessage.prototype.serializeAs_JobCrafterDirectoryEntryMessage = function(output) {
            this.playerInfo.serializeAs_JobCrafterDirectoryEntryPlayerInfo(output);
            output.writeShort(this.jobInfoList.length);
            for (var _i2 = 0; _i2 < this.jobInfoList.length; _i2++) {
                (this.jobInfoList[_i2]).serializeAs_JobCrafterDirectoryEntryJobInfo(output);
            }
            this.playerLook.serializeAs_EntityLook(output);
        };
        JobCrafterDirectoryEntryMessage.prototype.deserializeAs_JobCrafterDirectoryEntryMessage = function(input) {
            var _item2 = null;
            this.playerInfo = new JobCrafterDirectoryEntryPlayerInfo();
            this.playerInfo.deserialize(input);
            var _jobInfoListLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _jobInfoListLen; _i2++) {
                _item2 = new JobCrafterDirectoryEntryJobInfo();
                _item2.deserialize(input);
                this.jobInfoList.push(_item2);
            }
            this.playerLook = new EntityLook();
            this.playerLook.deserialize(input);
        };
        JobCrafterDirectoryEntryMessage.ID = 3830;
        return JobCrafterDirectoryEntryMessage;
    })(NetworkMessage);
    Protocol.JobCrafterDirectoryEntryMessage = JobCrafterDirectoryEntryMessage;
    var JobCrafterDirectoryEntryRequestMessage = (function(_super) {
        __extends(JobCrafterDirectoryEntryRequestMessage, _super);

        function JobCrafterDirectoryEntryRequestMessage() {
            this.playerId = 0;
            _super.call(this)
        }
        JobCrafterDirectoryEntryRequestMessage.prototype.getMessageId = function() {
            return JobCrafterDirectoryEntryRequestMessage.ID;
        };
        JobCrafterDirectoryEntryRequestMessage.prototype.reset = function() {
            this.playerId = 0;
        };
        JobCrafterDirectoryEntryRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        JobCrafterDirectoryEntryRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        JobCrafterDirectoryEntryRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_JobCrafterDirectoryEntryRequestMessage(output);
        };
        JobCrafterDirectoryEntryRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_JobCrafterDirectoryEntryRequestMessage(input);
        };
        JobCrafterDirectoryEntryRequestMessage.prototype.serializeAs_JobCrafterDirectoryEntryRequestMessage = function(output) {
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
        };
        JobCrafterDirectoryEntryRequestMessage.prototype.deserializeAs_JobCrafterDirectoryEntryRequestMessage = function(input) {
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of JobCrafterDirectoryEntryRequestMessage.playerId.");
            }
        };
        JobCrafterDirectoryEntryRequestMessage.ID = 9607;
        return JobCrafterDirectoryEntryRequestMessage;
    })(NetworkMessage);
    Protocol.JobCrafterDirectoryEntryRequestMessage = JobCrafterDirectoryEntryRequestMessage;
    var JobCrafterDirectoryListMessage = (function(_super) {
        __extends(JobCrafterDirectoryListMessage, _super);

        function JobCrafterDirectoryListMessage() {
            this.listEntries = [];
            _super.call(this)
        }
        JobCrafterDirectoryListMessage.prototype.getMessageId = function() {
            return JobCrafterDirectoryListMessage.ID;
        };
        JobCrafterDirectoryListMessage.prototype.reset = function() {
            this.listEntries = [];
        };
        JobCrafterDirectoryListMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        JobCrafterDirectoryListMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        JobCrafterDirectoryListMessage.prototype.serialize = function(output) {
            this.serializeAs_JobCrafterDirectoryListMessage(output);
        };
        JobCrafterDirectoryListMessage.prototype.deserialize = function(input) {
            this.deserializeAs_JobCrafterDirectoryListMessage(input);
        };
        JobCrafterDirectoryListMessage.prototype.serializeAs_JobCrafterDirectoryListMessage = function(output) {
            output.writeShort(this.listEntries.length);
            for (var _i1 = 0; _i1 < this.listEntries.length; _i1++) {
                (this.listEntries[_i1]).serializeAs_JobCrafterDirectoryListEntry(output);
            }
        };
        JobCrafterDirectoryListMessage.prototype.deserializeAs_JobCrafterDirectoryListMessage = function(input) {
            var _item1 = null;
            var _listEntriesLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _listEntriesLen; _i1++) {
                _item1 = new JobCrafterDirectoryListEntry();
                _item1.deserialize(input);
                this.listEntries.push(_item1);
            }
        };
        JobCrafterDirectoryListMessage.ID = 9887;
        return JobCrafterDirectoryListMessage;
    })(NetworkMessage);
    Protocol.JobCrafterDirectoryListMessage = JobCrafterDirectoryListMessage;
    var JobCrafterDirectoryListRequestMessage = (function(_super) {
        __extends(JobCrafterDirectoryListRequestMessage, _super);

        function JobCrafterDirectoryListRequestMessage() {
            this.jobId = 0;
            _super.call(this)
        }
        JobCrafterDirectoryListRequestMessage.prototype.getMessageId = function() {
            return JobCrafterDirectoryListRequestMessage.ID;
        };
        JobCrafterDirectoryListRequestMessage.prototype.reset = function() {
            this.jobId = 0;
        };
        JobCrafterDirectoryListRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        JobCrafterDirectoryListRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        JobCrafterDirectoryListRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_JobCrafterDirectoryListRequestMessage(output);
        };
        JobCrafterDirectoryListRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_JobCrafterDirectoryListRequestMessage(input);
        };
        JobCrafterDirectoryListRequestMessage.prototype.serializeAs_JobCrafterDirectoryListRequestMessage = function(output) {
            if (this.jobId < 0) {
                throw new Error("Forbidden value (" + this.jobId + ") on element jobId.");
            }
            output.writeByte(this.jobId);
        };
        JobCrafterDirectoryListRequestMessage.prototype.deserializeAs_JobCrafterDirectoryListRequestMessage = function(input) {
            this.jobId = input.readByte();
            if (this.jobId < 0) {
                throw new Error("Forbidden value (" + this.jobId + ") on element of JobCrafterDirectoryListRequestMessage.jobId.");
            }
        };
        JobCrafterDirectoryListRequestMessage.ID = 9508;
        return JobCrafterDirectoryListRequestMessage;
    })(NetworkMessage);
    Protocol.JobCrafterDirectoryListRequestMessage = JobCrafterDirectoryListRequestMessage;
    var JobCrafterDirectoryRemoveMessage = (function(_super) {
        __extends(JobCrafterDirectoryRemoveMessage, _super);

        function JobCrafterDirectoryRemoveMessage() {
            this.jobId = 0;
            this.playerId = 0;
            _super.call(this)
        }
        JobCrafterDirectoryRemoveMessage.prototype.getMessageId = function() {
            return JobCrafterDirectoryRemoveMessage.ID;
        };
        JobCrafterDirectoryRemoveMessage.prototype.reset = function() {
            this.jobId = 0;
            this.playerId = 0;
        };
        JobCrafterDirectoryRemoveMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        JobCrafterDirectoryRemoveMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        JobCrafterDirectoryRemoveMessage.prototype.serialize = function(output) {
            this.serializeAs_JobCrafterDirectoryRemoveMessage(output);
        };
        JobCrafterDirectoryRemoveMessage.prototype.deserialize = function(input) {
            this.deserializeAs_JobCrafterDirectoryRemoveMessage(input);
        };
        JobCrafterDirectoryRemoveMessage.prototype.serializeAs_JobCrafterDirectoryRemoveMessage = function(output) {
            if (this.jobId < 0) {
                throw new Error("Forbidden value (" + this.jobId + ") on element jobId.");
            }
            output.writeByte(this.jobId);
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
        };
        JobCrafterDirectoryRemoveMessage.prototype.deserializeAs_JobCrafterDirectoryRemoveMessage = function(input) {
            this.jobId = input.readByte();
            if (this.jobId < 0) {
                throw new Error("Forbidden value (" + this.jobId + ") on element of JobCrafterDirectoryRemoveMessage.jobId.");
            }
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of JobCrafterDirectoryRemoveMessage.playerId.");
            }
        };
        JobCrafterDirectoryRemoveMessage.ID = 7514;
        return JobCrafterDirectoryRemoveMessage;
    })(NetworkMessage);
    Protocol.JobCrafterDirectoryRemoveMessage = JobCrafterDirectoryRemoveMessage;
    var JobCrafterDirectorySettingsMessage = (function(_super) {
        __extends(JobCrafterDirectorySettingsMessage, _super);

        function JobCrafterDirectorySettingsMessage() {
            this.craftersSettings = [];
            _super.call(this)
        }
        JobCrafterDirectorySettingsMessage.prototype.getMessageId = function() {
            return JobCrafterDirectorySettingsMessage.ID;
        };
        JobCrafterDirectorySettingsMessage.prototype.reset = function() {
            this.craftersSettings = [];
        };
        JobCrafterDirectorySettingsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        JobCrafterDirectorySettingsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        JobCrafterDirectorySettingsMessage.prototype.serialize = function(output) {
            this.serializeAs_JobCrafterDirectorySettingsMessage(output);
        };
        JobCrafterDirectorySettingsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_JobCrafterDirectorySettingsMessage(input);
        };
        JobCrafterDirectorySettingsMessage.prototype.serializeAs_JobCrafterDirectorySettingsMessage = function(output) {
            output.writeShort(this.craftersSettings.length);
            for (var _i1 = 0; _i1 < this.craftersSettings.length; _i1++) {
                (this.craftersSettings[_i1]).serializeAs_JobCrafterDirectorySettings(output);
            }
        };
        JobCrafterDirectorySettingsMessage.prototype.deserializeAs_JobCrafterDirectorySettingsMessage = function(input) {
            var _item1 = null;
            var _craftersSettingsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _craftersSettingsLen; _i1++) {
                _item1 = new JobCrafterDirectorySettings();
                _item1.deserialize(input);
                this.craftersSettings.push(_item1);
            }
        };
        JobCrafterDirectorySettingsMessage.ID = 799;
        return JobCrafterDirectorySettingsMessage;
    })(NetworkMessage);
    Protocol.JobCrafterDirectorySettingsMessage = JobCrafterDirectorySettingsMessage;
    var JobDescriptionMessage = (function(_super) {
        __extends(JobDescriptionMessage, _super);

        function JobDescriptionMessage() {
            this.jobsDescription = [];
            _super.call(this)
        }
        JobDescriptionMessage.prototype.getMessageId = function() {
            return JobDescriptionMessage.ID;
        };
        JobDescriptionMessage.prototype.reset = function() {
            this.jobsDescription = [];
        };
        JobDescriptionMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        JobDescriptionMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        JobDescriptionMessage.prototype.serialize = function(output) {
            this.serializeAs_JobDescriptionMessage(output);
        };
        JobDescriptionMessage.prototype.deserialize = function(input) {
            this.deserializeAs_JobDescriptionMessage(input);
        };
        JobDescriptionMessage.prototype.serializeAs_JobDescriptionMessage = function(output) {
            output.writeShort(this.jobsDescription.length);
            for (var _i1 = 0; _i1 < this.jobsDescription.length; _i1++) {
                (this.jobsDescription[_i1]).serializeAs_JobDescription(output);
            }
        };
        JobDescriptionMessage.prototype.deserializeAs_JobDescriptionMessage = function(input) {
            var _item1 = null;
            var _jobsDescriptionLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _jobsDescriptionLen; _i1++) {
                _item1 = new JobDescription();
                _item1.deserialize(input);
                this.jobsDescription.push(_item1);
            }
        };
        JobDescriptionMessage.ID = 3919;
        return JobDescriptionMessage;
    })(NetworkMessage);
    Protocol.JobDescriptionMessage = JobDescriptionMessage;
    var JobExperienceMultiUpdateMessage = (function(_super) {
        __extends(JobExperienceMultiUpdateMessage, _super);

        function JobExperienceMultiUpdateMessage() {
            this.experiencesUpdate = [];
            _super.call(this)
        }
        JobExperienceMultiUpdateMessage.prototype.getMessageId = function() {
            return JobExperienceMultiUpdateMessage.ID;
        };
        JobExperienceMultiUpdateMessage.prototype.reset = function() {
            this.experiencesUpdate = [];
        };
        JobExperienceMultiUpdateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        JobExperienceMultiUpdateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        JobExperienceMultiUpdateMessage.prototype.serialize = function(output) {
            this.serializeAs_JobExperienceMultiUpdateMessage(output);
        };
        JobExperienceMultiUpdateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_JobExperienceMultiUpdateMessage(input);
        };
        JobExperienceMultiUpdateMessage.prototype.serializeAs_JobExperienceMultiUpdateMessage = function(output) {
            output.writeShort(this.experiencesUpdate.length);
            for (var _i1 = 0; _i1 < this.experiencesUpdate.length; _i1++) {
                (this.experiencesUpdate[_i1]).serializeAs_JobExperience(output);
            }
        };
        JobExperienceMultiUpdateMessage.prototype.deserializeAs_JobExperienceMultiUpdateMessage = function(input) {
            var _item1 = null;
            var _experiencesUpdateLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _experiencesUpdateLen; _i1++) {
                _item1 = new JobExperience();
                _item1.deserialize(input);
                this.experiencesUpdate.push(_item1);
            }
        };
        JobExperienceMultiUpdateMessage.ID = 8538;
        return JobExperienceMultiUpdateMessage;
    })(NetworkMessage);
    Protocol.JobExperienceMultiUpdateMessage = JobExperienceMultiUpdateMessage;
    var JobExperienceUpdateMessage = (function(_super) {
        __extends(JobExperienceUpdateMessage, _super);

        function JobExperienceUpdateMessage() {
            this.experiencesUpdate = new JobExperience();
            _super.call(this)
        }
        JobExperienceUpdateMessage.prototype.getMessageId = function() {
            return JobExperienceUpdateMessage.ID;
        };
        JobExperienceUpdateMessage.prototype.reset = function() {
            this.experiencesUpdate = new JobExperience();
        };
        JobExperienceUpdateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        JobExperienceUpdateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        JobExperienceUpdateMessage.prototype.serialize = function(output) {
            this.serializeAs_JobExperienceUpdateMessage(output);
        };
        JobExperienceUpdateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_JobExperienceUpdateMessage(input);
        };
        JobExperienceUpdateMessage.prototype.serializeAs_JobExperienceUpdateMessage = function(output) {
            this.experiencesUpdate.serializeAs_JobExperience(output);
        };
        JobExperienceUpdateMessage.prototype.deserializeAs_JobExperienceUpdateMessage = function(input) {
            this.experiencesUpdate = new JobExperience();
            this.experiencesUpdate.deserialize(input);
        };
        JobExperienceUpdateMessage.ID = 1501;
        return JobExperienceUpdateMessage;
    })(NetworkMessage);
    Protocol.JobExperienceUpdateMessage = JobExperienceUpdateMessage;
    var JobExperienceOtherPlayerUpdateMessage = (function(_super) {
        __extends(JobExperienceOtherPlayerUpdateMessage, _super);

        function JobExperienceOtherPlayerUpdateMessage() {
            this.playerId = 0;
            _super.call(this)
        }
        JobExperienceOtherPlayerUpdateMessage.prototype.getMessageId = function() {
            return JobExperienceOtherPlayerUpdateMessage.ID;
        };
        JobExperienceOtherPlayerUpdateMessage.prototype.reset = function() {
            this.playerId = 0;
        };
        JobExperienceOtherPlayerUpdateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        JobExperienceOtherPlayerUpdateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        JobExperienceOtherPlayerUpdateMessage.prototype.serialize = function(output) {
            this.serializeAs_JobExperienceOtherPlayerUpdateMessage(output);
        };
        JobExperienceOtherPlayerUpdateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_JobExperienceOtherPlayerUpdateMessage(input);
        };
        JobExperienceOtherPlayerUpdateMessage.prototype.serializeAs_JobExperienceOtherPlayerUpdateMessage = function(output) {
            _super.prototype.serializeAs_JobExperienceUpdateMessage.call(this, output);
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
        };
        JobExperienceOtherPlayerUpdateMessage.prototype.deserializeAs_JobExperienceOtherPlayerUpdateMessage = function(input) {
            _super.prototype.deserializeAs_JobExperienceUpdateMessage.call(this, input);
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of JobExperienceOtherPlayerUpdateMessage.playerId.");
            }
        };
        JobExperienceOtherPlayerUpdateMessage.ID = 6469;
        return JobExperienceOtherPlayerUpdateMessage;
    })(JobExperienceUpdateMessage);
    Protocol.JobExperienceOtherPlayerUpdateMessage = JobExperienceOtherPlayerUpdateMessage;
    var JobLevelUpMessage = (function(_super) {
        __extends(JobLevelUpMessage, _super);

        function JobLevelUpMessage() {
            this.newLevel = 0;
            this.jobsDescription = new JobDescription();
            _super.call(this)
        }
        JobLevelUpMessage.prototype.getMessageId = function() {
            return JobLevelUpMessage.ID;
        };
        JobLevelUpMessage.prototype.reset = function() {
            this.newLevel = 0;
            this.jobsDescription = new JobDescription();
        };
        JobLevelUpMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        JobLevelUpMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        JobLevelUpMessage.prototype.serialize = function(output) {
            this.serializeAs_JobLevelUpMessage(output);
        };
        JobLevelUpMessage.prototype.deserialize = function(input) {
            this.deserializeAs_JobLevelUpMessage(input);
        };
        JobLevelUpMessage.prototype.serializeAs_JobLevelUpMessage = function(output) {
            if (this.newLevel < 0 || this.newLevel > 255) {
                throw new Error("Forbidden value (" + this.newLevel + ") on element newLevel.");
            }
            output.writeByte(this.newLevel);
            this.jobsDescription.serializeAs_JobDescription(output);
        };
        JobLevelUpMessage.prototype.deserializeAs_JobLevelUpMessage = function(input) {
            this.newLevel = input.readUnsignedByte();
            if (this.newLevel < 0 || this.newLevel > 255) {
                throw new Error("Forbidden value (" + this.newLevel + ") on element of JobLevelUpMessage.newLevel.");
            }
            this.jobsDescription = new JobDescription();
            this.jobsDescription.deserialize(input);
        };
        JobLevelUpMessage.ID = 8052;
        return JobLevelUpMessage;
    })(NetworkMessage);
    Protocol.JobLevelUpMessage = JobLevelUpMessage;
    var JobMultiCraftAvailableSkillsMessage = (function(_super) {
        __extends(JobMultiCraftAvailableSkillsMessage, _super);

        function JobMultiCraftAvailableSkillsMessage() {
            this.playerId = 0;
            this.skills = [];
            _super.call(this)
        }
        JobMultiCraftAvailableSkillsMessage.prototype.getMessageId = function() {
            return JobMultiCraftAvailableSkillsMessage.ID;
        };
        JobMultiCraftAvailableSkillsMessage.prototype.reset = function() {
            this.playerId = 0;
            this.skills = [];
        };
        JobMultiCraftAvailableSkillsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        JobMultiCraftAvailableSkillsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        JobMultiCraftAvailableSkillsMessage.prototype.serialize = function(output) {
            this.serializeAs_JobMultiCraftAvailableSkillsMessage(output);
        };
        JobMultiCraftAvailableSkillsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_JobMultiCraftAvailableSkillsMessage(input);
        };
        JobMultiCraftAvailableSkillsMessage.prototype.serializeAs_JobMultiCraftAvailableSkillsMessage = function(output) {
            _super.prototype.serializeAs_JobAllowMultiCraftRequestMessage.call(this, output);
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
            output.writeShort(this.skills.length);
            for (var _i2 = 0; _i2 < this.skills.length; _i2++) {
                if (this.skills[_i2] < 0) {
                    throw new Error("Forbidden value (" + this.skills[_i2] + ") on element 2 (starting at 1) of skills.");
                }
                output.writeVarShort(this.skills[_i2]);
            }
        };
        JobMultiCraftAvailableSkillsMessage.prototype.deserializeAs_JobMultiCraftAvailableSkillsMessage = function(input) {
            var _val2 = 0;
            _super.prototype.deserializeAs_JobAllowMultiCraftRequestMessage.call(this, input);
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of JobMultiCraftAvailableSkillsMessage.playerId.");
            }
            var _skillsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _skillsLen; _i2++) {
                _val2 = input.readVarUhShort();
                if (_val2 < 0) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of skills.");
                }
                this.skills.push(_val2);
            }
        };
        JobMultiCraftAvailableSkillsMessage.ID = 5801;
        return JobMultiCraftAvailableSkillsMessage;
    })(JobAllowMultiCraftRequestMessage);
    Protocol.JobMultiCraftAvailableSkillsMessage = JobMultiCraftAvailableSkillsMessage;
    var LockableCodeResultMessage = (function(_super) {
        __extends(LockableCodeResultMessage, _super);

        function LockableCodeResultMessage() {
            this.result = 0;
            _super.call(this)
        }
        LockableCodeResultMessage.prototype.getMessageId = function() {
            return LockableCodeResultMessage.ID;
        };
        LockableCodeResultMessage.prototype.reset = function() {
            this.result = 0;
        };
        LockableCodeResultMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        LockableCodeResultMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        LockableCodeResultMessage.prototype.serialize = function(output) {
            this.serializeAs_LockableCodeResultMessage(output);
        };
        LockableCodeResultMessage.prototype.deserialize = function(input) {
            this.deserializeAs_LockableCodeResultMessage(input);
        };
        LockableCodeResultMessage.prototype.serializeAs_LockableCodeResultMessage = function(output) {
            output.writeByte(this.result);
        };
        LockableCodeResultMessage.prototype.deserializeAs_LockableCodeResultMessage = function(input) {
            this.result = input.readByte();
            if (this.result < 0) {
                throw new Error("Forbidden value (" + this.result + ") on element of LockableCodeResultMessage.result.");
            }
        };
        LockableCodeResultMessage.ID = 7160;
        return LockableCodeResultMessage;
    })(NetworkMessage);
    Protocol.LockableCodeResultMessage = LockableCodeResultMessage;
    var LockableShowCodeDialogMessage = (function(_super) {
        __extends(LockableShowCodeDialogMessage, _super);

        function LockableShowCodeDialogMessage() {
            this.changeOrUse = false;
            this.codeSize = 0;
            _super.call(this)
        }
        LockableShowCodeDialogMessage.prototype.getMessageId = function() {
            return LockableShowCodeDialogMessage.ID;
        };
        LockableShowCodeDialogMessage.prototype.reset = function() {
            this.changeOrUse = false;
            this.codeSize = 0;
        };
        LockableShowCodeDialogMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        LockableShowCodeDialogMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        LockableShowCodeDialogMessage.prototype.serialize = function(output) {
            this.serializeAs_LockableShowCodeDialogMessage(output);
        };
        LockableShowCodeDialogMessage.prototype.deserialize = function(input) {
            this.deserializeAs_LockableShowCodeDialogMessage(input);
        };
        LockableShowCodeDialogMessage.prototype.serializeAs_LockableShowCodeDialogMessage = function(output) {
            output.writeBoolean(this.changeOrUse);
            if (this.codeSize < 0) {
                throw new Error("Forbidden value (" + this.codeSize + ") on element codeSize.");
            }
            output.writeByte(this.codeSize);
        };
        LockableShowCodeDialogMessage.prototype.deserializeAs_LockableShowCodeDialogMessage = function(input) {
            this.changeOrUse = input.readBoolean();
            this.codeSize = input.readByte();
            if (this.codeSize < 0) {
                throw new Error("Forbidden value (" + this.codeSize + ") on element of LockableShowCodeDialogMessage.codeSize.");
            }
        };
        LockableShowCodeDialogMessage.ID = 2846;
        return LockableShowCodeDialogMessage;
    })(NetworkMessage);
    Protocol.LockableShowCodeDialogMessage = LockableShowCodeDialogMessage;
    var LockableStateUpdateAbstractMessage = (function(_super) {
        __extends(LockableStateUpdateAbstractMessage, _super);

        function LockableStateUpdateAbstractMessage() {
            this.locked = false;
            _super.call(this)
        }
        LockableStateUpdateAbstractMessage.prototype.getMessageId = function() {
            return LockableStateUpdateAbstractMessage.ID;
        };
        LockableStateUpdateAbstractMessage.prototype.reset = function() {
            this.locked = false;
        };
        LockableStateUpdateAbstractMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        LockableStateUpdateAbstractMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        LockableStateUpdateAbstractMessage.prototype.serialize = function(output) {
            this.serializeAs_LockableStateUpdateAbstractMessage(output);
        };
        LockableStateUpdateAbstractMessage.prototype.deserialize = function(input) {
            this.deserializeAs_LockableStateUpdateAbstractMessage(input);
        };
        LockableStateUpdateAbstractMessage.prototype.serializeAs_LockableStateUpdateAbstractMessage = function(output) {
            output.writeBoolean(this.locked);
        };
        LockableStateUpdateAbstractMessage.prototype.deserializeAs_LockableStateUpdateAbstractMessage = function(input) {
            this.locked = input.readBoolean();
        };
        LockableStateUpdateAbstractMessage.ID = 4109;
        return LockableStateUpdateAbstractMessage;
    })(NetworkMessage);
    Protocol.LockableStateUpdateAbstractMessage = LockableStateUpdateAbstractMessage;
    var LockableStateUpdateHouseDoorMessage = (function(_super) {
        __extends(LockableStateUpdateHouseDoorMessage, _super);

        function LockableStateUpdateHouseDoorMessage() {
            this.houseId = 0;
            this.instanceId = 0;
            this.secondHand = false;
            _super.call(this)
        }
        LockableStateUpdateHouseDoorMessage.prototype.getMessageId = function() {
            return LockableStateUpdateHouseDoorMessage.ID;
        };
        LockableStateUpdateHouseDoorMessage.prototype.reset = function() {
            this.houseId = 0;
            this.instanceId = 0;
            this.secondHand = false;
        };
        LockableStateUpdateHouseDoorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        LockableStateUpdateHouseDoorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        LockableStateUpdateHouseDoorMessage.prototype.serialize = function(output) {
            this.serializeAs_LockableStateUpdateHouseDoorMessage(output);
        };
        LockableStateUpdateHouseDoorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_LockableStateUpdateHouseDoorMessage(input);
        };
        LockableStateUpdateHouseDoorMessage.prototype.serializeAs_LockableStateUpdateHouseDoorMessage = function(output) {
            _super.prototype.serializeAs_LockableStateUpdateAbstractMessage.call(this, output);
            if (this.houseId < 0) {
                throw new Error("Forbidden value (" + this.houseId + ") on element houseId.");
            }
            output.writeVarInt(this.houseId);
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element instanceId.");
            }
            output.writeInt(this.instanceId);
            output.writeBoolean(this.secondHand);
        };
        LockableStateUpdateHouseDoorMessage.prototype.deserializeAs_LockableStateUpdateHouseDoorMessage = function(input) {
            _super.prototype.deserializeAs_LockableStateUpdateAbstractMessage.call(this, input);
            this.houseId = input.readVarUhInt();
            if (this.houseId < 0) {
                throw new Error("Forbidden value (" + this.houseId + ") on element of LockableStateUpdateHouseDoorMessage.houseId.");
            }
            this.instanceId = input.readInt();
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element of LockableStateUpdateHouseDoorMessage.instanceId.");
            }
            this.secondHand = input.readBoolean();
        };
        LockableStateUpdateHouseDoorMessage.ID = 2112;
        return LockableStateUpdateHouseDoorMessage;
    })(LockableStateUpdateAbstractMessage);
    Protocol.LockableStateUpdateHouseDoorMessage = LockableStateUpdateHouseDoorMessage;
    var LockableStateUpdateStorageMessage = (function(_super) {
        __extends(LockableStateUpdateStorageMessage, _super);

        function LockableStateUpdateStorageMessage() {
            this.mapId = 0;
            this.elementId = 0;
            _super.call(this)
        }
        LockableStateUpdateStorageMessage.prototype.getMessageId = function() {
            return LockableStateUpdateStorageMessage.ID;
        };
        LockableStateUpdateStorageMessage.prototype.reset = function() {
            this.mapId = 0;
            this.elementId = 0;
        };
        LockableStateUpdateStorageMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        LockableStateUpdateStorageMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        LockableStateUpdateStorageMessage.prototype.serialize = function(output) {
            this.serializeAs_LockableStateUpdateStorageMessage(output);
        };
        LockableStateUpdateStorageMessage.prototype.deserialize = function(input) {
            this.deserializeAs_LockableStateUpdateStorageMessage(input);
        };
        LockableStateUpdateStorageMessage.prototype.serializeAs_LockableStateUpdateStorageMessage = function(output) {
            _super.prototype.serializeAs_LockableStateUpdateAbstractMessage.call(this, output);
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            if (this.elementId < 0) {
                throw new Error("Forbidden value (" + this.elementId + ") on element elementId.");
            }
            output.writeVarInt(this.elementId);
        };
        LockableStateUpdateStorageMessage.prototype.deserializeAs_LockableStateUpdateStorageMessage = function(input) {
            _super.prototype.deserializeAs_LockableStateUpdateAbstractMessage.call(this, input);
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of LockableStateUpdateStorageMessage.mapId.");
            }
            this.elementId = input.readVarUhInt();
            if (this.elementId < 0) {
                throw new Error("Forbidden value (" + this.elementId + ") on element of LockableStateUpdateStorageMessage.elementId.");
            }
        };
        LockableStateUpdateStorageMessage.ID = 6717;
        return LockableStateUpdateStorageMessage;
    })(LockableStateUpdateAbstractMessage);
    Protocol.LockableStateUpdateStorageMessage = LockableStateUpdateStorageMessage;
    var LockableUseCodeMessage = (function(_super) {
        __extends(LockableUseCodeMessage, _super);

        function LockableUseCodeMessage() {
            this.code = "";
            _super.call(this)
        }
        LockableUseCodeMessage.prototype.getMessageId = function() {
            return LockableUseCodeMessage.ID;
        };
        LockableUseCodeMessage.prototype.reset = function() {
            this.code = "";
        };
        LockableUseCodeMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        LockableUseCodeMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        LockableUseCodeMessage.prototype.serialize = function(output) {
            this.serializeAs_LockableUseCodeMessage(output);
        };
        LockableUseCodeMessage.prototype.deserialize = function(input) {
            this.deserializeAs_LockableUseCodeMessage(input);
        };
        LockableUseCodeMessage.prototype.serializeAs_LockableUseCodeMessage = function(output) {
            output.writeUTF(this.code);
        };
        LockableUseCodeMessage.prototype.deserializeAs_LockableUseCodeMessage = function(input) {
            this.code = input.readUTF();
        };
        LockableUseCodeMessage.ID = 3545;
        return LockableUseCodeMessage;
    })(NetworkMessage);
    Protocol.LockableUseCodeMessage = LockableUseCodeMessage;
    var MapComplementaryInformationsDataInHavenBagMessage = (function(_super) {
        __extends(MapComplementaryInformationsDataInHavenBagMessage, _super);

        function MapComplementaryInformationsDataInHavenBagMessage() {
            this.ownerInformations = new CharacterMinimalInformations();
            this.theme = 0;
            this.roomId = 0;
            this.maxRoomId = 0;
            _super.call(this)
        }
        MapComplementaryInformationsDataInHavenBagMessage.prototype.getMessageId = function() {
            return MapComplementaryInformationsDataInHavenBagMessage.ID;
        };
        MapComplementaryInformationsDataInHavenBagMessage.prototype.reset = function() {
            this.ownerInformations = new CharacterMinimalInformations();
            this.theme = 0;
            this.roomId = 0;
            this.maxRoomId = 0;
        };
        MapComplementaryInformationsDataInHavenBagMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MapComplementaryInformationsDataInHavenBagMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MapComplementaryInformationsDataInHavenBagMessage.prototype.serialize = function(output) {
            this.serializeAs_MapComplementaryInformationsDataInHavenBagMessage(output);
        };
        MapComplementaryInformationsDataInHavenBagMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MapComplementaryInformationsDataInHavenBagMessage(input);
        };
        MapComplementaryInformationsDataInHavenBagMessage.prototype.serializeAs_MapComplementaryInformationsDataInHavenBagMessage = function(output) {
            _super.prototype.serializeAs_MapComplementaryInformationsDataMessage.call(this, output);
            this.ownerInformations.serializeAs_CharacterMinimalInformations(output);
            output.writeByte(this.theme);
            if (this.roomId < 0) {
                throw new Error("Forbidden value (" + this.roomId + ") on element roomId.");
            }
            output.writeByte(this.roomId);
            if (this.maxRoomId < 0) {
                throw new Error("Forbidden value (" + this.maxRoomId + ") on element maxRoomId.");
            }
            output.writeByte(this.maxRoomId);
        };
        MapComplementaryInformationsDataInHavenBagMessage.prototype.deserializeAs_MapComplementaryInformationsDataInHavenBagMessage = function(input) {
            _super.prototype.deserializeAs_MapComplementaryInformationsDataMessage.call(this, input);
            this.ownerInformations = new CharacterMinimalInformations();
            this.ownerInformations.deserialize(input);
            this.theme = input.readByte();
            this.roomId = input.readByte();
            if (this.roomId < 0) {
                throw new Error("Forbidden value (" + this.roomId + ") on element of MapComplementaryInformationsDataInHavenBagMessage.roomId.");
            }
            this.maxRoomId = input.readByte();
            if (this.maxRoomId < 0) {
                throw new Error("Forbidden value (" + this.maxRoomId + ") on element of MapComplementaryInformationsDataInHavenBagMessage.maxRoomId.");
            }
        };
        MapComplementaryInformationsDataInHavenBagMessage.ID = 4332;
        return MapComplementaryInformationsDataInHavenBagMessage;
    })(MapComplementaryInformationsDataMessage);
    Protocol.MapComplementaryInformationsDataInHavenBagMessage = MapComplementaryInformationsDataInHavenBagMessage;
    var MapComplementaryInformationsDataInHouseMessage = (function(_super) {
        __extends(MapComplementaryInformationsDataInHouseMessage, _super);

        function MapComplementaryInformationsDataInHouseMessage() {
            this.currentHouse = new HouseInformationsInside();
            _super.call(this)
        }
        MapComplementaryInformationsDataInHouseMessage.prototype.getMessageId = function() {
            return MapComplementaryInformationsDataInHouseMessage.ID;
        };
        MapComplementaryInformationsDataInHouseMessage.prototype.reset = function() {
            this.currentHouse = new HouseInformationsInside();
        };
        MapComplementaryInformationsDataInHouseMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MapComplementaryInformationsDataInHouseMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MapComplementaryInformationsDataInHouseMessage.prototype.serialize = function(output) {
            this.serializeAs_MapComplementaryInformationsDataInHouseMessage(output);
        };
        MapComplementaryInformationsDataInHouseMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MapComplementaryInformationsDataInHouseMessage(input);
        };
        MapComplementaryInformationsDataInHouseMessage.prototype.serializeAs_MapComplementaryInformationsDataInHouseMessage = function(output) {
            _super.prototype.serializeAs_MapComplementaryInformationsDataMessage.call(this, output);
            this.currentHouse.serializeAs_HouseInformationsInside(output);
        };
        MapComplementaryInformationsDataInHouseMessage.prototype.deserializeAs_MapComplementaryInformationsDataInHouseMessage = function(input) {
            _super.prototype.deserializeAs_MapComplementaryInformationsDataMessage.call(this, input);
            this.currentHouse = new HouseInformationsInside();
            this.currentHouse.deserialize(input);
        };
        MapComplementaryInformationsDataInHouseMessage.ID = 9214;
        return MapComplementaryInformationsDataInHouseMessage;
    })(MapComplementaryInformationsDataMessage);
    Protocol.MapComplementaryInformationsDataInHouseMessage = MapComplementaryInformationsDataInHouseMessage;
    var MapComplementaryInformationsWithCoordsMessage = (function(_super) {
        __extends(MapComplementaryInformationsWithCoordsMessage, _super);

        function MapComplementaryInformationsWithCoordsMessage() {
            this.worldX = 0;
            this.worldY = 0;
            _super.call(this)
        }
        MapComplementaryInformationsWithCoordsMessage.prototype.getMessageId = function() {
            return MapComplementaryInformationsWithCoordsMessage.ID;
        };
        MapComplementaryInformationsWithCoordsMessage.prototype.reset = function() {
            this.worldX = 0;
            this.worldY = 0;
        };
        MapComplementaryInformationsWithCoordsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MapComplementaryInformationsWithCoordsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MapComplementaryInformationsWithCoordsMessage.prototype.serialize = function(output) {
            this.serializeAs_MapComplementaryInformationsWithCoordsMessage(output);
        };
        MapComplementaryInformationsWithCoordsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MapComplementaryInformationsWithCoordsMessage(input);
        };
        MapComplementaryInformationsWithCoordsMessage.prototype.serializeAs_MapComplementaryInformationsWithCoordsMessage = function(output) {
            _super.prototype.serializeAs_MapComplementaryInformationsDataMessage.call(this, output);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
            }
            output.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
            }
            output.writeShort(this.worldY);
        };
        MapComplementaryInformationsWithCoordsMessage.prototype.deserializeAs_MapComplementaryInformationsWithCoordsMessage = function(input) {
            _super.prototype.deserializeAs_MapComplementaryInformationsDataMessage.call(this, input);
            this.worldX = input.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element of MapComplementaryInformationsWithCoordsMessage.worldX.");
            }
            this.worldY = input.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element of MapComplementaryInformationsWithCoordsMessage.worldY.");
            }
        };
        MapComplementaryInformationsWithCoordsMessage.ID = 5308;
        return MapComplementaryInformationsWithCoordsMessage;
    })(MapComplementaryInformationsDataMessage);
    Protocol.MapComplementaryInformationsWithCoordsMessage = MapComplementaryInformationsWithCoordsMessage;
    var MapFightCountMessage = (function(_super) {
        __extends(MapFightCountMessage, _super);

        function MapFightCountMessage() {
            this.fightCount = 0;
            _super.call(this)
        }
        MapFightCountMessage.prototype.getMessageId = function() {
            return MapFightCountMessage.ID;
        };
        MapFightCountMessage.prototype.reset = function() {
            this.fightCount = 0;
        };
        MapFightCountMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MapFightCountMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MapFightCountMessage.prototype.serialize = function(output) {
            this.serializeAs_MapFightCountMessage(output);
        };
        MapFightCountMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MapFightCountMessage(input);
        };
        MapFightCountMessage.prototype.serializeAs_MapFightCountMessage = function(output) {
            if (this.fightCount < 0) {
                throw new Error("Forbidden value (" + this.fightCount + ") on element fightCount.");
            }
            output.writeVarShort(this.fightCount);
        };
        MapFightCountMessage.prototype.deserializeAs_MapFightCountMessage = function(input) {
            this.fightCount = input.readVarUhShort();
            if (this.fightCount < 0) {
                throw new Error("Forbidden value (" + this.fightCount + ") on element of MapFightCountMessage.fightCount.");
            }
        };
        MapFightCountMessage.ID = 3684;
        return MapFightCountMessage;
    })(NetworkMessage);
    Protocol.MapFightCountMessage = MapFightCountMessage;
    var MapFightStartPositionsUpdateMessage = (function(_super) {
        __extends(MapFightStartPositionsUpdateMessage, _super);

        function MapFightStartPositionsUpdateMessage() {
            this.mapId = 0;
            this.fightStartPositions = new FightStartingPositions();
            _super.call(this)
        }
        MapFightStartPositionsUpdateMessage.prototype.getMessageId = function() {
            return MapFightStartPositionsUpdateMessage.ID;
        };
        MapFightStartPositionsUpdateMessage.prototype.reset = function() {
            this.mapId = 0;
            this.fightStartPositions = new FightStartingPositions();
        };
        MapFightStartPositionsUpdateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MapFightStartPositionsUpdateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MapFightStartPositionsUpdateMessage.prototype.serialize = function(output) {
            this.serializeAs_MapFightStartPositionsUpdateMessage(output);
        };
        MapFightStartPositionsUpdateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MapFightStartPositionsUpdateMessage(input);
        };
        MapFightStartPositionsUpdateMessage.prototype.serializeAs_MapFightStartPositionsUpdateMessage = function(output) {
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            this.fightStartPositions.serializeAs_FightStartingPositions(output);
        };
        MapFightStartPositionsUpdateMessage.prototype.deserializeAs_MapFightStartPositionsUpdateMessage = function(input) {
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of MapFightStartPositionsUpdateMessage.mapId.");
            }
            this.fightStartPositions = new FightStartingPositions();
            this.fightStartPositions.deserialize(input);
        };
        MapFightStartPositionsUpdateMessage.ID = 7089;
        return MapFightStartPositionsUpdateMessage;
    })(NetworkMessage);
    Protocol.MapFightStartPositionsUpdateMessage = MapFightStartPositionsUpdateMessage;
    var MapInformationsRequestMessage = (function(_super) {
        __extends(MapInformationsRequestMessage, _super);

        function MapInformationsRequestMessage() {
            this.mapId = 0;
            _super.call(this)
        }
        MapInformationsRequestMessage.prototype.getMessageId = function() {
            return MapInformationsRequestMessage.ID;
        };
        MapInformationsRequestMessage.prototype.reset = function() {
            this.mapId = 0;
        };
        MapInformationsRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MapInformationsRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MapInformationsRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_MapInformationsRequestMessage(output);
        };
        MapInformationsRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MapInformationsRequestMessage(input);
        };
        MapInformationsRequestMessage.prototype.serializeAs_MapInformationsRequestMessage = function(output) {
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
        };
        MapInformationsRequestMessage.prototype.deserializeAs_MapInformationsRequestMessage = function(input) {
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of MapInformationsRequestMessage.mapId.");
            }
        };
        MapInformationsRequestMessage.ID = 9780;
        return MapInformationsRequestMessage;
    })(NetworkMessage);
    Protocol.MapInformationsRequestMessage = MapInformationsRequestMessage;
    var MapObstacleUpdateMessage = (function(_super) {
        __extends(MapObstacleUpdateMessage, _super);

        function MapObstacleUpdateMessage() {
            this.obstacles = [];
            _super.call(this)
        }
        MapObstacleUpdateMessage.prototype.getMessageId = function() {
            return MapObstacleUpdateMessage.ID;
        };
        MapObstacleUpdateMessage.prototype.reset = function() {
            this.obstacles = [];
        };
        MapObstacleUpdateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MapObstacleUpdateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MapObstacleUpdateMessage.prototype.serialize = function(output) {
            this.serializeAs_MapObstacleUpdateMessage(output);
        };
        MapObstacleUpdateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MapObstacleUpdateMessage(input);
        };
        MapObstacleUpdateMessage.prototype.serializeAs_MapObstacleUpdateMessage = function(output) {
            output.writeShort(this.obstacles.length);
            for (var _i1 = 0; _i1 < this.obstacles.length; _i1++) {
                (this.obstacles[_i1]).serializeAs_MapObstacle(output);
            }
        };
        MapObstacleUpdateMessage.prototype.deserializeAs_MapObstacleUpdateMessage = function(input) {
            var _item1 = null;
            var _obstaclesLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _obstaclesLen; _i1++) {
                _item1 = new MapObstacle();
                _item1.deserialize(input);
                this.obstacles.push(_item1);
            }
        };
        MapObstacleUpdateMessage.ID = 6903;
        return MapObstacleUpdateMessage;
    })(NetworkMessage);
    Protocol.MapObstacleUpdateMessage = MapObstacleUpdateMessage;
    var MapRewardRateMessage = (function(_super) {
        __extends(MapRewardRateMessage, _super);

        function MapRewardRateMessage() {
            this.mapRate = 0;
            this.subAreaRate = 0;
            this.totalRate = 0;
            _super.call(this)
        }
        MapRewardRateMessage.prototype.getMessageId = function() {
            return MapRewardRateMessage.ID;
        };
        MapRewardRateMessage.prototype.reset = function() {
            this.mapRate = 0;
            this.subAreaRate = 0;
            this.totalRate = 0;
        };
        MapRewardRateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MapRewardRateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MapRewardRateMessage.prototype.serialize = function(output) {
            this.serializeAs_MapRewardRateMessage(output);
        };
        MapRewardRateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MapRewardRateMessage(input);
        };
        MapRewardRateMessage.prototype.serializeAs_MapRewardRateMessage = function(output) {
            output.writeVarShort(this.mapRate);
            output.writeVarShort(this.subAreaRate);
            output.writeVarShort(this.totalRate);
        };
        MapRewardRateMessage.prototype.deserializeAs_MapRewardRateMessage = function(input) {
            this.mapRate = input.readVarShort();
            this.subAreaRate = input.readVarShort();
            this.totalRate = input.readVarShort();
        };
        MapRewardRateMessage.ID = 2130;
        return MapRewardRateMessage;
    })(NetworkMessage);
    Protocol.MapRewardRateMessage = MapRewardRateMessage;
    var MapRunningFightDetailsMessage = (function(_super) {
        __extends(MapRunningFightDetailsMessage, _super);

        function MapRunningFightDetailsMessage() {
            this.fightId = 0;
            this.attackers = [];
            this.defenders = [];
            _super.call(this)
        }
        MapRunningFightDetailsMessage.prototype.getMessageId = function() {
            return MapRunningFightDetailsMessage.ID;
        };
        MapRunningFightDetailsMessage.prototype.reset = function() {
            this.fightId = 0;
            this.attackers = [];
            this.defenders = [];
        };
        MapRunningFightDetailsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MapRunningFightDetailsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MapRunningFightDetailsMessage.prototype.serialize = function(output) {
            this.serializeAs_MapRunningFightDetailsMessage(output);
        };
        MapRunningFightDetailsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MapRunningFightDetailsMessage(input);
        };
        MapRunningFightDetailsMessage.prototype.serializeAs_MapRunningFightDetailsMessage = function(output) {
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeVarShort(this.fightId);
            output.writeShort(this.attackers.length);
            for (var _i2 = 0; _i2 < this.attackers.length; _i2++) {
                output.writeShort((this.attackers[_i2]).getTypeId());
                (this.attackers[_i2]).serialize(output);
            }
            output.writeShort(this.defenders.length);
            for (var _i3 = 0; _i3 < this.defenders.length; _i3++) {
                output.writeShort((this.defenders[_i3]).getTypeId());
                (this.defenders[_i3]).serialize(output);
            }
        };
        MapRunningFightDetailsMessage.prototype.deserializeAs_MapRunningFightDetailsMessage = function(input) {
            var _id2 = 0;
            var _item2 = null;
            var _id3 = 0;
            var _item3 = null;
            this.fightId = input.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of MapRunningFightDetailsMessage.fightId.");
            }
            var _attackersLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _attackersLen; _i2++) {
                _id2 = input.readUnsignedShort();
                _item2 = ProtocolTypeManager.getInstance(GameFightFighterLightInformations, _id2);
                _item2.deserialize(input);
                this.attackers.push(_item2);
            }
            var _defendersLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _defendersLen; _i3++) {
                _id3 = input.readUnsignedShort();
                _item3 = ProtocolTypeManager.getInstance(GameFightFighterLightInformations, _id3);
                _item3.deserialize(input);
                this.defenders.push(_item3);
            }
        };
        MapRunningFightDetailsMessage.ID = 8222;
        return MapRunningFightDetailsMessage;
    })(NetworkMessage);
    Protocol.MapRunningFightDetailsMessage = MapRunningFightDetailsMessage;
    var MapRunningFightDetailsExtendedMessage = (function(_super) {
        __extends(MapRunningFightDetailsExtendedMessage, _super);

        function MapRunningFightDetailsExtendedMessage() {
            this.namedPartyTeams = [];
            _super.call(this)
        }
        MapRunningFightDetailsExtendedMessage.prototype.getMessageId = function() {
            return MapRunningFightDetailsExtendedMessage.ID;
        };
        MapRunningFightDetailsExtendedMessage.prototype.reset = function() {
            this.namedPartyTeams = [];
        };
        MapRunningFightDetailsExtendedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MapRunningFightDetailsExtendedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MapRunningFightDetailsExtendedMessage.prototype.serialize = function(output) {
            this.serializeAs_MapRunningFightDetailsExtendedMessage(output);
        };
        MapRunningFightDetailsExtendedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MapRunningFightDetailsExtendedMessage(input);
        };
        MapRunningFightDetailsExtendedMessage.prototype.serializeAs_MapRunningFightDetailsExtendedMessage = function(output) {
            _super.prototype.serializeAs_MapRunningFightDetailsMessage.call(this, output);
            output.writeShort(this.namedPartyTeams.length);
            for (var _i1 = 0; _i1 < this.namedPartyTeams.length; _i1++) {
                (this.namedPartyTeams[_i1]).serializeAs_NamedPartyTeam(output);
            }
        };
        MapRunningFightDetailsExtendedMessage.prototype.deserializeAs_MapRunningFightDetailsExtendedMessage = function(input) {
            var _item1 = null;
            _super.prototype.deserializeAs_MapRunningFightDetailsMessage.call(this, input);
            var _namedPartyTeamsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _namedPartyTeamsLen; _i1++) {
                _item1 = new NamedPartyTeam();
                _item1.deserialize(input);
                this.namedPartyTeams.push(_item1);
            }
        };
        MapRunningFightDetailsExtendedMessage.ID = 3172;
        return MapRunningFightDetailsExtendedMessage;
    })(MapRunningFightDetailsMessage);
    Protocol.MapRunningFightDetailsExtendedMessage = MapRunningFightDetailsExtendedMessage;
    var MapRunningFightDetailsRequestMessage = (function(_super) {
        __extends(MapRunningFightDetailsRequestMessage, _super);

        function MapRunningFightDetailsRequestMessage() {
            this.fightId = 0;
            _super.call(this)
        }
        MapRunningFightDetailsRequestMessage.prototype.getMessageId = function() {
            return MapRunningFightDetailsRequestMessage.ID;
        };
        MapRunningFightDetailsRequestMessage.prototype.reset = function() {
            this.fightId = 0;
        };
        MapRunningFightDetailsRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MapRunningFightDetailsRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MapRunningFightDetailsRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_MapRunningFightDetailsRequestMessage(output);
        };
        MapRunningFightDetailsRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MapRunningFightDetailsRequestMessage(input);
        };
        MapRunningFightDetailsRequestMessage.prototype.serializeAs_MapRunningFightDetailsRequestMessage = function(output) {
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeVarShort(this.fightId);
        };
        MapRunningFightDetailsRequestMessage.prototype.deserializeAs_MapRunningFightDetailsRequestMessage = function(input) {
            this.fightId = input.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of MapRunningFightDetailsRequestMessage.fightId.");
            }
        };
        MapRunningFightDetailsRequestMessage.ID = 8879;
        return MapRunningFightDetailsRequestMessage;
    })(NetworkMessage);
    Protocol.MapRunningFightDetailsRequestMessage = MapRunningFightDetailsRequestMessage;
    var MapRunningFightListMessage = (function(_super) {
        __extends(MapRunningFightListMessage, _super);

        function MapRunningFightListMessage() {
            this.fights = [];
            _super.call(this)
        }
        MapRunningFightListMessage.prototype.getMessageId = function() {
            return MapRunningFightListMessage.ID;
        };
        MapRunningFightListMessage.prototype.reset = function() {
            this.fights = [];
        };
        MapRunningFightListMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MapRunningFightListMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MapRunningFightListMessage.prototype.serialize = function(output) {
            this.serializeAs_MapRunningFightListMessage(output);
        };
        MapRunningFightListMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MapRunningFightListMessage(input);
        };
        MapRunningFightListMessage.prototype.serializeAs_MapRunningFightListMessage = function(output) {
            output.writeShort(this.fights.length);
            for (var _i1 = 0; _i1 < this.fights.length; _i1++) {
                (this.fights[_i1]).serializeAs_FightExternalInformations(output);
            }
        };
        MapRunningFightListMessage.prototype.deserializeAs_MapRunningFightListMessage = function(input) {
            var _item1 = null;
            var _fightsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _fightsLen; _i1++) {
                _item1 = new FightExternalInformations();
                _item1.deserialize(input);
                this.fights.push(_item1);
            }
        };
        MapRunningFightListMessage.ID = 2666;
        return MapRunningFightListMessage;
    })(NetworkMessage);
    Protocol.MapRunningFightListMessage = MapRunningFightListMessage;
    var MapRunningFightListRequestMessage = (function(_super) {
        __extends(MapRunningFightListRequestMessage, _super);

        function MapRunningFightListRequestMessage() {

            _super.call(this)
        }
        MapRunningFightListRequestMessage.prototype.getMessageId = function() {
            return MapRunningFightListRequestMessage.ID;
        };
        MapRunningFightListRequestMessage.prototype.reset = function() {

        };
        MapRunningFightListRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MapRunningFightListRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MapRunningFightListRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_MapRunningFightListRequestMessage(output);
        };
        MapRunningFightListRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MapRunningFightListRequestMessage(input);
        };
        MapRunningFightListRequestMessage.prototype.serializeAs_MapRunningFightListRequestMessage = function(output) {

        };
        MapRunningFightListRequestMessage.prototype.deserializeAs_MapRunningFightListRequestMessage = function(input) {

        };
        MapRunningFightListRequestMessage.ID = 4556;
        return MapRunningFightListRequestMessage;
    })(NetworkMessage);
    Protocol.MapRunningFightListRequestMessage = MapRunningFightListRequestMessage;
    var AlliancePrismDialogQuestionMessage = (function(_super) {
        __extends(AlliancePrismDialogQuestionMessage, _super);

        function AlliancePrismDialogQuestionMessage() {

            _super.call(this)
        }
        AlliancePrismDialogQuestionMessage.prototype.getMessageId = function() {
            return AlliancePrismDialogQuestionMessage.ID;
        };
        AlliancePrismDialogQuestionMessage.prototype.reset = function() {

        };
        AlliancePrismDialogQuestionMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AlliancePrismDialogQuestionMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AlliancePrismDialogQuestionMessage.prototype.serialize = function(output) {
            this.serializeAs_AlliancePrismDialogQuestionMessage(output);
        };
        AlliancePrismDialogQuestionMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AlliancePrismDialogQuestionMessage(input);
        };
        AlliancePrismDialogQuestionMessage.prototype.serializeAs_AlliancePrismDialogQuestionMessage = function(output) {

        };
        AlliancePrismDialogQuestionMessage.prototype.deserializeAs_AlliancePrismDialogQuestionMessage = function(input) {

        };
        AlliancePrismDialogQuestionMessage.ID = 7636;
        return AlliancePrismDialogQuestionMessage;
    })(NetworkMessage);
    Protocol.AlliancePrismDialogQuestionMessage = AlliancePrismDialogQuestionMessage;
    var TaxCollectorDialogQuestionBasicMessage = (function(_super) {
        __extends(TaxCollectorDialogQuestionBasicMessage, _super);

        function TaxCollectorDialogQuestionBasicMessage() {
            this.guildInfo = new BasicGuildInformations();
            _super.call(this)
        }
        TaxCollectorDialogQuestionBasicMessage.prototype.getMessageId = function() {
            return TaxCollectorDialogQuestionBasicMessage.ID;
        };
        TaxCollectorDialogQuestionBasicMessage.prototype.reset = function() {
            this.guildInfo = new BasicGuildInformations();
        };
        TaxCollectorDialogQuestionBasicMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TaxCollectorDialogQuestionBasicMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TaxCollectorDialogQuestionBasicMessage.prototype.serialize = function(output) {
            this.serializeAs_TaxCollectorDialogQuestionBasicMessage(output);
        };
        TaxCollectorDialogQuestionBasicMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TaxCollectorDialogQuestionBasicMessage(input);
        };
        TaxCollectorDialogQuestionBasicMessage.prototype.serializeAs_TaxCollectorDialogQuestionBasicMessage = function(output) {
            this.guildInfo.serializeAs_BasicGuildInformations(output);
        };
        TaxCollectorDialogQuestionBasicMessage.prototype.deserializeAs_TaxCollectorDialogQuestionBasicMessage = function(input) {
            this.guildInfo = new BasicGuildInformations();
            this.guildInfo.deserialize(input);
        };
        TaxCollectorDialogQuestionBasicMessage.ID = 6664;
        return TaxCollectorDialogQuestionBasicMessage;
    })(NetworkMessage);
    Protocol.TaxCollectorDialogQuestionBasicMessage = TaxCollectorDialogQuestionBasicMessage;
    var TaxCollectorDialogQuestionExtendedMessage = (function(_super) {
        __extends(TaxCollectorDialogQuestionExtendedMessage, _super);

        function TaxCollectorDialogQuestionExtendedMessage() {
            this.maxPods = 0;
            this.prospecting = 0;
            this.wisdom = 0;
            this.taxCollectorsCount = 0;
            this.taxCollectorAttack = 0;
            this.kamas = 0;
            this.experience = 0;
            this.pods = 0;
            this.itemsValue = 0;
            _super.call(this)
        }
        TaxCollectorDialogQuestionExtendedMessage.prototype.getMessageId = function() {
            return TaxCollectorDialogQuestionExtendedMessage.ID;
        };
        TaxCollectorDialogQuestionExtendedMessage.prototype.reset = function() {
            this.maxPods = 0;
            this.prospecting = 0;
            this.wisdom = 0;
            this.taxCollectorsCount = 0;
            this.taxCollectorAttack = 0;
            this.kamas = 0;
            this.experience = 0;
            this.pods = 0;
            this.itemsValue = 0;
        };
        TaxCollectorDialogQuestionExtendedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TaxCollectorDialogQuestionExtendedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TaxCollectorDialogQuestionExtendedMessage.prototype.serialize = function(output) {
            this.serializeAs_TaxCollectorDialogQuestionExtendedMessage(output);
        };
        TaxCollectorDialogQuestionExtendedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TaxCollectorDialogQuestionExtendedMessage(input);
        };
        TaxCollectorDialogQuestionExtendedMessage.prototype.serializeAs_TaxCollectorDialogQuestionExtendedMessage = function(output) {
            _super.prototype.serializeAs_TaxCollectorDialogQuestionBasicMessage.call(this, output);
            if (this.maxPods < 0) {
                throw new Error("Forbidden value (" + this.maxPods + ") on element maxPods.");
            }
            output.writeVarShort(this.maxPods);
            if (this.prospecting < 0) {
                throw new Error("Forbidden value (" + this.prospecting + ") on element prospecting.");
            }
            output.writeVarShort(this.prospecting);
            if (this.wisdom < 0) {
                throw new Error("Forbidden value (" + this.wisdom + ") on element wisdom.");
            }
            output.writeVarShort(this.wisdom);
            if (this.taxCollectorsCount < 0) {
                throw new Error("Forbidden value (" + this.taxCollectorsCount + ") on element taxCollectorsCount.");
            }
            output.writeByte(this.taxCollectorsCount);
            output.writeInt(this.taxCollectorAttack);
            if (this.kamas < 0 || this.kamas > 9007199254740990) {
                throw new Error("Forbidden value (" + this.kamas + ") on element kamas.");
            }
            output.writeVarLong(this.kamas);
            if (this.experience < 0 || this.experience > 9007199254740990) {
                throw new Error("Forbidden value (" + this.experience + ") on element experience.");
            }
            output.writeVarLong(this.experience);
            if (this.pods < 0) {
                throw new Error("Forbidden value (" + this.pods + ") on element pods.");
            }
            output.writeVarInt(this.pods);
            if (this.itemsValue < 0 || this.itemsValue > 9007199254740990) {
                throw new Error("Forbidden value (" + this.itemsValue + ") on element itemsValue.");
            }
            output.writeVarLong(this.itemsValue);
        };
        TaxCollectorDialogQuestionExtendedMessage.prototype.deserializeAs_TaxCollectorDialogQuestionExtendedMessage = function(input) {
            _super.prototype.deserializeAs_TaxCollectorDialogQuestionBasicMessage.call(this, input);
            this.maxPods = input.readVarUhShort();
            if (this.maxPods < 0) {
                throw new Error("Forbidden value (" + this.maxPods + ") on element of TaxCollectorDialogQuestionExtendedMessage.maxPods.");
            }
            this.prospecting = input.readVarUhShort();
            if (this.prospecting < 0) {
                throw new Error("Forbidden value (" + this.prospecting + ") on element of TaxCollectorDialogQuestionExtendedMessage.prospecting.");
            }
            this.wisdom = input.readVarUhShort();
            if (this.wisdom < 0) {
                throw new Error("Forbidden value (" + this.wisdom + ") on element of TaxCollectorDialogQuestionExtendedMessage.wisdom.");
            }
            this.taxCollectorsCount = input.readByte();
            if (this.taxCollectorsCount < 0) {
                throw new Error("Forbidden value (" + this.taxCollectorsCount + ") on element of TaxCollectorDialogQuestionExtendedMessage.taxCollectorsCount.");
            }
            this.taxCollectorAttack = input.readInt();
            this.kamas = input.readVarUhLong();
            if (this.kamas < 0 || this.kamas > 9007199254740990) {
                throw new Error("Forbidden value (" + this.kamas + ") on element of TaxCollectorDialogQuestionExtendedMessage.kamas.");
            }
            this.experience = input.readVarUhLong();
            if (this.experience < 0 || this.experience > 9007199254740990) {
                throw new Error("Forbidden value (" + this.experience + ") on element of TaxCollectorDialogQuestionExtendedMessage.experience.");
            }
            this.pods = input.readVarUhInt();
            if (this.pods < 0) {
                throw new Error("Forbidden value (" + this.pods + ") on element of TaxCollectorDialogQuestionExtendedMessage.pods.");
            }
            this.itemsValue = input.readVarUhLong();
            if (this.itemsValue < 0 || this.itemsValue > 9007199254740990) {
                throw new Error("Forbidden value (" + this.itemsValue + ") on element of TaxCollectorDialogQuestionExtendedMessage.itemsValue.");
            }
        };
        TaxCollectorDialogQuestionExtendedMessage.ID = 9199;
        return TaxCollectorDialogQuestionExtendedMessage;
    })(TaxCollectorDialogQuestionBasicMessage);
    Protocol.TaxCollectorDialogQuestionExtendedMessage = TaxCollectorDialogQuestionExtendedMessage;
    var AllianceTaxCollectorDialogQuestionExtendedMessage = (function(_super) {
        __extends(AllianceTaxCollectorDialogQuestionExtendedMessage, _super);

        function AllianceTaxCollectorDialogQuestionExtendedMessage() {
            this.alliance = new BasicNamedAllianceInformations();
            _super.call(this)
        }
        AllianceTaxCollectorDialogQuestionExtendedMessage.prototype.getMessageId = function() {
            return AllianceTaxCollectorDialogQuestionExtendedMessage.ID;
        };
        AllianceTaxCollectorDialogQuestionExtendedMessage.prototype.reset = function() {
            this.alliance = new BasicNamedAllianceInformations();
        };
        AllianceTaxCollectorDialogQuestionExtendedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AllianceTaxCollectorDialogQuestionExtendedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AllianceTaxCollectorDialogQuestionExtendedMessage.prototype.serialize = function(output) {
            this.serializeAs_AllianceTaxCollectorDialogQuestionExtendedMessage(output);
        };
        AllianceTaxCollectorDialogQuestionExtendedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AllianceTaxCollectorDialogQuestionExtendedMessage(input);
        };
        AllianceTaxCollectorDialogQuestionExtendedMessage.prototype.serializeAs_AllianceTaxCollectorDialogQuestionExtendedMessage = function(output) {
            _super.prototype.serializeAs_TaxCollectorDialogQuestionExtendedMessage.call(this, output);
            this.alliance.serializeAs_BasicNamedAllianceInformations(output);
        };
        AllianceTaxCollectorDialogQuestionExtendedMessage.prototype.deserializeAs_AllianceTaxCollectorDialogQuestionExtendedMessage = function(input) {
            _super.prototype.deserializeAs_TaxCollectorDialogQuestionExtendedMessage.call(this, input);
            this.alliance = new BasicNamedAllianceInformations();
            this.alliance.deserialize(input);
        };
        AllianceTaxCollectorDialogQuestionExtendedMessage.ID = 1736;
        return AllianceTaxCollectorDialogQuestionExtendedMessage;
    })(TaxCollectorDialogQuestionExtendedMessage);
    Protocol.AllianceTaxCollectorDialogQuestionExtendedMessage = AllianceTaxCollectorDialogQuestionExtendedMessage;
    var EntityTalkMessage = (function(_super) {
        __extends(EntityTalkMessage, _super);

        function EntityTalkMessage() {
            this.entityId = 0;
            this.textId = 0;
            this.parameters = [];
            _super.call(this)
        }
        EntityTalkMessage.prototype.getMessageId = function() {
            return EntityTalkMessage.ID;
        };
        EntityTalkMessage.prototype.reset = function() {
            this.entityId = 0;
            this.textId = 0;
            this.parameters = [];
        };
        EntityTalkMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        EntityTalkMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        EntityTalkMessage.prototype.serialize = function(output) {
            this.serializeAs_EntityTalkMessage(output);
        };
        EntityTalkMessage.prototype.deserialize = function(input) {
            this.deserializeAs_EntityTalkMessage(input);
        };
        EntityTalkMessage.prototype.serializeAs_EntityTalkMessage = function(output) {
            if (this.entityId < -9007199254740990 || this.entityId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.entityId + ") on element entityId.");
            }
            output.writeDouble(this.entityId);
            if (this.textId < 0) {
                throw new Error("Forbidden value (" + this.textId + ") on element textId.");
            }
            output.writeVarShort(this.textId);
            output.writeShort(this.parameters.length);
            for (var _i3 = 0; _i3 < this.parameters.length; _i3++) {
                output.writeUTF(this.parameters[_i3]);
            }
        };
        EntityTalkMessage.prototype.deserializeAs_EntityTalkMessage = function(input) {
            var _val3 = null;
            this.entityId = input.readDouble();
            if (this.entityId < -9007199254740990 || this.entityId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.entityId + ") on element of EntityTalkMessage.entityId.");
            }
            this.textId = input.readVarUhShort();
            if (this.textId < 0) {
                throw new Error("Forbidden value (" + this.textId + ") on element of EntityTalkMessage.textId.");
            }
            var _parametersLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _parametersLen; _i3++) {
                _val3 = input.readUTF();
                this.parameters.push(_val3);
            }
        };
        EntityTalkMessage.ID = 6863;
        return EntityTalkMessage;
    })(NetworkMessage);
    Protocol.EntityTalkMessage = EntityTalkMessage;
    var MapNpcsQuestStatusUpdateMessage = (function(_super) {
        __extends(MapNpcsQuestStatusUpdateMessage, _super);

        function MapNpcsQuestStatusUpdateMessage() {
            this.mapId = 0;
            this.npcsIdsWithQuest = [];
            this.questFlags = [];
            this.npcsIdsWithoutQuest = [];
            _super.call(this)
        }
        MapNpcsQuestStatusUpdateMessage.prototype.getMessageId = function() {
            return MapNpcsQuestStatusUpdateMessage.ID;
        };
        MapNpcsQuestStatusUpdateMessage.prototype.reset = function() {
            this.mapId = 0;
            this.npcsIdsWithQuest = [];
            this.questFlags = [];
            this.npcsIdsWithoutQuest = [];
        };
        MapNpcsQuestStatusUpdateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MapNpcsQuestStatusUpdateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MapNpcsQuestStatusUpdateMessage.prototype.serialize = function(output) {
            this.serializeAs_MapNpcsQuestStatusUpdateMessage(output);
        };
        MapNpcsQuestStatusUpdateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MapNpcsQuestStatusUpdateMessage(input);
        };
        MapNpcsQuestStatusUpdateMessage.prototype.serializeAs_MapNpcsQuestStatusUpdateMessage = function(output) {
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            output.writeShort(this.npcsIdsWithQuest.length);
            for (var _i2 = 0; _i2 < this.npcsIdsWithQuest.length; _i2++) {
                output.writeInt(this.npcsIdsWithQuest[_i2]);
            }
            output.writeShort(this.questFlags.length);
            for (var _i3 = 0; _i3 < this.questFlags.length; _i3++) {
                (this.questFlags[_i3]).serializeAs_GameRolePlayNpcQuestFlag(output);
            }
            output.writeShort(this.npcsIdsWithoutQuest.length);
            for (var _i4 = 0; _i4 < this.npcsIdsWithoutQuest.length; _i4++) {
                output.writeInt(this.npcsIdsWithoutQuest[_i4]);
            }
        };
        MapNpcsQuestStatusUpdateMessage.prototype.deserializeAs_MapNpcsQuestStatusUpdateMessage = function(input) {
            var _val2 = 0;
            var _item3 = null;
            var _val4 = 0;
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of MapNpcsQuestStatusUpdateMessage.mapId.");
            }
            var _npcsIdsWithQuestLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _npcsIdsWithQuestLen; _i2++) {
                _val2 = input.readInt();
                this.npcsIdsWithQuest.push(_val2);
            }
            var _questFlagsLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _questFlagsLen; _i3++) {
                _item3 = new GameRolePlayNpcQuestFlag();
                _item3.deserialize(input);
                this.questFlags.push(_item3);
            }
            var _npcsIdsWithoutQuestLen = input.readUnsignedShort();
            for (var _i4 = 0; _i4 < _npcsIdsWithoutQuestLen; _i4++) {
                _val4 = input.readInt();
                this.npcsIdsWithoutQuest.push(_val4);
            }
        };
        MapNpcsQuestStatusUpdateMessage.ID = 8038;
        return MapNpcsQuestStatusUpdateMessage;
    })(NetworkMessage);
    Protocol.MapNpcsQuestStatusUpdateMessage = MapNpcsQuestStatusUpdateMessage;
    var NpcDialogCreationMessage = (function(_super) {
        __extends(NpcDialogCreationMessage, _super);

        function NpcDialogCreationMessage() {
            this.mapId = 0;
            this.npcId = 0;
            _super.call(this)
        }
        NpcDialogCreationMessage.prototype.getMessageId = function() {
            return NpcDialogCreationMessage.ID;
        };
        NpcDialogCreationMessage.prototype.reset = function() {
            this.mapId = 0;
            this.npcId = 0;
        };
        NpcDialogCreationMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        NpcDialogCreationMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        NpcDialogCreationMessage.prototype.serialize = function(output) {
            this.serializeAs_NpcDialogCreationMessage(output);
        };
        NpcDialogCreationMessage.prototype.deserialize = function(input) {
            this.deserializeAs_NpcDialogCreationMessage(input);
        };
        NpcDialogCreationMessage.prototype.serializeAs_NpcDialogCreationMessage = function(output) {
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            output.writeInt(this.npcId);
        };
        NpcDialogCreationMessage.prototype.deserializeAs_NpcDialogCreationMessage = function(input) {
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of NpcDialogCreationMessage.mapId.");
            }
            this.npcId = input.readInt();
        };
        NpcDialogCreationMessage.ID = 3416;
        return NpcDialogCreationMessage;
    })(NetworkMessage);
    Protocol.NpcDialogCreationMessage = NpcDialogCreationMessage;
    var NpcDialogQuestionMessage = (function(_super) {
        __extends(NpcDialogQuestionMessage, _super);

        function NpcDialogQuestionMessage() {
            this.messageId = 0;
            this.dialogParams = [];
            this.visibleReplies = [];
            _super.call(this)
        }
        NpcDialogQuestionMessage.prototype.getMessageId = function() {
            return NpcDialogQuestionMessage.ID;
        };
        NpcDialogQuestionMessage.prototype.reset = function() {
            this.messageId = 0;
            this.dialogParams = [];
            this.visibleReplies = [];
        };
        NpcDialogQuestionMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        NpcDialogQuestionMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        NpcDialogQuestionMessage.prototype.serialize = function(output) {
            this.serializeAs_NpcDialogQuestionMessage(output);
        };
        NpcDialogQuestionMessage.prototype.deserialize = function(input) {
            this.deserializeAs_NpcDialogQuestionMessage(input);
        };
        NpcDialogQuestionMessage.prototype.serializeAs_NpcDialogQuestionMessage = function(output) {
            if (this.messageId < 0) {
                throw new Error("Forbidden value (" + this.messageId + ") on element messageId.");
            }
            output.writeVarInt(this.messageId);
            output.writeShort(this.dialogParams.length);
            for (var _i2 = 0; _i2 < this.dialogParams.length; _i2++) {
                output.writeUTF(this.dialogParams[_i2]);
            }
            output.writeShort(this.visibleReplies.length);
            for (var _i3 = 0; _i3 < this.visibleReplies.length; _i3++) {
                if (this.visibleReplies[_i3] < 0) {
                    throw new Error("Forbidden value (" + this.visibleReplies[_i3] + ") on element 3 (starting at 1) of visibleReplies.");
                }
                output.writeVarInt(this.visibleReplies[_i3]);
            }
        };
        NpcDialogQuestionMessage.prototype.deserializeAs_NpcDialogQuestionMessage = function(input) {
            var _val2 = null;
            var _val3 = 0;
            this.messageId = input.readVarUhInt();
            if (this.messageId < 0) {
                throw new Error("Forbidden value (" + this.messageId + ") on element of NpcDialogQuestionMessage.messageId.");
            }
            var _dialogParamsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _dialogParamsLen; _i2++) {
                _val2 = input.readUTF();
                this.dialogParams.push(_val2);
            }
            var _visibleRepliesLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _visibleRepliesLen; _i3++) {
                _val3 = input.readVarUhInt();
                if (_val3 < 0) {
                    throw new Error("Forbidden value (" + _val3 + ") on elements of visibleReplies.");
                }
                this.visibleReplies.push(_val3);
            }
        };
        NpcDialogQuestionMessage.ID = 7921;
        return NpcDialogQuestionMessage;
    })(NetworkMessage);
    Protocol.NpcDialogQuestionMessage = NpcDialogQuestionMessage;
    var NpcDialogReplyMessage = (function(_super) {
        __extends(NpcDialogReplyMessage, _super);

        function NpcDialogReplyMessage() {
            this.replyId = 0;
            _super.call(this)
        }
        NpcDialogReplyMessage.prototype.getMessageId = function() {
            return NpcDialogReplyMessage.ID;
        };
        NpcDialogReplyMessage.prototype.reset = function() {
            this.replyId = 0;
        };
        NpcDialogReplyMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        NpcDialogReplyMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        NpcDialogReplyMessage.prototype.serialize = function(output) {
            this.serializeAs_NpcDialogReplyMessage(output);
        };
        NpcDialogReplyMessage.prototype.deserialize = function(input) {
            this.deserializeAs_NpcDialogReplyMessage(input);
        };
        NpcDialogReplyMessage.prototype.serializeAs_NpcDialogReplyMessage = function(output) {
            if (this.replyId < 0) {
                throw new Error("Forbidden value (" + this.replyId + ") on element replyId.");
            }
            output.writeVarInt(this.replyId);
        };
        NpcDialogReplyMessage.prototype.deserializeAs_NpcDialogReplyMessage = function(input) {
            this.replyId = input.readVarUhInt();
            if (this.replyId < 0) {
                throw new Error("Forbidden value (" + this.replyId + ") on element of NpcDialogReplyMessage.replyId.");
            }
        };
        NpcDialogReplyMessage.ID = 6305;
        return NpcDialogReplyMessage;
    })(NetworkMessage);
    Protocol.NpcDialogReplyMessage = NpcDialogReplyMessage;
    var NpcGenericActionFailureMessage = (function(_super) {
        __extends(NpcGenericActionFailureMessage, _super);

        function NpcGenericActionFailureMessage() {

            _super.call(this)
        }
        NpcGenericActionFailureMessage.prototype.getMessageId = function() {
            return NpcGenericActionFailureMessage.ID;
        };
        NpcGenericActionFailureMessage.prototype.reset = function() {

        };
        NpcGenericActionFailureMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        NpcGenericActionFailureMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        NpcGenericActionFailureMessage.prototype.serialize = function(output) {
            this.serializeAs_NpcGenericActionFailureMessage(output);
        };
        NpcGenericActionFailureMessage.prototype.deserialize = function(input) {
            this.deserializeAs_NpcGenericActionFailureMessage(input);
        };
        NpcGenericActionFailureMessage.prototype.serializeAs_NpcGenericActionFailureMessage = function(output) {

        };
        NpcGenericActionFailureMessage.prototype.deserializeAs_NpcGenericActionFailureMessage = function(input) {

        };
        NpcGenericActionFailureMessage.ID = 1685;
        return NpcGenericActionFailureMessage;
    })(NetworkMessage);
    Protocol.NpcGenericActionFailureMessage = NpcGenericActionFailureMessage;
    var NpcGenericActionRequestMessage = (function(_super) {
        __extends(NpcGenericActionRequestMessage, _super);

        function NpcGenericActionRequestMessage() {
            this.npcId = 0;
            this.npcActionId = 0;
            this.npcMapId = 0;
            _super.call(this)
        }
        NpcGenericActionRequestMessage.prototype.getMessageId = function() {
            return NpcGenericActionRequestMessage.ID;
        };
        NpcGenericActionRequestMessage.prototype.reset = function() {
            this.npcId = 0;
            this.npcActionId = 0;
            this.npcMapId = 0;
        };
        NpcGenericActionRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        NpcGenericActionRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        NpcGenericActionRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_NpcGenericActionRequestMessage(output);
        };
        NpcGenericActionRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_NpcGenericActionRequestMessage(input);
        };
        NpcGenericActionRequestMessage.prototype.serializeAs_NpcGenericActionRequestMessage = function(output) {
            output.writeInt(this.npcId);
            if (this.npcActionId < 0) {
                throw new Error("Forbidden value (" + this.npcActionId + ") on element npcActionId.");
            }
            output.writeByte(this.npcActionId);
            if (this.npcMapId < 0 || this.npcMapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.npcMapId + ") on element npcMapId.");
            }
            output.writeDouble(this.npcMapId);
        };
        NpcGenericActionRequestMessage.prototype.deserializeAs_NpcGenericActionRequestMessage = function(input) {
            this.npcId = input.readInt();
            this.npcActionId = input.readByte();
            if (this.npcActionId < 0) {
                throw new Error("Forbidden value (" + this.npcActionId + ") on element of NpcGenericActionRequestMessage.npcActionId.");
            }
            this.npcMapId = input.readDouble();
            if (this.npcMapId < 0 || this.npcMapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.npcMapId + ") on element of NpcGenericActionRequestMessage.npcMapId.");
            }
        };
        NpcGenericActionRequestMessage.ID = 6002;
        return NpcGenericActionRequestMessage;
    })(NetworkMessage);
    Protocol.NpcGenericActionRequestMessage = NpcGenericActionRequestMessage;
    var PortalDialogCreationMessage = (function(_super) {
        __extends(PortalDialogCreationMessage, _super);

        function PortalDialogCreationMessage() {
            this.type = 0;
            _super.call(this)
        }
        PortalDialogCreationMessage.prototype.getMessageId = function() {
            return PortalDialogCreationMessage.ID;
        };
        PortalDialogCreationMessage.prototype.reset = function() {
            this.type = 0;
        };
        PortalDialogCreationMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PortalDialogCreationMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PortalDialogCreationMessage.prototype.serialize = function(output) {
            this.serializeAs_PortalDialogCreationMessage(output);
        };
        PortalDialogCreationMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PortalDialogCreationMessage(input);
        };
        PortalDialogCreationMessage.prototype.serializeAs_PortalDialogCreationMessage = function(output) {
            _super.prototype.serializeAs_NpcDialogCreationMessage.call(this, output);
            output.writeInt(this.type);
        };
        PortalDialogCreationMessage.prototype.deserializeAs_PortalDialogCreationMessage = function(input) {
            _super.prototype.deserializeAs_NpcDialogCreationMessage.call(this, input);
            this.type = input.readInt();
            if (this.type < 0) {
                throw new Error("Forbidden value (" + this.type + ") on element of PortalDialogCreationMessage.type.");
            }
        };
        PortalDialogCreationMessage.ID = 9795;
        return PortalDialogCreationMessage;
    })(NpcDialogCreationMessage);
    Protocol.PortalDialogCreationMessage = PortalDialogCreationMessage;
    var ObjectGroundAddedMessage = (function(_super) {
        __extends(ObjectGroundAddedMessage, _super);

        function ObjectGroundAddedMessage() {
            this.cellId = 0;
            this.objectGID = 0;
            _super.call(this)
        }
        ObjectGroundAddedMessage.prototype.getMessageId = function() {
            return ObjectGroundAddedMessage.ID;
        };
        ObjectGroundAddedMessage.prototype.reset = function() {
            this.cellId = 0;
            this.objectGID = 0;
        };
        ObjectGroundAddedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ObjectGroundAddedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ObjectGroundAddedMessage.prototype.serialize = function(output) {
            this.serializeAs_ObjectGroundAddedMessage(output);
        };
        ObjectGroundAddedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectGroundAddedMessage(input);
        };
        ObjectGroundAddedMessage.prototype.serializeAs_ObjectGroundAddedMessage = function(output) {
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
            }
            output.writeVarShort(this.cellId);
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element objectGID.");
            }
            output.writeVarShort(this.objectGID);
        };
        ObjectGroundAddedMessage.prototype.deserializeAs_ObjectGroundAddedMessage = function(input) {
            this.cellId = input.readVarUhShort();
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element of ObjectGroundAddedMessage.cellId.");
            }
            this.objectGID = input.readVarUhShort();
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element of ObjectGroundAddedMessage.objectGID.");
            }
        };
        ObjectGroundAddedMessage.ID = 3539;
        return ObjectGroundAddedMessage;
    })(NetworkMessage);
    Protocol.ObjectGroundAddedMessage = ObjectGroundAddedMessage;
    var ObjectGroundListAddedMessage = (function(_super) {
        __extends(ObjectGroundListAddedMessage, _super);

        function ObjectGroundListAddedMessage() {
            this.cells = [];
            this.referenceIds = [];
            _super.call(this)
        }
        ObjectGroundListAddedMessage.prototype.getMessageId = function() {
            return ObjectGroundListAddedMessage.ID;
        };
        ObjectGroundListAddedMessage.prototype.reset = function() {
            this.cells = [];
            this.referenceIds = [];
        };
        ObjectGroundListAddedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ObjectGroundListAddedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ObjectGroundListAddedMessage.prototype.serialize = function(output) {
            this.serializeAs_ObjectGroundListAddedMessage(output);
        };
        ObjectGroundListAddedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectGroundListAddedMessage(input);
        };
        ObjectGroundListAddedMessage.prototype.serializeAs_ObjectGroundListAddedMessage = function(output) {
            output.writeShort(this.cells.length);
            for (var _i1 = 0; _i1 < this.cells.length; _i1++) {
                if (this.cells[_i1] < 0 || this.cells[_i1] > 559) {
                    throw new Error("Forbidden value (" + this.cells[_i1] + ") on element 1 (starting at 1) of cells.");
                }
                output.writeVarShort(this.cells[_i1]);
            }
            output.writeShort(this.referenceIds.length);
            for (var _i2 = 0; _i2 < this.referenceIds.length; _i2++) {
                if (this.referenceIds[_i2] < 0) {
                    throw new Error("Forbidden value (" + this.referenceIds[_i2] + ") on element 2 (starting at 1) of referenceIds.");
                }
                output.writeVarShort(this.referenceIds[_i2]);
            }
        };
        ObjectGroundListAddedMessage.prototype.deserializeAs_ObjectGroundListAddedMessage = function(input) {
            var _val1 = 0;
            var _val2 = 0;
            var _cellsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _cellsLen; _i1++) {
                _val1 = input.readVarUhShort();
                if (_val1 < 0 || _val1 > 559) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of cells.");
                }
                this.cells.push(_val1);
            }
            var _referenceIdsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _referenceIdsLen; _i2++) {
                _val2 = input.readVarUhShort();
                if (_val2 < 0) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of referenceIds.");
                }
                this.referenceIds.push(_val2);
            }
        };
        ObjectGroundListAddedMessage.ID = 2797;
        return ObjectGroundListAddedMessage;
    })(NetworkMessage);
    Protocol.ObjectGroundListAddedMessage = ObjectGroundListAddedMessage;
    var ObjectGroundRemovedMessage = (function(_super) {
        __extends(ObjectGroundRemovedMessage, _super);

        function ObjectGroundRemovedMessage() {
            this.cell = 0;
            _super.call(this)
        }
        ObjectGroundRemovedMessage.prototype.getMessageId = function() {
            return ObjectGroundRemovedMessage.ID;
        };
        ObjectGroundRemovedMessage.prototype.reset = function() {
            this.cell = 0;
        };
        ObjectGroundRemovedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ObjectGroundRemovedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ObjectGroundRemovedMessage.prototype.serialize = function(output) {
            this.serializeAs_ObjectGroundRemovedMessage(output);
        };
        ObjectGroundRemovedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectGroundRemovedMessage(input);
        };
        ObjectGroundRemovedMessage.prototype.serializeAs_ObjectGroundRemovedMessage = function(output) {
            if (this.cell < 0 || this.cell > 559) {
                throw new Error("Forbidden value (" + this.cell + ") on element cell.");
            }
            output.writeVarShort(this.cell);
        };
        ObjectGroundRemovedMessage.prototype.deserializeAs_ObjectGroundRemovedMessage = function(input) {
            this.cell = input.readVarUhShort();
            if (this.cell < 0 || this.cell > 559) {
                throw new Error("Forbidden value (" + this.cell + ") on element of ObjectGroundRemovedMessage.cell.");
            }
        };
        ObjectGroundRemovedMessage.ID = 5737;
        return ObjectGroundRemovedMessage;
    })(NetworkMessage);
    Protocol.ObjectGroundRemovedMessage = ObjectGroundRemovedMessage;
    var ObjectGroundRemovedMultipleMessage = (function(_super) {
        __extends(ObjectGroundRemovedMultipleMessage, _super);

        function ObjectGroundRemovedMultipleMessage() {
            this.cells = [];
            _super.call(this)
        }
        ObjectGroundRemovedMultipleMessage.prototype.getMessageId = function() {
            return ObjectGroundRemovedMultipleMessage.ID;
        };
        ObjectGroundRemovedMultipleMessage.prototype.reset = function() {
            this.cells = [];
        };
        ObjectGroundRemovedMultipleMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ObjectGroundRemovedMultipleMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ObjectGroundRemovedMultipleMessage.prototype.serialize = function(output) {
            this.serializeAs_ObjectGroundRemovedMultipleMessage(output);
        };
        ObjectGroundRemovedMultipleMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectGroundRemovedMultipleMessage(input);
        };
        ObjectGroundRemovedMultipleMessage.prototype.serializeAs_ObjectGroundRemovedMultipleMessage = function(output) {
            output.writeShort(this.cells.length);
            for (var _i1 = 0; _i1 < this.cells.length; _i1++) {
                if (this.cells[_i1] < 0 || this.cells[_i1] > 559) {
                    throw new Error("Forbidden value (" + this.cells[_i1] + ") on element 1 (starting at 1) of cells.");
                }
                output.writeVarShort(this.cells[_i1]);
            }
        };
        ObjectGroundRemovedMultipleMessage.prototype.deserializeAs_ObjectGroundRemovedMultipleMessage = function(input) {
            var _val1 = 0;
            var _cellsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _cellsLen; _i1++) {
                _val1 = input.readVarUhShort();
                if (_val1 < 0 || _val1 > 559) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of cells.");
                }
                this.cells.push(_val1);
            }
        };
        ObjectGroundRemovedMultipleMessage.ID = 420;
        return ObjectGroundRemovedMultipleMessage;
    })(NetworkMessage);
    Protocol.ObjectGroundRemovedMultipleMessage = ObjectGroundRemovedMultipleMessage;
    var GameDataPlayFarmObjectAnimationMessage = (function(_super) {
        __extends(GameDataPlayFarmObjectAnimationMessage, _super);

        function GameDataPlayFarmObjectAnimationMessage() {
            this.cellId = [];
            _super.call(this)
        }
        GameDataPlayFarmObjectAnimationMessage.prototype.getMessageId = function() {
            return GameDataPlayFarmObjectAnimationMessage.ID;
        };
        GameDataPlayFarmObjectAnimationMessage.prototype.reset = function() {
            this.cellId = [];
        };
        GameDataPlayFarmObjectAnimationMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameDataPlayFarmObjectAnimationMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameDataPlayFarmObjectAnimationMessage.prototype.serialize = function(output) {
            this.serializeAs_GameDataPlayFarmObjectAnimationMessage(output);
        };
        GameDataPlayFarmObjectAnimationMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameDataPlayFarmObjectAnimationMessage(input);
        };
        GameDataPlayFarmObjectAnimationMessage.prototype.serializeAs_GameDataPlayFarmObjectAnimationMessage = function(output) {
            output.writeShort(this.cellId.length);
            for (var _i1 = 0; _i1 < this.cellId.length; _i1++) {
                if (this.cellId[_i1] < 0 || this.cellId[_i1] > 559) {
                    throw new Error("Forbidden value (" + this.cellId[_i1] + ") on element 1 (starting at 1) of cellId.");
                }
                output.writeVarShort(this.cellId[_i1]);
            }
        };
        GameDataPlayFarmObjectAnimationMessage.prototype.deserializeAs_GameDataPlayFarmObjectAnimationMessage = function(input) {
            var _val1 = 0;
            var _cellIdLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _cellIdLen; _i1++) {
                _val1 = input.readVarUhShort();
                if (_val1 < 0 || _val1 > 559) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of cellId.");
                }
                this.cellId.push(_val1);
            }
        };
        GameDataPlayFarmObjectAnimationMessage.ID = 8442;
        return GameDataPlayFarmObjectAnimationMessage;
    })(NetworkMessage);
    Protocol.GameDataPlayFarmObjectAnimationMessage = GameDataPlayFarmObjectAnimationMessage;
    var PaddockPropertiesMessage = (function(_super) {
        __extends(PaddockPropertiesMessage, _super);

        function PaddockPropertiesMessage() {
            this.properties = new PaddockInstancesInformations();
            _super.call(this)
        }
        PaddockPropertiesMessage.prototype.getMessageId = function() {
            return PaddockPropertiesMessage.ID;
        };
        PaddockPropertiesMessage.prototype.reset = function() {
            this.properties = new PaddockInstancesInformations();
        };
        PaddockPropertiesMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PaddockPropertiesMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PaddockPropertiesMessage.prototype.serialize = function(output) {
            this.serializeAs_PaddockPropertiesMessage(output);
        };
        PaddockPropertiesMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PaddockPropertiesMessage(input);
        };
        PaddockPropertiesMessage.prototype.serializeAs_PaddockPropertiesMessage = function(output) {
            this.properties.serializeAs_PaddockInstancesInformations(output);
        };
        PaddockPropertiesMessage.prototype.deserializeAs_PaddockPropertiesMessage = function(input) {
            this.properties = new PaddockInstancesInformations();
            this.properties.deserialize(input);
        };
        PaddockPropertiesMessage.ID = 2259;
        return PaddockPropertiesMessage;
    })(NetworkMessage);
    Protocol.PaddockPropertiesMessage = PaddockPropertiesMessage;
    var PaddockSellBuyDialogMessage = (function(_super) {
        __extends(PaddockSellBuyDialogMessage, _super);

        function PaddockSellBuyDialogMessage() {
            this.bsell = false;
            this.ownerId = 0;
            this.price = 0;
            _super.call(this)
        }
        PaddockSellBuyDialogMessage.prototype.getMessageId = function() {
            return PaddockSellBuyDialogMessage.ID;
        };
        PaddockSellBuyDialogMessage.prototype.reset = function() {
            this.bsell = false;
            this.ownerId = 0;
            this.price = 0;
        };
        PaddockSellBuyDialogMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PaddockSellBuyDialogMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PaddockSellBuyDialogMessage.prototype.serialize = function(output) {
            this.serializeAs_PaddockSellBuyDialogMessage(output);
        };
        PaddockSellBuyDialogMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PaddockSellBuyDialogMessage(input);
        };
        PaddockSellBuyDialogMessage.prototype.serializeAs_PaddockSellBuyDialogMessage = function(output) {
            output.writeBoolean(this.bsell);
            if (this.ownerId < 0) {
                throw new Error("Forbidden value (" + this.ownerId + ") on element ownerId.");
            }
            output.writeVarInt(this.ownerId);
            if (this.price < 0 || this.price > 9007199254740990) {
                throw new Error("Forbidden value (" + this.price + ") on element price.");
            }
            output.writeVarLong(this.price);
        };
        PaddockSellBuyDialogMessage.prototype.deserializeAs_PaddockSellBuyDialogMessage = function(input) {
            this.bsell = input.readBoolean();
            this.ownerId = input.readVarUhInt();
            if (this.ownerId < 0) {
                throw new Error("Forbidden value (" + this.ownerId + ") on element of PaddockSellBuyDialogMessage.ownerId.");
            }
            this.price = input.readVarUhLong();
            if (this.price < 0 || this.price > 9007199254740990) {
                throw new Error("Forbidden value (" + this.price + ") on element of PaddockSellBuyDialogMessage.price.");
            }
        };
        PaddockSellBuyDialogMessage.ID = 8137;
        return PaddockSellBuyDialogMessage;
    })(NetworkMessage);
    Protocol.PaddockSellBuyDialogMessage = PaddockSellBuyDialogMessage;
    var PaddockToSellFilterMessage = (function(_super) {
        __extends(PaddockToSellFilterMessage, _super);

        function PaddockToSellFilterMessage() {
            this.areaId = 0;
            this.atLeastNbMount = 0;
            this.atLeastNbMachine = 0;
            this.maxPrice = 0;
            this.orderBy = 0;
            _super.call(this)
        }
        PaddockToSellFilterMessage.prototype.getMessageId = function() {
            return PaddockToSellFilterMessage.ID;
        };
        PaddockToSellFilterMessage.prototype.reset = function() {
            this.areaId = 0;
            this.atLeastNbMount = 0;
            this.atLeastNbMachine = 0;
            this.maxPrice = 0;
            this.orderBy = 0;
        };
        PaddockToSellFilterMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PaddockToSellFilterMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PaddockToSellFilterMessage.prototype.serialize = function(output) {
            this.serializeAs_PaddockToSellFilterMessage(output);
        };
        PaddockToSellFilterMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PaddockToSellFilterMessage(input);
        };
        PaddockToSellFilterMessage.prototype.serializeAs_PaddockToSellFilterMessage = function(output) {
            output.writeInt(this.areaId);
            output.writeByte(this.atLeastNbMount);
            output.writeByte(this.atLeastNbMachine);
            if (this.maxPrice < 0 || this.maxPrice > 9007199254740990) {
                throw new Error("Forbidden value (" + this.maxPrice + ") on element maxPrice.");
            }
            output.writeVarLong(this.maxPrice);
            output.writeByte(this.orderBy);
        };
        PaddockToSellFilterMessage.prototype.deserializeAs_PaddockToSellFilterMessage = function(input) {
            this.areaId = input.readInt();
            this.atLeastNbMount = input.readByte();
            this.atLeastNbMachine = input.readByte();
            this.maxPrice = input.readVarUhLong();
            if (this.maxPrice < 0 || this.maxPrice > 9007199254740990) {
                throw new Error("Forbidden value (" + this.maxPrice + ") on element of PaddockToSellFilterMessage.maxPrice.");
            }
            this.orderBy = input.readByte();
            if (this.orderBy < 0) {
                throw new Error("Forbidden value (" + this.orderBy + ") on element of PaddockToSellFilterMessage.orderBy.");
            }
        };
        PaddockToSellFilterMessage.ID = 1885;
        return PaddockToSellFilterMessage;
    })(NetworkMessage);
    Protocol.PaddockToSellFilterMessage = PaddockToSellFilterMessage;
    var PaddockToSellListMessage = (function(_super) {
        __extends(PaddockToSellListMessage, _super);

        function PaddockToSellListMessage() {
            this.pageIndex = 0;
            this.totalPage = 0;
            this.paddockList = [];
            _super.call(this)
        }
        PaddockToSellListMessage.prototype.getMessageId = function() {
            return PaddockToSellListMessage.ID;
        };
        PaddockToSellListMessage.prototype.reset = function() {
            this.pageIndex = 0;
            this.totalPage = 0;
            this.paddockList = [];
        };
        PaddockToSellListMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PaddockToSellListMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PaddockToSellListMessage.prototype.serialize = function(output) {
            this.serializeAs_PaddockToSellListMessage(output);
        };
        PaddockToSellListMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PaddockToSellListMessage(input);
        };
        PaddockToSellListMessage.prototype.serializeAs_PaddockToSellListMessage = function(output) {
            if (this.pageIndex < 0) {
                throw new Error("Forbidden value (" + this.pageIndex + ") on element pageIndex.");
            }
            output.writeVarShort(this.pageIndex);
            if (this.totalPage < 0) {
                throw new Error("Forbidden value (" + this.totalPage + ") on element totalPage.");
            }
            output.writeVarShort(this.totalPage);
            output.writeShort(this.paddockList.length);
            for (var _i3 = 0; _i3 < this.paddockList.length; _i3++) {
                (this.paddockList[_i3]).serializeAs_PaddockInformationsForSell(output);
            }
        };
        PaddockToSellListMessage.prototype.deserializeAs_PaddockToSellListMessage = function(input) {
            var _item3 = null;
            this.pageIndex = input.readVarUhShort();
            if (this.pageIndex < 0) {
                throw new Error("Forbidden value (" + this.pageIndex + ") on element of PaddockToSellListMessage.pageIndex.");
            }
            this.totalPage = input.readVarUhShort();
            if (this.totalPage < 0) {
                throw new Error("Forbidden value (" + this.totalPage + ") on element of PaddockToSellListMessage.totalPage.");
            }
            var _paddockListLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _paddockListLen; _i3++) {
                _item3 = new PaddockInformationsForSell();
                _item3.deserialize(input);
                this.paddockList.push(_item3);
            }
        };
        PaddockToSellListMessage.ID = 2971;
        return PaddockToSellListMessage;
    })(NetworkMessage);
    Protocol.PaddockToSellListMessage = PaddockToSellListMessage;
    var PaddockToSellListRequestMessage = (function(_super) {
        __extends(PaddockToSellListRequestMessage, _super);

        function PaddockToSellListRequestMessage() {
            this.pageIndex = 0;
            _super.call(this)
        }
        PaddockToSellListRequestMessage.prototype.getMessageId = function() {
            return PaddockToSellListRequestMessage.ID;
        };
        PaddockToSellListRequestMessage.prototype.reset = function() {
            this.pageIndex = 0;
        };
        PaddockToSellListRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PaddockToSellListRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PaddockToSellListRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_PaddockToSellListRequestMessage(output);
        };
        PaddockToSellListRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PaddockToSellListRequestMessage(input);
        };
        PaddockToSellListRequestMessage.prototype.serializeAs_PaddockToSellListRequestMessage = function(output) {
            if (this.pageIndex < 0) {
                throw new Error("Forbidden value (" + this.pageIndex + ") on element pageIndex.");
            }
            output.writeVarShort(this.pageIndex);
        };
        PaddockToSellListRequestMessage.prototype.deserializeAs_PaddockToSellListRequestMessage = function(input) {
            this.pageIndex = input.readVarUhShort();
            if (this.pageIndex < 0) {
                throw new Error("Forbidden value (" + this.pageIndex + ") on element of PaddockToSellListRequestMessage.pageIndex.");
            }
        };
        PaddockToSellListRequestMessage.ID = 6059;
        return PaddockToSellListRequestMessage;
    })(NetworkMessage);
    Protocol.PaddockToSellListRequestMessage = PaddockToSellListRequestMessage;
    var AbstractPartyMessage = (function(_super) {
        __extends(AbstractPartyMessage, _super);

        function AbstractPartyMessage() {
            this.partyId = 0;
            _super.call(this)
        }
        AbstractPartyMessage.prototype.getMessageId = function() {
            return AbstractPartyMessage.ID;
        };
        AbstractPartyMessage.prototype.reset = function() {
            this.partyId = 0;
        };
        AbstractPartyMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AbstractPartyMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AbstractPartyMessage.prototype.serialize = function(output) {
            this.serializeAs_AbstractPartyMessage(output);
        };
        AbstractPartyMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AbstractPartyMessage(input);
        };
        AbstractPartyMessage.prototype.serializeAs_AbstractPartyMessage = function(output) {
            if (this.partyId < 0) {
                throw new Error("Forbidden value (" + this.partyId + ") on element partyId.");
            }
            output.writeVarInt(this.partyId);
        };
        AbstractPartyMessage.prototype.deserializeAs_AbstractPartyMessage = function(input) {
            this.partyId = input.readVarUhInt();
            if (this.partyId < 0) {
                throw new Error("Forbidden value (" + this.partyId + ") on element of AbstractPartyMessage.partyId.");
            }
        };
        AbstractPartyMessage.ID = 995;
        return AbstractPartyMessage;
    })(NetworkMessage);
    Protocol.AbstractPartyMessage = AbstractPartyMessage;
    var AbstractPartyEventMessage = (function(_super) {
        __extends(AbstractPartyEventMessage, _super);

        function AbstractPartyEventMessage() {

            _super.call(this)
        }
        AbstractPartyEventMessage.prototype.getMessageId = function() {
            return AbstractPartyEventMessage.ID;
        };
        AbstractPartyEventMessage.prototype.reset = function() {

        };
        AbstractPartyEventMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AbstractPartyEventMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AbstractPartyEventMessage.prototype.serialize = function(output) {
            this.serializeAs_AbstractPartyEventMessage(output);
        };
        AbstractPartyEventMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AbstractPartyEventMessage(input);
        };
        AbstractPartyEventMessage.prototype.serializeAs_AbstractPartyEventMessage = function(output) {
            _super.prototype.serializeAs_AbstractPartyMessage.call(this, output);
        };
        AbstractPartyEventMessage.prototype.deserializeAs_AbstractPartyEventMessage = function(input) {
            _super.prototype.deserializeAs_AbstractPartyMessage.call(this, input);
        };
        AbstractPartyEventMessage.ID = 2338;
        return AbstractPartyEventMessage;
    })(AbstractPartyMessage);
    Protocol.AbstractPartyEventMessage = AbstractPartyEventMessage;
    var AbstractPartyMemberInFightMessage = (function(_super) {
        __extends(AbstractPartyMemberInFightMessage, _super);

        function AbstractPartyMemberInFightMessage() {
            this.reason = 0;
            this.memberId = 0;
            this.memberAccountId = 0;
            this.memberName = "";
            this.fightId = 0;
            this.timeBeforeFightStart = 0;
            _super.call(this)
        }
        AbstractPartyMemberInFightMessage.prototype.getMessageId = function() {
            return AbstractPartyMemberInFightMessage.ID;
        };
        AbstractPartyMemberInFightMessage.prototype.reset = function() {
            this.reason = 0;
            this.memberId = 0;
            this.memberAccountId = 0;
            this.memberName = "";
            this.fightId = 0;
            this.timeBeforeFightStart = 0;
        };
        AbstractPartyMemberInFightMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AbstractPartyMemberInFightMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AbstractPartyMemberInFightMessage.prototype.serialize = function(output) {
            this.serializeAs_AbstractPartyMemberInFightMessage(output);
        };
        AbstractPartyMemberInFightMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AbstractPartyMemberInFightMessage(input);
        };
        AbstractPartyMemberInFightMessage.prototype.serializeAs_AbstractPartyMemberInFightMessage = function(output) {
            _super.prototype.serializeAs_AbstractPartyMessage.call(this, output);
            output.writeByte(this.reason);
            if (this.memberId < 0 || this.memberId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.memberId + ") on element memberId.");
            }
            output.writeVarLong(this.memberId);
            if (this.memberAccountId < 0) {
                throw new Error("Forbidden value (" + this.memberAccountId + ") on element memberAccountId.");
            }
            output.writeInt(this.memberAccountId);
            output.writeUTF(this.memberName);
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeVarShort(this.fightId);
            output.writeVarShort(this.timeBeforeFightStart);
        };
        AbstractPartyMemberInFightMessage.prototype.deserializeAs_AbstractPartyMemberInFightMessage = function(input) {
            _super.prototype.deserializeAs_AbstractPartyMessage.call(this, input);
            this.reason = input.readByte();
            if (this.reason < 0) {
                throw new Error("Forbidden value (" + this.reason + ") on element of AbstractPartyMemberInFightMessage.reason.");
            }
            this.memberId = input.readVarUhLong();
            if (this.memberId < 0 || this.memberId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.memberId + ") on element of AbstractPartyMemberInFightMessage.memberId.");
            }
            this.memberAccountId = input.readInt();
            if (this.memberAccountId < 0) {
                throw new Error("Forbidden value (" + this.memberAccountId + ") on element of AbstractPartyMemberInFightMessage.memberAccountId.");
            }
            this.memberName = input.readUTF();
            this.fightId = input.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of AbstractPartyMemberInFightMessage.fightId.");
            }
            this.timeBeforeFightStart = input.readVarShort();
        };
        AbstractPartyMemberInFightMessage.ID = 5489;
        return AbstractPartyMemberInFightMessage;
    })(AbstractPartyMessage);
    Protocol.AbstractPartyMemberInFightMessage = AbstractPartyMemberInFightMessage;
    var PartyMemberInBreachFightMessage = (function(_super) {
        __extends(PartyMemberInBreachFightMessage, _super);

        function PartyMemberInBreachFightMessage() {
            this.floor = 0;
            this.room = 0;
            _super.call(this)
        }
        PartyMemberInBreachFightMessage.prototype.getMessageId = function() {
            return PartyMemberInBreachFightMessage.ID;
        };
        PartyMemberInBreachFightMessage.prototype.reset = function() {
            this.floor = 0;
            this.room = 0;
        };
        PartyMemberInBreachFightMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyMemberInBreachFightMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyMemberInBreachFightMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyMemberInBreachFightMessage(output);
        };
        PartyMemberInBreachFightMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyMemberInBreachFightMessage(input);
        };
        PartyMemberInBreachFightMessage.prototype.serializeAs_PartyMemberInBreachFightMessage = function(output) {
            _super.prototype.serializeAs_AbstractPartyMemberInFightMessage.call(this, output);
            if (this.floor < 0) {
                throw new Error("Forbidden value (" + this.floor + ") on element floor.");
            }
            output.writeVarInt(this.floor);
            if (this.room < 0) {
                throw new Error("Forbidden value (" + this.room + ") on element room.");
            }
            output.writeByte(this.room);
        };
        PartyMemberInBreachFightMessage.prototype.deserializeAs_PartyMemberInBreachFightMessage = function(input) {
            _super.prototype.deserializeAs_AbstractPartyMemberInFightMessage.call(this, input);
            this.floor = input.readVarUhInt();
            if (this.floor < 0) {
                throw new Error("Forbidden value (" + this.floor + ") on element of PartyMemberInBreachFightMessage.floor.");
            }
            this.room = input.readByte();
            if (this.room < 0) {
                throw new Error("Forbidden value (" + this.room + ") on element of PartyMemberInBreachFightMessage.room.");
            }
        };
        PartyMemberInBreachFightMessage.ID = 3413;
        return PartyMemberInBreachFightMessage;
    })(AbstractPartyMemberInFightMessage);
    Protocol.PartyMemberInBreachFightMessage = PartyMemberInBreachFightMessage;
    var DungeonPartyFinderAvailableDungeonsMessage = (function(_super) {
        __extends(DungeonPartyFinderAvailableDungeonsMessage, _super);

        function DungeonPartyFinderAvailableDungeonsMessage() {
            this.dungeonIds = [];
            _super.call(this)
        }
        DungeonPartyFinderAvailableDungeonsMessage.prototype.getMessageId = function() {
            return DungeonPartyFinderAvailableDungeonsMessage.ID;
        };
        DungeonPartyFinderAvailableDungeonsMessage.prototype.reset = function() {
            this.dungeonIds = [];
        };
        DungeonPartyFinderAvailableDungeonsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        DungeonPartyFinderAvailableDungeonsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        DungeonPartyFinderAvailableDungeonsMessage.prototype.serialize = function(output) {
            this.serializeAs_DungeonPartyFinderAvailableDungeonsMessage(output);
        };
        DungeonPartyFinderAvailableDungeonsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_DungeonPartyFinderAvailableDungeonsMessage(input);
        };
        DungeonPartyFinderAvailableDungeonsMessage.prototype.serializeAs_DungeonPartyFinderAvailableDungeonsMessage = function(output) {
            output.writeShort(this.dungeonIds.length);
            for (var _i1 = 0; _i1 < this.dungeonIds.length; _i1++) {
                if (this.dungeonIds[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.dungeonIds[_i1] + ") on element 1 (starting at 1) of dungeonIds.");
                }
                output.writeVarShort(this.dungeonIds[_i1]);
            }
        };
        DungeonPartyFinderAvailableDungeonsMessage.prototype.deserializeAs_DungeonPartyFinderAvailableDungeonsMessage = function(input) {
            var _val1 = 0;
            var _dungeonIdsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _dungeonIdsLen; _i1++) {
                _val1 = input.readVarUhShort();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of dungeonIds.");
                }
                this.dungeonIds.push(_val1);
            }
        };
        DungeonPartyFinderAvailableDungeonsMessage.ID = 5177;
        return DungeonPartyFinderAvailableDungeonsMessage;
    })(NetworkMessage);
    Protocol.DungeonPartyFinderAvailableDungeonsMessage = DungeonPartyFinderAvailableDungeonsMessage;
    var DungeonPartyFinderAvailableDungeonsRequestMessage = (function(_super) {
        __extends(DungeonPartyFinderAvailableDungeonsRequestMessage, _super);

        function DungeonPartyFinderAvailableDungeonsRequestMessage() {

            _super.call(this)
        }
        DungeonPartyFinderAvailableDungeonsRequestMessage.prototype.getMessageId = function() {
            return DungeonPartyFinderAvailableDungeonsRequestMessage.ID;
        };
        DungeonPartyFinderAvailableDungeonsRequestMessage.prototype.reset = function() {

        };
        DungeonPartyFinderAvailableDungeonsRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        DungeonPartyFinderAvailableDungeonsRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        DungeonPartyFinderAvailableDungeonsRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_DungeonPartyFinderAvailableDungeonsRequestMessage(output);
        };
        DungeonPartyFinderAvailableDungeonsRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_DungeonPartyFinderAvailableDungeonsRequestMessage(input);
        };
        DungeonPartyFinderAvailableDungeonsRequestMessage.prototype.serializeAs_DungeonPartyFinderAvailableDungeonsRequestMessage = function(output) {

        };
        DungeonPartyFinderAvailableDungeonsRequestMessage.prototype.deserializeAs_DungeonPartyFinderAvailableDungeonsRequestMessage = function(input) {

        };
        DungeonPartyFinderAvailableDungeonsRequestMessage.ID = 8721;
        return DungeonPartyFinderAvailableDungeonsRequestMessage;
    })(NetworkMessage);
    Protocol.DungeonPartyFinderAvailableDungeonsRequestMessage = DungeonPartyFinderAvailableDungeonsRequestMessage;
    var DungeonPartyFinderListenErrorMessage = (function(_super) {
        __extends(DungeonPartyFinderListenErrorMessage, _super);

        function DungeonPartyFinderListenErrorMessage() {
            this.dungeonId = 0;
            _super.call(this)
        }
        DungeonPartyFinderListenErrorMessage.prototype.getMessageId = function() {
            return DungeonPartyFinderListenErrorMessage.ID;
        };
        DungeonPartyFinderListenErrorMessage.prototype.reset = function() {
            this.dungeonId = 0;
        };
        DungeonPartyFinderListenErrorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        DungeonPartyFinderListenErrorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        DungeonPartyFinderListenErrorMessage.prototype.serialize = function(output) {
            this.serializeAs_DungeonPartyFinderListenErrorMessage(output);
        };
        DungeonPartyFinderListenErrorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_DungeonPartyFinderListenErrorMessage(input);
        };
        DungeonPartyFinderListenErrorMessage.prototype.serializeAs_DungeonPartyFinderListenErrorMessage = function(output) {
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
            }
            output.writeVarShort(this.dungeonId);
        };
        DungeonPartyFinderListenErrorMessage.prototype.deserializeAs_DungeonPartyFinderListenErrorMessage = function(input) {
            this.dungeonId = input.readVarUhShort();
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element of DungeonPartyFinderListenErrorMessage.dungeonId.");
            }
        };
        DungeonPartyFinderListenErrorMessage.ID = 8025;
        return DungeonPartyFinderListenErrorMessage;
    })(NetworkMessage);
    Protocol.DungeonPartyFinderListenErrorMessage = DungeonPartyFinderListenErrorMessage;
    var DungeonPartyFinderListenRequestMessage = (function(_super) {
        __extends(DungeonPartyFinderListenRequestMessage, _super);

        function DungeonPartyFinderListenRequestMessage() {
            this.dungeonId = 0;
            _super.call(this)
        }
        DungeonPartyFinderListenRequestMessage.prototype.getMessageId = function() {
            return DungeonPartyFinderListenRequestMessage.ID;
        };
        DungeonPartyFinderListenRequestMessage.prototype.reset = function() {
            this.dungeonId = 0;
        };
        DungeonPartyFinderListenRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        DungeonPartyFinderListenRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        DungeonPartyFinderListenRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_DungeonPartyFinderListenRequestMessage(output);
        };
        DungeonPartyFinderListenRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_DungeonPartyFinderListenRequestMessage(input);
        };
        DungeonPartyFinderListenRequestMessage.prototype.serializeAs_DungeonPartyFinderListenRequestMessage = function(output) {
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
            }
            output.writeVarShort(this.dungeonId);
        };
        DungeonPartyFinderListenRequestMessage.prototype.deserializeAs_DungeonPartyFinderListenRequestMessage = function(input) {
            this.dungeonId = input.readVarUhShort();
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element of DungeonPartyFinderListenRequestMessage.dungeonId.");
            }
        };
        DungeonPartyFinderListenRequestMessage.ID = 5213;
        return DungeonPartyFinderListenRequestMessage;
    })(NetworkMessage);
    Protocol.DungeonPartyFinderListenRequestMessage = DungeonPartyFinderListenRequestMessage;
    var DungeonPartyFinderRegisterErrorMessage = (function(_super) {
        __extends(DungeonPartyFinderRegisterErrorMessage, _super);

        function DungeonPartyFinderRegisterErrorMessage() {

            _super.call(this)
        }
        DungeonPartyFinderRegisterErrorMessage.prototype.getMessageId = function() {
            return DungeonPartyFinderRegisterErrorMessage.ID;
        };
        DungeonPartyFinderRegisterErrorMessage.prototype.reset = function() {

        };
        DungeonPartyFinderRegisterErrorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        DungeonPartyFinderRegisterErrorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        DungeonPartyFinderRegisterErrorMessage.prototype.serialize = function(output) {
            this.serializeAs_DungeonPartyFinderRegisterErrorMessage(output);
        };
        DungeonPartyFinderRegisterErrorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_DungeonPartyFinderRegisterErrorMessage(input);
        };
        DungeonPartyFinderRegisterErrorMessage.prototype.serializeAs_DungeonPartyFinderRegisterErrorMessage = function(output) {

        };
        DungeonPartyFinderRegisterErrorMessage.prototype.deserializeAs_DungeonPartyFinderRegisterErrorMessage = function(input) {

        };
        DungeonPartyFinderRegisterErrorMessage.ID = 8304;
        return DungeonPartyFinderRegisterErrorMessage;
    })(NetworkMessage);
    Protocol.DungeonPartyFinderRegisterErrorMessage = DungeonPartyFinderRegisterErrorMessage;
    var DungeonPartyFinderRegisterRequestMessage = (function(_super) {
        __extends(DungeonPartyFinderRegisterRequestMessage, _super);

        function DungeonPartyFinderRegisterRequestMessage() {
            this.dungeonIds = [];
            _super.call(this)
        }
        DungeonPartyFinderRegisterRequestMessage.prototype.getMessageId = function() {
            return DungeonPartyFinderRegisterRequestMessage.ID;
        };
        DungeonPartyFinderRegisterRequestMessage.prototype.reset = function() {
            this.dungeonIds = [];
        };
        DungeonPartyFinderRegisterRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        DungeonPartyFinderRegisterRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        DungeonPartyFinderRegisterRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_DungeonPartyFinderRegisterRequestMessage(output);
        };
        DungeonPartyFinderRegisterRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_DungeonPartyFinderRegisterRequestMessage(input);
        };
        DungeonPartyFinderRegisterRequestMessage.prototype.serializeAs_DungeonPartyFinderRegisterRequestMessage = function(output) {
            output.writeShort(this.dungeonIds.length);
            for (var _i1 = 0; _i1 < this.dungeonIds.length; _i1++) {
                if (this.dungeonIds[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.dungeonIds[_i1] + ") on element 1 (starting at 1) of dungeonIds.");
                }
                output.writeVarShort(this.dungeonIds[_i1]);
            }
        };
        DungeonPartyFinderRegisterRequestMessage.prototype.deserializeAs_DungeonPartyFinderRegisterRequestMessage = function(input) {
            var _val1 = 0;
            var _dungeonIdsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _dungeonIdsLen; _i1++) {
                _val1 = input.readVarUhShort();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of dungeonIds.");
                }
                this.dungeonIds.push(_val1);
            }
        };
        DungeonPartyFinderRegisterRequestMessage.ID = 5219;
        return DungeonPartyFinderRegisterRequestMessage;
    })(NetworkMessage);
    Protocol.DungeonPartyFinderRegisterRequestMessage = DungeonPartyFinderRegisterRequestMessage;
    var DungeonPartyFinderRegisterSuccessMessage = (function(_super) {
        __extends(DungeonPartyFinderRegisterSuccessMessage, _super);

        function DungeonPartyFinderRegisterSuccessMessage() {
            this.dungeonIds = [];
            _super.call(this)
        }
        DungeonPartyFinderRegisterSuccessMessage.prototype.getMessageId = function() {
            return DungeonPartyFinderRegisterSuccessMessage.ID;
        };
        DungeonPartyFinderRegisterSuccessMessage.prototype.reset = function() {
            this.dungeonIds = [];
        };
        DungeonPartyFinderRegisterSuccessMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        DungeonPartyFinderRegisterSuccessMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        DungeonPartyFinderRegisterSuccessMessage.prototype.serialize = function(output) {
            this.serializeAs_DungeonPartyFinderRegisterSuccessMessage(output);
        };
        DungeonPartyFinderRegisterSuccessMessage.prototype.deserialize = function(input) {
            this.deserializeAs_DungeonPartyFinderRegisterSuccessMessage(input);
        };
        DungeonPartyFinderRegisterSuccessMessage.prototype.serializeAs_DungeonPartyFinderRegisterSuccessMessage = function(output) {
            output.writeShort(this.dungeonIds.length);
            for (var _i1 = 0; _i1 < this.dungeonIds.length; _i1++) {
                if (this.dungeonIds[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.dungeonIds[_i1] + ") on element 1 (starting at 1) of dungeonIds.");
                }
                output.writeVarShort(this.dungeonIds[_i1]);
            }
        };
        DungeonPartyFinderRegisterSuccessMessage.prototype.deserializeAs_DungeonPartyFinderRegisterSuccessMessage = function(input) {
            var _val1 = 0;
            var _dungeonIdsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _dungeonIdsLen; _i1++) {
                _val1 = input.readVarUhShort();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of dungeonIds.");
                }
                this.dungeonIds.push(_val1);
            }
        };
        DungeonPartyFinderRegisterSuccessMessage.ID = 971;
        return DungeonPartyFinderRegisterSuccessMessage;
    })(NetworkMessage);
    Protocol.DungeonPartyFinderRegisterSuccessMessage = DungeonPartyFinderRegisterSuccessMessage;
    var DungeonPartyFinderRoomContentMessage = (function(_super) {
        __extends(DungeonPartyFinderRoomContentMessage, _super);

        function DungeonPartyFinderRoomContentMessage() {
            this.dungeonId = 0;
            this.players = [];
            _super.call(this)
        }
        DungeonPartyFinderRoomContentMessage.prototype.getMessageId = function() {
            return DungeonPartyFinderRoomContentMessage.ID;
        };
        DungeonPartyFinderRoomContentMessage.prototype.reset = function() {
            this.dungeonId = 0;
            this.players = [];
        };
        DungeonPartyFinderRoomContentMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        DungeonPartyFinderRoomContentMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        DungeonPartyFinderRoomContentMessage.prototype.serialize = function(output) {
            this.serializeAs_DungeonPartyFinderRoomContentMessage(output);
        };
        DungeonPartyFinderRoomContentMessage.prototype.deserialize = function(input) {
            this.deserializeAs_DungeonPartyFinderRoomContentMessage(input);
        };
        DungeonPartyFinderRoomContentMessage.prototype.serializeAs_DungeonPartyFinderRoomContentMessage = function(output) {
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
            }
            output.writeVarShort(this.dungeonId);
            output.writeShort(this.players.length);
            for (var _i2 = 0; _i2 < this.players.length; _i2++) {
                (this.players[_i2]).serializeAs_DungeonPartyFinderPlayer(output);
            }
        };
        DungeonPartyFinderRoomContentMessage.prototype.deserializeAs_DungeonPartyFinderRoomContentMessage = function(input) {
            var _item2 = null;
            this.dungeonId = input.readVarUhShort();
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element of DungeonPartyFinderRoomContentMessage.dungeonId.");
            }
            var _playersLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _playersLen; _i2++) {
                _item2 = new DungeonPartyFinderPlayer();
                _item2.deserialize(input);
                this.players.push(_item2);
            }
        };
        DungeonPartyFinderRoomContentMessage.ID = 3771;
        return DungeonPartyFinderRoomContentMessage;
    })(NetworkMessage);
    Protocol.DungeonPartyFinderRoomContentMessage = DungeonPartyFinderRoomContentMessage;
    var DungeonPartyFinderRoomContentUpdateMessage = (function(_super) {
        __extends(DungeonPartyFinderRoomContentUpdateMessage, _super);

        function DungeonPartyFinderRoomContentUpdateMessage() {
            this.dungeonId = 0;
            this.addedPlayers = [];
            this.removedPlayersIds = [];
            _super.call(this)
        }
        DungeonPartyFinderRoomContentUpdateMessage.prototype.getMessageId = function() {
            return DungeonPartyFinderRoomContentUpdateMessage.ID;
        };
        DungeonPartyFinderRoomContentUpdateMessage.prototype.reset = function() {
            this.dungeonId = 0;
            this.addedPlayers = [];
            this.removedPlayersIds = [];
        };
        DungeonPartyFinderRoomContentUpdateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        DungeonPartyFinderRoomContentUpdateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        DungeonPartyFinderRoomContentUpdateMessage.prototype.serialize = function(output) {
            this.serializeAs_DungeonPartyFinderRoomContentUpdateMessage(output);
        };
        DungeonPartyFinderRoomContentUpdateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_DungeonPartyFinderRoomContentUpdateMessage(input);
        };
        DungeonPartyFinderRoomContentUpdateMessage.prototype.serializeAs_DungeonPartyFinderRoomContentUpdateMessage = function(output) {
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
            }
            output.writeVarShort(this.dungeonId);
            output.writeShort(this.addedPlayers.length);
            for (var _i2 = 0; _i2 < this.addedPlayers.length; _i2++) {
                (this.addedPlayers[_i2]).serializeAs_DungeonPartyFinderPlayer(output);
            }
            output.writeShort(this.removedPlayersIds.length);
            for (var _i3 = 0; _i3 < this.removedPlayersIds.length; _i3++) {
                if (this.removedPlayersIds[_i3] < 0 || this.removedPlayersIds[_i3] > 9007199254740990) {
                    throw new Error("Forbidden value (" + this.removedPlayersIds[_i3] + ") on element 3 (starting at 1) of removedPlayersIds.");
                }
                output.writeVarLong(this.removedPlayersIds[_i3]);
            }
        };
        DungeonPartyFinderRoomContentUpdateMessage.prototype.deserializeAs_DungeonPartyFinderRoomContentUpdateMessage = function(input) {
            var _item2 = null;
            var _val3 = NaN;
            this.dungeonId = input.readVarUhShort();
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element of DungeonPartyFinderRoomContentUpdateMessage.dungeonId.");
            }
            var _addedPlayersLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _addedPlayersLen; _i2++) {
                _item2 = new DungeonPartyFinderPlayer();
                _item2.deserialize(input);
                this.addedPlayers.push(_item2);
            }
            var _removedPlayersIdsLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _removedPlayersIdsLen; _i3++) {
                _val3 = input.readVarUhLong();
                if (_val3 < 0 || _val3 > 9007199254740990) {
                    throw new Error("Forbidden value (" + _val3 + ") on elements of removedPlayersIds.");
                }
                this.removedPlayersIds.push(_val3);
            }
        };
        DungeonPartyFinderRoomContentUpdateMessage.ID = 9690;
        return DungeonPartyFinderRoomContentUpdateMessage;
    })(NetworkMessage);
    Protocol.DungeonPartyFinderRoomContentUpdateMessage = DungeonPartyFinderRoomContentUpdateMessage;
    var PartyUpdateLightMessage = (function(_super) {
        __extends(PartyUpdateLightMessage, _super);

        function PartyUpdateLightMessage() {
            this.id = 0;
            this.lifePoints = 0;
            this.maxLifePoints = 0;
            this.prospecting = 0;
            this.regenRate = 0;
            _super.call(this)
        }
        PartyUpdateLightMessage.prototype.getMessageId = function() {
            return PartyUpdateLightMessage.ID;
        };
        PartyUpdateLightMessage.prototype.reset = function() {
            this.id = 0;
            this.lifePoints = 0;
            this.maxLifePoints = 0;
            this.prospecting = 0;
            this.regenRate = 0;
        };
        PartyUpdateLightMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyUpdateLightMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyUpdateLightMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyUpdateLightMessage(output);
        };
        PartyUpdateLightMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyUpdateLightMessage(input);
        };
        PartyUpdateLightMessage.prototype.serializeAs_PartyUpdateLightMessage = function(output) {
            _super.prototype.serializeAs_AbstractPartyEventMessage.call(this, output);
            if (this.id < 0 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarLong(this.id);
            if (this.lifePoints < 0) {
                throw new Error("Forbidden value (" + this.lifePoints + ") on element lifePoints.");
            }
            output.writeVarInt(this.lifePoints);
            if (this.maxLifePoints < 0) {
                throw new Error("Forbidden value (" + this.maxLifePoints + ") on element maxLifePoints.");
            }
            output.writeVarInt(this.maxLifePoints);
            if (this.prospecting < 0) {
                throw new Error("Forbidden value (" + this.prospecting + ") on element prospecting.");
            }
            output.writeVarShort(this.prospecting);
            if (this.regenRate < 0 || this.regenRate > 255) {
                throw new Error("Forbidden value (" + this.regenRate + ") on element regenRate.");
            }
            output.writeByte(this.regenRate);
        };
        PartyUpdateLightMessage.prototype.deserializeAs_PartyUpdateLightMessage = function(input) {
            _super.prototype.deserializeAs_AbstractPartyEventMessage.call(this, input);
            this.id = input.readVarUhLong();
            if (this.id < 0 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element of PartyUpdateLightMessage.id.");
            }
            this.lifePoints = input.readVarUhInt();
            if (this.lifePoints < 0) {
                throw new Error("Forbidden value (" + this.lifePoints + ") on element of PartyUpdateLightMessage.lifePoints.");
            }
            this.maxLifePoints = input.readVarUhInt();
            if (this.maxLifePoints < 0) {
                throw new Error("Forbidden value (" + this.maxLifePoints + ") on element of PartyUpdateLightMessage.maxLifePoints.");
            }
            this.prospecting = input.readVarUhShort();
            if (this.prospecting < 0) {
                throw new Error("Forbidden value (" + this.prospecting + ") on element of PartyUpdateLightMessage.prospecting.");
            }
            this.regenRate = input.readUnsignedByte();
            if (this.regenRate < 0 || this.regenRate > 255) {
                throw new Error("Forbidden value (" + this.regenRate + ") on element of PartyUpdateLightMessage.regenRate.");
            }
        };
        PartyUpdateLightMessage.ID = 3044;
        return PartyUpdateLightMessage;
    })(AbstractPartyEventMessage);
    Protocol.PartyUpdateLightMessage = PartyUpdateLightMessage;
    var PartyEntityUpdateLightMessage = (function(_super) {
        __extends(PartyEntityUpdateLightMessage, _super);

        function PartyEntityUpdateLightMessage() {
            this.indexId = 0;
            _super.call(this)
        }
        PartyEntityUpdateLightMessage.prototype.getMessageId = function() {
            return PartyEntityUpdateLightMessage.ID;
        };
        PartyEntityUpdateLightMessage.prototype.reset = function() {
            this.indexId = 0;
        };
        PartyEntityUpdateLightMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyEntityUpdateLightMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyEntityUpdateLightMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyEntityUpdateLightMessage(output);
        };
        PartyEntityUpdateLightMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyEntityUpdateLightMessage(input);
        };
        PartyEntityUpdateLightMessage.prototype.serializeAs_PartyEntityUpdateLightMessage = function(output) {
            _super.prototype.serializeAs_PartyUpdateLightMessage.call(this, output);
            if (this.indexId < 0) {
                throw new Error("Forbidden value (" + this.indexId + ") on element indexId.");
            }
            output.writeByte(this.indexId);
        };
        PartyEntityUpdateLightMessage.prototype.deserializeAs_PartyEntityUpdateLightMessage = function(input) {
            _super.prototype.deserializeAs_PartyUpdateLightMessage.call(this, input);
            this.indexId = input.readByte();
            if (this.indexId < 0) {
                throw new Error("Forbidden value (" + this.indexId + ") on element of PartyEntityUpdateLightMessage.indexId.");
            }
        };
        PartyEntityUpdateLightMessage.ID = 3389;
        return PartyEntityUpdateLightMessage;
    })(PartyUpdateLightMessage);
    Protocol.PartyEntityUpdateLightMessage = PartyEntityUpdateLightMessage;
    var PartyAbdicateThroneMessage = (function(_super) {
        __extends(PartyAbdicateThroneMessage, _super);

        function PartyAbdicateThroneMessage() {
            this.playerId = 0;
            _super.call(this)
        }
        PartyAbdicateThroneMessage.prototype.getMessageId = function() {
            return PartyAbdicateThroneMessage.ID;
        };
        PartyAbdicateThroneMessage.prototype.reset = function() {
            this.playerId = 0;
        };
        PartyAbdicateThroneMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyAbdicateThroneMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyAbdicateThroneMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyAbdicateThroneMessage(output);
        };
        PartyAbdicateThroneMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyAbdicateThroneMessage(input);
        };
        PartyAbdicateThroneMessage.prototype.serializeAs_PartyAbdicateThroneMessage = function(output) {
            _super.prototype.serializeAs_AbstractPartyMessage.call(this, output);
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
        };
        PartyAbdicateThroneMessage.prototype.deserializeAs_PartyAbdicateThroneMessage = function(input) {
            _super.prototype.deserializeAs_AbstractPartyMessage.call(this, input);
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of PartyAbdicateThroneMessage.playerId.");
            }
        };
        PartyAbdicateThroneMessage.ID = 2850;
        return PartyAbdicateThroneMessage;
    })(AbstractPartyMessage);
    Protocol.PartyAbdicateThroneMessage = PartyAbdicateThroneMessage;
    var PartyAcceptInvitationMessage = (function(_super) {
        __extends(PartyAcceptInvitationMessage, _super);

        function PartyAcceptInvitationMessage() {

            _super.call(this)
        }
        PartyAcceptInvitationMessage.prototype.getMessageId = function() {
            return PartyAcceptInvitationMessage.ID;
        };
        PartyAcceptInvitationMessage.prototype.reset = function() {

        };
        PartyAcceptInvitationMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyAcceptInvitationMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyAcceptInvitationMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyAcceptInvitationMessage(output);
        };
        PartyAcceptInvitationMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyAcceptInvitationMessage(input);
        };
        PartyAcceptInvitationMessage.prototype.serializeAs_PartyAcceptInvitationMessage = function(output) {
            _super.prototype.serializeAs_AbstractPartyMessage.call(this, output);
        };
        PartyAcceptInvitationMessage.prototype.deserializeAs_PartyAcceptInvitationMessage = function(input) {
            _super.prototype.deserializeAs_AbstractPartyMessage.call(this, input);
        };
        PartyAcceptInvitationMessage.ID = 6538;
        return PartyAcceptInvitationMessage;
    })(AbstractPartyMessage);
    Protocol.PartyAcceptInvitationMessage = PartyAcceptInvitationMessage;
    var PartyCancelInvitationMessage = (function(_super) {
        __extends(PartyCancelInvitationMessage, _super);

        function PartyCancelInvitationMessage() {
            this.guestId = 0;
            _super.call(this)
        }
        PartyCancelInvitationMessage.prototype.getMessageId = function() {
            return PartyCancelInvitationMessage.ID;
        };
        PartyCancelInvitationMessage.prototype.reset = function() {
            this.guestId = 0;
        };
        PartyCancelInvitationMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyCancelInvitationMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyCancelInvitationMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyCancelInvitationMessage(output);
        };
        PartyCancelInvitationMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyCancelInvitationMessage(input);
        };
        PartyCancelInvitationMessage.prototype.serializeAs_PartyCancelInvitationMessage = function(output) {
            _super.prototype.serializeAs_AbstractPartyMessage.call(this, output);
            if (this.guestId < 0 || this.guestId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.guestId + ") on element guestId.");
            }
            output.writeVarLong(this.guestId);
        };
        PartyCancelInvitationMessage.prototype.deserializeAs_PartyCancelInvitationMessage = function(input) {
            _super.prototype.deserializeAs_AbstractPartyMessage.call(this, input);
            this.guestId = input.readVarUhLong();
            if (this.guestId < 0 || this.guestId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.guestId + ") on element of PartyCancelInvitationMessage.guestId.");
            }
        };
        PartyCancelInvitationMessage.ID = 1048;
        return PartyCancelInvitationMessage;
    })(AbstractPartyMessage);
    Protocol.PartyCancelInvitationMessage = PartyCancelInvitationMessage;
    var PartyCancelInvitationNotificationMessage = (function(_super) {
        __extends(PartyCancelInvitationNotificationMessage, _super);

        function PartyCancelInvitationNotificationMessage() {
            this.cancelerId = 0;
            this.guestId = 0;
            _super.call(this)
        }
        PartyCancelInvitationNotificationMessage.prototype.getMessageId = function() {
            return PartyCancelInvitationNotificationMessage.ID;
        };
        PartyCancelInvitationNotificationMessage.prototype.reset = function() {
            this.cancelerId = 0;
            this.guestId = 0;
        };
        PartyCancelInvitationNotificationMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyCancelInvitationNotificationMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyCancelInvitationNotificationMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyCancelInvitationNotificationMessage(output);
        };
        PartyCancelInvitationNotificationMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyCancelInvitationNotificationMessage(input);
        };
        PartyCancelInvitationNotificationMessage.prototype.serializeAs_PartyCancelInvitationNotificationMessage = function(output) {
            _super.prototype.serializeAs_AbstractPartyEventMessage.call(this, output);
            if (this.cancelerId < 0 || this.cancelerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.cancelerId + ") on element cancelerId.");
            }
            output.writeVarLong(this.cancelerId);
            if (this.guestId < 0 || this.guestId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.guestId + ") on element guestId.");
            }
            output.writeVarLong(this.guestId);
        };
        PartyCancelInvitationNotificationMessage.prototype.deserializeAs_PartyCancelInvitationNotificationMessage = function(input) {
            _super.prototype.deserializeAs_AbstractPartyEventMessage.call(this, input);
            this.cancelerId = input.readVarUhLong();
            if (this.cancelerId < 0 || this.cancelerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.cancelerId + ") on element of PartyCancelInvitationNotificationMessage.cancelerId.");
            }
            this.guestId = input.readVarUhLong();
            if (this.guestId < 0 || this.guestId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.guestId + ") on element of PartyCancelInvitationNotificationMessage.guestId.");
            }
        };
        PartyCancelInvitationNotificationMessage.ID = 1837;
        return PartyCancelInvitationNotificationMessage;
    })(AbstractPartyEventMessage);
    Protocol.PartyCancelInvitationNotificationMessage = PartyCancelInvitationNotificationMessage;
    var PartyCannotJoinErrorMessage = (function(_super) {
        __extends(PartyCannotJoinErrorMessage, _super);

        function PartyCannotJoinErrorMessage() {
            this.reason = 0;
            _super.call(this)
        }
        PartyCannotJoinErrorMessage.prototype.getMessageId = function() {
            return PartyCannotJoinErrorMessage.ID;
        };
        PartyCannotJoinErrorMessage.prototype.reset = function() {
            this.reason = 0;
        };
        PartyCannotJoinErrorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyCannotJoinErrorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyCannotJoinErrorMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyCannotJoinErrorMessage(output);
        };
        PartyCannotJoinErrorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyCannotJoinErrorMessage(input);
        };
        PartyCannotJoinErrorMessage.prototype.serializeAs_PartyCannotJoinErrorMessage = function(output) {
            _super.prototype.serializeAs_AbstractPartyMessage.call(this, output);
            output.writeByte(this.reason);
        };
        PartyCannotJoinErrorMessage.prototype.deserializeAs_PartyCannotJoinErrorMessage = function(input) {
            _super.prototype.deserializeAs_AbstractPartyMessage.call(this, input);
            this.reason = input.readByte();
            if (this.reason < 0) {
                throw new Error("Forbidden value (" + this.reason + ") on element of PartyCannotJoinErrorMessage.reason.");
            }
        };
        PartyCannotJoinErrorMessage.ID = 842;
        return PartyCannotJoinErrorMessage;
    })(AbstractPartyMessage);
    Protocol.PartyCannotJoinErrorMessage = PartyCannotJoinErrorMessage;
    var PartyDeletedMessage = (function(_super) {
        __extends(PartyDeletedMessage, _super);

        function PartyDeletedMessage() {

            _super.call(this)
        }
        PartyDeletedMessage.prototype.getMessageId = function() {
            return PartyDeletedMessage.ID;
        };
        PartyDeletedMessage.prototype.reset = function() {

        };
        PartyDeletedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyDeletedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyDeletedMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyDeletedMessage(output);
        };
        PartyDeletedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyDeletedMessage(input);
        };
        PartyDeletedMessage.prototype.serializeAs_PartyDeletedMessage = function(output) {
            _super.prototype.serializeAs_AbstractPartyMessage.call(this, output);
        };
        PartyDeletedMessage.prototype.deserializeAs_PartyDeletedMessage = function(input) {
            _super.prototype.deserializeAs_AbstractPartyMessage.call(this, input);
        };
        PartyDeletedMessage.ID = 360;
        return PartyDeletedMessage;
    })(AbstractPartyMessage);
    Protocol.PartyDeletedMessage = PartyDeletedMessage;
    var PartyFollowMemberRequestMessage = (function(_super) {
        __extends(PartyFollowMemberRequestMessage, _super);

        function PartyFollowMemberRequestMessage() {
            this.playerId = 0;
            _super.call(this)
        }
        PartyFollowMemberRequestMessage.prototype.getMessageId = function() {
            return PartyFollowMemberRequestMessage.ID;
        };
        PartyFollowMemberRequestMessage.prototype.reset = function() {
            this.playerId = 0;
        };
        PartyFollowMemberRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyFollowMemberRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyFollowMemberRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyFollowMemberRequestMessage(output);
        };
        PartyFollowMemberRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyFollowMemberRequestMessage(input);
        };
        PartyFollowMemberRequestMessage.prototype.serializeAs_PartyFollowMemberRequestMessage = function(output) {
            _super.prototype.serializeAs_AbstractPartyMessage.call(this, output);
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
        };
        PartyFollowMemberRequestMessage.prototype.deserializeAs_PartyFollowMemberRequestMessage = function(input) {
            _super.prototype.deserializeAs_AbstractPartyMessage.call(this, input);
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of PartyFollowMemberRequestMessage.playerId.");
            }
        };
        PartyFollowMemberRequestMessage.ID = 7104;
        return PartyFollowMemberRequestMessage;
    })(AbstractPartyMessage);
    Protocol.PartyFollowMemberRequestMessage = PartyFollowMemberRequestMessage;
    var PartyFollowStatusUpdateMessage = (function(_super) {
        __extends(PartyFollowStatusUpdateMessage, _super);

        function PartyFollowStatusUpdateMessage() {
            this.success = false;
            this.isFollowed = false;
            this.followedId = 0;
            _super.call(this)
        }
        PartyFollowStatusUpdateMessage.prototype.getMessageId = function() {
            return PartyFollowStatusUpdateMessage.ID;
        };
        PartyFollowStatusUpdateMessage.prototype.reset = function() {
            this.success = false;
            this.isFollowed = false;
            this.followedId = 0;
        };
        PartyFollowStatusUpdateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyFollowStatusUpdateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyFollowStatusUpdateMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyFollowStatusUpdateMessage(output);
        };
        PartyFollowStatusUpdateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyFollowStatusUpdateMessage(input);
        };
        PartyFollowStatusUpdateMessage.prototype.serializeAs_PartyFollowStatusUpdateMessage = function(output) {
            _super.prototype.serializeAs_AbstractPartyMessage.call(this, output);
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.success);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.isFollowed);
            output.writeByte(_box0);
            if (this.followedId < 0 || this.followedId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.followedId + ") on element followedId.");
            }
            output.writeVarLong(this.followedId);
        };
        PartyFollowStatusUpdateMessage.prototype.deserializeAs_PartyFollowStatusUpdateMessage = function(input) {
            _super.prototype.deserializeAs_AbstractPartyMessage.call(this, input);
            this.deserializeByteBoxes(input);
            this.followedId = input.readVarUhLong();
            if (this.followedId < 0 || this.followedId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.followedId + ") on element of PartyFollowStatusUpdateMessage.followedId.");
            }
        };
        PartyFollowStatusUpdateMessage.ID = 8395;
        return PartyFollowStatusUpdateMessage;
    })(AbstractPartyMessage);
    Protocol.PartyFollowStatusUpdateMessage = PartyFollowStatusUpdateMessage;
    var PartyFollowThisMemberRequestMessage = (function(_super) {
        __extends(PartyFollowThisMemberRequestMessage, _super);

        function PartyFollowThisMemberRequestMessage() {
            this.enabled = false;
            _super.call(this)
        }
        PartyFollowThisMemberRequestMessage.prototype.getMessageId = function() {
            return PartyFollowThisMemberRequestMessage.ID;
        };
        PartyFollowThisMemberRequestMessage.prototype.reset = function() {
            this.enabled = false;
        };
        PartyFollowThisMemberRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyFollowThisMemberRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyFollowThisMemberRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyFollowThisMemberRequestMessage(output);
        };
        PartyFollowThisMemberRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyFollowThisMemberRequestMessage(input);
        };
        PartyFollowThisMemberRequestMessage.prototype.serializeAs_PartyFollowThisMemberRequestMessage = function(output) {
            _super.prototype.serializeAs_PartyFollowMemberRequestMessage.call(this, output);
            output.writeBoolean(this.enabled);
        };
        PartyFollowThisMemberRequestMessage.prototype.deserializeAs_PartyFollowThisMemberRequestMessage = function(input) {
            _super.prototype.deserializeAs_PartyFollowMemberRequestMessage.call(this, input);
            this.enabled = input.readBoolean();
        };
        PartyFollowThisMemberRequestMessage.ID = 8893;
        return PartyFollowThisMemberRequestMessage;
    })(PartyFollowMemberRequestMessage);
    Protocol.PartyFollowThisMemberRequestMessage = PartyFollowThisMemberRequestMessage;
    var PartyInvitationRequestMessage = (function(_super) {
        __extends(PartyInvitationRequestMessage, _super);

        function PartyInvitationRequestMessage() {
            this.name = "";
            _super.call(this)
        }
        PartyInvitationRequestMessage.prototype.getMessageId = function() {
            return PartyInvitationRequestMessage.ID;
        };
        PartyInvitationRequestMessage.prototype.reset = function() {
            this.name = "";
        };
        PartyInvitationRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyInvitationRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyInvitationRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyInvitationRequestMessage(output);
        };
        PartyInvitationRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyInvitationRequestMessage(input);
        };
        PartyInvitationRequestMessage.prototype.serializeAs_PartyInvitationRequestMessage = function(output) {
            output.writeUTF(this.name);
        };
        PartyInvitationRequestMessage.prototype.deserializeAs_PartyInvitationRequestMessage = function(input) {
            this.name = input.readUTF();
        };
        PartyInvitationRequestMessage.ID = 1084;
        return PartyInvitationRequestMessage;
    })(NetworkMessage);
    Protocol.PartyInvitationRequestMessage = PartyInvitationRequestMessage;
    var PartyInvitationArenaRequestMessage = (function(_super) {
        __extends(PartyInvitationArenaRequestMessage, _super);

        function PartyInvitationArenaRequestMessage() {

            _super.call(this)
        }
        PartyInvitationArenaRequestMessage.prototype.getMessageId = function() {
            return PartyInvitationArenaRequestMessage.ID;
        };
        PartyInvitationArenaRequestMessage.prototype.reset = function() {

        };
        PartyInvitationArenaRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyInvitationArenaRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyInvitationArenaRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyInvitationArenaRequestMessage(output);
        };
        PartyInvitationArenaRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyInvitationArenaRequestMessage(input);
        };
        PartyInvitationArenaRequestMessage.prototype.serializeAs_PartyInvitationArenaRequestMessage = function(output) {
            _super.prototype.serializeAs_PartyInvitationRequestMessage.call(this, output);
        };
        PartyInvitationArenaRequestMessage.prototype.deserializeAs_PartyInvitationArenaRequestMessage = function(input) {
            _super.prototype.deserializeAs_PartyInvitationRequestMessage.call(this, input);
        };
        PartyInvitationArenaRequestMessage.ID = 4310;
        return PartyInvitationArenaRequestMessage;
    })(PartyInvitationRequestMessage);
    Protocol.PartyInvitationArenaRequestMessage = PartyInvitationArenaRequestMessage;
    var PartyInvitationCancelledForGuestMessage = (function(_super) {
        __extends(PartyInvitationCancelledForGuestMessage, _super);

        function PartyInvitationCancelledForGuestMessage() {
            this.cancelerId = 0;
            _super.call(this)
        }
        PartyInvitationCancelledForGuestMessage.prototype.getMessageId = function() {
            return PartyInvitationCancelledForGuestMessage.ID;
        };
        PartyInvitationCancelledForGuestMessage.prototype.reset = function() {
            this.cancelerId = 0;
        };
        PartyInvitationCancelledForGuestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyInvitationCancelledForGuestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyInvitationCancelledForGuestMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyInvitationCancelledForGuestMessage(output);
        };
        PartyInvitationCancelledForGuestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyInvitationCancelledForGuestMessage(input);
        };
        PartyInvitationCancelledForGuestMessage.prototype.serializeAs_PartyInvitationCancelledForGuestMessage = function(output) {
            _super.prototype.serializeAs_AbstractPartyMessage.call(this, output);
            if (this.cancelerId < 0 || this.cancelerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.cancelerId + ") on element cancelerId.");
            }
            output.writeVarLong(this.cancelerId);
        };
        PartyInvitationCancelledForGuestMessage.prototype.deserializeAs_PartyInvitationCancelledForGuestMessage = function(input) {
            _super.prototype.deserializeAs_AbstractPartyMessage.call(this, input);
            this.cancelerId = input.readVarUhLong();
            if (this.cancelerId < 0 || this.cancelerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.cancelerId + ") on element of PartyInvitationCancelledForGuestMessage.cancelerId.");
            }
        };
        PartyInvitationCancelledForGuestMessage.ID = 2521;
        return PartyInvitationCancelledForGuestMessage;
    })(AbstractPartyMessage);
    Protocol.PartyInvitationCancelledForGuestMessage = PartyInvitationCancelledForGuestMessage;
    var PartyInvitationDetailsMessage = (function(_super) {
        __extends(PartyInvitationDetailsMessage, _super);

        function PartyInvitationDetailsMessage() {
            this.partyType = 0;
            this.partyName = "";
            this.fromId = 0;
            this.fromName = "";
            this.leaderId = 0;
            this.members = [];
            this.guests = [];
            _super.call(this)
        }
        PartyInvitationDetailsMessage.prototype.getMessageId = function() {
            return PartyInvitationDetailsMessage.ID;
        };
        PartyInvitationDetailsMessage.prototype.reset = function() {
            this.partyType = 0;
            this.partyName = "";
            this.fromId = 0;
            this.fromName = "";
            this.leaderId = 0;
            this.members = [];
            this.guests = [];
        };
        PartyInvitationDetailsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyInvitationDetailsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyInvitationDetailsMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyInvitationDetailsMessage(output);
        };
        PartyInvitationDetailsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyInvitationDetailsMessage(input);
        };
        PartyInvitationDetailsMessage.prototype.serializeAs_PartyInvitationDetailsMessage = function(output) {
            _super.prototype.serializeAs_AbstractPartyMessage.call(this, output);
            output.writeByte(this.partyType);
            output.writeUTF(this.partyName);
            if (this.fromId < 0 || this.fromId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.fromId + ") on element fromId.");
            }
            output.writeVarLong(this.fromId);
            output.writeUTF(this.fromName);
            if (this.leaderId < 0 || this.leaderId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.leaderId + ") on element leaderId.");
            }
            output.writeVarLong(this.leaderId);
            output.writeShort(this.members.length);
            for (var _i6 = 0; _i6 < this.members.length; _i6++) {
                output.writeShort((this.members[_i6]).getTypeId());
                (this.members[_i6]).serialize(output);
            }
            output.writeShort(this.guests.length);
            for (var _i7 = 0; _i7 < this.guests.length; _i7++) {
                (this.guests[_i7]).serializeAs_PartyGuestInformations(output);
            }
        };
        PartyInvitationDetailsMessage.prototype.deserializeAs_PartyInvitationDetailsMessage = function(input) {
            var _id6 = 0;
            var _item6 = null;
            var _item7 = null;
            _super.prototype.deserializeAs_AbstractPartyMessage.call(this, input);
            this.partyType = input.readByte();
            if (this.partyType < 0) {
                throw new Error("Forbidden value (" + this.partyType + ") on element of PartyInvitationDetailsMessage.partyType.");
            }
            this.partyName = input.readUTF();
            this.fromId = input.readVarUhLong();
            if (this.fromId < 0 || this.fromId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.fromId + ") on element of PartyInvitationDetailsMessage.fromId.");
            }
            this.fromName = input.readUTF();
            this.leaderId = input.readVarUhLong();
            if (this.leaderId < 0 || this.leaderId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.leaderId + ") on element of PartyInvitationDetailsMessage.leaderId.");
            }
            var _membersLen = input.readUnsignedShort();
            for (var _i6 = 0; _i6 < _membersLen; _i6++) {
                _id6 = input.readUnsignedShort();
                _item6 = ProtocolTypeManager.getInstance(PartyInvitationMemberInformations, _id6);
                _item6.deserialize(input);
                this.members.push(_item6);
            }
            var _guestsLen = input.readUnsignedShort();
            for (var _i7 = 0; _i7 < _guestsLen; _i7++) {
                _item7 = new PartyGuestInformations();
                _item7.deserialize(input);
                this.guests.push(_item7);
            }
        };
        PartyInvitationDetailsMessage.ID = 3818;
        return PartyInvitationDetailsMessage;
    })(AbstractPartyMessage);
    Protocol.PartyInvitationDetailsMessage = PartyInvitationDetailsMessage;
    var PartyInvitationDetailsRequestMessage = (function(_super) {
        __extends(PartyInvitationDetailsRequestMessage, _super);

        function PartyInvitationDetailsRequestMessage() {

            _super.call(this)
        }
        PartyInvitationDetailsRequestMessage.prototype.getMessageId = function() {
            return PartyInvitationDetailsRequestMessage.ID;
        };
        PartyInvitationDetailsRequestMessage.prototype.reset = function() {

        };
        PartyInvitationDetailsRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyInvitationDetailsRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyInvitationDetailsRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyInvitationDetailsRequestMessage(output);
        };
        PartyInvitationDetailsRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyInvitationDetailsRequestMessage(input);
        };
        PartyInvitationDetailsRequestMessage.prototype.serializeAs_PartyInvitationDetailsRequestMessage = function(output) {
            _super.prototype.serializeAs_AbstractPartyMessage.call(this, output);
        };
        PartyInvitationDetailsRequestMessage.prototype.deserializeAs_PartyInvitationDetailsRequestMessage = function(input) {
            _super.prototype.deserializeAs_AbstractPartyMessage.call(this, input);
        };
        PartyInvitationDetailsRequestMessage.ID = 2173;
        return PartyInvitationDetailsRequestMessage;
    })(AbstractPartyMessage);
    Protocol.PartyInvitationDetailsRequestMessage = PartyInvitationDetailsRequestMessage;
    var PartyInvitationDungeonDetailsMessage = (function(_super) {
        __extends(PartyInvitationDungeonDetailsMessage, _super);

        function PartyInvitationDungeonDetailsMessage() {
            this.dungeonId = 0;
            this.playersDungeonReady = [];
            _super.call(this)
        }
        PartyInvitationDungeonDetailsMessage.prototype.getMessageId = function() {
            return PartyInvitationDungeonDetailsMessage.ID;
        };
        PartyInvitationDungeonDetailsMessage.prototype.reset = function() {
            this.dungeonId = 0;
            this.playersDungeonReady = [];
        };
        PartyInvitationDungeonDetailsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyInvitationDungeonDetailsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyInvitationDungeonDetailsMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyInvitationDungeonDetailsMessage(output);
        };
        PartyInvitationDungeonDetailsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyInvitationDungeonDetailsMessage(input);
        };
        PartyInvitationDungeonDetailsMessage.prototype.serializeAs_PartyInvitationDungeonDetailsMessage = function(output) {
            _super.prototype.serializeAs_PartyInvitationDetailsMessage.call(this, output);
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
            }
            output.writeVarShort(this.dungeonId);
            output.writeShort(this.playersDungeonReady.length);
            for (var _i2 = 0; _i2 < this.playersDungeonReady.length; _i2++) {
                output.writeBoolean(this.playersDungeonReady[_i2]);
            }
        };
        PartyInvitationDungeonDetailsMessage.prototype.deserializeAs_PartyInvitationDungeonDetailsMessage = function(input) {
            var _val2 = false;
            _super.prototype.deserializeAs_PartyInvitationDetailsMessage.call(this, input);
            this.dungeonId = input.readVarUhShort();
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element of PartyInvitationDungeonDetailsMessage.dungeonId.");
            }
            var _playersDungeonReadyLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _playersDungeonReadyLen; _i2++) {
                _val2 = input.readBoolean();
                this.playersDungeonReady.push(_val2);
            }
        };
        PartyInvitationDungeonDetailsMessage.ID = 1024;
        return PartyInvitationDungeonDetailsMessage;
    })(PartyInvitationDetailsMessage);
    Protocol.PartyInvitationDungeonDetailsMessage = PartyInvitationDungeonDetailsMessage;
    var PartyInvitationMessage = (function(_super) {
        __extends(PartyInvitationMessage, _super);

        function PartyInvitationMessage() {
            this.partyType = 0;
            this.partyName = "";
            this.maxParticipants = 0;
            this.fromId = 0;
            this.fromName = "";
            this.toId = 0;
            _super.call(this)
        }
        PartyInvitationMessage.prototype.getMessageId = function() {
            return PartyInvitationMessage.ID;
        };
        PartyInvitationMessage.prototype.reset = function() {
            this.partyType = 0;
            this.partyName = "";
            this.maxParticipants = 0;
            this.fromId = 0;
            this.fromName = "";
            this.toId = 0;
        };
        PartyInvitationMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyInvitationMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyInvitationMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyInvitationMessage(output);
        };
        PartyInvitationMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyInvitationMessage(input);
        };
        PartyInvitationMessage.prototype.serializeAs_PartyInvitationMessage = function(output) {
            _super.prototype.serializeAs_AbstractPartyMessage.call(this, output);
            output.writeByte(this.partyType);
            output.writeUTF(this.partyName);
            if (this.maxParticipants < 0) {
                throw new Error("Forbidden value (" + this.maxParticipants + ") on element maxParticipants.");
            }
            output.writeByte(this.maxParticipants);
            if (this.fromId < 0 || this.fromId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.fromId + ") on element fromId.");
            }
            output.writeVarLong(this.fromId);
            output.writeUTF(this.fromName);
            if (this.toId < 0 || this.toId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.toId + ") on element toId.");
            }
            output.writeVarLong(this.toId);
        };
        PartyInvitationMessage.prototype.deserializeAs_PartyInvitationMessage = function(input) {
            _super.prototype.deserializeAs_AbstractPartyMessage.call(this, input);
            this.partyType = input.readByte();
            if (this.partyType < 0) {
                throw new Error("Forbidden value (" + this.partyType + ") on element of PartyInvitationMessage.partyType.");
            }
            this.partyName = input.readUTF();
            this.maxParticipants = input.readByte();
            if (this.maxParticipants < 0) {
                throw new Error("Forbidden value (" + this.maxParticipants + ") on element of PartyInvitationMessage.maxParticipants.");
            }
            this.fromId = input.readVarUhLong();
            if (this.fromId < 0 || this.fromId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.fromId + ") on element of PartyInvitationMessage.fromId.");
            }
            this.fromName = input.readUTF();
            this.toId = input.readVarUhLong();
            if (this.toId < 0 || this.toId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.toId + ") on element of PartyInvitationMessage.toId.");
            }
        };
        PartyInvitationMessage.ID = 1605;
        return PartyInvitationMessage;
    })(AbstractPartyMessage);
    Protocol.PartyInvitationMessage = PartyInvitationMessage;
    var PartyInvitationDungeonMessage = (function(_super) {
        __extends(PartyInvitationDungeonMessage, _super);

        function PartyInvitationDungeonMessage() {
            this.dungeonId = 0;
            _super.call(this)
        }
        PartyInvitationDungeonMessage.prototype.getMessageId = function() {
            return PartyInvitationDungeonMessage.ID;
        };
        PartyInvitationDungeonMessage.prototype.reset = function() {
            this.dungeonId = 0;
        };
        PartyInvitationDungeonMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyInvitationDungeonMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyInvitationDungeonMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyInvitationDungeonMessage(output);
        };
        PartyInvitationDungeonMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyInvitationDungeonMessage(input);
        };
        PartyInvitationDungeonMessage.prototype.serializeAs_PartyInvitationDungeonMessage = function(output) {
            _super.prototype.serializeAs_PartyInvitationMessage.call(this, output);
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
            }
            output.writeVarShort(this.dungeonId);
        };
        PartyInvitationDungeonMessage.prototype.deserializeAs_PartyInvitationDungeonMessage = function(input) {
            _super.prototype.deserializeAs_PartyInvitationMessage.call(this, input);
            this.dungeonId = input.readVarUhShort();
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element of PartyInvitationDungeonMessage.dungeonId.");
            }
        };
        PartyInvitationDungeonMessage.ID = 744;
        return PartyInvitationDungeonMessage;
    })(PartyInvitationMessage);
    Protocol.PartyInvitationDungeonMessage = PartyInvitationDungeonMessage;
    var PartyInvitationDungeonRequestMessage = (function(_super) {
        __extends(PartyInvitationDungeonRequestMessage, _super);

        function PartyInvitationDungeonRequestMessage() {
            this.dungeonId = 0;
            _super.call(this)
        }
        PartyInvitationDungeonRequestMessage.prototype.getMessageId = function() {
            return PartyInvitationDungeonRequestMessage.ID;
        };
        PartyInvitationDungeonRequestMessage.prototype.reset = function() {
            this.dungeonId = 0;
        };
        PartyInvitationDungeonRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyInvitationDungeonRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyInvitationDungeonRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyInvitationDungeonRequestMessage(output);
        };
        PartyInvitationDungeonRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyInvitationDungeonRequestMessage(input);
        };
        PartyInvitationDungeonRequestMessage.prototype.serializeAs_PartyInvitationDungeonRequestMessage = function(output) {
            _super.prototype.serializeAs_PartyInvitationRequestMessage.call(this, output);
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
            }
            output.writeVarShort(this.dungeonId);
        };
        PartyInvitationDungeonRequestMessage.prototype.deserializeAs_PartyInvitationDungeonRequestMessage = function(input) {
            _super.prototype.deserializeAs_PartyInvitationRequestMessage.call(this, input);
            this.dungeonId = input.readVarUhShort();
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element of PartyInvitationDungeonRequestMessage.dungeonId.");
            }
        };
        PartyInvitationDungeonRequestMessage.ID = 931;
        return PartyInvitationDungeonRequestMessage;
    })(PartyInvitationRequestMessage);
    Protocol.PartyInvitationDungeonRequestMessage = PartyInvitationDungeonRequestMessage;
    var PartyJoinMessage = (function(_super) {
        __extends(PartyJoinMessage, _super);

        function PartyJoinMessage() {
            this.partyType = 0;
            this.partyLeaderId = 0;
            this.maxParticipants = 0;
            this.members = [];
            this.guests = [];
            this.restricted = false;
            this.partyName = "";
            _super.call(this)
        }
        PartyJoinMessage.prototype.getMessageId = function() {
            return PartyJoinMessage.ID;
        };
        PartyJoinMessage.prototype.reset = function() {
            this.partyType = 0;
            this.partyLeaderId = 0;
            this.maxParticipants = 0;
            this.members = [];
            this.guests = [];
            this.restricted = false;
            this.partyName = "";
        };
        PartyJoinMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyJoinMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyJoinMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyJoinMessage(output);
        };
        PartyJoinMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyJoinMessage(input);
        };
        PartyJoinMessage.prototype.serializeAs_PartyJoinMessage = function(output) {
            _super.prototype.serializeAs_AbstractPartyMessage.call(this, output);
            output.writeByte(this.partyType);
            if (this.partyLeaderId < 0 || this.partyLeaderId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.partyLeaderId + ") on element partyLeaderId.");
            }
            output.writeVarLong(this.partyLeaderId);
            if (this.maxParticipants < 0) {
                throw new Error("Forbidden value (" + this.maxParticipants + ") on element maxParticipants.");
            }
            output.writeByte(this.maxParticipants);
            output.writeShort(this.members.length);
            for (var _i4 = 0; _i4 < this.members.length; _i4++) {
                output.writeShort((this.members[_i4]).getTypeId());
                (this.members[_i4]).serialize(output);
            }
            output.writeShort(this.guests.length);
            for (var _i5 = 0; _i5 < this.guests.length; _i5++) {
                (this.guests[_i5]).serializeAs_PartyGuestInformations(output);
            }
            output.writeBoolean(this.restricted);
            output.writeUTF(this.partyName);
        };
        PartyJoinMessage.prototype.deserializeAs_PartyJoinMessage = function(input) {
            var _id4 = 0;
            var _item4 = null;
            var _item5 = null;
            _super.prototype.deserializeAs_AbstractPartyMessage.call(this, input);
            this.partyType = input.readByte();
            if (this.partyType < 0) {
                throw new Error("Forbidden value (" + this.partyType + ") on element of PartyJoinMessage.partyType.");
            }
            this.partyLeaderId = input.readVarUhLong();
            if (this.partyLeaderId < 0 || this.partyLeaderId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.partyLeaderId + ") on element of PartyJoinMessage.partyLeaderId.");
            }
            this.maxParticipants = input.readByte();
            if (this.maxParticipants < 0) {
                throw new Error("Forbidden value (" + this.maxParticipants + ") on element of PartyJoinMessage.maxParticipants.");
            }
            var _membersLen = input.readUnsignedShort();
            for (var _i4 = 0; _i4 < _membersLen; _i4++) {
                _id4 = input.readUnsignedShort();
                _item4 = ProtocolTypeManager.getInstance(PartyMemberInformations, _id4);
                _item4.deserialize(input);
                this.members.push(_item4);
            }
            var _guestsLen = input.readUnsignedShort();
            for (var _i5 = 0; _i5 < _guestsLen; _i5++) {
                _item5 = new PartyGuestInformations();
                _item5.deserialize(input);
                this.guests.push(_item5);
            }
            this.restricted = input.readBoolean();
            this.partyName = input.readUTF();
        };
        PartyJoinMessage.ID = 5273;
        return PartyJoinMessage;
    })(AbstractPartyMessage);
    Protocol.PartyJoinMessage = PartyJoinMessage;
    var PartyKickedByMessage = (function(_super) {
        __extends(PartyKickedByMessage, _super);

        function PartyKickedByMessage() {
            this.kickerId = 0;
            _super.call(this)
        }
        PartyKickedByMessage.prototype.getMessageId = function() {
            return PartyKickedByMessage.ID;
        };
        PartyKickedByMessage.prototype.reset = function() {
            this.kickerId = 0;
        };
        PartyKickedByMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyKickedByMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyKickedByMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyKickedByMessage(output);
        };
        PartyKickedByMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyKickedByMessage(input);
        };
        PartyKickedByMessage.prototype.serializeAs_PartyKickedByMessage = function(output) {
            _super.prototype.serializeAs_AbstractPartyMessage.call(this, output);
            if (this.kickerId < 0 || this.kickerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.kickerId + ") on element kickerId.");
            }
            output.writeVarLong(this.kickerId);
        };
        PartyKickedByMessage.prototype.deserializeAs_PartyKickedByMessage = function(input) {
            _super.prototype.deserializeAs_AbstractPartyMessage.call(this, input);
            this.kickerId = input.readVarUhLong();
            if (this.kickerId < 0 || this.kickerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.kickerId + ") on element of PartyKickedByMessage.kickerId.");
            }
        };
        PartyKickedByMessage.ID = 9472;
        return PartyKickedByMessage;
    })(AbstractPartyMessage);
    Protocol.PartyKickedByMessage = PartyKickedByMessage;
    var PartyKickRequestMessage = (function(_super) {
        __extends(PartyKickRequestMessage, _super);

        function PartyKickRequestMessage() {
            this.playerId = 0;
            _super.call(this)
        }
        PartyKickRequestMessage.prototype.getMessageId = function() {
            return PartyKickRequestMessage.ID;
        };
        PartyKickRequestMessage.prototype.reset = function() {
            this.playerId = 0;
        };
        PartyKickRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyKickRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyKickRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyKickRequestMessage(output);
        };
        PartyKickRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyKickRequestMessage(input);
        };
        PartyKickRequestMessage.prototype.serializeAs_PartyKickRequestMessage = function(output) {
            _super.prototype.serializeAs_AbstractPartyMessage.call(this, output);
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
        };
        PartyKickRequestMessage.prototype.deserializeAs_PartyKickRequestMessage = function(input) {
            _super.prototype.deserializeAs_AbstractPartyMessage.call(this, input);
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of PartyKickRequestMessage.playerId.");
            }
        };
        PartyKickRequestMessage.ID = 7424;
        return PartyKickRequestMessage;
    })(AbstractPartyMessage);
    Protocol.PartyKickRequestMessage = PartyKickRequestMessage;
    var PartyLeaderUpdateMessage = (function(_super) {
        __extends(PartyLeaderUpdateMessage, _super);

        function PartyLeaderUpdateMessage() {
            this.partyLeaderId = 0;
            _super.call(this)
        }
        PartyLeaderUpdateMessage.prototype.getMessageId = function() {
            return PartyLeaderUpdateMessage.ID;
        };
        PartyLeaderUpdateMessage.prototype.reset = function() {
            this.partyLeaderId = 0;
        };
        PartyLeaderUpdateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyLeaderUpdateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyLeaderUpdateMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyLeaderUpdateMessage(output);
        };
        PartyLeaderUpdateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyLeaderUpdateMessage(input);
        };
        PartyLeaderUpdateMessage.prototype.serializeAs_PartyLeaderUpdateMessage = function(output) {
            _super.prototype.serializeAs_AbstractPartyEventMessage.call(this, output);
            if (this.partyLeaderId < 0 || this.partyLeaderId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.partyLeaderId + ") on element partyLeaderId.");
            }
            output.writeVarLong(this.partyLeaderId);
        };
        PartyLeaderUpdateMessage.prototype.deserializeAs_PartyLeaderUpdateMessage = function(input) {
            _super.prototype.deserializeAs_AbstractPartyEventMessage.call(this, input);
            this.partyLeaderId = input.readVarUhLong();
            if (this.partyLeaderId < 0 || this.partyLeaderId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.partyLeaderId + ") on element of PartyLeaderUpdateMessage.partyLeaderId.");
            }
        };
        PartyLeaderUpdateMessage.ID = 3269;
        return PartyLeaderUpdateMessage;
    })(AbstractPartyEventMessage);
    Protocol.PartyLeaderUpdateMessage = PartyLeaderUpdateMessage;
    var PartyLeaveMessage = (function(_super) {
        __extends(PartyLeaveMessage, _super);

        function PartyLeaveMessage() {

            _super.call(this)
        }
        PartyLeaveMessage.prototype.getMessageId = function() {
            return PartyLeaveMessage.ID;
        };
        PartyLeaveMessage.prototype.reset = function() {

        };
        PartyLeaveMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyLeaveMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyLeaveMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyLeaveMessage(output);
        };
        PartyLeaveMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyLeaveMessage(input);
        };
        PartyLeaveMessage.prototype.serializeAs_PartyLeaveMessage = function(output) {
            _super.prototype.serializeAs_AbstractPartyMessage.call(this, output);
        };
        PartyLeaveMessage.prototype.deserializeAs_PartyLeaveMessage = function(input) {
            _super.prototype.deserializeAs_AbstractPartyMessage.call(this, input);
        };
        PartyLeaveMessage.ID = 8726;
        return PartyLeaveMessage;
    })(AbstractPartyMessage);
    Protocol.PartyLeaveMessage = PartyLeaveMessage;
    var PartyLeaveRequestMessage = (function(_super) {
        __extends(PartyLeaveRequestMessage, _super);

        function PartyLeaveRequestMessage() {

            _super.call(this)
        }
        PartyLeaveRequestMessage.prototype.getMessageId = function() {
            return PartyLeaveRequestMessage.ID;
        };
        PartyLeaveRequestMessage.prototype.reset = function() {

        };
        PartyLeaveRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyLeaveRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyLeaveRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyLeaveRequestMessage(output);
        };
        PartyLeaveRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyLeaveRequestMessage(input);
        };
        PartyLeaveRequestMessage.prototype.serializeAs_PartyLeaveRequestMessage = function(output) {
            _super.prototype.serializeAs_AbstractPartyMessage.call(this, output);
        };
        PartyLeaveRequestMessage.prototype.deserializeAs_PartyLeaveRequestMessage = function(input) {
            _super.prototype.deserializeAs_AbstractPartyMessage.call(this, input);
        };
        PartyLeaveRequestMessage.ID = 6141;
        return PartyLeaveRequestMessage;
    })(AbstractPartyMessage);
    Protocol.PartyLeaveRequestMessage = PartyLeaveRequestMessage;
    var PartyLocateMembersMessage = (function(_super) {
        __extends(PartyLocateMembersMessage, _super);

        function PartyLocateMembersMessage() {
            this.geopositions = [];
            _super.call(this)
        }
        PartyLocateMembersMessage.prototype.getMessageId = function() {
            return PartyLocateMembersMessage.ID;
        };
        PartyLocateMembersMessage.prototype.reset = function() {
            this.geopositions = [];
        };
        PartyLocateMembersMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyLocateMembersMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyLocateMembersMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyLocateMembersMessage(output);
        };
        PartyLocateMembersMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyLocateMembersMessage(input);
        };
        PartyLocateMembersMessage.prototype.serializeAs_PartyLocateMembersMessage = function(output) {
            _super.prototype.serializeAs_AbstractPartyMessage.call(this, output);
            output.writeShort(this.geopositions.length);
            for (var _i1 = 0; _i1 < this.geopositions.length; _i1++) {
                (this.geopositions[_i1]).serializeAs_PartyMemberGeoPosition(output);
            }
        };
        PartyLocateMembersMessage.prototype.deserializeAs_PartyLocateMembersMessage = function(input) {
            var _item1 = null;
            _super.prototype.deserializeAs_AbstractPartyMessage.call(this, input);
            var _geopositionsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _geopositionsLen; _i1++) {
                _item1 = new PartyMemberGeoPosition();
                _item1.deserialize(input);
                this.geopositions.push(_item1);
            }
        };
        PartyLocateMembersMessage.ID = 7607;
        return PartyLocateMembersMessage;
    })(AbstractPartyMessage);
    Protocol.PartyLocateMembersMessage = PartyLocateMembersMessage;
    var PartyLocateMembersRequestMessage = (function(_super) {
        __extends(PartyLocateMembersRequestMessage, _super);

        function PartyLocateMembersRequestMessage() {

            _super.call(this)
        }
        PartyLocateMembersRequestMessage.prototype.getMessageId = function() {
            return PartyLocateMembersRequestMessage.ID;
        };
        PartyLocateMembersRequestMessage.prototype.reset = function() {

        };
        PartyLocateMembersRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyLocateMembersRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyLocateMembersRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyLocateMembersRequestMessage(output);
        };
        PartyLocateMembersRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyLocateMembersRequestMessage(input);
        };
        PartyLocateMembersRequestMessage.prototype.serializeAs_PartyLocateMembersRequestMessage = function(output) {
            _super.prototype.serializeAs_AbstractPartyMessage.call(this, output);
        };
        PartyLocateMembersRequestMessage.prototype.deserializeAs_PartyLocateMembersRequestMessage = function(input) {
            _super.prototype.deserializeAs_AbstractPartyMessage.call(this, input);
        };
        PartyLocateMembersRequestMessage.ID = 7609;
        return PartyLocateMembersRequestMessage;
    })(AbstractPartyMessage);
    Protocol.PartyLocateMembersRequestMessage = PartyLocateMembersRequestMessage;
    var PartyLoyaltyStatusMessage = (function(_super) {
        __extends(PartyLoyaltyStatusMessage, _super);

        function PartyLoyaltyStatusMessage() {
            this.loyal = false;
            _super.call(this)
        }
        PartyLoyaltyStatusMessage.prototype.getMessageId = function() {
            return PartyLoyaltyStatusMessage.ID;
        };
        PartyLoyaltyStatusMessage.prototype.reset = function() {
            this.loyal = false;
        };
        PartyLoyaltyStatusMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyLoyaltyStatusMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyLoyaltyStatusMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyLoyaltyStatusMessage(output);
        };
        PartyLoyaltyStatusMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyLoyaltyStatusMessage(input);
        };
        PartyLoyaltyStatusMessage.prototype.serializeAs_PartyLoyaltyStatusMessage = function(output) {
            _super.prototype.serializeAs_AbstractPartyMessage.call(this, output);
            output.writeBoolean(this.loyal);
        };
        PartyLoyaltyStatusMessage.prototype.deserializeAs_PartyLoyaltyStatusMessage = function(input) {
            _super.prototype.deserializeAs_AbstractPartyMessage.call(this, input);
            this.loyal = input.readBoolean();
        };
        PartyLoyaltyStatusMessage.ID = 7075;
        return PartyLoyaltyStatusMessage;
    })(AbstractPartyMessage);
    Protocol.PartyLoyaltyStatusMessage = PartyLoyaltyStatusMessage;
    var PartyMemberRemoveMessage = (function(_super) {
        __extends(PartyMemberRemoveMessage, _super);

        function PartyMemberRemoveMessage() {
            this.leavingPlayerId = 0;
            _super.call(this)
        }
        PartyMemberRemoveMessage.prototype.getMessageId = function() {
            return PartyMemberRemoveMessage.ID;
        };
        PartyMemberRemoveMessage.prototype.reset = function() {
            this.leavingPlayerId = 0;
        };
        PartyMemberRemoveMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyMemberRemoveMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyMemberRemoveMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyMemberRemoveMessage(output);
        };
        PartyMemberRemoveMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyMemberRemoveMessage(input);
        };
        PartyMemberRemoveMessage.prototype.serializeAs_PartyMemberRemoveMessage = function(output) {
            _super.prototype.serializeAs_AbstractPartyEventMessage.call(this, output);
            if (this.leavingPlayerId < 0 || this.leavingPlayerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.leavingPlayerId + ") on element leavingPlayerId.");
            }
            output.writeVarLong(this.leavingPlayerId);
        };
        PartyMemberRemoveMessage.prototype.deserializeAs_PartyMemberRemoveMessage = function(input) {
            _super.prototype.deserializeAs_AbstractPartyEventMessage.call(this, input);
            this.leavingPlayerId = input.readVarUhLong();
            if (this.leavingPlayerId < 0 || this.leavingPlayerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.leavingPlayerId + ") on element of PartyMemberRemoveMessage.leavingPlayerId.");
            }
        };
        PartyMemberRemoveMessage.ID = 5580;
        return PartyMemberRemoveMessage;
    })(AbstractPartyEventMessage);
    Protocol.PartyMemberRemoveMessage = PartyMemberRemoveMessage;
    var PartyMemberEjectedMessage = (function(_super) {
        __extends(PartyMemberEjectedMessage, _super);

        function PartyMemberEjectedMessage() {
            this.kickerId = 0;
            _super.call(this)
        }
        PartyMemberEjectedMessage.prototype.getMessageId = function() {
            return PartyMemberEjectedMessage.ID;
        };
        PartyMemberEjectedMessage.prototype.reset = function() {
            this.kickerId = 0;
        };
        PartyMemberEjectedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyMemberEjectedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyMemberEjectedMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyMemberEjectedMessage(output);
        };
        PartyMemberEjectedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyMemberEjectedMessage(input);
        };
        PartyMemberEjectedMessage.prototype.serializeAs_PartyMemberEjectedMessage = function(output) {
            _super.prototype.serializeAs_PartyMemberRemoveMessage.call(this, output);
            if (this.kickerId < 0 || this.kickerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.kickerId + ") on element kickerId.");
            }
            output.writeVarLong(this.kickerId);
        };
        PartyMemberEjectedMessage.prototype.deserializeAs_PartyMemberEjectedMessage = function(input) {
            _super.prototype.deserializeAs_PartyMemberRemoveMessage.call(this, input);
            this.kickerId = input.readVarUhLong();
            if (this.kickerId < 0 || this.kickerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.kickerId + ") on element of PartyMemberEjectedMessage.kickerId.");
            }
        };
        PartyMemberEjectedMessage.ID = 7887;
        return PartyMemberEjectedMessage;
    })(PartyMemberRemoveMessage);
    Protocol.PartyMemberEjectedMessage = PartyMemberEjectedMessage;
    var PartyMemberInStandardFightMessage = (function(_super) {
        __extends(PartyMemberInStandardFightMessage, _super);

        function PartyMemberInStandardFightMessage() {
            this.fightMap = new MapCoordinatesExtended();
            _super.call(this)
        }
        PartyMemberInStandardFightMessage.prototype.getMessageId = function() {
            return PartyMemberInStandardFightMessage.ID;
        };
        PartyMemberInStandardFightMessage.prototype.reset = function() {
            this.fightMap = new MapCoordinatesExtended();
        };
        PartyMemberInStandardFightMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyMemberInStandardFightMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyMemberInStandardFightMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyMemberInStandardFightMessage(output);
        };
        PartyMemberInStandardFightMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyMemberInStandardFightMessage(input);
        };
        PartyMemberInStandardFightMessage.prototype.serializeAs_PartyMemberInStandardFightMessage = function(output) {
            _super.prototype.serializeAs_AbstractPartyMemberInFightMessage.call(this, output);
            this.fightMap.serializeAs_MapCoordinatesExtended(output);
        };
        PartyMemberInStandardFightMessage.prototype.deserializeAs_PartyMemberInStandardFightMessage = function(input) {
            _super.prototype.deserializeAs_AbstractPartyMemberInFightMessage.call(this, input);
            this.fightMap = new MapCoordinatesExtended();
            this.fightMap.deserialize(input);
        };
        PartyMemberInStandardFightMessage.ID = 3432;
        return PartyMemberInStandardFightMessage;
    })(AbstractPartyMemberInFightMessage);
    Protocol.PartyMemberInStandardFightMessage = PartyMemberInStandardFightMessage;
    var PartyModifiableStatusMessage = (function(_super) {
        __extends(PartyModifiableStatusMessage, _super);

        function PartyModifiableStatusMessage() {
            this.enabled = false;
            _super.call(this)
        }
        PartyModifiableStatusMessage.prototype.getMessageId = function() {
            return PartyModifiableStatusMessage.ID;
        };
        PartyModifiableStatusMessage.prototype.reset = function() {
            this.enabled = false;
        };
        PartyModifiableStatusMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyModifiableStatusMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyModifiableStatusMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyModifiableStatusMessage(output);
        };
        PartyModifiableStatusMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyModifiableStatusMessage(input);
        };
        PartyModifiableStatusMessage.prototype.serializeAs_PartyModifiableStatusMessage = function(output) {
            _super.prototype.serializeAs_AbstractPartyMessage.call(this, output);
            output.writeBoolean(this.enabled);
        };
        PartyModifiableStatusMessage.prototype.deserializeAs_PartyModifiableStatusMessage = function(input) {
            _super.prototype.deserializeAs_AbstractPartyMessage.call(this, input);
            this.enabled = input.readBoolean();
        };
        PartyModifiableStatusMessage.ID = 6887;
        return PartyModifiableStatusMessage;
    })(AbstractPartyMessage);
    Protocol.PartyModifiableStatusMessage = PartyModifiableStatusMessage;
    var PartyNameSetErrorMessage = (function(_super) {
        __extends(PartyNameSetErrorMessage, _super);

        function PartyNameSetErrorMessage() {
            this.result = 0;
            _super.call(this)
        }
        PartyNameSetErrorMessage.prototype.getMessageId = function() {
            return PartyNameSetErrorMessage.ID;
        };
        PartyNameSetErrorMessage.prototype.reset = function() {
            this.result = 0;
        };
        PartyNameSetErrorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyNameSetErrorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyNameSetErrorMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyNameSetErrorMessage(output);
        };
        PartyNameSetErrorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyNameSetErrorMessage(input);
        };
        PartyNameSetErrorMessage.prototype.serializeAs_PartyNameSetErrorMessage = function(output) {
            _super.prototype.serializeAs_AbstractPartyMessage.call(this, output);
            output.writeByte(this.result);
        };
        PartyNameSetErrorMessage.prototype.deserializeAs_PartyNameSetErrorMessage = function(input) {
            _super.prototype.deserializeAs_AbstractPartyMessage.call(this, input);
            this.result = input.readByte();
            if (this.result < 0) {
                throw new Error("Forbidden value (" + this.result + ") on element of PartyNameSetErrorMessage.result.");
            }
        };
        PartyNameSetErrorMessage.ID = 4806;
        return PartyNameSetErrorMessage;
    })(AbstractPartyMessage);
    Protocol.PartyNameSetErrorMessage = PartyNameSetErrorMessage;
    var PartyNameSetRequestMessage = (function(_super) {
        __extends(PartyNameSetRequestMessage, _super);

        function PartyNameSetRequestMessage() {
            this.partyName = "";
            _super.call(this)
        }
        PartyNameSetRequestMessage.prototype.getMessageId = function() {
            return PartyNameSetRequestMessage.ID;
        };
        PartyNameSetRequestMessage.prototype.reset = function() {
            this.partyName = "";
        };
        PartyNameSetRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyNameSetRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyNameSetRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyNameSetRequestMessage(output);
        };
        PartyNameSetRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyNameSetRequestMessage(input);
        };
        PartyNameSetRequestMessage.prototype.serializeAs_PartyNameSetRequestMessage = function(output) {
            _super.prototype.serializeAs_AbstractPartyMessage.call(this, output);
            output.writeUTF(this.partyName);
        };
        PartyNameSetRequestMessage.prototype.deserializeAs_PartyNameSetRequestMessage = function(input) {
            _super.prototype.deserializeAs_AbstractPartyMessage.call(this, input);
            this.partyName = input.readUTF();
        };
        PartyNameSetRequestMessage.ID = 5482;
        return PartyNameSetRequestMessage;
    })(AbstractPartyMessage);
    Protocol.PartyNameSetRequestMessage = PartyNameSetRequestMessage;
    var PartyNameUpdateMessage = (function(_super) {
        __extends(PartyNameUpdateMessage, _super);

        function PartyNameUpdateMessage() {
            this.partyName = "";
            _super.call(this)
        }
        PartyNameUpdateMessage.prototype.getMessageId = function() {
            return PartyNameUpdateMessage.ID;
        };
        PartyNameUpdateMessage.prototype.reset = function() {
            this.partyName = "";
        };
        PartyNameUpdateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyNameUpdateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyNameUpdateMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyNameUpdateMessage(output);
        };
        PartyNameUpdateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyNameUpdateMessage(input);
        };
        PartyNameUpdateMessage.prototype.serializeAs_PartyNameUpdateMessage = function(output) {
            _super.prototype.serializeAs_AbstractPartyMessage.call(this, output);
            output.writeUTF(this.partyName);
        };
        PartyNameUpdateMessage.prototype.deserializeAs_PartyNameUpdateMessage = function(input) {
            _super.prototype.deserializeAs_AbstractPartyMessage.call(this, input);
            this.partyName = input.readUTF();
        };
        PartyNameUpdateMessage.ID = 9548;
        return PartyNameUpdateMessage;
    })(AbstractPartyMessage);
    Protocol.PartyNameUpdateMessage = PartyNameUpdateMessage;
    var PartyNewGuestMessage = (function(_super) {
        __extends(PartyNewGuestMessage, _super);

        function PartyNewGuestMessage() {
            this.guest = new PartyGuestInformations();
            _super.call(this)
        }
        PartyNewGuestMessage.prototype.getMessageId = function() {
            return PartyNewGuestMessage.ID;
        };
        PartyNewGuestMessage.prototype.reset = function() {
            this.guest = new PartyGuestInformations();
        };
        PartyNewGuestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyNewGuestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyNewGuestMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyNewGuestMessage(output);
        };
        PartyNewGuestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyNewGuestMessage(input);
        };
        PartyNewGuestMessage.prototype.serializeAs_PartyNewGuestMessage = function(output) {
            _super.prototype.serializeAs_AbstractPartyEventMessage.call(this, output);
            this.guest.serializeAs_PartyGuestInformations(output);
        };
        PartyNewGuestMessage.prototype.deserializeAs_PartyNewGuestMessage = function(input) {
            _super.prototype.deserializeAs_AbstractPartyEventMessage.call(this, input);
            this.guest = new PartyGuestInformations();
            this.guest.deserialize(input);
        };
        PartyNewGuestMessage.ID = 1186;
        return PartyNewGuestMessage;
    })(AbstractPartyEventMessage);
    Protocol.PartyNewGuestMessage = PartyNewGuestMessage;
    var PartyUpdateMessage = (function(_super) {
        __extends(PartyUpdateMessage, _super);

        function PartyUpdateMessage() {
            this.memberInformations = new PartyMemberInformations();
            _super.call(this)
        }
        PartyUpdateMessage.prototype.getMessageId = function() {
            return PartyUpdateMessage.ID;
        };
        PartyUpdateMessage.prototype.reset = function() {
            this.memberInformations = new PartyMemberInformations();
        };
        PartyUpdateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyUpdateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyUpdateMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyUpdateMessage(output);
        };
        PartyUpdateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyUpdateMessage(input);
        };
        PartyUpdateMessage.prototype.serializeAs_PartyUpdateMessage = function(output) {
            _super.prototype.serializeAs_AbstractPartyEventMessage.call(this, output);
            output.writeShort(this.memberInformations.getTypeId());
            this.memberInformations.serialize(output);
        };
        PartyUpdateMessage.prototype.deserializeAs_PartyUpdateMessage = function(input) {
            _super.prototype.deserializeAs_AbstractPartyEventMessage.call(this, input);
            var _id1 = input.readUnsignedShort();
            this.memberInformations = ProtocolTypeManager.getInstance(PartyMemberInformations, _id1);
            this.memberInformations.deserialize(input);
        };
        PartyUpdateMessage.ID = 5568;
        return PartyUpdateMessage;
    })(AbstractPartyEventMessage);
    Protocol.PartyUpdateMessage = PartyUpdateMessage;
    var PartyNewMemberMessage = (function(_super) {
        __extends(PartyNewMemberMessage, _super);

        function PartyNewMemberMessage() {

            _super.call(this)
        }
        PartyNewMemberMessage.prototype.getMessageId = function() {
            return PartyNewMemberMessage.ID;
        };
        PartyNewMemberMessage.prototype.reset = function() {

        };
        PartyNewMemberMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyNewMemberMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyNewMemberMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyNewMemberMessage(output);
        };
        PartyNewMemberMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyNewMemberMessage(input);
        };
        PartyNewMemberMessage.prototype.serializeAs_PartyNewMemberMessage = function(output) {
            _super.prototype.serializeAs_PartyUpdateMessage.call(this, output);
        };
        PartyNewMemberMessage.prototype.deserializeAs_PartyNewMemberMessage = function(input) {
            _super.prototype.deserializeAs_PartyUpdateMessage.call(this, input);
        };
        PartyNewMemberMessage.ID = 2422;
        return PartyNewMemberMessage;
    })(PartyUpdateMessage);
    Protocol.PartyNewMemberMessage = PartyNewMemberMessage;
    var PartyPledgeLoyaltyRequestMessage = (function(_super) {
        __extends(PartyPledgeLoyaltyRequestMessage, _super);

        function PartyPledgeLoyaltyRequestMessage() {
            this.loyal = false;
            _super.call(this)
        }
        PartyPledgeLoyaltyRequestMessage.prototype.getMessageId = function() {
            return PartyPledgeLoyaltyRequestMessage.ID;
        };
        PartyPledgeLoyaltyRequestMessage.prototype.reset = function() {
            this.loyal = false;
        };
        PartyPledgeLoyaltyRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyPledgeLoyaltyRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyPledgeLoyaltyRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyPledgeLoyaltyRequestMessage(output);
        };
        PartyPledgeLoyaltyRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyPledgeLoyaltyRequestMessage(input);
        };
        PartyPledgeLoyaltyRequestMessage.prototype.serializeAs_PartyPledgeLoyaltyRequestMessage = function(output) {
            _super.prototype.serializeAs_AbstractPartyMessage.call(this, output);
            output.writeBoolean(this.loyal);
        };
        PartyPledgeLoyaltyRequestMessage.prototype.deserializeAs_PartyPledgeLoyaltyRequestMessage = function(input) {
            _super.prototype.deserializeAs_AbstractPartyMessage.call(this, input);
            this.loyal = input.readBoolean();
        };
        PartyPledgeLoyaltyRequestMessage.ID = 8938;
        return PartyPledgeLoyaltyRequestMessage;
    })(AbstractPartyMessage);
    Protocol.PartyPledgeLoyaltyRequestMessage = PartyPledgeLoyaltyRequestMessage;
    var PartyRefuseInvitationMessage = (function(_super) {
        __extends(PartyRefuseInvitationMessage, _super);

        function PartyRefuseInvitationMessage() {

            _super.call(this)
        }
        PartyRefuseInvitationMessage.prototype.getMessageId = function() {
            return PartyRefuseInvitationMessage.ID;
        };
        PartyRefuseInvitationMessage.prototype.reset = function() {

        };
        PartyRefuseInvitationMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyRefuseInvitationMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyRefuseInvitationMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyRefuseInvitationMessage(output);
        };
        PartyRefuseInvitationMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyRefuseInvitationMessage(input);
        };
        PartyRefuseInvitationMessage.prototype.serializeAs_PartyRefuseInvitationMessage = function(output) {
            _super.prototype.serializeAs_AbstractPartyMessage.call(this, output);
        };
        PartyRefuseInvitationMessage.prototype.deserializeAs_PartyRefuseInvitationMessage = function(input) {
            _super.prototype.deserializeAs_AbstractPartyMessage.call(this, input);
        };
        PartyRefuseInvitationMessage.ID = 8642;
        return PartyRefuseInvitationMessage;
    })(AbstractPartyMessage);
    Protocol.PartyRefuseInvitationMessage = PartyRefuseInvitationMessage;
    var PartyRefuseInvitationNotificationMessage = (function(_super) {
        __extends(PartyRefuseInvitationNotificationMessage, _super);

        function PartyRefuseInvitationNotificationMessage() {
            this.guestId = 0;
            _super.call(this)
        }
        PartyRefuseInvitationNotificationMessage.prototype.getMessageId = function() {
            return PartyRefuseInvitationNotificationMessage.ID;
        };
        PartyRefuseInvitationNotificationMessage.prototype.reset = function() {
            this.guestId = 0;
        };
        PartyRefuseInvitationNotificationMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyRefuseInvitationNotificationMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyRefuseInvitationNotificationMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyRefuseInvitationNotificationMessage(output);
        };
        PartyRefuseInvitationNotificationMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyRefuseInvitationNotificationMessage(input);
        };
        PartyRefuseInvitationNotificationMessage.prototype.serializeAs_PartyRefuseInvitationNotificationMessage = function(output) {
            _super.prototype.serializeAs_AbstractPartyEventMessage.call(this, output);
            if (this.guestId < 0 || this.guestId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.guestId + ") on element guestId.");
            }
            output.writeVarLong(this.guestId);
        };
        PartyRefuseInvitationNotificationMessage.prototype.deserializeAs_PartyRefuseInvitationNotificationMessage = function(input) {
            _super.prototype.deserializeAs_AbstractPartyEventMessage.call(this, input);
            this.guestId = input.readVarUhLong();
            if (this.guestId < 0 || this.guestId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.guestId + ") on element of PartyRefuseInvitationNotificationMessage.guestId.");
            }
        };
        PartyRefuseInvitationNotificationMessage.ID = 4578;
        return PartyRefuseInvitationNotificationMessage;
    })(AbstractPartyEventMessage);
    Protocol.PartyRefuseInvitationNotificationMessage = PartyRefuseInvitationNotificationMessage;
    var PartyRestrictedMessage = (function(_super) {
        __extends(PartyRestrictedMessage, _super);

        function PartyRestrictedMessage() {
            this.restricted = false;
            _super.call(this)
        }
        PartyRestrictedMessage.prototype.getMessageId = function() {
            return PartyRestrictedMessage.ID;
        };
        PartyRestrictedMessage.prototype.reset = function() {
            this.restricted = false;
        };
        PartyRestrictedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyRestrictedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyRestrictedMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyRestrictedMessage(output);
        };
        PartyRestrictedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyRestrictedMessage(input);
        };
        PartyRestrictedMessage.prototype.serializeAs_PartyRestrictedMessage = function(output) {
            _super.prototype.serializeAs_AbstractPartyMessage.call(this, output);
            output.writeBoolean(this.restricted);
        };
        PartyRestrictedMessage.prototype.deserializeAs_PartyRestrictedMessage = function(input) {
            _super.prototype.deserializeAs_AbstractPartyMessage.call(this, input);
            this.restricted = input.readBoolean();
        };
        PartyRestrictedMessage.ID = 5979;
        return PartyRestrictedMessage;
    })(AbstractPartyMessage);
    Protocol.PartyRestrictedMessage = PartyRestrictedMessage;
    var PartyStopFollowRequestMessage = (function(_super) {
        __extends(PartyStopFollowRequestMessage, _super);

        function PartyStopFollowRequestMessage() {
            this.playerId = 0;
            _super.call(this)
        }
        PartyStopFollowRequestMessage.prototype.getMessageId = function() {
            return PartyStopFollowRequestMessage.ID;
        };
        PartyStopFollowRequestMessage.prototype.reset = function() {
            this.playerId = 0;
        };
        PartyStopFollowRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PartyStopFollowRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PartyStopFollowRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_PartyStopFollowRequestMessage(output);
        };
        PartyStopFollowRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PartyStopFollowRequestMessage(input);
        };
        PartyStopFollowRequestMessage.prototype.serializeAs_PartyStopFollowRequestMessage = function(output) {
            _super.prototype.serializeAs_AbstractPartyMessage.call(this, output);
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
        };
        PartyStopFollowRequestMessage.prototype.deserializeAs_PartyStopFollowRequestMessage = function(input) {
            _super.prototype.deserializeAs_AbstractPartyMessage.call(this, input);
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of PartyStopFollowRequestMessage.playerId.");
            }
        };
        PartyStopFollowRequestMessage.ID = 4679;
        return PartyStopFollowRequestMessage;
    })(AbstractPartyMessage);
    Protocol.PartyStopFollowRequestMessage = PartyStopFollowRequestMessage;
    var PurchasableDialogMessage = (function(_super) {
        __extends(PurchasableDialogMessage, _super);

        function PurchasableDialogMessage() {
            this.buyOrSell = false;
            this.purchasableId = 0;
            this.purchasableInstanceId = 0;
            this.secondHand = false;
            this.price = 0;
            _super.call(this)
        }
        PurchasableDialogMessage.prototype.getMessageId = function() {
            return PurchasableDialogMessage.ID;
        };
        PurchasableDialogMessage.prototype.reset = function() {
            this.buyOrSell = false;
            this.purchasableId = 0;
            this.purchasableInstanceId = 0;
            this.secondHand = false;
            this.price = 0;
        };
        PurchasableDialogMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PurchasableDialogMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PurchasableDialogMessage.prototype.serialize = function(output) {
            this.serializeAs_PurchasableDialogMessage(output);
        };
        PurchasableDialogMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PurchasableDialogMessage(input);
        };
        PurchasableDialogMessage.prototype.serializeAs_PurchasableDialogMessage = function(output) {
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.buyOrSell);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.secondHand);
            output.writeByte(_box0);
            if (this.purchasableId < 0 || this.purchasableId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.purchasableId + ") on element purchasableId.");
            }
            output.writeDouble(this.purchasableId);
            if (this.purchasableInstanceId < 0) {
                throw new Error("Forbidden value (" + this.purchasableInstanceId + ") on element purchasableInstanceId.");
            }
            output.writeInt(this.purchasableInstanceId);
            if (this.price < 0 || this.price > 9007199254740990) {
                throw new Error("Forbidden value (" + this.price + ") on element price.");
            }
            output.writeVarLong(this.price);
        };
        PurchasableDialogMessage.prototype.deserializeAs_PurchasableDialogMessage = function(input) {
            this.deserializeByteBoxes(input);
            this.purchasableId = input.readDouble();
            if (this.purchasableId < 0 || this.purchasableId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.purchasableId + ") on element of PurchasableDialogMessage.purchasableId.");
            }
            this.purchasableInstanceId = input.readInt();
            if (this.purchasableInstanceId < 0) {
                throw new Error("Forbidden value (" + this.purchasableInstanceId + ") on element of PurchasableDialogMessage.purchasableInstanceId.");
            }
            this.price = input.readVarUhLong();
            if (this.price < 0 || this.price > 9007199254740990) {
                throw new Error("Forbidden value (" + this.price + ") on element of PurchasableDialogMessage.price.");
            }
        };
        PurchasableDialogMessage.ID = 3240;
        return PurchasableDialogMessage;
    })(NetworkMessage);
    Protocol.PurchasableDialogMessage = PurchasableDialogMessage;
    var FollowedQuestsMessage = (function(_super) {
        __extends(FollowedQuestsMessage, _super);

        function FollowedQuestsMessage() {
            this.quests = [];
            _super.call(this)
        }
        FollowedQuestsMessage.prototype.getMessageId = function() {
            return FollowedQuestsMessage.ID;
        };
        FollowedQuestsMessage.prototype.reset = function() {
            this.quests = [];
        };
        FollowedQuestsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        FollowedQuestsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        FollowedQuestsMessage.prototype.serialize = function(output) {
            this.serializeAs_FollowedQuestsMessage(output);
        };
        FollowedQuestsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_FollowedQuestsMessage(input);
        };
        FollowedQuestsMessage.prototype.serializeAs_FollowedQuestsMessage = function(output) {
            output.writeShort(this.quests.length);
            for (var _i1 = 0; _i1 < this.quests.length; _i1++) {
                (this.quests[_i1]).serializeAs_QuestActiveDetailedInformations(output);
            }
        };
        FollowedQuestsMessage.prototype.deserializeAs_FollowedQuestsMessage = function(input) {
            var _item1 = null;
            var _questsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _questsLen; _i1++) {
                _item1 = new QuestActiveDetailedInformations();
                _item1.deserialize(input);
                this.quests.push(_item1);
            }
        };
        FollowedQuestsMessage.ID = 3134;
        return FollowedQuestsMessage;
    })(NetworkMessage);
    Protocol.FollowedQuestsMessage = FollowedQuestsMessage;
    var FollowQuestObjectiveRequestMessage = (function(_super) {
        __extends(FollowQuestObjectiveRequestMessage, _super);

        function FollowQuestObjectiveRequestMessage() {
            this.questId = 0;
            this.objectiveId = 0;
            _super.call(this)
        }
        FollowQuestObjectiveRequestMessage.prototype.getMessageId = function() {
            return FollowQuestObjectiveRequestMessage.ID;
        };
        FollowQuestObjectiveRequestMessage.prototype.reset = function() {
            this.questId = 0;
            this.objectiveId = 0;
        };
        FollowQuestObjectiveRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        FollowQuestObjectiveRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        FollowQuestObjectiveRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_FollowQuestObjectiveRequestMessage(output);
        };
        FollowQuestObjectiveRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_FollowQuestObjectiveRequestMessage(input);
        };
        FollowQuestObjectiveRequestMessage.prototype.serializeAs_FollowQuestObjectiveRequestMessage = function(output) {
            if (this.questId < 0) {
                throw new Error("Forbidden value (" + this.questId + ") on element questId.");
            }
            output.writeVarShort(this.questId);
            output.writeShort(this.objectiveId);
        };
        FollowQuestObjectiveRequestMessage.prototype.deserializeAs_FollowQuestObjectiveRequestMessage = function(input) {
            this.questId = input.readVarUhShort();
            if (this.questId < 0) {
                throw new Error("Forbidden value (" + this.questId + ") on element of FollowQuestObjectiveRequestMessage.questId.");
            }
            this.objectiveId = input.readShort();
        };
        FollowQuestObjectiveRequestMessage.ID = 2378;
        return FollowQuestObjectiveRequestMessage;
    })(NetworkMessage);
    Protocol.FollowQuestObjectiveRequestMessage = FollowQuestObjectiveRequestMessage;
    var GuidedModeQuitRequestMessage = (function(_super) {
        __extends(GuidedModeQuitRequestMessage, _super);

        function GuidedModeQuitRequestMessage() {

            _super.call(this)
        }
        GuidedModeQuitRequestMessage.prototype.getMessageId = function() {
            return GuidedModeQuitRequestMessage.ID;
        };
        GuidedModeQuitRequestMessage.prototype.reset = function() {

        };
        GuidedModeQuitRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuidedModeQuitRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuidedModeQuitRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_GuidedModeQuitRequestMessage(output);
        };
        GuidedModeQuitRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuidedModeQuitRequestMessage(input);
        };
        GuidedModeQuitRequestMessage.prototype.serializeAs_GuidedModeQuitRequestMessage = function(output) {

        };
        GuidedModeQuitRequestMessage.prototype.deserializeAs_GuidedModeQuitRequestMessage = function(input) {

        };
        GuidedModeQuitRequestMessage.ID = 5740;
        return GuidedModeQuitRequestMessage;
    })(NetworkMessage);
    Protocol.GuidedModeQuitRequestMessage = GuidedModeQuitRequestMessage;
    var GuidedModeReturnRequestMessage = (function(_super) {
        __extends(GuidedModeReturnRequestMessage, _super);

        function GuidedModeReturnRequestMessage() {

            _super.call(this)
        }
        GuidedModeReturnRequestMessage.prototype.getMessageId = function() {
            return GuidedModeReturnRequestMessage.ID;
        };
        GuidedModeReturnRequestMessage.prototype.reset = function() {

        };
        GuidedModeReturnRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuidedModeReturnRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuidedModeReturnRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_GuidedModeReturnRequestMessage(output);
        };
        GuidedModeReturnRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuidedModeReturnRequestMessage(input);
        };
        GuidedModeReturnRequestMessage.prototype.serializeAs_GuidedModeReturnRequestMessage = function(output) {

        };
        GuidedModeReturnRequestMessage.prototype.deserializeAs_GuidedModeReturnRequestMessage = function(input) {

        };
        GuidedModeReturnRequestMessage.ID = 1205;
        return GuidedModeReturnRequestMessage;
    })(NetworkMessage);
    Protocol.GuidedModeReturnRequestMessage = GuidedModeReturnRequestMessage;
    var QuestListMessage = (function(_super) {
        __extends(QuestListMessage, _super);

        function QuestListMessage() {
            this.finishedQuestsIds = [];
            this.finishedQuestsCounts = [];
            this.activeQuests = [];
            this.reinitDoneQuestsIds = [];
            _super.call(this)
        }
        QuestListMessage.prototype.getMessageId = function() {
            return QuestListMessage.ID;
        };
        QuestListMessage.prototype.reset = function() {
            this.finishedQuestsIds = [];
            this.finishedQuestsCounts = [];
            this.activeQuests = [];
            this.reinitDoneQuestsIds = [];
        };
        QuestListMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        QuestListMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        QuestListMessage.prototype.serialize = function(output) {
            this.serializeAs_QuestListMessage(output);
        };
        QuestListMessage.prototype.deserialize = function(input) {
            this.deserializeAs_QuestListMessage(input);
        };
        QuestListMessage.prototype.serializeAs_QuestListMessage = function(output) {
            output.writeShort(this.finishedQuestsIds.length);
            for (var _i1 = 0; _i1 < this.finishedQuestsIds.length; _i1++) {
                if (this.finishedQuestsIds[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.finishedQuestsIds[_i1] + ") on element 1 (starting at 1) of finishedQuestsIds.");
                }
                output.writeVarShort(this.finishedQuestsIds[_i1]);
            }
            output.writeShort(this.finishedQuestsCounts.length);
            for (var _i2 = 0; _i2 < this.finishedQuestsCounts.length; _i2++) {
                if (this.finishedQuestsCounts[_i2] < 0) {
                    throw new Error("Forbidden value (" + this.finishedQuestsCounts[_i2] + ") on element 2 (starting at 1) of finishedQuestsCounts.");
                }
                output.writeVarShort(this.finishedQuestsCounts[_i2]);
            }
            output.writeShort(this.activeQuests.length);
            for (var _i3 = 0; _i3 < this.activeQuests.length; _i3++) {
                output.writeShort((this.activeQuests[_i3]).getTypeId());
                (this.activeQuests[_i3]).serialize(output);
            }
            output.writeShort(this.reinitDoneQuestsIds.length);
            for (var _i4 = 0; _i4 < this.reinitDoneQuestsIds.length; _i4++) {
                if (this.reinitDoneQuestsIds[_i4] < 0) {
                    throw new Error("Forbidden value (" + this.reinitDoneQuestsIds[_i4] + ") on element 4 (starting at 1) of reinitDoneQuestsIds.");
                }
                output.writeVarShort(this.reinitDoneQuestsIds[_i4]);
            }
        };
        QuestListMessage.prototype.deserializeAs_QuestListMessage = function(input) {
            var _val1 = 0;
            var _val2 = 0;
            var _id3 = 0;
            var _item3 = null;
            var _val4 = 0;
            var _finishedQuestsIdsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _finishedQuestsIdsLen; _i1++) {
                _val1 = input.readVarUhShort();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of finishedQuestsIds.");
                }
                this.finishedQuestsIds.push(_val1);
            }
            var _finishedQuestsCountsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _finishedQuestsCountsLen; _i2++) {
                _val2 = input.readVarUhShort();
                if (_val2 < 0) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of finishedQuestsCounts.");
                }
                this.finishedQuestsCounts.push(_val2);
            }
            var _activeQuestsLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _activeQuestsLen; _i3++) {
                _id3 = input.readUnsignedShort();
                _item3 = ProtocolTypeManager.getInstance(QuestActiveInformations, _id3);
                _item3.deserialize(input);
                this.activeQuests.push(_item3);
            }
            var _reinitDoneQuestsIdsLen = input.readUnsignedShort();
            for (var _i4 = 0; _i4 < _reinitDoneQuestsIdsLen; _i4++) {
                _val4 = input.readVarUhShort();
                if (_val4 < 0) {
                    throw new Error("Forbidden value (" + _val4 + ") on elements of reinitDoneQuestsIds.");
                }
                this.reinitDoneQuestsIds.push(_val4);
            }
        };
        QuestListMessage.ID = 7788;
        return QuestListMessage;
    })(NetworkMessage);
    Protocol.QuestListMessage = QuestListMessage;
    var QuestListRequestMessage = (function(_super) {
        __extends(QuestListRequestMessage, _super);

        function QuestListRequestMessage() {

            _super.call(this)
        }
        QuestListRequestMessage.prototype.getMessageId = function() {
            return QuestListRequestMessage.ID;
        };
        QuestListRequestMessage.prototype.reset = function() {

        };
        QuestListRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        QuestListRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        QuestListRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_QuestListRequestMessage(output);
        };
        QuestListRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_QuestListRequestMessage(input);
        };
        QuestListRequestMessage.prototype.serializeAs_QuestListRequestMessage = function(output) {

        };
        QuestListRequestMessage.prototype.deserializeAs_QuestListRequestMessage = function(input) {

        };
        QuestListRequestMessage.ID = 3293;
        return QuestListRequestMessage;
    })(NetworkMessage);
    Protocol.QuestListRequestMessage = QuestListRequestMessage;
    var QuestObjectiveValidatedMessage = (function(_super) {
        __extends(QuestObjectiveValidatedMessage, _super);

        function QuestObjectiveValidatedMessage() {
            this.questId = 0;
            this.objectiveId = 0;
            _super.call(this)
        }
        QuestObjectiveValidatedMessage.prototype.getMessageId = function() {
            return QuestObjectiveValidatedMessage.ID;
        };
        QuestObjectiveValidatedMessage.prototype.reset = function() {
            this.questId = 0;
            this.objectiveId = 0;
        };
        QuestObjectiveValidatedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        QuestObjectiveValidatedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        QuestObjectiveValidatedMessage.prototype.serialize = function(output) {
            this.serializeAs_QuestObjectiveValidatedMessage(output);
        };
        QuestObjectiveValidatedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_QuestObjectiveValidatedMessage(input);
        };
        QuestObjectiveValidatedMessage.prototype.serializeAs_QuestObjectiveValidatedMessage = function(output) {
            if (this.questId < 0) {
                throw new Error("Forbidden value (" + this.questId + ") on element questId.");
            }
            output.writeVarShort(this.questId);
            if (this.objectiveId < 0) {
                throw new Error("Forbidden value (" + this.objectiveId + ") on element objectiveId.");
            }
            output.writeVarShort(this.objectiveId);
        };
        QuestObjectiveValidatedMessage.prototype.deserializeAs_QuestObjectiveValidatedMessage = function(input) {
            this.questId = input.readVarUhShort();
            if (this.questId < 0) {
                throw new Error("Forbidden value (" + this.questId + ") on element of QuestObjectiveValidatedMessage.questId.");
            }
            this.objectiveId = input.readVarUhShort();
            if (this.objectiveId < 0) {
                throw new Error("Forbidden value (" + this.objectiveId + ") on element of QuestObjectiveValidatedMessage.objectiveId.");
            }
        };
        QuestObjectiveValidatedMessage.ID = 8139;
        return QuestObjectiveValidatedMessage;
    })(NetworkMessage);
    Protocol.QuestObjectiveValidatedMessage = QuestObjectiveValidatedMessage;
    var QuestObjectiveValidationMessage = (function(_super) {
        __extends(QuestObjectiveValidationMessage, _super);

        function QuestObjectiveValidationMessage() {
            this.questId = 0;
            this.objectiveId = 0;
            _super.call(this)
        }
        QuestObjectiveValidationMessage.prototype.getMessageId = function() {
            return QuestObjectiveValidationMessage.ID;
        };
        QuestObjectiveValidationMessage.prototype.reset = function() {
            this.questId = 0;
            this.objectiveId = 0;
        };
        QuestObjectiveValidationMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        QuestObjectiveValidationMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        QuestObjectiveValidationMessage.prototype.serialize = function(output) {
            this.serializeAs_QuestObjectiveValidationMessage(output);
        };
        QuestObjectiveValidationMessage.prototype.deserialize = function(input) {
            this.deserializeAs_QuestObjectiveValidationMessage(input);
        };
        QuestObjectiveValidationMessage.prototype.serializeAs_QuestObjectiveValidationMessage = function(output) {
            if (this.questId < 0) {
                throw new Error("Forbidden value (" + this.questId + ") on element questId.");
            }
            output.writeVarShort(this.questId);
            if (this.objectiveId < 0) {
                throw new Error("Forbidden value (" + this.objectiveId + ") on element objectiveId.");
            }
            output.writeVarShort(this.objectiveId);
        };
        QuestObjectiveValidationMessage.prototype.deserializeAs_QuestObjectiveValidationMessage = function(input) {
            this.questId = input.readVarUhShort();
            if (this.questId < 0) {
                throw new Error("Forbidden value (" + this.questId + ") on element of QuestObjectiveValidationMessage.questId.");
            }
            this.objectiveId = input.readVarUhShort();
            if (this.objectiveId < 0) {
                throw new Error("Forbidden value (" + this.objectiveId + ") on element of QuestObjectiveValidationMessage.objectiveId.");
            }
        };
        QuestObjectiveValidationMessage.ID = 6610;
        return QuestObjectiveValidationMessage;
    })(NetworkMessage);
    Protocol.QuestObjectiveValidationMessage = QuestObjectiveValidationMessage;
    var QuestStartedMessage = (function(_super) {
        __extends(QuestStartedMessage, _super);

        function QuestStartedMessage() {
            this.questId = 0;
            _super.call(this)
        }
        QuestStartedMessage.prototype.getMessageId = function() {
            return QuestStartedMessage.ID;
        };
        QuestStartedMessage.prototype.reset = function() {
            this.questId = 0;
        };
        QuestStartedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        QuestStartedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        QuestStartedMessage.prototype.serialize = function(output) {
            this.serializeAs_QuestStartedMessage(output);
        };
        QuestStartedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_QuestStartedMessage(input);
        };
        QuestStartedMessage.prototype.serializeAs_QuestStartedMessage = function(output) {
            if (this.questId < 0) {
                throw new Error("Forbidden value (" + this.questId + ") on element questId.");
            }
            output.writeVarShort(this.questId);
        };
        QuestStartedMessage.prototype.deserializeAs_QuestStartedMessage = function(input) {
            this.questId = input.readVarUhShort();
            if (this.questId < 0) {
                throw new Error("Forbidden value (" + this.questId + ") on element of QuestStartedMessage.questId.");
            }
        };
        QuestStartedMessage.ID = 5795;
        return QuestStartedMessage;
    })(NetworkMessage);
    Protocol.QuestStartedMessage = QuestStartedMessage;
    var QuestStartRequestMessage = (function(_super) {
        __extends(QuestStartRequestMessage, _super);

        function QuestStartRequestMessage() {
            this.questId = 0;
            _super.call(this)
        }
        QuestStartRequestMessage.prototype.getMessageId = function() {
            return QuestStartRequestMessage.ID;
        };
        QuestStartRequestMessage.prototype.reset = function() {
            this.questId = 0;
        };
        QuestStartRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        QuestStartRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        QuestStartRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_QuestStartRequestMessage(output);
        };
        QuestStartRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_QuestStartRequestMessage(input);
        };
        QuestStartRequestMessage.prototype.serializeAs_QuestStartRequestMessage = function(output) {
            if (this.questId < 0) {
                throw new Error("Forbidden value (" + this.questId + ") on element questId.");
            }
            output.writeVarShort(this.questId);
        };
        QuestStartRequestMessage.prototype.deserializeAs_QuestStartRequestMessage = function(input) {
            this.questId = input.readVarUhShort();
            if (this.questId < 0) {
                throw new Error("Forbidden value (" + this.questId + ") on element of QuestStartRequestMessage.questId.");
            }
        };
        QuestStartRequestMessage.ID = 6179;
        return QuestStartRequestMessage;
    })(NetworkMessage);
    Protocol.QuestStartRequestMessage = QuestStartRequestMessage;
    var QuestStepInfoMessage = (function(_super) {
        __extends(QuestStepInfoMessage, _super);

        function QuestStepInfoMessage() {
            this.infos = new QuestActiveInformations();
            _super.call(this)
        }
        QuestStepInfoMessage.prototype.getMessageId = function() {
            return QuestStepInfoMessage.ID;
        };
        QuestStepInfoMessage.prototype.reset = function() {
            this.infos = new QuestActiveInformations();
        };
        QuestStepInfoMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        QuestStepInfoMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        QuestStepInfoMessage.prototype.serialize = function(output) {
            this.serializeAs_QuestStepInfoMessage(output);
        };
        QuestStepInfoMessage.prototype.deserialize = function(input) {
            this.deserializeAs_QuestStepInfoMessage(input);
        };
        QuestStepInfoMessage.prototype.serializeAs_QuestStepInfoMessage = function(output) {
            output.writeShort(this.infos.getTypeId());
            this.infos.serialize(output);
        };
        QuestStepInfoMessage.prototype.deserializeAs_QuestStepInfoMessage = function(input) {
            var _id1 = input.readUnsignedShort();
            this.infos = ProtocolTypeManager.getInstance(QuestActiveInformations, _id1);
            this.infos.deserialize(input);
        };
        QuestStepInfoMessage.ID = 2660;
        return QuestStepInfoMessage;
    })(NetworkMessage);
    Protocol.QuestStepInfoMessage = QuestStepInfoMessage;
    var QuestStepInfoRequestMessage = (function(_super) {
        __extends(QuestStepInfoRequestMessage, _super);

        function QuestStepInfoRequestMessage() {
            this.questId = 0;
            _super.call(this)
        }
        QuestStepInfoRequestMessage.prototype.getMessageId = function() {
            return QuestStepInfoRequestMessage.ID;
        };
        QuestStepInfoRequestMessage.prototype.reset = function() {
            this.questId = 0;
        };
        QuestStepInfoRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        QuestStepInfoRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        QuestStepInfoRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_QuestStepInfoRequestMessage(output);
        };
        QuestStepInfoRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_QuestStepInfoRequestMessage(input);
        };
        QuestStepInfoRequestMessage.prototype.serializeAs_QuestStepInfoRequestMessage = function(output) {
            if (this.questId < 0) {
                throw new Error("Forbidden value (" + this.questId + ") on element questId.");
            }
            output.writeVarShort(this.questId);
        };
        QuestStepInfoRequestMessage.prototype.deserializeAs_QuestStepInfoRequestMessage = function(input) {
            this.questId = input.readVarUhShort();
            if (this.questId < 0) {
                throw new Error("Forbidden value (" + this.questId + ") on element of QuestStepInfoRequestMessage.questId.");
            }
        };
        QuestStepInfoRequestMessage.ID = 2214;
        return QuestStepInfoRequestMessage;
    })(NetworkMessage);
    Protocol.QuestStepInfoRequestMessage = QuestStepInfoRequestMessage;
    var QuestStepStartedMessage = (function(_super) {
        __extends(QuestStepStartedMessage, _super);

        function QuestStepStartedMessage() {
            this.questId = 0;
            this.stepId = 0;
            _super.call(this)
        }
        QuestStepStartedMessage.prototype.getMessageId = function() {
            return QuestStepStartedMessage.ID;
        };
        QuestStepStartedMessage.prototype.reset = function() {
            this.questId = 0;
            this.stepId = 0;
        };
        QuestStepStartedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        QuestStepStartedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        QuestStepStartedMessage.prototype.serialize = function(output) {
            this.serializeAs_QuestStepStartedMessage(output);
        };
        QuestStepStartedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_QuestStepStartedMessage(input);
        };
        QuestStepStartedMessage.prototype.serializeAs_QuestStepStartedMessage = function(output) {
            if (this.questId < 0) {
                throw new Error("Forbidden value (" + this.questId + ") on element questId.");
            }
            output.writeVarShort(this.questId);
            if (this.stepId < 0) {
                throw new Error("Forbidden value (" + this.stepId + ") on element stepId.");
            }
            output.writeVarShort(this.stepId);
        };
        QuestStepStartedMessage.prototype.deserializeAs_QuestStepStartedMessage = function(input) {
            this.questId = input.readVarUhShort();
            if (this.questId < 0) {
                throw new Error("Forbidden value (" + this.questId + ") on element of QuestStepStartedMessage.questId.");
            }
            this.stepId = input.readVarUhShort();
            if (this.stepId < 0) {
                throw new Error("Forbidden value (" + this.stepId + ") on element of QuestStepStartedMessage.stepId.");
            }
        };
        QuestStepStartedMessage.ID = 2692;
        return QuestStepStartedMessage;
    })(NetworkMessage);
    Protocol.QuestStepStartedMessage = QuestStepStartedMessage;
    var QuestStepValidatedMessage = (function(_super) {
        __extends(QuestStepValidatedMessage, _super);

        function QuestStepValidatedMessage() {
            this.questId = 0;
            this.stepId = 0;
            _super.call(this)
        }
        QuestStepValidatedMessage.prototype.getMessageId = function() {
            return QuestStepValidatedMessage.ID;
        };
        QuestStepValidatedMessage.prototype.reset = function() {
            this.questId = 0;
            this.stepId = 0;
        };
        QuestStepValidatedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        QuestStepValidatedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        QuestStepValidatedMessage.prototype.serialize = function(output) {
            this.serializeAs_QuestStepValidatedMessage(output);
        };
        QuestStepValidatedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_QuestStepValidatedMessage(input);
        };
        QuestStepValidatedMessage.prototype.serializeAs_QuestStepValidatedMessage = function(output) {
            if (this.questId < 0) {
                throw new Error("Forbidden value (" + this.questId + ") on element questId.");
            }
            output.writeVarShort(this.questId);
            if (this.stepId < 0) {
                throw new Error("Forbidden value (" + this.stepId + ") on element stepId.");
            }
            output.writeVarShort(this.stepId);
        };
        QuestStepValidatedMessage.prototype.deserializeAs_QuestStepValidatedMessage = function(input) {
            this.questId = input.readVarUhShort();
            if (this.questId < 0) {
                throw new Error("Forbidden value (" + this.questId + ") on element of QuestStepValidatedMessage.questId.");
            }
            this.stepId = input.readVarUhShort();
            if (this.stepId < 0) {
                throw new Error("Forbidden value (" + this.stepId + ") on element of QuestStepValidatedMessage.stepId.");
            }
        };
        QuestStepValidatedMessage.ID = 5890;
        return QuestStepValidatedMessage;
    })(NetworkMessage);
    Protocol.QuestStepValidatedMessage = QuestStepValidatedMessage;
    var QuestValidatedMessage = (function(_super) {
        __extends(QuestValidatedMessage, _super);

        function QuestValidatedMessage() {
            this.questId = 0;
            _super.call(this)
        }
        QuestValidatedMessage.prototype.getMessageId = function() {
            return QuestValidatedMessage.ID;
        };
        QuestValidatedMessage.prototype.reset = function() {
            this.questId = 0;
        };
        QuestValidatedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        QuestValidatedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        QuestValidatedMessage.prototype.serialize = function(output) {
            this.serializeAs_QuestValidatedMessage(output);
        };
        QuestValidatedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_QuestValidatedMessage(input);
        };
        QuestValidatedMessage.prototype.serializeAs_QuestValidatedMessage = function(output) {
            if (this.questId < 0) {
                throw new Error("Forbidden value (" + this.questId + ") on element questId.");
            }
            output.writeVarShort(this.questId);
        };
        QuestValidatedMessage.prototype.deserializeAs_QuestValidatedMessage = function(input) {
            this.questId = input.readVarUhShort();
            if (this.questId < 0) {
                throw new Error("Forbidden value (" + this.questId + ") on element of QuestValidatedMessage.questId.");
            }
        };
        QuestValidatedMessage.ID = 7778;
        return QuestValidatedMessage;
    })(NetworkMessage);
    Protocol.QuestValidatedMessage = QuestValidatedMessage;
    var RefreshFollowedQuestsOrderRequestMessage = (function(_super) {
        __extends(RefreshFollowedQuestsOrderRequestMessage, _super);

        function RefreshFollowedQuestsOrderRequestMessage() {
            this.quests = [];
            _super.call(this)
        }
        RefreshFollowedQuestsOrderRequestMessage.prototype.getMessageId = function() {
            return RefreshFollowedQuestsOrderRequestMessage.ID;
        };
        RefreshFollowedQuestsOrderRequestMessage.prototype.reset = function() {
            this.quests = [];
        };
        RefreshFollowedQuestsOrderRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        RefreshFollowedQuestsOrderRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        RefreshFollowedQuestsOrderRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_RefreshFollowedQuestsOrderRequestMessage(output);
        };
        RefreshFollowedQuestsOrderRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_RefreshFollowedQuestsOrderRequestMessage(input);
        };
        RefreshFollowedQuestsOrderRequestMessage.prototype.serializeAs_RefreshFollowedQuestsOrderRequestMessage = function(output) {
            output.writeShort(this.quests.length);
            for (var _i1 = 0; _i1 < this.quests.length; _i1++) {
                if (this.quests[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.quests[_i1] + ") on element 1 (starting at 1) of quests.");
                }
                output.writeVarShort(this.quests[_i1]);
            }
        };
        RefreshFollowedQuestsOrderRequestMessage.prototype.deserializeAs_RefreshFollowedQuestsOrderRequestMessage = function(input) {
            var _val1 = 0;
            var _questsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _questsLen; _i1++) {
                _val1 = input.readVarUhShort();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of quests.");
                }
                this.quests.push(_val1);
            }
        };
        RefreshFollowedQuestsOrderRequestMessage.ID = 1822;
        return RefreshFollowedQuestsOrderRequestMessage;
    })(NetworkMessage);
    Protocol.RefreshFollowedQuestsOrderRequestMessage = RefreshFollowedQuestsOrderRequestMessage;
    var UnfollowQuestObjectiveRequestMessage = (function(_super) {
        __extends(UnfollowQuestObjectiveRequestMessage, _super);

        function UnfollowQuestObjectiveRequestMessage() {
            this.questId = 0;
            this.objectiveId = 0;
            _super.call(this)
        }
        UnfollowQuestObjectiveRequestMessage.prototype.getMessageId = function() {
            return UnfollowQuestObjectiveRequestMessage.ID;
        };
        UnfollowQuestObjectiveRequestMessage.prototype.reset = function() {
            this.questId = 0;
            this.objectiveId = 0;
        };
        UnfollowQuestObjectiveRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        UnfollowQuestObjectiveRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        UnfollowQuestObjectiveRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_UnfollowQuestObjectiveRequestMessage(output);
        };
        UnfollowQuestObjectiveRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_UnfollowQuestObjectiveRequestMessage(input);
        };
        UnfollowQuestObjectiveRequestMessage.prototype.serializeAs_UnfollowQuestObjectiveRequestMessage = function(output) {
            if (this.questId < 0) {
                throw new Error("Forbidden value (" + this.questId + ") on element questId.");
            }
            output.writeVarShort(this.questId);
            output.writeShort(this.objectiveId);
        };
        UnfollowQuestObjectiveRequestMessage.prototype.deserializeAs_UnfollowQuestObjectiveRequestMessage = function(input) {
            this.questId = input.readVarUhShort();
            if (this.questId < 0) {
                throw new Error("Forbidden value (" + this.questId + ") on element of UnfollowQuestObjectiveRequestMessage.questId.");
            }
            this.objectiveId = input.readShort();
        };
        UnfollowQuestObjectiveRequestMessage.ID = 2332;
        return UnfollowQuestObjectiveRequestMessage;
    })(NetworkMessage);
    Protocol.UnfollowQuestObjectiveRequestMessage = UnfollowQuestObjectiveRequestMessage;
    var SpellVariantActivationMessage = (function(_super) {
        __extends(SpellVariantActivationMessage, _super);

        function SpellVariantActivationMessage() {
            this.spellId = 0;
            this.result = false;
            _super.call(this)
        }
        SpellVariantActivationMessage.prototype.getMessageId = function() {
            return SpellVariantActivationMessage.ID;
        };
        SpellVariantActivationMessage.prototype.reset = function() {
            this.spellId = 0;
            this.result = false;
        };
        SpellVariantActivationMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        SpellVariantActivationMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        SpellVariantActivationMessage.prototype.serialize = function(output) {
            this.serializeAs_SpellVariantActivationMessage(output);
        };
        SpellVariantActivationMessage.prototype.deserialize = function(input) {
            this.deserializeAs_SpellVariantActivationMessage(input);
        };
        SpellVariantActivationMessage.prototype.serializeAs_SpellVariantActivationMessage = function(output) {
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
            }
            output.writeVarShort(this.spellId);
            output.writeBoolean(this.result);
        };
        SpellVariantActivationMessage.prototype.deserializeAs_SpellVariantActivationMessage = function(input) {
            this.spellId = input.readVarUhShort();
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element of SpellVariantActivationMessage.spellId.");
            }
            this.result = input.readBoolean();
        };
        SpellVariantActivationMessage.ID = 2623;
        return SpellVariantActivationMessage;
    })(NetworkMessage);
    Protocol.SpellVariantActivationMessage = SpellVariantActivationMessage;
    var SpellVariantActivationRequestMessage = (function(_super) {
        __extends(SpellVariantActivationRequestMessage, _super);

        function SpellVariantActivationRequestMessage() {
            this.spellId = 0;
            _super.call(this)
        }
        SpellVariantActivationRequestMessage.prototype.getMessageId = function() {
            return SpellVariantActivationRequestMessage.ID;
        };
        SpellVariantActivationRequestMessage.prototype.reset = function() {
            this.spellId = 0;
        };
        SpellVariantActivationRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        SpellVariantActivationRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        SpellVariantActivationRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_SpellVariantActivationRequestMessage(output);
        };
        SpellVariantActivationRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_SpellVariantActivationRequestMessage(input);
        };
        SpellVariantActivationRequestMessage.prototype.serializeAs_SpellVariantActivationRequestMessage = function(output) {
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
            }
            output.writeVarShort(this.spellId);
        };
        SpellVariantActivationRequestMessage.prototype.deserializeAs_SpellVariantActivationRequestMessage = function(input) {
            this.spellId = input.readVarUhShort();
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element of SpellVariantActivationRequestMessage.spellId.");
            }
        };
        SpellVariantActivationRequestMessage.ID = 7240;
        return SpellVariantActivationRequestMessage;
    })(NetworkMessage);
    Protocol.SpellVariantActivationRequestMessage = SpellVariantActivationRequestMessage;
    var StatsUpgradeRequestMessage = (function(_super) {
        __extends(StatsUpgradeRequestMessage, _super);

        function StatsUpgradeRequestMessage() {
            this.useAdditionnal = false;
            this.statId = 11;
            this.boostPoint = 0;
            _super.call(this)
        }
        StatsUpgradeRequestMessage.prototype.getMessageId = function() {
            return StatsUpgradeRequestMessage.ID;
        };
        StatsUpgradeRequestMessage.prototype.reset = function() {
            this.useAdditionnal = false;
            this.statId = 11;
            this.boostPoint = 0;
        };
        StatsUpgradeRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        StatsUpgradeRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        StatsUpgradeRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_StatsUpgradeRequestMessage(output);
        };
        StatsUpgradeRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_StatsUpgradeRequestMessage(input);
        };
        StatsUpgradeRequestMessage.prototype.serializeAs_StatsUpgradeRequestMessage = function(output) {
            output.writeBoolean(this.useAdditionnal);
            output.writeByte(this.statId);
            if (this.boostPoint < 0) {
                throw new Error("Forbidden value (" + this.boostPoint + ") on element boostPoint.");
            }
            output.writeVarShort(this.boostPoint);
        };
        StatsUpgradeRequestMessage.prototype.deserializeAs_StatsUpgradeRequestMessage = function(input) {
            this.useAdditionnal = input.readBoolean();
            this.statId = input.readByte();
            if (this.statId < 0) {
                throw new Error("Forbidden value (" + this.statId + ") on element of StatsUpgradeRequestMessage.statId.");
            }
            this.boostPoint = input.readVarUhShort();
            if (this.boostPoint < 0) {
                throw new Error("Forbidden value (" + this.boostPoint + ") on element of StatsUpgradeRequestMessage.boostPoint.");
            }
        };
        StatsUpgradeRequestMessage.ID = 9735;
        return StatsUpgradeRequestMessage;
    })(NetworkMessage);
    Protocol.StatsUpgradeRequestMessage = StatsUpgradeRequestMessage;
    var StatsUpgradeResultMessage = (function(_super) {
        __extends(StatsUpgradeResultMessage, _super);

        function StatsUpgradeResultMessage() {
            this.result = 0;
            this.nbCharacBoost = 0;
            _super.call(this)
        }
        StatsUpgradeResultMessage.prototype.getMessageId = function() {
            return StatsUpgradeResultMessage.ID;
        };
        StatsUpgradeResultMessage.prototype.reset = function() {
            this.result = 0;
            this.nbCharacBoost = 0;
        };
        StatsUpgradeResultMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        StatsUpgradeResultMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        StatsUpgradeResultMessage.prototype.serialize = function(output) {
            this.serializeAs_StatsUpgradeResultMessage(output);
        };
        StatsUpgradeResultMessage.prototype.deserialize = function(input) {
            this.deserializeAs_StatsUpgradeResultMessage(input);
        };
        StatsUpgradeResultMessage.prototype.serializeAs_StatsUpgradeResultMessage = function(output) {
            output.writeByte(this.result);
            if (this.nbCharacBoost < 0) {
                throw new Error("Forbidden value (" + this.nbCharacBoost + ") on element nbCharacBoost.");
            }
            output.writeVarShort(this.nbCharacBoost);
        };
        StatsUpgradeResultMessage.prototype.deserializeAs_StatsUpgradeResultMessage = function(input) {
            this.result = input.readByte();
            this.nbCharacBoost = input.readVarUhShort();
            if (this.nbCharacBoost < 0) {
                throw new Error("Forbidden value (" + this.nbCharacBoost + ") on element of StatsUpgradeResultMessage.nbCharacBoost.");
            }
        };
        StatsUpgradeResultMessage.ID = 929;
        return StatsUpgradeResultMessage;
    })(NetworkMessage);
    Protocol.StatsUpgradeResultMessage = StatsUpgradeResultMessage;
    var StopToListenRunningFightRequestMessage = (function(_super) {
        __extends(StopToListenRunningFightRequestMessage, _super);

        function StopToListenRunningFightRequestMessage() {

            _super.call(this)
        }
        StopToListenRunningFightRequestMessage.prototype.getMessageId = function() {
            return StopToListenRunningFightRequestMessage.ID;
        };
        StopToListenRunningFightRequestMessage.prototype.reset = function() {

        };
        StopToListenRunningFightRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        StopToListenRunningFightRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        StopToListenRunningFightRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_StopToListenRunningFightRequestMessage(output);
        };
        StopToListenRunningFightRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_StopToListenRunningFightRequestMessage(input);
        };
        StopToListenRunningFightRequestMessage.prototype.serializeAs_StopToListenRunningFightRequestMessage = function(output) {

        };
        StopToListenRunningFightRequestMessage.prototype.deserializeAs_StopToListenRunningFightRequestMessage = function(input) {

        };
        StopToListenRunningFightRequestMessage.ID = 7557;
        return StopToListenRunningFightRequestMessage;
    })(NetworkMessage);
    Protocol.StopToListenRunningFightRequestMessage = StopToListenRunningFightRequestMessage;
    var TeleportOnSameMapMessage = (function(_super) {
        __extends(TeleportOnSameMapMessage, _super);

        function TeleportOnSameMapMessage() {
            this.targetId = 0;
            this.cellId = 0;
            _super.call(this)
        }
        TeleportOnSameMapMessage.prototype.getMessageId = function() {
            return TeleportOnSameMapMessage.ID;
        };
        TeleportOnSameMapMessage.prototype.reset = function() {
            this.targetId = 0;
            this.cellId = 0;
        };
        TeleportOnSameMapMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TeleportOnSameMapMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TeleportOnSameMapMessage.prototype.serialize = function(output) {
            this.serializeAs_TeleportOnSameMapMessage(output);
        };
        TeleportOnSameMapMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TeleportOnSameMapMessage(input);
        };
        TeleportOnSameMapMessage.prototype.serializeAs_TeleportOnSameMapMessage = function(output) {
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
            }
            output.writeVarShort(this.cellId);
        };
        TeleportOnSameMapMessage.prototype.deserializeAs_TeleportOnSameMapMessage = function(input) {
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of TeleportOnSameMapMessage.targetId.");
            }
            this.cellId = input.readVarUhShort();
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element of TeleportOnSameMapMessage.cellId.");
            }
        };
        TeleportOnSameMapMessage.ID = 8234;
        return TeleportOnSameMapMessage;
    })(NetworkMessage);
    Protocol.TeleportOnSameMapMessage = TeleportOnSameMapMessage;
    var PortalUseRequestMessage = (function(_super) {
        __extends(PortalUseRequestMessage, _super);

        function PortalUseRequestMessage() {
            this.portalId = 0;
            _super.call(this)
        }
        PortalUseRequestMessage.prototype.getMessageId = function() {
            return PortalUseRequestMessage.ID;
        };
        PortalUseRequestMessage.prototype.reset = function() {
            this.portalId = 0;
        };
        PortalUseRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PortalUseRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PortalUseRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_PortalUseRequestMessage(output);
        };
        PortalUseRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PortalUseRequestMessage(input);
        };
        PortalUseRequestMessage.prototype.serializeAs_PortalUseRequestMessage = function(output) {
            if (this.portalId < 0) {
                throw new Error("Forbidden value (" + this.portalId + ") on element portalId.");
            }
            output.writeVarInt(this.portalId);
        };
        PortalUseRequestMessage.prototype.deserializeAs_PortalUseRequestMessage = function(input) {
            this.portalId = input.readVarUhInt();
            if (this.portalId < 0) {
                throw new Error("Forbidden value (" + this.portalId + ") on element of PortalUseRequestMessage.portalId.");
            }
        };
        PortalUseRequestMessage.ID = 6789;
        return PortalUseRequestMessage;
    })(NetworkMessage);
    Protocol.PortalUseRequestMessage = PortalUseRequestMessage;
    var TreasureHuntAvailableRetryCountUpdateMessage = (function(_super) {
        __extends(TreasureHuntAvailableRetryCountUpdateMessage, _super);

        function TreasureHuntAvailableRetryCountUpdateMessage() {
            this.questType = 0;
            this.availableRetryCount = 0;
            _super.call(this)
        }
        TreasureHuntAvailableRetryCountUpdateMessage.prototype.getMessageId = function() {
            return TreasureHuntAvailableRetryCountUpdateMessage.ID;
        };
        TreasureHuntAvailableRetryCountUpdateMessage.prototype.reset = function() {
            this.questType = 0;
            this.availableRetryCount = 0;
        };
        TreasureHuntAvailableRetryCountUpdateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TreasureHuntAvailableRetryCountUpdateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TreasureHuntAvailableRetryCountUpdateMessage.prototype.serialize = function(output) {
            this.serializeAs_TreasureHuntAvailableRetryCountUpdateMessage(output);
        };
        TreasureHuntAvailableRetryCountUpdateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TreasureHuntAvailableRetryCountUpdateMessage(input);
        };
        TreasureHuntAvailableRetryCountUpdateMessage.prototype.serializeAs_TreasureHuntAvailableRetryCountUpdateMessage = function(output) {
            output.writeByte(this.questType);
            output.writeInt(this.availableRetryCount);
        };
        TreasureHuntAvailableRetryCountUpdateMessage.prototype.deserializeAs_TreasureHuntAvailableRetryCountUpdateMessage = function(input) {
            this.questType = input.readByte();
            if (this.questType < 0) {
                throw new Error("Forbidden value (" + this.questType + ") on element of TreasureHuntAvailableRetryCountUpdateMessage.questType.");
            }
            this.availableRetryCount = input.readInt();
        };
        TreasureHuntAvailableRetryCountUpdateMessage.ID = 1216;
        return TreasureHuntAvailableRetryCountUpdateMessage;
    })(NetworkMessage);
    Protocol.TreasureHuntAvailableRetryCountUpdateMessage = TreasureHuntAvailableRetryCountUpdateMessage;
    var TreasureHuntDigRequestAnswerMessage = (function(_super) {
        __extends(TreasureHuntDigRequestAnswerMessage, _super);

        function TreasureHuntDigRequestAnswerMessage() {
            this.questType = 0;
            this.result = 0;
            _super.call(this)
        }
        TreasureHuntDigRequestAnswerMessage.prototype.getMessageId = function() {
            return TreasureHuntDigRequestAnswerMessage.ID;
        };
        TreasureHuntDigRequestAnswerMessage.prototype.reset = function() {
            this.questType = 0;
            this.result = 0;
        };
        TreasureHuntDigRequestAnswerMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TreasureHuntDigRequestAnswerMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TreasureHuntDigRequestAnswerMessage.prototype.serialize = function(output) {
            this.serializeAs_TreasureHuntDigRequestAnswerMessage(output);
        };
        TreasureHuntDigRequestAnswerMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TreasureHuntDigRequestAnswerMessage(input);
        };
        TreasureHuntDigRequestAnswerMessage.prototype.serializeAs_TreasureHuntDigRequestAnswerMessage = function(output) {
            output.writeByte(this.questType);
            output.writeByte(this.result);
        };
        TreasureHuntDigRequestAnswerMessage.prototype.deserializeAs_TreasureHuntDigRequestAnswerMessage = function(input) {
            this.questType = input.readByte();
            if (this.questType < 0) {
                throw new Error("Forbidden value (" + this.questType + ") on element of TreasureHuntDigRequestAnswerMessage.questType.");
            }
            this.result = input.readByte();
            if (this.result < 0) {
                throw new Error("Forbidden value (" + this.result + ") on element of TreasureHuntDigRequestAnswerMessage.result.");
            }
        };
        TreasureHuntDigRequestAnswerMessage.ID = 1475;
        return TreasureHuntDigRequestAnswerMessage;
    })(NetworkMessage);
    Protocol.TreasureHuntDigRequestAnswerMessage = TreasureHuntDigRequestAnswerMessage;
    var TreasureHuntDigRequestAnswerFailedMessage = (function(_super) {
        __extends(TreasureHuntDigRequestAnswerFailedMessage, _super);

        function TreasureHuntDigRequestAnswerFailedMessage() {
            this.wrongFlagCount = 0;
            _super.call(this)
        }
        TreasureHuntDigRequestAnswerFailedMessage.prototype.getMessageId = function() {
            return TreasureHuntDigRequestAnswerFailedMessage.ID;
        };
        TreasureHuntDigRequestAnswerFailedMessage.prototype.reset = function() {
            this.wrongFlagCount = 0;
        };
        TreasureHuntDigRequestAnswerFailedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TreasureHuntDigRequestAnswerFailedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TreasureHuntDigRequestAnswerFailedMessage.prototype.serialize = function(output) {
            this.serializeAs_TreasureHuntDigRequestAnswerFailedMessage(output);
        };
        TreasureHuntDigRequestAnswerFailedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TreasureHuntDigRequestAnswerFailedMessage(input);
        };
        TreasureHuntDigRequestAnswerFailedMessage.prototype.serializeAs_TreasureHuntDigRequestAnswerFailedMessage = function(output) {
            _super.prototype.serializeAs_TreasureHuntDigRequestAnswerMessage.call(this, output);
            if (this.wrongFlagCount < 0) {
                throw new Error("Forbidden value (" + this.wrongFlagCount + ") on element wrongFlagCount.");
            }
            output.writeByte(this.wrongFlagCount);
        };
        TreasureHuntDigRequestAnswerFailedMessage.prototype.deserializeAs_TreasureHuntDigRequestAnswerFailedMessage = function(input) {
            _super.prototype.deserializeAs_TreasureHuntDigRequestAnswerMessage.call(this, input);
            this.wrongFlagCount = input.readByte();
            if (this.wrongFlagCount < 0) {
                throw new Error("Forbidden value (" + this.wrongFlagCount + ") on element of TreasureHuntDigRequestAnswerFailedMessage.wrongFlagCount.");
            }
        };
        TreasureHuntDigRequestAnswerFailedMessage.ID = 9892;
        return TreasureHuntDigRequestAnswerFailedMessage;
    })(TreasureHuntDigRequestAnswerMessage);
    Protocol.TreasureHuntDigRequestAnswerFailedMessage = TreasureHuntDigRequestAnswerFailedMessage;
    var TreasureHuntDigRequestMessage = (function(_super) {
        __extends(TreasureHuntDigRequestMessage, _super);

        function TreasureHuntDigRequestMessage() {
            this.questType = 0;
            _super.call(this)
        }
        TreasureHuntDigRequestMessage.prototype.getMessageId = function() {
            return TreasureHuntDigRequestMessage.ID;
        };
        TreasureHuntDigRequestMessage.prototype.reset = function() {
            this.questType = 0;
        };
        TreasureHuntDigRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TreasureHuntDigRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TreasureHuntDigRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_TreasureHuntDigRequestMessage(output);
        };
        TreasureHuntDigRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TreasureHuntDigRequestMessage(input);
        };
        TreasureHuntDigRequestMessage.prototype.serializeAs_TreasureHuntDigRequestMessage = function(output) {
            output.writeByte(this.questType);
        };
        TreasureHuntDigRequestMessage.prototype.deserializeAs_TreasureHuntDigRequestMessage = function(input) {
            this.questType = input.readByte();
            if (this.questType < 0) {
                throw new Error("Forbidden value (" + this.questType + ") on element of TreasureHuntDigRequestMessage.questType.");
            }
        };
        TreasureHuntDigRequestMessage.ID = 2632;
        return TreasureHuntDigRequestMessage;
    })(NetworkMessage);
    Protocol.TreasureHuntDigRequestMessage = TreasureHuntDigRequestMessage;
    var TreasureHuntFinishedMessage = (function(_super) {
        __extends(TreasureHuntFinishedMessage, _super);

        function TreasureHuntFinishedMessage() {
            this.questType = 0;
            _super.call(this)
        }
        TreasureHuntFinishedMessage.prototype.getMessageId = function() {
            return TreasureHuntFinishedMessage.ID;
        };
        TreasureHuntFinishedMessage.prototype.reset = function() {
            this.questType = 0;
        };
        TreasureHuntFinishedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TreasureHuntFinishedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TreasureHuntFinishedMessage.prototype.serialize = function(output) {
            this.serializeAs_TreasureHuntFinishedMessage(output);
        };
        TreasureHuntFinishedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TreasureHuntFinishedMessage(input);
        };
        TreasureHuntFinishedMessage.prototype.serializeAs_TreasureHuntFinishedMessage = function(output) {
            output.writeByte(this.questType);
        };
        TreasureHuntFinishedMessage.prototype.deserializeAs_TreasureHuntFinishedMessage = function(input) {
            this.questType = input.readByte();
            if (this.questType < 0) {
                throw new Error("Forbidden value (" + this.questType + ") on element of TreasureHuntFinishedMessage.questType.");
            }
        };
        TreasureHuntFinishedMessage.ID = 2759;
        return TreasureHuntFinishedMessage;
    })(NetworkMessage);
    Protocol.TreasureHuntFinishedMessage = TreasureHuntFinishedMessage;
    var TreasureHuntFlagRemoveRequestMessage = (function(_super) {
        __extends(TreasureHuntFlagRemoveRequestMessage, _super);

        function TreasureHuntFlagRemoveRequestMessage() {
            this.questType = 0;
            this.index = 0;
            _super.call(this)
        }
        TreasureHuntFlagRemoveRequestMessage.prototype.getMessageId = function() {
            return TreasureHuntFlagRemoveRequestMessage.ID;
        };
        TreasureHuntFlagRemoveRequestMessage.prototype.reset = function() {
            this.questType = 0;
            this.index = 0;
        };
        TreasureHuntFlagRemoveRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TreasureHuntFlagRemoveRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TreasureHuntFlagRemoveRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_TreasureHuntFlagRemoveRequestMessage(output);
        };
        TreasureHuntFlagRemoveRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TreasureHuntFlagRemoveRequestMessage(input);
        };
        TreasureHuntFlagRemoveRequestMessage.prototype.serializeAs_TreasureHuntFlagRemoveRequestMessage = function(output) {
            output.writeByte(this.questType);
            if (this.index < 0) {
                throw new Error("Forbidden value (" + this.index + ") on element index.");
            }
            output.writeByte(this.index);
        };
        TreasureHuntFlagRemoveRequestMessage.prototype.deserializeAs_TreasureHuntFlagRemoveRequestMessage = function(input) {
            this.questType = input.readByte();
            if (this.questType < 0) {
                throw new Error("Forbidden value (" + this.questType + ") on element of TreasureHuntFlagRemoveRequestMessage.questType.");
            }
            this.index = input.readByte();
            if (this.index < 0) {
                throw new Error("Forbidden value (" + this.index + ") on element of TreasureHuntFlagRemoveRequestMessage.index.");
            }
        };
        TreasureHuntFlagRemoveRequestMessage.ID = 7565;
        return TreasureHuntFlagRemoveRequestMessage;
    })(NetworkMessage);
    Protocol.TreasureHuntFlagRemoveRequestMessage = TreasureHuntFlagRemoveRequestMessage;
    var TreasureHuntFlagRequestAnswerMessage = (function(_super) {
        __extends(TreasureHuntFlagRequestAnswerMessage, _super);

        function TreasureHuntFlagRequestAnswerMessage() {
            this.questType = 0;
            this.result = 0;
            this.index = 0;
            _super.call(this)
        }
        TreasureHuntFlagRequestAnswerMessage.prototype.getMessageId = function() {
            return TreasureHuntFlagRequestAnswerMessage.ID;
        };
        TreasureHuntFlagRequestAnswerMessage.prototype.reset = function() {
            this.questType = 0;
            this.result = 0;
            this.index = 0;
        };
        TreasureHuntFlagRequestAnswerMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TreasureHuntFlagRequestAnswerMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TreasureHuntFlagRequestAnswerMessage.prototype.serialize = function(output) {
            this.serializeAs_TreasureHuntFlagRequestAnswerMessage(output);
        };
        TreasureHuntFlagRequestAnswerMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TreasureHuntFlagRequestAnswerMessage(input);
        };
        TreasureHuntFlagRequestAnswerMessage.prototype.serializeAs_TreasureHuntFlagRequestAnswerMessage = function(output) {
            output.writeByte(this.questType);
            output.writeByte(this.result);
            if (this.index < 0) {
                throw new Error("Forbidden value (" + this.index + ") on element index.");
            }
            output.writeByte(this.index);
        };
        TreasureHuntFlagRequestAnswerMessage.prototype.deserializeAs_TreasureHuntFlagRequestAnswerMessage = function(input) {
            this.questType = input.readByte();
            if (this.questType < 0) {
                throw new Error("Forbidden value (" + this.questType + ") on element of TreasureHuntFlagRequestAnswerMessage.questType.");
            }
            this.result = input.readByte();
            if (this.result < 0) {
                throw new Error("Forbidden value (" + this.result + ") on element of TreasureHuntFlagRequestAnswerMessage.result.");
            }
            this.index = input.readByte();
            if (this.index < 0) {
                throw new Error("Forbidden value (" + this.index + ") on element of TreasureHuntFlagRequestAnswerMessage.index.");
            }
        };
        TreasureHuntFlagRequestAnswerMessage.ID = 4075;
        return TreasureHuntFlagRequestAnswerMessage;
    })(NetworkMessage);
    Protocol.TreasureHuntFlagRequestAnswerMessage = TreasureHuntFlagRequestAnswerMessage;
    var TreasureHuntFlagRequestMessage = (function(_super) {
        __extends(TreasureHuntFlagRequestMessage, _super);

        function TreasureHuntFlagRequestMessage() {
            this.questType = 0;
            this.index = 0;
            _super.call(this)
        }
        TreasureHuntFlagRequestMessage.prototype.getMessageId = function() {
            return TreasureHuntFlagRequestMessage.ID;
        };
        TreasureHuntFlagRequestMessage.prototype.reset = function() {
            this.questType = 0;
            this.index = 0;
        };
        TreasureHuntFlagRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TreasureHuntFlagRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TreasureHuntFlagRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_TreasureHuntFlagRequestMessage(output);
        };
        TreasureHuntFlagRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TreasureHuntFlagRequestMessage(input);
        };
        TreasureHuntFlagRequestMessage.prototype.serializeAs_TreasureHuntFlagRequestMessage = function(output) {
            output.writeByte(this.questType);
            if (this.index < 0) {
                throw new Error("Forbidden value (" + this.index + ") on element index.");
            }
            output.writeByte(this.index);
        };
        TreasureHuntFlagRequestMessage.prototype.deserializeAs_TreasureHuntFlagRequestMessage = function(input) {
            this.questType = input.readByte();
            if (this.questType < 0) {
                throw new Error("Forbidden value (" + this.questType + ") on element of TreasureHuntFlagRequestMessage.questType.");
            }
            this.index = input.readByte();
            if (this.index < 0) {
                throw new Error("Forbidden value (" + this.index + ") on element of TreasureHuntFlagRequestMessage.index.");
            }
        };
        TreasureHuntFlagRequestMessage.ID = 692;
        return TreasureHuntFlagRequestMessage;
    })(NetworkMessage);
    Protocol.TreasureHuntFlagRequestMessage = TreasureHuntFlagRequestMessage;
    var TreasureHuntGiveUpRequestMessage = (function(_super) {
        __extends(TreasureHuntGiveUpRequestMessage, _super);

        function TreasureHuntGiveUpRequestMessage() {
            this.questType = 0;
            _super.call(this)
        }
        TreasureHuntGiveUpRequestMessage.prototype.getMessageId = function() {
            return TreasureHuntGiveUpRequestMessage.ID;
        };
        TreasureHuntGiveUpRequestMessage.prototype.reset = function() {
            this.questType = 0;
        };
        TreasureHuntGiveUpRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TreasureHuntGiveUpRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TreasureHuntGiveUpRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_TreasureHuntGiveUpRequestMessage(output);
        };
        TreasureHuntGiveUpRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TreasureHuntGiveUpRequestMessage(input);
        };
        TreasureHuntGiveUpRequestMessage.prototype.serializeAs_TreasureHuntGiveUpRequestMessage = function(output) {
            output.writeByte(this.questType);
        };
        TreasureHuntGiveUpRequestMessage.prototype.deserializeAs_TreasureHuntGiveUpRequestMessage = function(input) {
            this.questType = input.readByte();
            if (this.questType < 0) {
                throw new Error("Forbidden value (" + this.questType + ") on element of TreasureHuntGiveUpRequestMessage.questType.");
            }
        };
        TreasureHuntGiveUpRequestMessage.ID = 1622;
        return TreasureHuntGiveUpRequestMessage;
    })(NetworkMessage);
    Protocol.TreasureHuntGiveUpRequestMessage = TreasureHuntGiveUpRequestMessage;
    var TreasureHuntLegendaryRequestMessage = (function(_super) {
        __extends(TreasureHuntLegendaryRequestMessage, _super);

        function TreasureHuntLegendaryRequestMessage() {
            this.legendaryId = 0;
            _super.call(this)
        }
        TreasureHuntLegendaryRequestMessage.prototype.getMessageId = function() {
            return TreasureHuntLegendaryRequestMessage.ID;
        };
        TreasureHuntLegendaryRequestMessage.prototype.reset = function() {
            this.legendaryId = 0;
        };
        TreasureHuntLegendaryRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TreasureHuntLegendaryRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TreasureHuntLegendaryRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_TreasureHuntLegendaryRequestMessage(output);
        };
        TreasureHuntLegendaryRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TreasureHuntLegendaryRequestMessage(input);
        };
        TreasureHuntLegendaryRequestMessage.prototype.serializeAs_TreasureHuntLegendaryRequestMessage = function(output) {
            if (this.legendaryId < 0) {
                throw new Error("Forbidden value (" + this.legendaryId + ") on element legendaryId.");
            }
            output.writeVarShort(this.legendaryId);
        };
        TreasureHuntLegendaryRequestMessage.prototype.deserializeAs_TreasureHuntLegendaryRequestMessage = function(input) {
            this.legendaryId = input.readVarUhShort();
            if (this.legendaryId < 0) {
                throw new Error("Forbidden value (" + this.legendaryId + ") on element of TreasureHuntLegendaryRequestMessage.legendaryId.");
            }
        };
        TreasureHuntLegendaryRequestMessage.ID = 7662;
        return TreasureHuntLegendaryRequestMessage;
    })(NetworkMessage);
    Protocol.TreasureHuntLegendaryRequestMessage = TreasureHuntLegendaryRequestMessage;
    var TreasureHuntMessage = (function(_super) {
        __extends(TreasureHuntMessage, _super);

        function TreasureHuntMessage() {
            this.questType = 0;
            this.startMapId = 0;
            this.knownStepsList = [];
            this.totalStepCount = 0;
            this.checkPointCurrent = 0;
            this.checkPointTotal = 0;
            this.availableRetryCount = 0;
            this.flags = [];
            _super.call(this)
        }
        TreasureHuntMessage.prototype.getMessageId = function() {
            return TreasureHuntMessage.ID;
        };
        TreasureHuntMessage.prototype.reset = function() {
            this.questType = 0;
            this.startMapId = 0;
            this.knownStepsList = [];
            this.totalStepCount = 0;
            this.checkPointCurrent = 0;
            this.checkPointTotal = 0;
            this.availableRetryCount = 0;
            this.flags = [];
        };
        TreasureHuntMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TreasureHuntMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TreasureHuntMessage.prototype.serialize = function(output) {
            this.serializeAs_TreasureHuntMessage(output);
        };
        TreasureHuntMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TreasureHuntMessage(input);
        };
        TreasureHuntMessage.prototype.serializeAs_TreasureHuntMessage = function(output) {
            output.writeByte(this.questType);
            if (this.startMapId < 0 || this.startMapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.startMapId + ") on element startMapId.");
            }
            output.writeDouble(this.startMapId);
            output.writeShort(this.knownStepsList.length);
            for (var _i3 = 0; _i3 < this.knownStepsList.length; _i3++) {
                output.writeShort((this.knownStepsList[_i3]).getTypeId());
                (this.knownStepsList[_i3]).serialize(output);
            }
            if (this.totalStepCount < 0) {
                throw new Error("Forbidden value (" + this.totalStepCount + ") on element totalStepCount.");
            }
            output.writeByte(this.totalStepCount);
            if (this.checkPointCurrent < 0) {
                throw new Error("Forbidden value (" + this.checkPointCurrent + ") on element checkPointCurrent.");
            }
            output.writeVarInt(this.checkPointCurrent);
            if (this.checkPointTotal < 0) {
                throw new Error("Forbidden value (" + this.checkPointTotal + ") on element checkPointTotal.");
            }
            output.writeVarInt(this.checkPointTotal);
            output.writeInt(this.availableRetryCount);
            output.writeShort(this.flags.length);
            for (var _i8 = 0; _i8 < this.flags.length; _i8++) {
                (this.flags[_i8]).serializeAs_TreasureHuntFlag(output);
            }
        };
        TreasureHuntMessage.prototype.deserializeAs_TreasureHuntMessage = function(input) {
            var _id3 = 0;
            var _item3 = null;
            var _item8 = null;
            this.questType = input.readByte();
            if (this.questType < 0) {
                throw new Error("Forbidden value (" + this.questType + ") on element of TreasureHuntMessage.questType.");
            }
            this.startMapId = input.readDouble();
            if (this.startMapId < 0 || this.startMapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.startMapId + ") on element of TreasureHuntMessage.startMapId.");
            }
            var _knownStepsListLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _knownStepsListLen; _i3++) {
                _id3 = input.readUnsignedShort();
                _item3 = ProtocolTypeManager.getInstance(TreasureHuntStep, _id3);
                _item3.deserialize(input);
                this.knownStepsList.push(_item3);
            }
            this.totalStepCount = input.readByte();
            if (this.totalStepCount < 0) {
                throw new Error("Forbidden value (" + this.totalStepCount + ") on element of TreasureHuntMessage.totalStepCount.");
            }
            this.checkPointCurrent = input.readVarUhInt();
            if (this.checkPointCurrent < 0) {
                throw new Error("Forbidden value (" + this.checkPointCurrent + ") on element of TreasureHuntMessage.checkPointCurrent.");
            }
            this.checkPointTotal = input.readVarUhInt();
            if (this.checkPointTotal < 0) {
                throw new Error("Forbidden value (" + this.checkPointTotal + ") on element of TreasureHuntMessage.checkPointTotal.");
            }
            this.availableRetryCount = input.readInt();
            var _flagsLen = input.readUnsignedShort();
            for (var _i8 = 0; _i8 < _flagsLen; _i8++) {
                _item8 = new TreasureHuntFlag();
                _item8.deserialize(input);
                this.flags.push(_item8);
            }
        };
        TreasureHuntMessage.ID = 7742;
        return TreasureHuntMessage;
    })(NetworkMessage);
    Protocol.TreasureHuntMessage = TreasureHuntMessage;
    var TreasureHuntRequestAnswerMessage = (function(_super) {
        __extends(TreasureHuntRequestAnswerMessage, _super);

        function TreasureHuntRequestAnswerMessage() {
            this.questType = 0;
            this.result = 0;
            _super.call(this)
        }
        TreasureHuntRequestAnswerMessage.prototype.getMessageId = function() {
            return TreasureHuntRequestAnswerMessage.ID;
        };
        TreasureHuntRequestAnswerMessage.prototype.reset = function() {
            this.questType = 0;
            this.result = 0;
        };
        TreasureHuntRequestAnswerMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TreasureHuntRequestAnswerMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TreasureHuntRequestAnswerMessage.prototype.serialize = function(output) {
            this.serializeAs_TreasureHuntRequestAnswerMessage(output);
        };
        TreasureHuntRequestAnswerMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TreasureHuntRequestAnswerMessage(input);
        };
        TreasureHuntRequestAnswerMessage.prototype.serializeAs_TreasureHuntRequestAnswerMessage = function(output) {
            output.writeByte(this.questType);
            output.writeByte(this.result);
        };
        TreasureHuntRequestAnswerMessage.prototype.deserializeAs_TreasureHuntRequestAnswerMessage = function(input) {
            this.questType = input.readByte();
            if (this.questType < 0) {
                throw new Error("Forbidden value (" + this.questType + ") on element of TreasureHuntRequestAnswerMessage.questType.");
            }
            this.result = input.readByte();
            if (this.result < 0) {
                throw new Error("Forbidden value (" + this.result + ") on element of TreasureHuntRequestAnswerMessage.result.");
            }
        };
        TreasureHuntRequestAnswerMessage.ID = 5673;
        return TreasureHuntRequestAnswerMessage;
    })(NetworkMessage);
    Protocol.TreasureHuntRequestAnswerMessage = TreasureHuntRequestAnswerMessage;
    var TreasureHuntShowLegendaryUIMessage = (function(_super) {
        __extends(TreasureHuntShowLegendaryUIMessage, _super);

        function TreasureHuntShowLegendaryUIMessage() {
            this.availableLegendaryIds = [];
            _super.call(this)
        }
        TreasureHuntShowLegendaryUIMessage.prototype.getMessageId = function() {
            return TreasureHuntShowLegendaryUIMessage.ID;
        };
        TreasureHuntShowLegendaryUIMessage.prototype.reset = function() {
            this.availableLegendaryIds = [];
        };
        TreasureHuntShowLegendaryUIMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TreasureHuntShowLegendaryUIMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TreasureHuntShowLegendaryUIMessage.prototype.serialize = function(output) {
            this.serializeAs_TreasureHuntShowLegendaryUIMessage(output);
        };
        TreasureHuntShowLegendaryUIMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TreasureHuntShowLegendaryUIMessage(input);
        };
        TreasureHuntShowLegendaryUIMessage.prototype.serializeAs_TreasureHuntShowLegendaryUIMessage = function(output) {
            output.writeShort(this.availableLegendaryIds.length);
            for (var _i1 = 0; _i1 < this.availableLegendaryIds.length; _i1++) {
                if (this.availableLegendaryIds[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.availableLegendaryIds[_i1] + ") on element 1 (starting at 1) of availableLegendaryIds.");
                }
                output.writeVarShort(this.availableLegendaryIds[_i1]);
            }
        };
        TreasureHuntShowLegendaryUIMessage.prototype.deserializeAs_TreasureHuntShowLegendaryUIMessage = function(input) {
            var _val1 = 0;
            var _availableLegendaryIdsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _availableLegendaryIdsLen; _i1++) {
                _val1 = input.readVarUhShort();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of availableLegendaryIds.");
                }
                this.availableLegendaryIds.push(_val1);
            }
        };
        TreasureHuntShowLegendaryUIMessage.ID = 9952;
        return TreasureHuntShowLegendaryUIMessage;
    })(NetworkMessage);
    Protocol.TreasureHuntShowLegendaryUIMessage = TreasureHuntShowLegendaryUIMessage;
    var GameRolePlaySpellAnimMessage = (function(_super) {
        __extends(GameRolePlaySpellAnimMessage, _super);

        function GameRolePlaySpellAnimMessage() {
            this.casterId = 0;
            this.targetCellId = 0;
            this.spellId = 0;
            this.spellLevel = 0;
            _super.call(this)
        }
        GameRolePlaySpellAnimMessage.prototype.getMessageId = function() {
            return GameRolePlaySpellAnimMessage.ID;
        };
        GameRolePlaySpellAnimMessage.prototype.reset = function() {
            this.casterId = 0;
            this.targetCellId = 0;
            this.spellId = 0;
            this.spellLevel = 0;
        };
        GameRolePlaySpellAnimMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameRolePlaySpellAnimMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameRolePlaySpellAnimMessage.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlaySpellAnimMessage(output);
        };
        GameRolePlaySpellAnimMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlaySpellAnimMessage(input);
        };
        GameRolePlaySpellAnimMessage.prototype.serializeAs_GameRolePlaySpellAnimMessage = function(output) {
            if (this.casterId < 0 || this.casterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.casterId + ") on element casterId.");
            }
            output.writeVarLong(this.casterId);
            if (this.targetCellId < 0 || this.targetCellId > 559) {
                throw new Error("Forbidden value (" + this.targetCellId + ") on element targetCellId.");
            }
            output.writeVarShort(this.targetCellId);
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
            }
            output.writeVarShort(this.spellId);
            if (this.spellLevel < 1 || this.spellLevel > 32767) {
                throw new Error("Forbidden value (" + this.spellLevel + ") on element spellLevel.");
            }
            output.writeShort(this.spellLevel);
        };
        GameRolePlaySpellAnimMessage.prototype.deserializeAs_GameRolePlaySpellAnimMessage = function(input) {
            this.casterId = input.readVarUhLong();
            if (this.casterId < 0 || this.casterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.casterId + ") on element of GameRolePlaySpellAnimMessage.casterId.");
            }
            this.targetCellId = input.readVarUhShort();
            if (this.targetCellId < 0 || this.targetCellId > 559) {
                throw new Error("Forbidden value (" + this.targetCellId + ") on element of GameRolePlaySpellAnimMessage.targetCellId.");
            }
            this.spellId = input.readVarUhShort();
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element of GameRolePlaySpellAnimMessage.spellId.");
            }
            this.spellLevel = input.readShort();
            if (this.spellLevel < 1 || this.spellLevel > 32767) {
                throw new Error("Forbidden value (" + this.spellLevel + ") on element of GameRolePlaySpellAnimMessage.spellLevel.");
            }
        };
        GameRolePlaySpellAnimMessage.ID = 3713;
        return GameRolePlaySpellAnimMessage;
    })(NetworkMessage);
    Protocol.GameRolePlaySpellAnimMessage = GameRolePlaySpellAnimMessage;
    var ShowCellMessage = (function(_super) {
        __extends(ShowCellMessage, _super);

        function ShowCellMessage() {
            this.sourceId = 0;
            this.cellId = 0;
            _super.call(this)
        }
        ShowCellMessage.prototype.getMessageId = function() {
            return ShowCellMessage.ID;
        };
        ShowCellMessage.prototype.reset = function() {
            this.sourceId = 0;
            this.cellId = 0;
        };
        ShowCellMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ShowCellMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ShowCellMessage.prototype.serialize = function(output) {
            this.serializeAs_ShowCellMessage(output);
        };
        ShowCellMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ShowCellMessage(input);
        };
        ShowCellMessage.prototype.serializeAs_ShowCellMessage = function(output) {
            if (this.sourceId < -9007199254740990 || this.sourceId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.sourceId + ") on element sourceId.");
            }
            output.writeDouble(this.sourceId);
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
            }
            output.writeVarShort(this.cellId);
        };
        ShowCellMessage.prototype.deserializeAs_ShowCellMessage = function(input) {
            this.sourceId = input.readDouble();
            if (this.sourceId < -9007199254740990 || this.sourceId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.sourceId + ") on element of ShowCellMessage.sourceId.");
            }
            this.cellId = input.readVarUhShort();
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element of ShowCellMessage.cellId.");
            }
        };
        ShowCellMessage.ID = 6430;
        return ShowCellMessage;
    })(NetworkMessage);
    Protocol.ShowCellMessage = ShowCellMessage;
    var ShowCellRequestMessage = (function(_super) {
        __extends(ShowCellRequestMessage, _super);

        function ShowCellRequestMessage() {
            this.cellId = 0;
            _super.call(this)
        }
        ShowCellRequestMessage.prototype.getMessageId = function() {
            return ShowCellRequestMessage.ID;
        };
        ShowCellRequestMessage.prototype.reset = function() {
            this.cellId = 0;
        };
        ShowCellRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ShowCellRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ShowCellRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_ShowCellRequestMessage(output);
        };
        ShowCellRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ShowCellRequestMessage(input);
        };
        ShowCellRequestMessage.prototype.serializeAs_ShowCellRequestMessage = function(output) {
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
            }
            output.writeVarShort(this.cellId);
        };
        ShowCellRequestMessage.prototype.deserializeAs_ShowCellRequestMessage = function(input) {
            this.cellId = input.readVarUhShort();
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element of ShowCellRequestMessage.cellId.");
            }
        };
        ShowCellRequestMessage.ID = 3535;
        return ShowCellRequestMessage;
    })(NetworkMessage);
    Protocol.ShowCellRequestMessage = ShowCellRequestMessage;
    var ShowCellSpectatorMessage = (function(_super) {
        __extends(ShowCellSpectatorMessage, _super);

        function ShowCellSpectatorMessage() {
            this.playerName = "";
            _super.call(this)
        }
        ShowCellSpectatorMessage.prototype.getMessageId = function() {
            return ShowCellSpectatorMessage.ID;
        };
        ShowCellSpectatorMessage.prototype.reset = function() {
            this.playerName = "";
        };
        ShowCellSpectatorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ShowCellSpectatorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ShowCellSpectatorMessage.prototype.serialize = function(output) {
            this.serializeAs_ShowCellSpectatorMessage(output);
        };
        ShowCellSpectatorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ShowCellSpectatorMessage(input);
        };
        ShowCellSpectatorMessage.prototype.serializeAs_ShowCellSpectatorMessage = function(output) {
            _super.prototype.serializeAs_ShowCellMessage.call(this, output);
            output.writeUTF(this.playerName);
        };
        ShowCellSpectatorMessage.prototype.deserializeAs_ShowCellSpectatorMessage = function(input) {
            _super.prototype.deserializeAs_ShowCellMessage.call(this, input);
            this.playerName = input.readUTF();
        };
        ShowCellSpectatorMessage.ID = 9734;
        return ShowCellSpectatorMessage;
    })(ShowCellMessage);
    Protocol.ShowCellSpectatorMessage = ShowCellSpectatorMessage;
    var LeaveDialogMessage = (function(_super) {
        __extends(LeaveDialogMessage, _super);

        function LeaveDialogMessage() {
            this.dialogType = 0;
            _super.call(this)
        }
        LeaveDialogMessage.prototype.getMessageId = function() {
            return LeaveDialogMessage.ID;
        };
        LeaveDialogMessage.prototype.reset = function() {
            this.dialogType = 0;
        };
        LeaveDialogMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        LeaveDialogMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        LeaveDialogMessage.prototype.serialize = function(output) {
            this.serializeAs_LeaveDialogMessage(output);
        };
        LeaveDialogMessage.prototype.deserialize = function(input) {
            this.deserializeAs_LeaveDialogMessage(input);
        };
        LeaveDialogMessage.prototype.serializeAs_LeaveDialogMessage = function(output) {
            output.writeByte(this.dialogType);
        };
        LeaveDialogMessage.prototype.deserializeAs_LeaveDialogMessage = function(input) {
            this.dialogType = input.readByte();
            if (this.dialogType < 0) {
                throw new Error("Forbidden value (" + this.dialogType + ") on element of LeaveDialogMessage.dialogType.");
            }
        };
        LeaveDialogMessage.ID = 5720;
        return LeaveDialogMessage;
    })(NetworkMessage);
    Protocol.LeaveDialogMessage = LeaveDialogMessage;
    var LeaveDialogRequestMessage = (function(_super) {
        __extends(LeaveDialogRequestMessage, _super);

        function LeaveDialogRequestMessage() {

            _super.call(this)
        }
        LeaveDialogRequestMessage.prototype.getMessageId = function() {
            return LeaveDialogRequestMessage.ID;
        };
        LeaveDialogRequestMessage.prototype.reset = function() {

        };
        LeaveDialogRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        LeaveDialogRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        LeaveDialogRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_LeaveDialogRequestMessage(output);
        };
        LeaveDialogRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_LeaveDialogRequestMessage(input);
        };
        LeaveDialogRequestMessage.prototype.serializeAs_LeaveDialogRequestMessage = function(output) {

        };
        LeaveDialogRequestMessage.prototype.deserializeAs_LeaveDialogRequestMessage = function(input) {

        };
        LeaveDialogRequestMessage.ID = 1095;
        return LeaveDialogRequestMessage;
    })(NetworkMessage);
    Protocol.LeaveDialogRequestMessage = LeaveDialogRequestMessage;
    var PauseDialogMessage = (function(_super) {
        __extends(PauseDialogMessage, _super);

        function PauseDialogMessage() {
            this.dialogType = 0;
            _super.call(this)
        }
        PauseDialogMessage.prototype.getMessageId = function() {
            return PauseDialogMessage.ID;
        };
        PauseDialogMessage.prototype.reset = function() {
            this.dialogType = 0;
        };
        PauseDialogMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PauseDialogMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PauseDialogMessage.prototype.serialize = function(output) {
            this.serializeAs_PauseDialogMessage(output);
        };
        PauseDialogMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PauseDialogMessage(input);
        };
        PauseDialogMessage.prototype.serializeAs_PauseDialogMessage = function(output) {
            output.writeByte(this.dialogType);
        };
        PauseDialogMessage.prototype.deserializeAs_PauseDialogMessage = function(input) {
            this.dialogType = input.readByte();
            if (this.dialogType < 0) {
                throw new Error("Forbidden value (" + this.dialogType + ") on element of PauseDialogMessage.dialogType.");
            }
        };
        PauseDialogMessage.ID = 6445;
        return PauseDialogMessage;
    })(NetworkMessage);
    Protocol.PauseDialogMessage = PauseDialogMessage;
    var EntitiesInformationMessage = (function(_super) {
        __extends(EntitiesInformationMessage, _super);

        function EntitiesInformationMessage() {
            this.entities = [];
            _super.call(this)
        }
        EntitiesInformationMessage.prototype.getMessageId = function() {
            return EntitiesInformationMessage.ID;
        };
        EntitiesInformationMessage.prototype.reset = function() {
            this.entities = [];
        };
        EntitiesInformationMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        EntitiesInformationMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        EntitiesInformationMessage.prototype.serialize = function(output) {
            this.serializeAs_EntitiesInformationMessage(output);
        };
        EntitiesInformationMessage.prototype.deserialize = function(input) {
            this.deserializeAs_EntitiesInformationMessage(input);
        };
        EntitiesInformationMessage.prototype.serializeAs_EntitiesInformationMessage = function(output) {
            output.writeShort(this.entities.length);
            for (var _i1 = 0; _i1 < this.entities.length; _i1++) {
                (this.entities[_i1]).serializeAs_EntityInformation(output);
            }
        };
        EntitiesInformationMessage.prototype.deserializeAs_EntitiesInformationMessage = function(input) {
            var _item1 = null;
            var _entitiesLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _entitiesLen; _i1++) {
                _item1 = new EntityInformation();
                _item1.deserialize(input);
                this.entities.push(_item1);
            }
        };
        EntitiesInformationMessage.ID = 9744;
        return EntitiesInformationMessage;
    })(NetworkMessage);
    Protocol.EntitiesInformationMessage = EntitiesInformationMessage;
    var EntityInformationMessage = (function(_super) {
        __extends(EntityInformationMessage, _super);

        function EntityInformationMessage() {
            this.entity = new EntityInformation();
            _super.call(this)
        }
        EntityInformationMessage.prototype.getMessageId = function() {
            return EntityInformationMessage.ID;
        };
        EntityInformationMessage.prototype.reset = function() {
            this.entity = new EntityInformation();
        };
        EntityInformationMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        EntityInformationMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        EntityInformationMessage.prototype.serialize = function(output) {
            this.serializeAs_EntityInformationMessage(output);
        };
        EntityInformationMessage.prototype.deserialize = function(input) {
            this.deserializeAs_EntityInformationMessage(input);
        };
        EntityInformationMessage.prototype.serializeAs_EntityInformationMessage = function(output) {
            this.entity.serializeAs_EntityInformation(output);
        };
        EntityInformationMessage.prototype.deserializeAs_EntityInformationMessage = function(input) {
            this.entity = new EntityInformation();
            this.entity.deserialize(input);
        };
        EntityInformationMessage.ID = 325;
        return EntityInformationMessage;
    })(NetworkMessage);
    Protocol.EntityInformationMessage = EntityInformationMessage;
    var ObjectFeedMessage = (function(_super) {
        __extends(ObjectFeedMessage, _super);

        function ObjectFeedMessage() {
            this.objectUID = 0;
            this.meal = [];
            _super.call(this)
        }
        ObjectFeedMessage.prototype.getMessageId = function() {
            return ObjectFeedMessage.ID;
        };
        ObjectFeedMessage.prototype.reset = function() {
            this.objectUID = 0;
            this.meal = [];
        };
        ObjectFeedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ObjectFeedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ObjectFeedMessage.prototype.serialize = function(output) {
            this.serializeAs_ObjectFeedMessage(output);
        };
        ObjectFeedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectFeedMessage(input);
        };
        ObjectFeedMessage.prototype.serializeAs_ObjectFeedMessage = function(output) {
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
            }
            output.writeVarInt(this.objectUID);
            output.writeShort(this.meal.length);
            for (var _i2 = 0; _i2 < this.meal.length; _i2++) {
                (this.meal[_i2]).serializeAs_ObjectItemQuantity(output);
            }
        };
        ObjectFeedMessage.prototype.deserializeAs_ObjectFeedMessage = function(input) {
            var _item2 = null;
            this.objectUID = input.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element of ObjectFeedMessage.objectUID.");
            }
            var _mealLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _mealLen; _i2++) {
                _item2 = new ObjectItemQuantity();
                _item2.deserialize(input);
                this.meal.push(_item2);
            }
        };
        ObjectFeedMessage.ID = 8089;
        return ObjectFeedMessage;
    })(NetworkMessage);
    Protocol.ObjectFeedMessage = ObjectFeedMessage;
    var FinishMoveListMessage = (function(_super) {
        __extends(FinishMoveListMessage, _super);

        function FinishMoveListMessage() {
            this.finishMoves = [];
            _super.call(this)
        }
        FinishMoveListMessage.prototype.getMessageId = function() {
            return FinishMoveListMessage.ID;
        };
        FinishMoveListMessage.prototype.reset = function() {
            this.finishMoves = [];
        };
        FinishMoveListMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        FinishMoveListMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        FinishMoveListMessage.prototype.serialize = function(output) {
            this.serializeAs_FinishMoveListMessage(output);
        };
        FinishMoveListMessage.prototype.deserialize = function(input) {
            this.deserializeAs_FinishMoveListMessage(input);
        };
        FinishMoveListMessage.prototype.serializeAs_FinishMoveListMessage = function(output) {
            output.writeShort(this.finishMoves.length);
            for (var _i1 = 0; _i1 < this.finishMoves.length; _i1++) {
                (this.finishMoves[_i1]).serializeAs_FinishMoveInformations(output);
            }
        };
        FinishMoveListMessage.prototype.deserializeAs_FinishMoveListMessage = function(input) {
            var _item1 = null;
            var _finishMovesLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _finishMovesLen; _i1++) {
                _item1 = new FinishMoveInformations();
                _item1.deserialize(input);
                this.finishMoves.push(_item1);
            }
        };
        FinishMoveListMessage.ID = 2694;
        return FinishMoveListMessage;
    })(NetworkMessage);
    Protocol.FinishMoveListMessage = FinishMoveListMessage;
    var FinishMoveListRequestMessage = (function(_super) {
        __extends(FinishMoveListRequestMessage, _super);

        function FinishMoveListRequestMessage() {

            _super.call(this)
        }
        FinishMoveListRequestMessage.prototype.getMessageId = function() {
            return FinishMoveListRequestMessage.ID;
        };
        FinishMoveListRequestMessage.prototype.reset = function() {

        };
        FinishMoveListRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        FinishMoveListRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        FinishMoveListRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_FinishMoveListRequestMessage(output);
        };
        FinishMoveListRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_FinishMoveListRequestMessage(input);
        };
        FinishMoveListRequestMessage.prototype.serializeAs_FinishMoveListRequestMessage = function(output) {

        };
        FinishMoveListRequestMessage.prototype.deserializeAs_FinishMoveListRequestMessage = function(input) {

        };
        FinishMoveListRequestMessage.ID = 6091;
        return FinishMoveListRequestMessage;
    })(NetworkMessage);
    Protocol.FinishMoveListRequestMessage = FinishMoveListRequestMessage;
    var FinishMoveSetRequestMessage = (function(_super) {
        __extends(FinishMoveSetRequestMessage, _super);

        function FinishMoveSetRequestMessage() {
            this.finishMoveId = 0;
            this.finishMoveState = false;
            _super.call(this)
        }
        FinishMoveSetRequestMessage.prototype.getMessageId = function() {
            return FinishMoveSetRequestMessage.ID;
        };
        FinishMoveSetRequestMessage.prototype.reset = function() {
            this.finishMoveId = 0;
            this.finishMoveState = false;
        };
        FinishMoveSetRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        FinishMoveSetRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        FinishMoveSetRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_FinishMoveSetRequestMessage(output);
        };
        FinishMoveSetRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_FinishMoveSetRequestMessage(input);
        };
        FinishMoveSetRequestMessage.prototype.serializeAs_FinishMoveSetRequestMessage = function(output) {
            if (this.finishMoveId < 0) {
                throw new Error("Forbidden value (" + this.finishMoveId + ") on element finishMoveId.");
            }
            output.writeInt(this.finishMoveId);
            output.writeBoolean(this.finishMoveState);
        };
        FinishMoveSetRequestMessage.prototype.deserializeAs_FinishMoveSetRequestMessage = function(input) {
            this.finishMoveId = input.readInt();
            if (this.finishMoveId < 0) {
                throw new Error("Forbidden value (" + this.finishMoveId + ") on element of FinishMoveSetRequestMessage.finishMoveId.");
            }
            this.finishMoveState = input.readBoolean();
        };
        FinishMoveSetRequestMessage.ID = 8686;
        return FinishMoveSetRequestMessage;
    })(NetworkMessage);
    Protocol.FinishMoveSetRequestMessage = FinishMoveSetRequestMessage;
    var AcquaintanceAddedMessage = (function(_super) {
        __extends(AcquaintanceAddedMessage, _super);

        function AcquaintanceAddedMessage() {
            this.acquaintanceAdded = new AcquaintanceInformation();
            _super.call(this)
        }
        AcquaintanceAddedMessage.prototype.getMessageId = function() {
            return AcquaintanceAddedMessage.ID;
        };
        AcquaintanceAddedMessage.prototype.reset = function() {
            this.acquaintanceAdded = new AcquaintanceInformation();
        };
        AcquaintanceAddedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AcquaintanceAddedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AcquaintanceAddedMessage.prototype.serialize = function(output) {
            this.serializeAs_AcquaintanceAddedMessage(output);
        };
        AcquaintanceAddedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AcquaintanceAddedMessage(input);
        };
        AcquaintanceAddedMessage.prototype.serializeAs_AcquaintanceAddedMessage = function(output) {
            output.writeShort(this.acquaintanceAdded.getTypeId());
            this.acquaintanceAdded.serialize(output);
        };
        AcquaintanceAddedMessage.prototype.deserializeAs_AcquaintanceAddedMessage = function(input) {
            var _id1 = input.readUnsignedShort();
            this.acquaintanceAdded = ProtocolTypeManager.getInstance(AcquaintanceInformation, _id1);
            this.acquaintanceAdded.deserialize(input);
        };
        AcquaintanceAddedMessage.ID = 1543;
        return AcquaintanceAddedMessage;
    })(NetworkMessage);
    Protocol.AcquaintanceAddedMessage = AcquaintanceAddedMessage;
    var AcquaintancesGetListMessage = (function(_super) {
        __extends(AcquaintancesGetListMessage, _super);

        function AcquaintancesGetListMessage() {

            _super.call(this)
        }
        AcquaintancesGetListMessage.prototype.getMessageId = function() {
            return AcquaintancesGetListMessage.ID;
        };
        AcquaintancesGetListMessage.prototype.reset = function() {

        };
        AcquaintancesGetListMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AcquaintancesGetListMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AcquaintancesGetListMessage.prototype.serialize = function(output) {
            this.serializeAs_AcquaintancesGetListMessage(output);
        };
        AcquaintancesGetListMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AcquaintancesGetListMessage(input);
        };
        AcquaintancesGetListMessage.prototype.serializeAs_AcquaintancesGetListMessage = function(output) {

        };
        AcquaintancesGetListMessage.prototype.deserializeAs_AcquaintancesGetListMessage = function(input) {

        };
        AcquaintancesGetListMessage.ID = 6257;
        return AcquaintancesGetListMessage;
    })(NetworkMessage);
    Protocol.AcquaintancesGetListMessage = AcquaintancesGetListMessage;
    var AcquaintancesListMessage = (function(_super) {
        __extends(AcquaintancesListMessage, _super);

        function AcquaintancesListMessage() {
            this.acquaintanceList = [];
            _super.call(this)
        }
        AcquaintancesListMessage.prototype.getMessageId = function() {
            return AcquaintancesListMessage.ID;
        };
        AcquaintancesListMessage.prototype.reset = function() {
            this.acquaintanceList = [];
        };
        AcquaintancesListMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AcquaintancesListMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AcquaintancesListMessage.prototype.serialize = function(output) {
            this.serializeAs_AcquaintancesListMessage(output);
        };
        AcquaintancesListMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AcquaintancesListMessage(input);
        };
        AcquaintancesListMessage.prototype.serializeAs_AcquaintancesListMessage = function(output) {
            output.writeShort(this.acquaintanceList.length);
            for (var _i1 = 0; _i1 < this.acquaintanceList.length; _i1++) {
                output.writeShort((this.acquaintanceList[_i1]).getTypeId());
                (this.acquaintanceList[_i1]).serialize(output);
            }
        };
        AcquaintancesListMessage.prototype.deserializeAs_AcquaintancesListMessage = function(input) {
            var _id1 = 0;
            var _item1 = null;
            var _acquaintanceListLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _acquaintanceListLen; _i1++) {
                _id1 = input.readUnsignedShort();
                _item1 = ProtocolTypeManager.getInstance(AcquaintanceInformation, _id1);
                _item1.deserialize(input);
                this.acquaintanceList.push(_item1);
            }
        };
        AcquaintancesListMessage.ID = 1119;
        return AcquaintancesListMessage;
    })(NetworkMessage);
    Protocol.AcquaintancesListMessage = AcquaintancesListMessage;
    var ContactAddFailureMessage = (function(_super) {
        __extends(ContactAddFailureMessage, _super);

        function ContactAddFailureMessage() {
            this.reason = 0;
            _super.call(this)
        }
        ContactAddFailureMessage.prototype.getMessageId = function() {
            return ContactAddFailureMessage.ID;
        };
        ContactAddFailureMessage.prototype.reset = function() {
            this.reason = 0;
        };
        ContactAddFailureMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ContactAddFailureMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ContactAddFailureMessage.prototype.serialize = function(output) {
            this.serializeAs_ContactAddFailureMessage(output);
        };
        ContactAddFailureMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ContactAddFailureMessage(input);
        };
        ContactAddFailureMessage.prototype.serializeAs_ContactAddFailureMessage = function(output) {
            output.writeByte(this.reason);
        };
        ContactAddFailureMessage.prototype.deserializeAs_ContactAddFailureMessage = function(input) {
            this.reason = input.readByte();
            if (this.reason < 0) {
                throw new Error("Forbidden value (" + this.reason + ") on element of ContactAddFailureMessage.reason.");
            }
        };
        ContactAddFailureMessage.ID = 3991;
        return ContactAddFailureMessage;
    })(NetworkMessage);
    Protocol.ContactAddFailureMessage = ContactAddFailureMessage;
    var FriendAddedMessage = (function(_super) {
        __extends(FriendAddedMessage, _super);

        function FriendAddedMessage() {
            this.friendAdded = new FriendInformations();
            _super.call(this)
        }
        FriendAddedMessage.prototype.getMessageId = function() {
            return FriendAddedMessage.ID;
        };
        FriendAddedMessage.prototype.reset = function() {
            this.friendAdded = new FriendInformations();
        };
        FriendAddedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        FriendAddedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        FriendAddedMessage.prototype.serialize = function(output) {
            this.serializeAs_FriendAddedMessage(output);
        };
        FriendAddedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_FriendAddedMessage(input);
        };
        FriendAddedMessage.prototype.serializeAs_FriendAddedMessage = function(output) {
            output.writeShort(this.friendAdded.getTypeId());
            this.friendAdded.serialize(output);
        };
        FriendAddedMessage.prototype.deserializeAs_FriendAddedMessage = function(input) {
            var _id1 = input.readUnsignedShort();
            this.friendAdded = ProtocolTypeManager.getInstance(FriendInformations, _id1);
            this.friendAdded.deserialize(input);
        };
        FriendAddedMessage.ID = 2999;
        return FriendAddedMessage;
    })(NetworkMessage);
    Protocol.FriendAddedMessage = FriendAddedMessage;
    var FriendAddFailureMessage = (function(_super) {
        __extends(FriendAddFailureMessage, _super);

        function FriendAddFailureMessage() {
            this.reason = 0;
            _super.call(this)
        }
        FriendAddFailureMessage.prototype.getMessageId = function() {
            return FriendAddFailureMessage.ID;
        };
        FriendAddFailureMessage.prototype.reset = function() {
            this.reason = 0;
        };
        FriendAddFailureMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        FriendAddFailureMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        FriendAddFailureMessage.prototype.serialize = function(output) {
            this.serializeAs_FriendAddFailureMessage(output);
        };
        FriendAddFailureMessage.prototype.deserialize = function(input) {
            this.deserializeAs_FriendAddFailureMessage(input);
        };
        FriendAddFailureMessage.prototype.serializeAs_FriendAddFailureMessage = function(output) {
            output.writeByte(this.reason);
        };
        FriendAddFailureMessage.prototype.deserializeAs_FriendAddFailureMessage = function(input) {
            this.reason = input.readByte();
            if (this.reason < 0) {
                throw new Error("Forbidden value (" + this.reason + ") on element of FriendAddFailureMessage.reason.");
            }
        };
        FriendAddFailureMessage.ID = 9558;
        return FriendAddFailureMessage;
    })(NetworkMessage);
    Protocol.FriendAddFailureMessage = FriendAddFailureMessage;
    var FriendAddRequestMessage = (function(_super) {
        __extends(FriendAddRequestMessage, _super);

        function FriendAddRequestMessage() {
            this.name = "";
            _super.call(this)
        }
        FriendAddRequestMessage.prototype.getMessageId = function() {
            return FriendAddRequestMessage.ID;
        };
        FriendAddRequestMessage.prototype.reset = function() {
            this.name = "";
        };
        FriendAddRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        FriendAddRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        FriendAddRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_FriendAddRequestMessage(output);
        };
        FriendAddRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_FriendAddRequestMessage(input);
        };
        FriendAddRequestMessage.prototype.serializeAs_FriendAddRequestMessage = function(output) {
            output.writeUTF(this.name);
        };
        FriendAddRequestMessage.prototype.deserializeAs_FriendAddRequestMessage = function(input) {
            this.name = input.readUTF();
        };
        FriendAddRequestMessage.ID = 1663;
        return FriendAddRequestMessage;
    })(NetworkMessage);
    Protocol.FriendAddRequestMessage = FriendAddRequestMessage;
    var FriendDeleteRequestMessage = (function(_super) {
        __extends(FriendDeleteRequestMessage, _super);

        function FriendDeleteRequestMessage() {
            this.accountId = 0;
            _super.call(this)
        }
        FriendDeleteRequestMessage.prototype.getMessageId = function() {
            return FriendDeleteRequestMessage.ID;
        };
        FriendDeleteRequestMessage.prototype.reset = function() {
            this.accountId = 0;
        };
        FriendDeleteRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        FriendDeleteRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        FriendDeleteRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_FriendDeleteRequestMessage(output);
        };
        FriendDeleteRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_FriendDeleteRequestMessage(input);
        };
        FriendDeleteRequestMessage.prototype.serializeAs_FriendDeleteRequestMessage = function(output) {
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element accountId.");
            }
            output.writeInt(this.accountId);
        };
        FriendDeleteRequestMessage.prototype.deserializeAs_FriendDeleteRequestMessage = function(input) {
            this.accountId = input.readInt();
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element of FriendDeleteRequestMessage.accountId.");
            }
        };
        FriendDeleteRequestMessage.ID = 5614;
        return FriendDeleteRequestMessage;
    })(NetworkMessage);
    Protocol.FriendDeleteRequestMessage = FriendDeleteRequestMessage;
    var FriendDeleteResultMessage = (function(_super) {
        __extends(FriendDeleteResultMessage, _super);

        function FriendDeleteResultMessage() {
            this.success = false;
            this.name = "";
            _super.call(this)
        }
        FriendDeleteResultMessage.prototype.getMessageId = function() {
            return FriendDeleteResultMessage.ID;
        };
        FriendDeleteResultMessage.prototype.reset = function() {
            this.success = false;
            this.name = "";
        };
        FriendDeleteResultMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        FriendDeleteResultMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        FriendDeleteResultMessage.prototype.serialize = function(output) {
            this.serializeAs_FriendDeleteResultMessage(output);
        };
        FriendDeleteResultMessage.prototype.deserialize = function(input) {
            this.deserializeAs_FriendDeleteResultMessage(input);
        };
        FriendDeleteResultMessage.prototype.serializeAs_FriendDeleteResultMessage = function(output) {
            output.writeBoolean(this.success);
            output.writeUTF(this.name);
        };
        FriendDeleteResultMessage.prototype.deserializeAs_FriendDeleteResultMessage = function(input) {
            this.success = input.readBoolean();
            this.name = input.readUTF();
        };
        FriendDeleteResultMessage.ID = 5776;
        return FriendDeleteResultMessage;
    })(NetworkMessage);
    Protocol.FriendDeleteResultMessage = FriendDeleteResultMessage;
    var FriendJoinRequestMessage = (function(_super) {
        __extends(FriendJoinRequestMessage, _super);

        function FriendJoinRequestMessage() {
            this.name = "";
            _super.call(this)
        }
        FriendJoinRequestMessage.prototype.getMessageId = function() {
            return FriendJoinRequestMessage.ID;
        };
        FriendJoinRequestMessage.prototype.reset = function() {
            this.name = "";
        };
        FriendJoinRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        FriendJoinRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        FriendJoinRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_FriendJoinRequestMessage(output);
        };
        FriendJoinRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_FriendJoinRequestMessage(input);
        };
        FriendJoinRequestMessage.prototype.serializeAs_FriendJoinRequestMessage = function(output) {
            output.writeUTF(this.name);
        };
        FriendJoinRequestMessage.prototype.deserializeAs_FriendJoinRequestMessage = function(input) {
            this.name = input.readUTF();
        };
        FriendJoinRequestMessage.ID = 800;
        return FriendJoinRequestMessage;
    })(NetworkMessage);
    Protocol.FriendJoinRequestMessage = FriendJoinRequestMessage;
    var FriendSetStatusShareMessage = (function(_super) {
        __extends(FriendSetStatusShareMessage, _super);

        function FriendSetStatusShareMessage() {
            this.share = false;
            _super.call(this)
        }
        FriendSetStatusShareMessage.prototype.getMessageId = function() {
            return FriendSetStatusShareMessage.ID;
        };
        FriendSetStatusShareMessage.prototype.reset = function() {
            this.share = false;
        };
        FriendSetStatusShareMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        FriendSetStatusShareMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        FriendSetStatusShareMessage.prototype.serialize = function(output) {
            this.serializeAs_FriendSetStatusShareMessage(output);
        };
        FriendSetStatusShareMessage.prototype.deserialize = function(input) {
            this.deserializeAs_FriendSetStatusShareMessage(input);
        };
        FriendSetStatusShareMessage.prototype.serializeAs_FriendSetStatusShareMessage = function(output) {
            output.writeBoolean(this.share);
        };
        FriendSetStatusShareMessage.prototype.deserializeAs_FriendSetStatusShareMessage = function(input) {
            this.share = input.readBoolean();
        };
        FriendSetStatusShareMessage.ID = 6299;
        return FriendSetStatusShareMessage;
    })(NetworkMessage);
    Protocol.FriendSetStatusShareMessage = FriendSetStatusShareMessage;
    var FriendSetWarnOnConnectionMessage = (function(_super) {
        __extends(FriendSetWarnOnConnectionMessage, _super);

        function FriendSetWarnOnConnectionMessage() {
            this.enable = false;
            _super.call(this)
        }
        FriendSetWarnOnConnectionMessage.prototype.getMessageId = function() {
            return FriendSetWarnOnConnectionMessage.ID;
        };
        FriendSetWarnOnConnectionMessage.prototype.reset = function() {
            this.enable = false;
        };
        FriendSetWarnOnConnectionMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        FriendSetWarnOnConnectionMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        FriendSetWarnOnConnectionMessage.prototype.serialize = function(output) {
            this.serializeAs_FriendSetWarnOnConnectionMessage(output);
        };
        FriendSetWarnOnConnectionMessage.prototype.deserialize = function(input) {
            this.deserializeAs_FriendSetWarnOnConnectionMessage(input);
        };
        FriendSetWarnOnConnectionMessage.prototype.serializeAs_FriendSetWarnOnConnectionMessage = function(output) {
            output.writeBoolean(this.enable);
        };
        FriendSetWarnOnConnectionMessage.prototype.deserializeAs_FriendSetWarnOnConnectionMessage = function(input) {
            this.enable = input.readBoolean();
        };
        FriendSetWarnOnConnectionMessage.ID = 2659;
        return FriendSetWarnOnConnectionMessage;
    })(NetworkMessage);
    Protocol.FriendSetWarnOnConnectionMessage = FriendSetWarnOnConnectionMessage;
    var FriendSetWarnOnLevelGainMessage = (function(_super) {
        __extends(FriendSetWarnOnLevelGainMessage, _super);

        function FriendSetWarnOnLevelGainMessage() {
            this.enable = false;
            _super.call(this)
        }
        FriendSetWarnOnLevelGainMessage.prototype.getMessageId = function() {
            return FriendSetWarnOnLevelGainMessage.ID;
        };
        FriendSetWarnOnLevelGainMessage.prototype.reset = function() {
            this.enable = false;
        };
        FriendSetWarnOnLevelGainMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        FriendSetWarnOnLevelGainMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        FriendSetWarnOnLevelGainMessage.prototype.serialize = function(output) {
            this.serializeAs_FriendSetWarnOnLevelGainMessage(output);
        };
        FriendSetWarnOnLevelGainMessage.prototype.deserialize = function(input) {
            this.deserializeAs_FriendSetWarnOnLevelGainMessage(input);
        };
        FriendSetWarnOnLevelGainMessage.prototype.serializeAs_FriendSetWarnOnLevelGainMessage = function(output) {
            output.writeBoolean(this.enable);
        };
        FriendSetWarnOnLevelGainMessage.prototype.deserializeAs_FriendSetWarnOnLevelGainMessage = function(input) {
            this.enable = input.readBoolean();
        };
        FriendSetWarnOnLevelGainMessage.ID = 429;
        return FriendSetWarnOnLevelGainMessage;
    })(NetworkMessage);
    Protocol.FriendSetWarnOnLevelGainMessage = FriendSetWarnOnLevelGainMessage;
    var FriendsGetListMessage = (function(_super) {
        __extends(FriendsGetListMessage, _super);

        function FriendsGetListMessage() {

            _super.call(this)
        }
        FriendsGetListMessage.prototype.getMessageId = function() {
            return FriendsGetListMessage.ID;
        };
        FriendsGetListMessage.prototype.reset = function() {

        };
        FriendsGetListMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        FriendsGetListMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        FriendsGetListMessage.prototype.serialize = function(output) {
            this.serializeAs_FriendsGetListMessage(output);
        };
        FriendsGetListMessage.prototype.deserialize = function(input) {
            this.deserializeAs_FriendsGetListMessage(input);
        };
        FriendsGetListMessage.prototype.serializeAs_FriendsGetListMessage = function(output) {

        };
        FriendsGetListMessage.prototype.deserializeAs_FriendsGetListMessage = function(input) {

        };
        FriendsGetListMessage.ID = 7455;
        return FriendsGetListMessage;
    })(NetworkMessage);
    Protocol.FriendsGetListMessage = FriendsGetListMessage;
    var FriendsListMessage = (function(_super) {
        __extends(FriendsListMessage, _super);

        function FriendsListMessage() {
            this.friendsList = [];
            _super.call(this)
        }
        FriendsListMessage.prototype.getMessageId = function() {
            return FriendsListMessage.ID;
        };
        FriendsListMessage.prototype.reset = function() {
            this.friendsList = [];
        };
        FriendsListMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        FriendsListMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        FriendsListMessage.prototype.serialize = function(output) {
            this.serializeAs_FriendsListMessage(output);
        };
        FriendsListMessage.prototype.deserialize = function(input) {
            this.deserializeAs_FriendsListMessage(input);
        };
        FriendsListMessage.prototype.serializeAs_FriendsListMessage = function(output) {
            output.writeShort(this.friendsList.length);
            for (var _i1 = 0; _i1 < this.friendsList.length; _i1++) {
                output.writeShort((this.friendsList[_i1]).getTypeId());
                (this.friendsList[_i1]).serialize(output);
            }
        };
        FriendsListMessage.prototype.deserializeAs_FriendsListMessage = function(input) {
            var _id1 = 0;
            var _item1 = null;
            var _friendsListLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _friendsListLen; _i1++) {
                _id1 = input.readUnsignedShort();
                _item1 = ProtocolTypeManager.getInstance(FriendInformations, _id1);
                _item1.deserialize(input);
                this.friendsList.push(_item1);
            }
        };
        FriendsListMessage.ID = 5813;
        return FriendsListMessage;
    })(NetworkMessage);
    Protocol.FriendsListMessage = FriendsListMessage;
    var FriendSpouseFollowWithCompassRequestMessage = (function(_super) {
        __extends(FriendSpouseFollowWithCompassRequestMessage, _super);

        function FriendSpouseFollowWithCompassRequestMessage() {
            this.enable = false;
            _super.call(this)
        }
        FriendSpouseFollowWithCompassRequestMessage.prototype.getMessageId = function() {
            return FriendSpouseFollowWithCompassRequestMessage.ID;
        };
        FriendSpouseFollowWithCompassRequestMessage.prototype.reset = function() {
            this.enable = false;
        };
        FriendSpouseFollowWithCompassRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        FriendSpouseFollowWithCompassRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        FriendSpouseFollowWithCompassRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_FriendSpouseFollowWithCompassRequestMessage(output);
        };
        FriendSpouseFollowWithCompassRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_FriendSpouseFollowWithCompassRequestMessage(input);
        };
        FriendSpouseFollowWithCompassRequestMessage.prototype.serializeAs_FriendSpouseFollowWithCompassRequestMessage = function(output) {
            output.writeBoolean(this.enable);
        };
        FriendSpouseFollowWithCompassRequestMessage.prototype.deserializeAs_FriendSpouseFollowWithCompassRequestMessage = function(input) {
            this.enable = input.readBoolean();
        };
        FriendSpouseFollowWithCompassRequestMessage.ID = 9603;
        return FriendSpouseFollowWithCompassRequestMessage;
    })(NetworkMessage);
    Protocol.FriendSpouseFollowWithCompassRequestMessage = FriendSpouseFollowWithCompassRequestMessage;
    var FriendSpouseJoinRequestMessage = (function(_super) {
        __extends(FriendSpouseJoinRequestMessage, _super);

        function FriendSpouseJoinRequestMessage() {

            _super.call(this)
        }
        FriendSpouseJoinRequestMessage.prototype.getMessageId = function() {
            return FriendSpouseJoinRequestMessage.ID;
        };
        FriendSpouseJoinRequestMessage.prototype.reset = function() {

        };
        FriendSpouseJoinRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        FriendSpouseJoinRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        FriendSpouseJoinRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_FriendSpouseJoinRequestMessage(output);
        };
        FriendSpouseJoinRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_FriendSpouseJoinRequestMessage(input);
        };
        FriendSpouseJoinRequestMessage.prototype.serializeAs_FriendSpouseJoinRequestMessage = function(output) {

        };
        FriendSpouseJoinRequestMessage.prototype.deserializeAs_FriendSpouseJoinRequestMessage = function(input) {

        };
        FriendSpouseJoinRequestMessage.ID = 3828;
        return FriendSpouseJoinRequestMessage;
    })(NetworkMessage);
    Protocol.FriendSpouseJoinRequestMessage = FriendSpouseJoinRequestMessage;
    var FriendStatusShareStateMessage = (function(_super) {
        __extends(FriendStatusShareStateMessage, _super);

        function FriendStatusShareStateMessage() {
            this.share = false;
            _super.call(this)
        }
        FriendStatusShareStateMessage.prototype.getMessageId = function() {
            return FriendStatusShareStateMessage.ID;
        };
        FriendStatusShareStateMessage.prototype.reset = function() {
            this.share = false;
        };
        FriendStatusShareStateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        FriendStatusShareStateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        FriendStatusShareStateMessage.prototype.serialize = function(output) {
            this.serializeAs_FriendStatusShareStateMessage(output);
        };
        FriendStatusShareStateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_FriendStatusShareStateMessage(input);
        };
        FriendStatusShareStateMessage.prototype.serializeAs_FriendStatusShareStateMessage = function(output) {
            output.writeBoolean(this.share);
        };
        FriendStatusShareStateMessage.prototype.deserializeAs_FriendStatusShareStateMessage = function(input) {
            this.share = input.readBoolean();
        };
        FriendStatusShareStateMessage.ID = 9162;
        return FriendStatusShareStateMessage;
    })(NetworkMessage);
    Protocol.FriendStatusShareStateMessage = FriendStatusShareStateMessage;
    var FriendUpdateMessage = (function(_super) {
        __extends(FriendUpdateMessage, _super);

        function FriendUpdateMessage() {
            this.friendUpdated = new FriendInformations();
            _super.call(this)
        }
        FriendUpdateMessage.prototype.getMessageId = function() {
            return FriendUpdateMessage.ID;
        };
        FriendUpdateMessage.prototype.reset = function() {
            this.friendUpdated = new FriendInformations();
        };
        FriendUpdateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        FriendUpdateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        FriendUpdateMessage.prototype.serialize = function(output) {
            this.serializeAs_FriendUpdateMessage(output);
        };
        FriendUpdateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_FriendUpdateMessage(input);
        };
        FriendUpdateMessage.prototype.serializeAs_FriendUpdateMessage = function(output) {
            output.writeShort(this.friendUpdated.getTypeId());
            this.friendUpdated.serialize(output);
        };
        FriendUpdateMessage.prototype.deserializeAs_FriendUpdateMessage = function(input) {
            var _id1 = input.readUnsignedShort();
            this.friendUpdated = ProtocolTypeManager.getInstance(FriendInformations, _id1);
            this.friendUpdated.deserialize(input);
        };
        FriendUpdateMessage.ID = 3021;
        return FriendUpdateMessage;
    })(NetworkMessage);
    Protocol.FriendUpdateMessage = FriendUpdateMessage;
    var FriendWarnOnConnectionStateMessage = (function(_super) {
        __extends(FriendWarnOnConnectionStateMessage, _super);

        function FriendWarnOnConnectionStateMessage() {
            this.enable = false;
            _super.call(this)
        }
        FriendWarnOnConnectionStateMessage.prototype.getMessageId = function() {
            return FriendWarnOnConnectionStateMessage.ID;
        };
        FriendWarnOnConnectionStateMessage.prototype.reset = function() {
            this.enable = false;
        };
        FriendWarnOnConnectionStateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        FriendWarnOnConnectionStateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        FriendWarnOnConnectionStateMessage.prototype.serialize = function(output) {
            this.serializeAs_FriendWarnOnConnectionStateMessage(output);
        };
        FriendWarnOnConnectionStateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_FriendWarnOnConnectionStateMessage(input);
        };
        FriendWarnOnConnectionStateMessage.prototype.serializeAs_FriendWarnOnConnectionStateMessage = function(output) {
            output.writeBoolean(this.enable);
        };
        FriendWarnOnConnectionStateMessage.prototype.deserializeAs_FriendWarnOnConnectionStateMessage = function(input) {
            this.enable = input.readBoolean();
        };
        FriendWarnOnConnectionStateMessage.ID = 6364;
        return FriendWarnOnConnectionStateMessage;
    })(NetworkMessage);
    Protocol.FriendWarnOnConnectionStateMessage = FriendWarnOnConnectionStateMessage;
    var FriendWarnOnLevelGainStateMessage = (function(_super) {
        __extends(FriendWarnOnLevelGainStateMessage, _super);

        function FriendWarnOnLevelGainStateMessage() {
            this.enable = false;
            _super.call(this)
        }
        FriendWarnOnLevelGainStateMessage.prototype.getMessageId = function() {
            return FriendWarnOnLevelGainStateMessage.ID;
        };
        FriendWarnOnLevelGainStateMessage.prototype.reset = function() {
            this.enable = false;
        };
        FriendWarnOnLevelGainStateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        FriendWarnOnLevelGainStateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        FriendWarnOnLevelGainStateMessage.prototype.serialize = function(output) {
            this.serializeAs_FriendWarnOnLevelGainStateMessage(output);
        };
        FriendWarnOnLevelGainStateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_FriendWarnOnLevelGainStateMessage(input);
        };
        FriendWarnOnLevelGainStateMessage.prototype.serializeAs_FriendWarnOnLevelGainStateMessage = function(output) {
            output.writeBoolean(this.enable);
        };
        FriendWarnOnLevelGainStateMessage.prototype.deserializeAs_FriendWarnOnLevelGainStateMessage = function(input) {
            this.enable = input.readBoolean();
        };
        FriendWarnOnLevelGainStateMessage.ID = 7752;
        return FriendWarnOnLevelGainStateMessage;
    })(NetworkMessage);
    Protocol.FriendWarnOnLevelGainStateMessage = FriendWarnOnLevelGainStateMessage;
    var GuildMemberSetWarnOnConnectionMessage = (function(_super) {
        __extends(GuildMemberSetWarnOnConnectionMessage, _super);

        function GuildMemberSetWarnOnConnectionMessage() {
            this.enable = false;
            _super.call(this)
        }
        GuildMemberSetWarnOnConnectionMessage.prototype.getMessageId = function() {
            return GuildMemberSetWarnOnConnectionMessage.ID;
        };
        GuildMemberSetWarnOnConnectionMessage.prototype.reset = function() {
            this.enable = false;
        };
        GuildMemberSetWarnOnConnectionMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildMemberSetWarnOnConnectionMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildMemberSetWarnOnConnectionMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildMemberSetWarnOnConnectionMessage(output);
        };
        GuildMemberSetWarnOnConnectionMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildMemberSetWarnOnConnectionMessage(input);
        };
        GuildMemberSetWarnOnConnectionMessage.prototype.serializeAs_GuildMemberSetWarnOnConnectionMessage = function(output) {
            output.writeBoolean(this.enable);
        };
        GuildMemberSetWarnOnConnectionMessage.prototype.deserializeAs_GuildMemberSetWarnOnConnectionMessage = function(input) {
            this.enable = input.readBoolean();
        };
        GuildMemberSetWarnOnConnectionMessage.ID = 3898;
        return GuildMemberSetWarnOnConnectionMessage;
    })(NetworkMessage);
    Protocol.GuildMemberSetWarnOnConnectionMessage = GuildMemberSetWarnOnConnectionMessage;
    var GuildMemberWarnOnConnectionStateMessage = (function(_super) {
        __extends(GuildMemberWarnOnConnectionStateMessage, _super);

        function GuildMemberWarnOnConnectionStateMessage() {
            this.enable = false;
            _super.call(this)
        }
        GuildMemberWarnOnConnectionStateMessage.prototype.getMessageId = function() {
            return GuildMemberWarnOnConnectionStateMessage.ID;
        };
        GuildMemberWarnOnConnectionStateMessage.prototype.reset = function() {
            this.enable = false;
        };
        GuildMemberWarnOnConnectionStateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildMemberWarnOnConnectionStateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildMemberWarnOnConnectionStateMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildMemberWarnOnConnectionStateMessage(output);
        };
        GuildMemberWarnOnConnectionStateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildMemberWarnOnConnectionStateMessage(input);
        };
        GuildMemberWarnOnConnectionStateMessage.prototype.serializeAs_GuildMemberWarnOnConnectionStateMessage = function(output) {
            output.writeBoolean(this.enable);
        };
        GuildMemberWarnOnConnectionStateMessage.prototype.deserializeAs_GuildMemberWarnOnConnectionStateMessage = function(input) {
            this.enable = input.readBoolean();
        };
        GuildMemberWarnOnConnectionStateMessage.ID = 4763;
        return GuildMemberWarnOnConnectionStateMessage;
    })(NetworkMessage);
    Protocol.GuildMemberWarnOnConnectionStateMessage = GuildMemberWarnOnConnectionStateMessage;
    var IgnoredAddedMessage = (function(_super) {
        __extends(IgnoredAddedMessage, _super);

        function IgnoredAddedMessage() {
            this.ignoreAdded = new IgnoredInformations();
            this.session = false;
            _super.call(this)
        }
        IgnoredAddedMessage.prototype.getMessageId = function() {
            return IgnoredAddedMessage.ID;
        };
        IgnoredAddedMessage.prototype.reset = function() {
            this.ignoreAdded = new IgnoredInformations();
            this.session = false;
        };
        IgnoredAddedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        IgnoredAddedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        IgnoredAddedMessage.prototype.serialize = function(output) {
            this.serializeAs_IgnoredAddedMessage(output);
        };
        IgnoredAddedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_IgnoredAddedMessage(input);
        };
        IgnoredAddedMessage.prototype.serializeAs_IgnoredAddedMessage = function(output) {
            output.writeShort(this.ignoreAdded.getTypeId());
            this.ignoreAdded.serialize(output);
            output.writeBoolean(this.session);
        };
        IgnoredAddedMessage.prototype.deserializeAs_IgnoredAddedMessage = function(input) {
            var _id1 = input.readUnsignedShort();
            this.ignoreAdded = ProtocolTypeManager.getInstance(IgnoredInformations, _id1);
            this.ignoreAdded.deserialize(input);
            this.session = input.readBoolean();
        };
        IgnoredAddedMessage.ID = 1152;
        return IgnoredAddedMessage;
    })(NetworkMessage);
    Protocol.IgnoredAddedMessage = IgnoredAddedMessage;
    var IgnoredAddFailureMessage = (function(_super) {
        __extends(IgnoredAddFailureMessage, _super);

        function IgnoredAddFailureMessage() {
            this.reason = 0;
            _super.call(this)
        }
        IgnoredAddFailureMessage.prototype.getMessageId = function() {
            return IgnoredAddFailureMessage.ID;
        };
        IgnoredAddFailureMessage.prototype.reset = function() {
            this.reason = 0;
        };
        IgnoredAddFailureMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        IgnoredAddFailureMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        IgnoredAddFailureMessage.prototype.serialize = function(output) {
            this.serializeAs_IgnoredAddFailureMessage(output);
        };
        IgnoredAddFailureMessage.prototype.deserialize = function(input) {
            this.deserializeAs_IgnoredAddFailureMessage(input);
        };
        IgnoredAddFailureMessage.prototype.serializeAs_IgnoredAddFailureMessage = function(output) {
            output.writeByte(this.reason);
        };
        IgnoredAddFailureMessage.prototype.deserializeAs_IgnoredAddFailureMessage = function(input) {
            this.reason = input.readByte();
            if (this.reason < 0) {
                throw new Error("Forbidden value (" + this.reason + ") on element of IgnoredAddFailureMessage.reason.");
            }
        };
        IgnoredAddFailureMessage.ID = 3617;
        return IgnoredAddFailureMessage;
    })(NetworkMessage);
    Protocol.IgnoredAddFailureMessage = IgnoredAddFailureMessage;
    var IgnoredAddRequestMessage = (function(_super) {
        __extends(IgnoredAddRequestMessage, _super);

        function IgnoredAddRequestMessage() {
            this.name = "";
            this.session = false;
            _super.call(this)
        }
        IgnoredAddRequestMessage.prototype.getMessageId = function() {
            return IgnoredAddRequestMessage.ID;
        };
        IgnoredAddRequestMessage.prototype.reset = function() {
            this.name = "";
            this.session = false;
        };
        IgnoredAddRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        IgnoredAddRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        IgnoredAddRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_IgnoredAddRequestMessage(output);
        };
        IgnoredAddRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_IgnoredAddRequestMessage(input);
        };
        IgnoredAddRequestMessage.prototype.serializeAs_IgnoredAddRequestMessage = function(output) {
            output.writeUTF(this.name);
            output.writeBoolean(this.session);
        };
        IgnoredAddRequestMessage.prototype.deserializeAs_IgnoredAddRequestMessage = function(input) {
            this.name = input.readUTF();
            this.session = input.readBoolean();
        };
        IgnoredAddRequestMessage.ID = 5690;
        return IgnoredAddRequestMessage;
    })(NetworkMessage);
    Protocol.IgnoredAddRequestMessage = IgnoredAddRequestMessage;
    var IgnoredDeleteRequestMessage = (function(_super) {
        __extends(IgnoredDeleteRequestMessage, _super);

        function IgnoredDeleteRequestMessage() {
            this.accountId = 0;
            this.session = false;
            _super.call(this)
        }
        IgnoredDeleteRequestMessage.prototype.getMessageId = function() {
            return IgnoredDeleteRequestMessage.ID;
        };
        IgnoredDeleteRequestMessage.prototype.reset = function() {
            this.accountId = 0;
            this.session = false;
        };
        IgnoredDeleteRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        IgnoredDeleteRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        IgnoredDeleteRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_IgnoredDeleteRequestMessage(output);
        };
        IgnoredDeleteRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_IgnoredDeleteRequestMessage(input);
        };
        IgnoredDeleteRequestMessage.prototype.serializeAs_IgnoredDeleteRequestMessage = function(output) {
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element accountId.");
            }
            output.writeInt(this.accountId);
            output.writeBoolean(this.session);
        };
        IgnoredDeleteRequestMessage.prototype.deserializeAs_IgnoredDeleteRequestMessage = function(input) {
            this.accountId = input.readInt();
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element of IgnoredDeleteRequestMessage.accountId.");
            }
            this.session = input.readBoolean();
        };
        IgnoredDeleteRequestMessage.ID = 9881;
        return IgnoredDeleteRequestMessage;
    })(NetworkMessage);
    Protocol.IgnoredDeleteRequestMessage = IgnoredDeleteRequestMessage;
    var IgnoredDeleteResultMessage = (function(_super) {
        __extends(IgnoredDeleteResultMessage, _super);

        function IgnoredDeleteResultMessage() {
            this.success = false;
            this.name = "";
            this.session = false;
            _super.call(this)
        }
        IgnoredDeleteResultMessage.prototype.getMessageId = function() {
            return IgnoredDeleteResultMessage.ID;
        };
        IgnoredDeleteResultMessage.prototype.reset = function() {
            this.success = false;
            this.name = "";
            this.session = false;
        };
        IgnoredDeleteResultMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        IgnoredDeleteResultMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        IgnoredDeleteResultMessage.prototype.serialize = function(output) {
            this.serializeAs_IgnoredDeleteResultMessage(output);
        };
        IgnoredDeleteResultMessage.prototype.deserialize = function(input) {
            this.deserializeAs_IgnoredDeleteResultMessage(input);
        };
        IgnoredDeleteResultMessage.prototype.serializeAs_IgnoredDeleteResultMessage = function(output) {
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.success);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.session);
            output.writeByte(_box0);
            output.writeUTF(this.name);
        };
        IgnoredDeleteResultMessage.prototype.deserializeAs_IgnoredDeleteResultMessage = function(input) {
            this.deserializeByteBoxes(input);
            this.name = input.readUTF();
        };
        IgnoredDeleteResultMessage.ID = 4091;
        return IgnoredDeleteResultMessage;
    })(NetworkMessage);
    Protocol.IgnoredDeleteResultMessage = IgnoredDeleteResultMessage;
    var IgnoredGetListMessage = (function(_super) {
        __extends(IgnoredGetListMessage, _super);

        function IgnoredGetListMessage() {

            _super.call(this)
        }
        IgnoredGetListMessage.prototype.getMessageId = function() {
            return IgnoredGetListMessage.ID;
        };
        IgnoredGetListMessage.prototype.reset = function() {

        };
        IgnoredGetListMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        IgnoredGetListMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        IgnoredGetListMessage.prototype.serialize = function(output) {
            this.serializeAs_IgnoredGetListMessage(output);
        };
        IgnoredGetListMessage.prototype.deserialize = function(input) {
            this.deserializeAs_IgnoredGetListMessage(input);
        };
        IgnoredGetListMessage.prototype.serializeAs_IgnoredGetListMessage = function(output) {

        };
        IgnoredGetListMessage.prototype.deserializeAs_IgnoredGetListMessage = function(input) {

        };
        IgnoredGetListMessage.ID = 4315;
        return IgnoredGetListMessage;
    })(NetworkMessage);
    Protocol.IgnoredGetListMessage = IgnoredGetListMessage;
    var IgnoredListMessage = (function(_super) {
        __extends(IgnoredListMessage, _super);

        function IgnoredListMessage() {
            this.ignoredList = [];
            _super.call(this)
        }
        IgnoredListMessage.prototype.getMessageId = function() {
            return IgnoredListMessage.ID;
        };
        IgnoredListMessage.prototype.reset = function() {
            this.ignoredList = [];
        };
        IgnoredListMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        IgnoredListMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        IgnoredListMessage.prototype.serialize = function(output) {
            this.serializeAs_IgnoredListMessage(output);
        };
        IgnoredListMessage.prototype.deserialize = function(input) {
            this.deserializeAs_IgnoredListMessage(input);
        };
        IgnoredListMessage.prototype.serializeAs_IgnoredListMessage = function(output) {
            output.writeShort(this.ignoredList.length);
            for (var _i1 = 0; _i1 < this.ignoredList.length; _i1++) {
                output.writeShort((this.ignoredList[_i1]).getTypeId());
                (this.ignoredList[_i1]).serialize(output);
            }
        };
        IgnoredListMessage.prototype.deserializeAs_IgnoredListMessage = function(input) {
            var _id1 = 0;
            var _item1 = null;
            var _ignoredListLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _ignoredListLen; _i1++) {
                _id1 = input.readUnsignedShort();
                _item1 = ProtocolTypeManager.getInstance(IgnoredInformations, _id1);
                _item1.deserialize(input);
                this.ignoredList.push(_item1);
            }
        };
        IgnoredListMessage.ID = 4244;
        return IgnoredListMessage;
    })(NetworkMessage);
    Protocol.IgnoredListMessage = IgnoredListMessage;
    var SpouseGetInformationsMessage = (function(_super) {
        __extends(SpouseGetInformationsMessage, _super);

        function SpouseGetInformationsMessage() {

            _super.call(this)
        }
        SpouseGetInformationsMessage.prototype.getMessageId = function() {
            return SpouseGetInformationsMessage.ID;
        };
        SpouseGetInformationsMessage.prototype.reset = function() {

        };
        SpouseGetInformationsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        SpouseGetInformationsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        SpouseGetInformationsMessage.prototype.serialize = function(output) {
            this.serializeAs_SpouseGetInformationsMessage(output);
        };
        SpouseGetInformationsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_SpouseGetInformationsMessage(input);
        };
        SpouseGetInformationsMessage.prototype.serializeAs_SpouseGetInformationsMessage = function(output) {

        };
        SpouseGetInformationsMessage.prototype.deserializeAs_SpouseGetInformationsMessage = function(input) {

        };
        SpouseGetInformationsMessage.ID = 4243;
        return SpouseGetInformationsMessage;
    })(NetworkMessage);
    Protocol.SpouseGetInformationsMessage = SpouseGetInformationsMessage;
    var SpouseInformationsMessage = (function(_super) {
        __extends(SpouseInformationsMessage, _super);

        function SpouseInformationsMessage() {
            this.spouse = new FriendSpouseInformations();
            _super.call(this)
        }
        SpouseInformationsMessage.prototype.getMessageId = function() {
            return SpouseInformationsMessage.ID;
        };
        SpouseInformationsMessage.prototype.reset = function() {
            this.spouse = new FriendSpouseInformations();
        };
        SpouseInformationsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        SpouseInformationsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        SpouseInformationsMessage.prototype.serialize = function(output) {
            this.serializeAs_SpouseInformationsMessage(output);
        };
        SpouseInformationsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_SpouseInformationsMessage(input);
        };
        SpouseInformationsMessage.prototype.serializeAs_SpouseInformationsMessage = function(output) {
            output.writeShort(this.spouse.getTypeId());
            this.spouse.serialize(output);
        };
        SpouseInformationsMessage.prototype.deserializeAs_SpouseInformationsMessage = function(input) {
            var _id1 = input.readUnsignedShort();
            this.spouse = ProtocolTypeManager.getInstance(FriendSpouseInformations, _id1);
            this.spouse.deserialize(input);
        };
        SpouseInformationsMessage.ID = 3802;
        return SpouseInformationsMessage;
    })(NetworkMessage);
    Protocol.SpouseInformationsMessage = SpouseInformationsMessage;
    var SpouseStatusMessage = (function(_super) {
        __extends(SpouseStatusMessage, _super);

        function SpouseStatusMessage() {
            this.hasSpouse = false;
            _super.call(this)
        }
        SpouseStatusMessage.prototype.getMessageId = function() {
            return SpouseStatusMessage.ID;
        };
        SpouseStatusMessage.prototype.reset = function() {
            this.hasSpouse = false;
        };
        SpouseStatusMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        SpouseStatusMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        SpouseStatusMessage.prototype.serialize = function(output) {
            this.serializeAs_SpouseStatusMessage(output);
        };
        SpouseStatusMessage.prototype.deserialize = function(input) {
            this.deserializeAs_SpouseStatusMessage(input);
        };
        SpouseStatusMessage.prototype.serializeAs_SpouseStatusMessage = function(output) {
            output.writeBoolean(this.hasSpouse);
        };
        SpouseStatusMessage.prototype.deserializeAs_SpouseStatusMessage = function(input) {
            this.hasSpouse = input.readBoolean();
        };
        SpouseStatusMessage.ID = 8129;
        return SpouseStatusMessage;
    })(NetworkMessage);
    Protocol.SpouseStatusMessage = SpouseStatusMessage;
    var WarnOnPermaDeathStateMessage = (function(_super) {
        __extends(WarnOnPermaDeathStateMessage, _super);

        function WarnOnPermaDeathStateMessage() {
            this.enable = false;
            _super.call(this)
        }
        WarnOnPermaDeathStateMessage.prototype.getMessageId = function() {
            return WarnOnPermaDeathStateMessage.ID;
        };
        WarnOnPermaDeathStateMessage.prototype.reset = function() {
            this.enable = false;
        };
        WarnOnPermaDeathStateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        WarnOnPermaDeathStateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        WarnOnPermaDeathStateMessage.prototype.serialize = function(output) {
            this.serializeAs_WarnOnPermaDeathStateMessage(output);
        };
        WarnOnPermaDeathStateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_WarnOnPermaDeathStateMessage(input);
        };
        WarnOnPermaDeathStateMessage.prototype.serializeAs_WarnOnPermaDeathStateMessage = function(output) {
            output.writeBoolean(this.enable);
        };
        WarnOnPermaDeathStateMessage.prototype.deserializeAs_WarnOnPermaDeathStateMessage = function(input) {
            this.enable = input.readBoolean();
        };
        WarnOnPermaDeathStateMessage.ID = 9296;
        return WarnOnPermaDeathStateMessage;
    })(NetworkMessage);
    Protocol.WarnOnPermaDeathStateMessage = WarnOnPermaDeathStateMessage;
    var GuestLimitationMessage = (function(_super) {
        __extends(GuestLimitationMessage, _super);

        function GuestLimitationMessage() {
            this.reason = 0;
            _super.call(this)
        }
        GuestLimitationMessage.prototype.getMessageId = function() {
            return GuestLimitationMessage.ID;
        };
        GuestLimitationMessage.prototype.reset = function() {
            this.reason = 0;
        };
        GuestLimitationMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuestLimitationMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuestLimitationMessage.prototype.serialize = function(output) {
            this.serializeAs_GuestLimitationMessage(output);
        };
        GuestLimitationMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuestLimitationMessage(input);
        };
        GuestLimitationMessage.prototype.serializeAs_GuestLimitationMessage = function(output) {
            output.writeByte(this.reason);
        };
        GuestLimitationMessage.prototype.deserializeAs_GuestLimitationMessage = function(input) {
            this.reason = input.readByte();
            if (this.reason < 0) {
                throw new Error("Forbidden value (" + this.reason + ") on element of GuestLimitationMessage.reason.");
            }
        };
        GuestLimitationMessage.ID = 5232;
        return GuestLimitationMessage;
    })(NetworkMessage);
    Protocol.GuestLimitationMessage = GuestLimitationMessage;
    var GuestModeMessage = (function(_super) {
        __extends(GuestModeMessage, _super);

        function GuestModeMessage() {
            this.active = false;
            _super.call(this)
        }
        GuestModeMessage.prototype.getMessageId = function() {
            return GuestModeMessage.ID;
        };
        GuestModeMessage.prototype.reset = function() {
            this.active = false;
        };
        GuestModeMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuestModeMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuestModeMessage.prototype.serialize = function(output) {
            this.serializeAs_GuestModeMessage(output);
        };
        GuestModeMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuestModeMessage(input);
        };
        GuestModeMessage.prototype.serializeAs_GuestModeMessage = function(output) {
            output.writeBoolean(this.active);
        };
        GuestModeMessage.prototype.deserializeAs_GuestModeMessage = function(input) {
            this.active = input.readBoolean();
        };
        GuestModeMessage.ID = 6071;
        return GuestModeMessage;
    })(NetworkMessage);
    Protocol.GuestModeMessage = GuestModeMessage;
    var ChallengeFightJoinRefusedMessage = (function(_super) {
        __extends(ChallengeFightJoinRefusedMessage, _super);

        function ChallengeFightJoinRefusedMessage() {
            this.playerId = 0;
            this.reason = 0;
            _super.call(this)
        }
        ChallengeFightJoinRefusedMessage.prototype.getMessageId = function() {
            return ChallengeFightJoinRefusedMessage.ID;
        };
        ChallengeFightJoinRefusedMessage.prototype.reset = function() {
            this.playerId = 0;
            this.reason = 0;
        };
        ChallengeFightJoinRefusedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ChallengeFightJoinRefusedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ChallengeFightJoinRefusedMessage.prototype.serialize = function(output) {
            this.serializeAs_ChallengeFightJoinRefusedMessage(output);
        };
        ChallengeFightJoinRefusedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ChallengeFightJoinRefusedMessage(input);
        };
        ChallengeFightJoinRefusedMessage.prototype.serializeAs_ChallengeFightJoinRefusedMessage = function(output) {
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
            output.writeByte(this.reason);
        };
        ChallengeFightJoinRefusedMessage.prototype.deserializeAs_ChallengeFightJoinRefusedMessage = function(input) {
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of ChallengeFightJoinRefusedMessage.playerId.");
            }
            this.reason = input.readByte();
        };
        ChallengeFightJoinRefusedMessage.ID = 3637;
        return ChallengeFightJoinRefusedMessage;
    })(NetworkMessage);
    Protocol.ChallengeFightJoinRefusedMessage = ChallengeFightJoinRefusedMessage;
    var GuildBulletinMessage = (function(_super) {
        __extends(GuildBulletinMessage, _super);

        function GuildBulletinMessage() {

            _super.call(this)
        }
        GuildBulletinMessage.prototype.getMessageId = function() {
            return GuildBulletinMessage.ID;
        };
        GuildBulletinMessage.prototype.reset = function() {

        };
        GuildBulletinMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildBulletinMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildBulletinMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildBulletinMessage(output);
        };
        GuildBulletinMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildBulletinMessage(input);
        };
        GuildBulletinMessage.prototype.serializeAs_GuildBulletinMessage = function(output) {
            _super.prototype.serializeAs_BulletinMessage.call(this, output);
        };
        GuildBulletinMessage.prototype.deserializeAs_GuildBulletinMessage = function(input) {
            _super.prototype.deserializeAs_BulletinMessage.call(this, input);
        };
        GuildBulletinMessage.ID = 7441;
        return GuildBulletinMessage;
    })(BulletinMessage);
    Protocol.GuildBulletinMessage = GuildBulletinMessage;
    var GuildBulletinSetErrorMessage = (function(_super) {
        __extends(GuildBulletinSetErrorMessage, _super);

        function GuildBulletinSetErrorMessage() {

            _super.call(this)
        }
        GuildBulletinSetErrorMessage.prototype.getMessageId = function() {
            return GuildBulletinSetErrorMessage.ID;
        };
        GuildBulletinSetErrorMessage.prototype.reset = function() {

        };
        GuildBulletinSetErrorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildBulletinSetErrorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildBulletinSetErrorMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildBulletinSetErrorMessage(output);
        };
        GuildBulletinSetErrorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildBulletinSetErrorMessage(input);
        };
        GuildBulletinSetErrorMessage.prototype.serializeAs_GuildBulletinSetErrorMessage = function(output) {
            _super.prototype.serializeAs_SocialNoticeSetErrorMessage.call(this, output);
        };
        GuildBulletinSetErrorMessage.prototype.deserializeAs_GuildBulletinSetErrorMessage = function(input) {
            _super.prototype.deserializeAs_SocialNoticeSetErrorMessage.call(this, input);
        };
        GuildBulletinSetErrorMessage.ID = 7608;
        return GuildBulletinSetErrorMessage;
    })(SocialNoticeSetErrorMessage);
    Protocol.GuildBulletinSetErrorMessage = GuildBulletinSetErrorMessage;
    var GuildBulletinSetRequestMessage = (function(_super) {
        __extends(GuildBulletinSetRequestMessage, _super);

        function GuildBulletinSetRequestMessage() {
            this.content = "";
            this.notifyMembers = false;
            _super.call(this)
        }
        GuildBulletinSetRequestMessage.prototype.getMessageId = function() {
            return GuildBulletinSetRequestMessage.ID;
        };
        GuildBulletinSetRequestMessage.prototype.reset = function() {
            this.content = "";
            this.notifyMembers = false;
        };
        GuildBulletinSetRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildBulletinSetRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildBulletinSetRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildBulletinSetRequestMessage(output);
        };
        GuildBulletinSetRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildBulletinSetRequestMessage(input);
        };
        GuildBulletinSetRequestMessage.prototype.serializeAs_GuildBulletinSetRequestMessage = function(output) {
            _super.prototype.serializeAs_SocialNoticeSetRequestMessage.call(this, output);
            output.writeUTF(this.content);
            output.writeBoolean(this.notifyMembers);
        };
        GuildBulletinSetRequestMessage.prototype.deserializeAs_GuildBulletinSetRequestMessage = function(input) {
            _super.prototype.deserializeAs_SocialNoticeSetRequestMessage.call(this, input);
            this.content = input.readUTF();
            this.notifyMembers = input.readBoolean();
        };
        GuildBulletinSetRequestMessage.ID = 9793;
        return GuildBulletinSetRequestMessage;
    })(SocialNoticeSetRequestMessage);
    Protocol.GuildBulletinSetRequestMessage = GuildBulletinSetRequestMessage;
    var GuildChangeMemberParametersMessage = (function(_super) {
        __extends(GuildChangeMemberParametersMessage, _super);

        function GuildChangeMemberParametersMessage() {
            this.memberId = 0;
            this.rank = 0;
            this.experienceGivenPercent = 0;
            this.rights = 0;
            _super.call(this)
        }
        GuildChangeMemberParametersMessage.prototype.getMessageId = function() {
            return GuildChangeMemberParametersMessage.ID;
        };
        GuildChangeMemberParametersMessage.prototype.reset = function() {
            this.memberId = 0;
            this.rank = 0;
            this.experienceGivenPercent = 0;
            this.rights = 0;
        };
        GuildChangeMemberParametersMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildChangeMemberParametersMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildChangeMemberParametersMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildChangeMemberParametersMessage(output);
        };
        GuildChangeMemberParametersMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildChangeMemberParametersMessage(input);
        };
        GuildChangeMemberParametersMessage.prototype.serializeAs_GuildChangeMemberParametersMessage = function(output) {
            if (this.memberId < 0 || this.memberId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.memberId + ") on element memberId.");
            }
            output.writeVarLong(this.memberId);
            if (this.rank < 0) {
                throw new Error("Forbidden value (" + this.rank + ") on element rank.");
            }
            output.writeVarShort(this.rank);
            if (this.experienceGivenPercent < 0 || this.experienceGivenPercent > 100) {
                throw new Error("Forbidden value (" + this.experienceGivenPercent + ") on element experienceGivenPercent.");
            }
            output.writeByte(this.experienceGivenPercent);
            if (this.rights < 0) {
                throw new Error("Forbidden value (" + this.rights + ") on element rights.");
            }
            output.writeVarInt(this.rights);
        };
        GuildChangeMemberParametersMessage.prototype.deserializeAs_GuildChangeMemberParametersMessage = function(input) {
            this.memberId = input.readVarUhLong();
            if (this.memberId < 0 || this.memberId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.memberId + ") on element of GuildChangeMemberParametersMessage.memberId.");
            }
            this.rank = input.readVarUhShort();
            if (this.rank < 0) {
                throw new Error("Forbidden value (" + this.rank + ") on element of GuildChangeMemberParametersMessage.rank.");
            }
            this.experienceGivenPercent = input.readByte();
            if (this.experienceGivenPercent < 0 || this.experienceGivenPercent > 100) {
                throw new Error("Forbidden value (" + this.experienceGivenPercent + ") on element of GuildChangeMemberParametersMessage.experienceGivenPercent.");
            }
            this.rights = input.readVarUhInt();
            if (this.rights < 0) {
                throw new Error("Forbidden value (" + this.rights + ") on element of GuildChangeMemberParametersMessage.rights.");
            }
        };
        GuildChangeMemberParametersMessage.ID = 2729;
        return GuildChangeMemberParametersMessage;
    })(NetworkMessage);
    Protocol.GuildChangeMemberParametersMessage = GuildChangeMemberParametersMessage;
    var GuildCharacsUpgradeRequestMessage = (function(_super) {
        __extends(GuildCharacsUpgradeRequestMessage, _super);

        function GuildCharacsUpgradeRequestMessage() {
            this.charaTypeTarget = 0;
            _super.call(this)
        }
        GuildCharacsUpgradeRequestMessage.prototype.getMessageId = function() {
            return GuildCharacsUpgradeRequestMessage.ID;
        };
        GuildCharacsUpgradeRequestMessage.prototype.reset = function() {
            this.charaTypeTarget = 0;
        };
        GuildCharacsUpgradeRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildCharacsUpgradeRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildCharacsUpgradeRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildCharacsUpgradeRequestMessage(output);
        };
        GuildCharacsUpgradeRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildCharacsUpgradeRequestMessage(input);
        };
        GuildCharacsUpgradeRequestMessage.prototype.serializeAs_GuildCharacsUpgradeRequestMessage = function(output) {
            output.writeByte(this.charaTypeTarget);
        };
        GuildCharacsUpgradeRequestMessage.prototype.deserializeAs_GuildCharacsUpgradeRequestMessage = function(input) {
            this.charaTypeTarget = input.readByte();
            if (this.charaTypeTarget < 0) {
                throw new Error("Forbidden value (" + this.charaTypeTarget + ") on element of GuildCharacsUpgradeRequestMessage.charaTypeTarget.");
            }
        };
        GuildCharacsUpgradeRequestMessage.ID = 1666;
        return GuildCharacsUpgradeRequestMessage;
    })(NetworkMessage);
    Protocol.GuildCharacsUpgradeRequestMessage = GuildCharacsUpgradeRequestMessage;
    var GuildCreationResultMessage = (function(_super) {
        __extends(GuildCreationResultMessage, _super);

        function GuildCreationResultMessage() {
            this.result = 0;
            _super.call(this)
        }
        GuildCreationResultMessage.prototype.getMessageId = function() {
            return GuildCreationResultMessage.ID;
        };
        GuildCreationResultMessage.prototype.reset = function() {
            this.result = 0;
        };
        GuildCreationResultMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildCreationResultMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildCreationResultMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildCreationResultMessage(output);
        };
        GuildCreationResultMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildCreationResultMessage(input);
        };
        GuildCreationResultMessage.prototype.serializeAs_GuildCreationResultMessage = function(output) {
            output.writeByte(this.result);
        };
        GuildCreationResultMessage.prototype.deserializeAs_GuildCreationResultMessage = function(input) {
            this.result = input.readByte();
            if (this.result < 0) {
                throw new Error("Forbidden value (" + this.result + ") on element of GuildCreationResultMessage.result.");
            }
        };
        GuildCreationResultMessage.ID = 563;
        return GuildCreationResultMessage;
    })(NetworkMessage);
    Protocol.GuildCreationResultMessage = GuildCreationResultMessage;
    var GuildCreationStartedMessage = (function(_super) {
        __extends(GuildCreationStartedMessage, _super);

        function GuildCreationStartedMessage() {

            _super.call(this)
        }
        GuildCreationStartedMessage.prototype.getMessageId = function() {
            return GuildCreationStartedMessage.ID;
        };
        GuildCreationStartedMessage.prototype.reset = function() {

        };
        GuildCreationStartedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildCreationStartedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildCreationStartedMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildCreationStartedMessage(output);
        };
        GuildCreationStartedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildCreationStartedMessage(input);
        };
        GuildCreationStartedMessage.prototype.serializeAs_GuildCreationStartedMessage = function(output) {

        };
        GuildCreationStartedMessage.prototype.deserializeAs_GuildCreationStartedMessage = function(input) {

        };
        GuildCreationStartedMessage.ID = 2404;
        return GuildCreationStartedMessage;
    })(NetworkMessage);
    Protocol.GuildCreationStartedMessage = GuildCreationStartedMessage;
    var GuildCreationValidMessage = (function(_super) {
        __extends(GuildCreationValidMessage, _super);

        function GuildCreationValidMessage() {
            this.guildName = "";
            this.guildEmblem = new GuildEmblem();
            _super.call(this)
        }
        GuildCreationValidMessage.prototype.getMessageId = function() {
            return GuildCreationValidMessage.ID;
        };
        GuildCreationValidMessage.prototype.reset = function() {
            this.guildName = "";
            this.guildEmblem = new GuildEmblem();
        };
        GuildCreationValidMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildCreationValidMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildCreationValidMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildCreationValidMessage(output);
        };
        GuildCreationValidMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildCreationValidMessage(input);
        };
        GuildCreationValidMessage.prototype.serializeAs_GuildCreationValidMessage = function(output) {
            output.writeUTF(this.guildName);
            this.guildEmblem.serializeAs_GuildEmblem(output);
        };
        GuildCreationValidMessage.prototype.deserializeAs_GuildCreationValidMessage = function(input) {
            this.guildName = input.readUTF();
            this.guildEmblem = new GuildEmblem();
            this.guildEmblem.deserialize(input);
        };
        GuildCreationValidMessage.ID = 1275;
        return GuildCreationValidMessage;
    })(NetworkMessage);
    Protocol.GuildCreationValidMessage = GuildCreationValidMessage;
    var GuildFactsErrorMessage = (function(_super) {
        __extends(GuildFactsErrorMessage, _super);

        function GuildFactsErrorMessage() {
            this.guildId = 0;
            _super.call(this)
        }
        GuildFactsErrorMessage.prototype.getMessageId = function() {
            return GuildFactsErrorMessage.ID;
        };
        GuildFactsErrorMessage.prototype.reset = function() {
            this.guildId = 0;
        };
        GuildFactsErrorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildFactsErrorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildFactsErrorMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildFactsErrorMessage(output);
        };
        GuildFactsErrorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildFactsErrorMessage(input);
        };
        GuildFactsErrorMessage.prototype.serializeAs_GuildFactsErrorMessage = function(output) {
            if (this.guildId < 0) {
                throw new Error("Forbidden value (" + this.guildId + ") on element guildId.");
            }
            output.writeVarInt(this.guildId);
        };
        GuildFactsErrorMessage.prototype.deserializeAs_GuildFactsErrorMessage = function(input) {
            this.guildId = input.readVarUhInt();
            if (this.guildId < 0) {
                throw new Error("Forbidden value (" + this.guildId + ") on element of GuildFactsErrorMessage.guildId.");
            }
        };
        GuildFactsErrorMessage.ID = 4710;
        return GuildFactsErrorMessage;
    })(NetworkMessage);
    Protocol.GuildFactsErrorMessage = GuildFactsErrorMessage;
    var GuildFactsMessage = (function(_super) {
        __extends(GuildFactsMessage, _super);

        function GuildFactsMessage() {
            this.infos = new GuildFactSheetInformations();
            this.creationDate = 0;
            this.nbTaxCollectors = 0;
            this.members = [];
            _super.call(this)
        }
        GuildFactsMessage.prototype.getMessageId = function() {
            return GuildFactsMessage.ID;
        };
        GuildFactsMessage.prototype.reset = function() {
            this.infos = new GuildFactSheetInformations();
            this.creationDate = 0;
            this.nbTaxCollectors = 0;
            this.members = [];
        };
        GuildFactsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildFactsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildFactsMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildFactsMessage(output);
        };
        GuildFactsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildFactsMessage(input);
        };
        GuildFactsMessage.prototype.serializeAs_GuildFactsMessage = function(output) {
            output.writeShort(this.infos.getTypeId());
            this.infos.serialize(output);
            if (this.creationDate < 0) {
                throw new Error("Forbidden value (" + this.creationDate + ") on element creationDate.");
            }
            output.writeInt(this.creationDate);
            if (this.nbTaxCollectors < 0) {
                throw new Error("Forbidden value (" + this.nbTaxCollectors + ") on element nbTaxCollectors.");
            }
            output.writeVarShort(this.nbTaxCollectors);
            output.writeShort(this.members.length);
            for (var _i4 = 0; _i4 < this.members.length; _i4++) {
                (this.members[_i4]).serializeAs_CharacterMinimalGuildPublicInformations(output);
            }
        };
        GuildFactsMessage.prototype.deserializeAs_GuildFactsMessage = function(input) {
            var _item4 = null;
            var _id1 = input.readUnsignedShort();
            this.infos = ProtocolTypeManager.getInstance(GuildFactSheetInformations, _id1);
            this.infos.deserialize(input);
            this.creationDate = input.readInt();
            if (this.creationDate < 0) {
                throw new Error("Forbidden value (" + this.creationDate + ") on element of GuildFactsMessage.creationDate.");
            }
            this.nbTaxCollectors = input.readVarUhShort();
            if (this.nbTaxCollectors < 0) {
                throw new Error("Forbidden value (" + this.nbTaxCollectors + ") on element of GuildFactsMessage.nbTaxCollectors.");
            }
            var _membersLen = input.readUnsignedShort();
            for (var _i4 = 0; _i4 < _membersLen; _i4++) {
                _item4 = new CharacterMinimalGuildPublicInformations();
                _item4.deserialize(input);
                this.members.push(_item4);
            }
        };
        GuildFactsMessage.ID = 6491;
        return GuildFactsMessage;
    })(NetworkMessage);
    Protocol.GuildFactsMessage = GuildFactsMessage;
    var GuildFactsRequestMessage = (function(_super) {
        __extends(GuildFactsRequestMessage, _super);

        function GuildFactsRequestMessage() {
            this.guildId = 0;
            _super.call(this)
        }
        GuildFactsRequestMessage.prototype.getMessageId = function() {
            return GuildFactsRequestMessage.ID;
        };
        GuildFactsRequestMessage.prototype.reset = function() {
            this.guildId = 0;
        };
        GuildFactsRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildFactsRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildFactsRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildFactsRequestMessage(output);
        };
        GuildFactsRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildFactsRequestMessage(input);
        };
        GuildFactsRequestMessage.prototype.serializeAs_GuildFactsRequestMessage = function(output) {
            if (this.guildId < 0) {
                throw new Error("Forbidden value (" + this.guildId + ") on element guildId.");
            }
            output.writeVarInt(this.guildId);
        };
        GuildFactsRequestMessage.prototype.deserializeAs_GuildFactsRequestMessage = function(input) {
            this.guildId = input.readVarUhInt();
            if (this.guildId < 0) {
                throw new Error("Forbidden value (" + this.guildId + ") on element of GuildFactsRequestMessage.guildId.");
            }
        };
        GuildFactsRequestMessage.ID = 3153;
        return GuildFactsRequestMessage;
    })(NetworkMessage);
    Protocol.GuildFactsRequestMessage = GuildFactsRequestMessage;
    var GuildGetInformationsMessage = (function(_super) {
        __extends(GuildGetInformationsMessage, _super);

        function GuildGetInformationsMessage() {
            this.infoType = 0;
            _super.call(this)
        }
        GuildGetInformationsMessage.prototype.getMessageId = function() {
            return GuildGetInformationsMessage.ID;
        };
        GuildGetInformationsMessage.prototype.reset = function() {
            this.infoType = 0;
        };
        GuildGetInformationsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildGetInformationsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildGetInformationsMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildGetInformationsMessage(output);
        };
        GuildGetInformationsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildGetInformationsMessage(input);
        };
        GuildGetInformationsMessage.prototype.serializeAs_GuildGetInformationsMessage = function(output) {
            output.writeByte(this.infoType);
        };
        GuildGetInformationsMessage.prototype.deserializeAs_GuildGetInformationsMessage = function(input) {
            this.infoType = input.readByte();
            if (this.infoType < 0) {
                throw new Error("Forbidden value (" + this.infoType + ") on element of GuildGetInformationsMessage.infoType.");
            }
        };
        GuildGetInformationsMessage.ID = 8887;
        return GuildGetInformationsMessage;
    })(NetworkMessage);
    Protocol.GuildGetInformationsMessage = GuildGetInformationsMessage;
    var GuildHouseRemoveMessage = (function(_super) {
        __extends(GuildHouseRemoveMessage, _super);

        function GuildHouseRemoveMessage() {
            this.houseId = 0;
            this.instanceId = 0;
            this.secondHand = false;
            _super.call(this)
        }
        GuildHouseRemoveMessage.prototype.getMessageId = function() {
            return GuildHouseRemoveMessage.ID;
        };
        GuildHouseRemoveMessage.prototype.reset = function() {
            this.houseId = 0;
            this.instanceId = 0;
            this.secondHand = false;
        };
        GuildHouseRemoveMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildHouseRemoveMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildHouseRemoveMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildHouseRemoveMessage(output);
        };
        GuildHouseRemoveMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildHouseRemoveMessage(input);
        };
        GuildHouseRemoveMessage.prototype.serializeAs_GuildHouseRemoveMessage = function(output) {
            if (this.houseId < 0) {
                throw new Error("Forbidden value (" + this.houseId + ") on element houseId.");
            }
            output.writeVarInt(this.houseId);
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element instanceId.");
            }
            output.writeInt(this.instanceId);
            output.writeBoolean(this.secondHand);
        };
        GuildHouseRemoveMessage.prototype.deserializeAs_GuildHouseRemoveMessage = function(input) {
            this.houseId = input.readVarUhInt();
            if (this.houseId < 0) {
                throw new Error("Forbidden value (" + this.houseId + ") on element of GuildHouseRemoveMessage.houseId.");
            }
            this.instanceId = input.readInt();
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element of GuildHouseRemoveMessage.instanceId.");
            }
            this.secondHand = input.readBoolean();
        };
        GuildHouseRemoveMessage.ID = 8731;
        return GuildHouseRemoveMessage;
    })(NetworkMessage);
    Protocol.GuildHouseRemoveMessage = GuildHouseRemoveMessage;
    var GuildHousesInformationMessage = (function(_super) {
        __extends(GuildHousesInformationMessage, _super);

        function GuildHousesInformationMessage() {
            this.housesInformations = [];
            _super.call(this)
        }
        GuildHousesInformationMessage.prototype.getMessageId = function() {
            return GuildHousesInformationMessage.ID;
        };
        GuildHousesInformationMessage.prototype.reset = function() {
            this.housesInformations = [];
        };
        GuildHousesInformationMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildHousesInformationMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildHousesInformationMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildHousesInformationMessage(output);
        };
        GuildHousesInformationMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildHousesInformationMessage(input);
        };
        GuildHousesInformationMessage.prototype.serializeAs_GuildHousesInformationMessage = function(output) {
            output.writeShort(this.housesInformations.length);
            for (var _i1 = 0; _i1 < this.housesInformations.length; _i1++) {
                (this.housesInformations[_i1]).serializeAs_HouseInformationsForGuild(output);
            }
        };
        GuildHousesInformationMessage.prototype.deserializeAs_GuildHousesInformationMessage = function(input) {
            var _item1 = null;
            var _housesInformationsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _housesInformationsLen; _i1++) {
                _item1 = new HouseInformationsForGuild();
                _item1.deserialize(input);
                this.housesInformations.push(_item1);
            }
        };
        GuildHousesInformationMessage.ID = 1180;
        return GuildHousesInformationMessage;
    })(NetworkMessage);
    Protocol.GuildHousesInformationMessage = GuildHousesInformationMessage;
    var GuildHouseUpdateInformationMessage = (function(_super) {
        __extends(GuildHouseUpdateInformationMessage, _super);

        function GuildHouseUpdateInformationMessage() {
            this.housesInformations = new HouseInformationsForGuild();
            _super.call(this)
        }
        GuildHouseUpdateInformationMessage.prototype.getMessageId = function() {
            return GuildHouseUpdateInformationMessage.ID;
        };
        GuildHouseUpdateInformationMessage.prototype.reset = function() {
            this.housesInformations = new HouseInformationsForGuild();
        };
        GuildHouseUpdateInformationMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildHouseUpdateInformationMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildHouseUpdateInformationMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildHouseUpdateInformationMessage(output);
        };
        GuildHouseUpdateInformationMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildHouseUpdateInformationMessage(input);
        };
        GuildHouseUpdateInformationMessage.prototype.serializeAs_GuildHouseUpdateInformationMessage = function(output) {
            this.housesInformations.serializeAs_HouseInformationsForGuild(output);
        };
        GuildHouseUpdateInformationMessage.prototype.deserializeAs_GuildHouseUpdateInformationMessage = function(input) {
            this.housesInformations = new HouseInformationsForGuild();
            this.housesInformations.deserialize(input);
        };
        GuildHouseUpdateInformationMessage.ID = 7382;
        return GuildHouseUpdateInformationMessage;
    })(NetworkMessage);
    Protocol.GuildHouseUpdateInformationMessage = GuildHouseUpdateInformationMessage;
    var GuildInAllianceFactsMessage = (function(_super) {
        __extends(GuildInAllianceFactsMessage, _super);

        function GuildInAllianceFactsMessage() {
            this.allianceInfos = new BasicNamedAllianceInformations();
            _super.call(this)
        }
        GuildInAllianceFactsMessage.prototype.getMessageId = function() {
            return GuildInAllianceFactsMessage.ID;
        };
        GuildInAllianceFactsMessage.prototype.reset = function() {
            this.allianceInfos = new BasicNamedAllianceInformations();
        };
        GuildInAllianceFactsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildInAllianceFactsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildInAllianceFactsMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildInAllianceFactsMessage(output);
        };
        GuildInAllianceFactsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildInAllianceFactsMessage(input);
        };
        GuildInAllianceFactsMessage.prototype.serializeAs_GuildInAllianceFactsMessage = function(output) {
            _super.prototype.serializeAs_GuildFactsMessage.call(this, output);
            this.allianceInfos.serializeAs_BasicNamedAllianceInformations(output);
        };
        GuildInAllianceFactsMessage.prototype.deserializeAs_GuildInAllianceFactsMessage = function(input) {
            _super.prototype.deserializeAs_GuildFactsMessage.call(this, input);
            this.allianceInfos = new BasicNamedAllianceInformations();
            this.allianceInfos.deserialize(input);
        };
        GuildInAllianceFactsMessage.ID = 6401;
        return GuildInAllianceFactsMessage;
    })(GuildFactsMessage);
    Protocol.GuildInAllianceFactsMessage = GuildInAllianceFactsMessage;
    var GuildInformationsGeneralMessage = (function(_super) {
        __extends(GuildInformationsGeneralMessage, _super);

        function GuildInformationsGeneralMessage() {
            this.abandonnedPaddock = false;
            this.level = 0;
            this.expLevelFloor = 0;
            this.experience = 0;
            this.expNextLevelFloor = 0;
            this.creationDate = 0;
            this.nbTotalMembers = 0;
            this.nbConnectedMembers = 0;
            _super.call(this)
        }
        GuildInformationsGeneralMessage.prototype.getMessageId = function() {
            return GuildInformationsGeneralMessage.ID;
        };
        GuildInformationsGeneralMessage.prototype.reset = function() {
            this.abandonnedPaddock = false;
            this.level = 0;
            this.expLevelFloor = 0;
            this.experience = 0;
            this.expNextLevelFloor = 0;
            this.creationDate = 0;
            this.nbTotalMembers = 0;
            this.nbConnectedMembers = 0;
        };
        GuildInformationsGeneralMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildInformationsGeneralMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildInformationsGeneralMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildInformationsGeneralMessage(output);
        };
        GuildInformationsGeneralMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildInformationsGeneralMessage(input);
        };
        GuildInformationsGeneralMessage.prototype.serializeAs_GuildInformationsGeneralMessage = function(output) {
            output.writeBoolean(this.abandonnedPaddock);
            if (this.level < 0 || this.level > 255) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeByte(this.level);
            if (this.expLevelFloor < 0 || this.expLevelFloor > 9007199254740990) {
                throw new Error("Forbidden value (" + this.expLevelFloor + ") on element expLevelFloor.");
            }
            output.writeVarLong(this.expLevelFloor);
            if (this.experience < 0 || this.experience > 9007199254740990) {
                throw new Error("Forbidden value (" + this.experience + ") on element experience.");
            }
            output.writeVarLong(this.experience);
            if (this.expNextLevelFloor < 0 || this.expNextLevelFloor > 9007199254740990) {
                throw new Error("Forbidden value (" + this.expNextLevelFloor + ") on element expNextLevelFloor.");
            }
            output.writeVarLong(this.expNextLevelFloor);
            if (this.creationDate < 0) {
                throw new Error("Forbidden value (" + this.creationDate + ") on element creationDate.");
            }
            output.writeInt(this.creationDate);
            if (this.nbTotalMembers < 0) {
                throw new Error("Forbidden value (" + this.nbTotalMembers + ") on element nbTotalMembers.");
            }
            output.writeVarShort(this.nbTotalMembers);
            if (this.nbConnectedMembers < 0) {
                throw new Error("Forbidden value (" + this.nbConnectedMembers + ") on element nbConnectedMembers.");
            }
            output.writeVarShort(this.nbConnectedMembers);
        };
        GuildInformationsGeneralMessage.prototype.deserializeAs_GuildInformationsGeneralMessage = function(input) {
            this.abandonnedPaddock = input.readBoolean();
            this.level = input.readUnsignedByte();
            if (this.level < 0 || this.level > 255) {
                throw new Error("Forbidden value (" + this.level + ") on element of GuildInformationsGeneralMessage.level.");
            }
            this.expLevelFloor = input.readVarUhLong();
            if (this.expLevelFloor < 0 || this.expLevelFloor > 9007199254740990) {
                throw new Error("Forbidden value (" + this.expLevelFloor + ") on element of GuildInformationsGeneralMessage.expLevelFloor.");
            }
            this.experience = input.readVarUhLong();
            if (this.experience < 0 || this.experience > 9007199254740990) {
                throw new Error("Forbidden value (" + this.experience + ") on element of GuildInformationsGeneralMessage.experience.");
            }
            this.expNextLevelFloor = input.readVarUhLong();
            if (this.expNextLevelFloor < 0 || this.expNextLevelFloor > 9007199254740990) {
                throw new Error("Forbidden value (" + this.expNextLevelFloor + ") on element of GuildInformationsGeneralMessage.expNextLevelFloor.");
            }
            this.creationDate = input.readInt();
            if (this.creationDate < 0) {
                throw new Error("Forbidden value (" + this.creationDate + ") on element of GuildInformationsGeneralMessage.creationDate.");
            }
            this.nbTotalMembers = input.readVarUhShort();
            if (this.nbTotalMembers < 0) {
                throw new Error("Forbidden value (" + this.nbTotalMembers + ") on element of GuildInformationsGeneralMessage.nbTotalMembers.");
            }
            this.nbConnectedMembers = input.readVarUhShort();
            if (this.nbConnectedMembers < 0) {
                throw new Error("Forbidden value (" + this.nbConnectedMembers + ") on element of GuildInformationsGeneralMessage.nbConnectedMembers.");
            }
        };
        GuildInformationsGeneralMessage.ID = 4532;
        return GuildInformationsGeneralMessage;
    })(NetworkMessage);
    Protocol.GuildInformationsGeneralMessage = GuildInformationsGeneralMessage;
    var GuildInformationsMembersMessage = (function(_super) {
        __extends(GuildInformationsMembersMessage, _super);

        function GuildInformationsMembersMessage() {
            this.members = [];
            _super.call(this)
        }
        GuildInformationsMembersMessage.prototype.getMessageId = function() {
            return GuildInformationsMembersMessage.ID;
        };
        GuildInformationsMembersMessage.prototype.reset = function() {
            this.members = [];
        };
        GuildInformationsMembersMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildInformationsMembersMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildInformationsMembersMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildInformationsMembersMessage(output);
        };
        GuildInformationsMembersMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildInformationsMembersMessage(input);
        };
        GuildInformationsMembersMessage.prototype.serializeAs_GuildInformationsMembersMessage = function(output) {
            output.writeShort(this.members.length);
            for (var _i1 = 0; _i1 < this.members.length; _i1++) {
                (this.members[_i1]).serializeAs_GuildMember(output);
            }
        };
        GuildInformationsMembersMessage.prototype.deserializeAs_GuildInformationsMembersMessage = function(input) {
            var _item1 = null;
            var _membersLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _membersLen; _i1++) {
                _item1 = new GuildMember();
                _item1.deserialize(input);
                this.members.push(_item1);
            }
        };
        GuildInformationsMembersMessage.ID = 7251;
        return GuildInformationsMembersMessage;
    })(NetworkMessage);
    Protocol.GuildInformationsMembersMessage = GuildInformationsMembersMessage;
    var GuildInformationsMemberUpdateMessage = (function(_super) {
        __extends(GuildInformationsMemberUpdateMessage, _super);

        function GuildInformationsMemberUpdateMessage() {
            this.member = new GuildMember();
            _super.call(this)
        }
        GuildInformationsMemberUpdateMessage.prototype.getMessageId = function() {
            return GuildInformationsMemberUpdateMessage.ID;
        };
        GuildInformationsMemberUpdateMessage.prototype.reset = function() {
            this.member = new GuildMember();
        };
        GuildInformationsMemberUpdateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildInformationsMemberUpdateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildInformationsMemberUpdateMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildInformationsMemberUpdateMessage(output);
        };
        GuildInformationsMemberUpdateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildInformationsMemberUpdateMessage(input);
        };
        GuildInformationsMemberUpdateMessage.prototype.serializeAs_GuildInformationsMemberUpdateMessage = function(output) {
            this.member.serializeAs_GuildMember(output);
        };
        GuildInformationsMemberUpdateMessage.prototype.deserializeAs_GuildInformationsMemberUpdateMessage = function(input) {
            this.member = new GuildMember();
            this.member.deserialize(input);
        };
        GuildInformationsMemberUpdateMessage.ID = 7131;
        return GuildInformationsMemberUpdateMessage;
    })(NetworkMessage);
    Protocol.GuildInformationsMemberUpdateMessage = GuildInformationsMemberUpdateMessage;
    var GuildInformationsPaddocksMessage = (function(_super) {
        __extends(GuildInformationsPaddocksMessage, _super);

        function GuildInformationsPaddocksMessage() {
            this.nbPaddockMax = 0;
            this.paddocksInformations = [];
            _super.call(this)
        }
        GuildInformationsPaddocksMessage.prototype.getMessageId = function() {
            return GuildInformationsPaddocksMessage.ID;
        };
        GuildInformationsPaddocksMessage.prototype.reset = function() {
            this.nbPaddockMax = 0;
            this.paddocksInformations = [];
        };
        GuildInformationsPaddocksMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildInformationsPaddocksMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildInformationsPaddocksMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildInformationsPaddocksMessage(output);
        };
        GuildInformationsPaddocksMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildInformationsPaddocksMessage(input);
        };
        GuildInformationsPaddocksMessage.prototype.serializeAs_GuildInformationsPaddocksMessage = function(output) {
            if (this.nbPaddockMax < 0) {
                throw new Error("Forbidden value (" + this.nbPaddockMax + ") on element nbPaddockMax.");
            }
            output.writeByte(this.nbPaddockMax);
            output.writeShort(this.paddocksInformations.length);
            for (var _i2 = 0; _i2 < this.paddocksInformations.length; _i2++) {
                (this.paddocksInformations[_i2]).serializeAs_PaddockContentInformations(output);
            }
        };
        GuildInformationsPaddocksMessage.prototype.deserializeAs_GuildInformationsPaddocksMessage = function(input) {
            var _item2 = null;
            this.nbPaddockMax = input.readByte();
            if (this.nbPaddockMax < 0) {
                throw new Error("Forbidden value (" + this.nbPaddockMax + ") on element of GuildInformationsPaddocksMessage.nbPaddockMax.");
            }
            var _paddocksInformationsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _paddocksInformationsLen; _i2++) {
                _item2 = new PaddockContentInformations();
                _item2.deserialize(input);
                this.paddocksInformations.push(_item2);
            }
        };
        GuildInformationsPaddocksMessage.ID = 8683;
        return GuildInformationsPaddocksMessage;
    })(NetworkMessage);
    Protocol.GuildInformationsPaddocksMessage = GuildInformationsPaddocksMessage;
    var GuildInfosUpgradeMessage = (function(_super) {
        __extends(GuildInfosUpgradeMessage, _super);

        function GuildInfosUpgradeMessage() {
            this.maxTaxCollectorsCount = 0;
            this.taxCollectorsCount = 0;
            this.taxCollectorLifePoints = 0;
            this.taxCollectorDamagesBonuses = 0;
            this.taxCollectorPods = 0;
            this.taxCollectorProspecting = 0;
            this.taxCollectorWisdom = 0;
            this.boostPoints = 0;
            this.spellId = [];
            this.spellLevel = [];
            _super.call(this)
        }
        GuildInfosUpgradeMessage.prototype.getMessageId = function() {
            return GuildInfosUpgradeMessage.ID;
        };
        GuildInfosUpgradeMessage.prototype.reset = function() {
            this.maxTaxCollectorsCount = 0;
            this.taxCollectorsCount = 0;
            this.taxCollectorLifePoints = 0;
            this.taxCollectorDamagesBonuses = 0;
            this.taxCollectorPods = 0;
            this.taxCollectorProspecting = 0;
            this.taxCollectorWisdom = 0;
            this.boostPoints = 0;
            this.spellId = [];
            this.spellLevel = [];
        };
        GuildInfosUpgradeMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildInfosUpgradeMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildInfosUpgradeMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildInfosUpgradeMessage(output);
        };
        GuildInfosUpgradeMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildInfosUpgradeMessage(input);
        };
        GuildInfosUpgradeMessage.prototype.serializeAs_GuildInfosUpgradeMessage = function(output) {
            if (this.maxTaxCollectorsCount < 0) {
                throw new Error("Forbidden value (" + this.maxTaxCollectorsCount + ") on element maxTaxCollectorsCount.");
            }
            output.writeByte(this.maxTaxCollectorsCount);
            if (this.taxCollectorsCount < 0) {
                throw new Error("Forbidden value (" + this.taxCollectorsCount + ") on element taxCollectorsCount.");
            }
            output.writeByte(this.taxCollectorsCount);
            if (this.taxCollectorLifePoints < 0) {
                throw new Error("Forbidden value (" + this.taxCollectorLifePoints + ") on element taxCollectorLifePoints.");
            }
            output.writeVarShort(this.taxCollectorLifePoints);
            if (this.taxCollectorDamagesBonuses < 0) {
                throw new Error("Forbidden value (" + this.taxCollectorDamagesBonuses + ") on element taxCollectorDamagesBonuses.");
            }
            output.writeVarShort(this.taxCollectorDamagesBonuses);
            if (this.taxCollectorPods < 0) {
                throw new Error("Forbidden value (" + this.taxCollectorPods + ") on element taxCollectorPods.");
            }
            output.writeVarShort(this.taxCollectorPods);
            if (this.taxCollectorProspecting < 0) {
                throw new Error("Forbidden value (" + this.taxCollectorProspecting + ") on element taxCollectorProspecting.");
            }
            output.writeVarShort(this.taxCollectorProspecting);
            if (this.taxCollectorWisdom < 0) {
                throw new Error("Forbidden value (" + this.taxCollectorWisdom + ") on element taxCollectorWisdom.");
            }
            output.writeVarShort(this.taxCollectorWisdom);
            if (this.boostPoints < 0) {
                throw new Error("Forbidden value (" + this.boostPoints + ") on element boostPoints.");
            }
            output.writeVarShort(this.boostPoints);
            output.writeShort(this.spellId.length);
            for (var _i9 = 0; _i9 < this.spellId.length; _i9++) {
                if (this.spellId[_i9] < 0) {
                    throw new Error("Forbidden value (" + this.spellId[_i9] + ") on element 9 (starting at 1) of spellId.");
                }
                output.writeVarShort(this.spellId[_i9]);
            }
            output.writeShort(this.spellLevel.length);
            for (var _i10 = 0; _i10 < this.spellLevel.length; _i10++) {
                output.writeShort(this.spellLevel[_i10]);
            }
        };
        GuildInfosUpgradeMessage.prototype.deserializeAs_GuildInfosUpgradeMessage = function(input) {
            var _val9 = 0;
            var _val10 = 0;
            this.maxTaxCollectorsCount = input.readByte();
            if (this.maxTaxCollectorsCount < 0) {
                throw new Error("Forbidden value (" + this.maxTaxCollectorsCount + ") on element of GuildInfosUpgradeMessage.maxTaxCollectorsCount.");
            }
            this.taxCollectorsCount = input.readByte();
            if (this.taxCollectorsCount < 0) {
                throw new Error("Forbidden value (" + this.taxCollectorsCount + ") on element of GuildInfosUpgradeMessage.taxCollectorsCount.");
            }
            this.taxCollectorLifePoints = input.readVarUhShort();
            if (this.taxCollectorLifePoints < 0) {
                throw new Error("Forbidden value (" + this.taxCollectorLifePoints + ") on element of GuildInfosUpgradeMessage.taxCollectorLifePoints.");
            }
            this.taxCollectorDamagesBonuses = input.readVarUhShort();
            if (this.taxCollectorDamagesBonuses < 0) {
                throw new Error("Forbidden value (" + this.taxCollectorDamagesBonuses + ") on element of GuildInfosUpgradeMessage.taxCollectorDamagesBonuses.");
            }
            this.taxCollectorPods = input.readVarUhShort();
            if (this.taxCollectorPods < 0) {
                throw new Error("Forbidden value (" + this.taxCollectorPods + ") on element of GuildInfosUpgradeMessage.taxCollectorPods.");
            }
            this.taxCollectorProspecting = input.readVarUhShort();
            if (this.taxCollectorProspecting < 0) {
                throw new Error("Forbidden value (" + this.taxCollectorProspecting + ") on element of GuildInfosUpgradeMessage.taxCollectorProspecting.");
            }
            this.taxCollectorWisdom = input.readVarUhShort();
            if (this.taxCollectorWisdom < 0) {
                throw new Error("Forbidden value (" + this.taxCollectorWisdom + ") on element of GuildInfosUpgradeMessage.taxCollectorWisdom.");
            }
            this.boostPoints = input.readVarUhShort();
            if (this.boostPoints < 0) {
                throw new Error("Forbidden value (" + this.boostPoints + ") on element of GuildInfosUpgradeMessage.boostPoints.");
            }
            var _spellIdLen = input.readUnsignedShort();
            for (var _i9 = 0; _i9 < _spellIdLen; _i9++) {
                _val9 = input.readVarUhShort();
                if (_val9 < 0) {
                    throw new Error("Forbidden value (" + _val9 + ") on elements of spellId.");
                }
                this.spellId.push(_val9);
            }
            var _spellLevelLen = input.readUnsignedShort();
            for (var _i10 = 0; _i10 < _spellLevelLen; _i10++) {
                _val10 = input.readShort();
                this.spellLevel.push(_val10);
            }
        };
        GuildInfosUpgradeMessage.ID = 2425;
        return GuildInfosUpgradeMessage;
    })(NetworkMessage);
    Protocol.GuildInfosUpgradeMessage = GuildInfosUpgradeMessage;
    var GuildInvitationAnswerMessage = (function(_super) {
        __extends(GuildInvitationAnswerMessage, _super);

        function GuildInvitationAnswerMessage() {
            this.accept = false;
            _super.call(this)
        }
        GuildInvitationAnswerMessage.prototype.getMessageId = function() {
            return GuildInvitationAnswerMessage.ID;
        };
        GuildInvitationAnswerMessage.prototype.reset = function() {
            this.accept = false;
        };
        GuildInvitationAnswerMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildInvitationAnswerMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildInvitationAnswerMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildInvitationAnswerMessage(output);
        };
        GuildInvitationAnswerMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildInvitationAnswerMessage(input);
        };
        GuildInvitationAnswerMessage.prototype.serializeAs_GuildInvitationAnswerMessage = function(output) {
            output.writeBoolean(this.accept);
        };
        GuildInvitationAnswerMessage.prototype.deserializeAs_GuildInvitationAnswerMessage = function(input) {
            this.accept = input.readBoolean();
        };
        GuildInvitationAnswerMessage.ID = 2671;
        return GuildInvitationAnswerMessage;
    })(NetworkMessage);
    Protocol.GuildInvitationAnswerMessage = GuildInvitationAnswerMessage;
    var GuildInvitationByNameMessage = (function(_super) {
        __extends(GuildInvitationByNameMessage, _super);

        function GuildInvitationByNameMessage() {
            this.name = "";
            _super.call(this)
        }
        GuildInvitationByNameMessage.prototype.getMessageId = function() {
            return GuildInvitationByNameMessage.ID;
        };
        GuildInvitationByNameMessage.prototype.reset = function() {
            this.name = "";
        };
        GuildInvitationByNameMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildInvitationByNameMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildInvitationByNameMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildInvitationByNameMessage(output);
        };
        GuildInvitationByNameMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildInvitationByNameMessage(input);
        };
        GuildInvitationByNameMessage.prototype.serializeAs_GuildInvitationByNameMessage = function(output) {
            output.writeUTF(this.name);
        };
        GuildInvitationByNameMessage.prototype.deserializeAs_GuildInvitationByNameMessage = function(input) {
            this.name = input.readUTF();
        };
        GuildInvitationByNameMessage.ID = 5265;
        return GuildInvitationByNameMessage;
    })(NetworkMessage);
    Protocol.GuildInvitationByNameMessage = GuildInvitationByNameMessage;
    var GuildInvitationMessage = (function(_super) {
        __extends(GuildInvitationMessage, _super);

        function GuildInvitationMessage() {
            this.targetId = 0;
            _super.call(this)
        }
        GuildInvitationMessage.prototype.getMessageId = function() {
            return GuildInvitationMessage.ID;
        };
        GuildInvitationMessage.prototype.reset = function() {
            this.targetId = 0;
        };
        GuildInvitationMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildInvitationMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildInvitationMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildInvitationMessage(output);
        };
        GuildInvitationMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildInvitationMessage(input);
        };
        GuildInvitationMessage.prototype.serializeAs_GuildInvitationMessage = function(output) {
            if (this.targetId < 0 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeVarLong(this.targetId);
        };
        GuildInvitationMessage.prototype.deserializeAs_GuildInvitationMessage = function(input) {
            this.targetId = input.readVarUhLong();
            if (this.targetId < 0 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GuildInvitationMessage.targetId.");
            }
        };
        GuildInvitationMessage.ID = 8404;
        return GuildInvitationMessage;
    })(NetworkMessage);
    Protocol.GuildInvitationMessage = GuildInvitationMessage;
    var GuildInvitationStateRecrutedMessage = (function(_super) {
        __extends(GuildInvitationStateRecrutedMessage, _super);

        function GuildInvitationStateRecrutedMessage() {
            this.invitationState = 0;
            _super.call(this)
        }
        GuildInvitationStateRecrutedMessage.prototype.getMessageId = function() {
            return GuildInvitationStateRecrutedMessage.ID;
        };
        GuildInvitationStateRecrutedMessage.prototype.reset = function() {
            this.invitationState = 0;
        };
        GuildInvitationStateRecrutedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildInvitationStateRecrutedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildInvitationStateRecrutedMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildInvitationStateRecrutedMessage(output);
        };
        GuildInvitationStateRecrutedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildInvitationStateRecrutedMessage(input);
        };
        GuildInvitationStateRecrutedMessage.prototype.serializeAs_GuildInvitationStateRecrutedMessage = function(output) {
            output.writeByte(this.invitationState);
        };
        GuildInvitationStateRecrutedMessage.prototype.deserializeAs_GuildInvitationStateRecrutedMessage = function(input) {
            this.invitationState = input.readByte();
            if (this.invitationState < 0) {
                throw new Error("Forbidden value (" + this.invitationState + ") on element of GuildInvitationStateRecrutedMessage.invitationState.");
            }
        };
        GuildInvitationStateRecrutedMessage.ID = 6703;
        return GuildInvitationStateRecrutedMessage;
    })(NetworkMessage);
    Protocol.GuildInvitationStateRecrutedMessage = GuildInvitationStateRecrutedMessage;
    var GuildInvitationStateRecruterMessage = (function(_super) {
        __extends(GuildInvitationStateRecruterMessage, _super);

        function GuildInvitationStateRecruterMessage() {
            this.recrutedName = "";
            this.invitationState = 0;
            _super.call(this)
        }
        GuildInvitationStateRecruterMessage.prototype.getMessageId = function() {
            return GuildInvitationStateRecruterMessage.ID;
        };
        GuildInvitationStateRecruterMessage.prototype.reset = function() {
            this.recrutedName = "";
            this.invitationState = 0;
        };
        GuildInvitationStateRecruterMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildInvitationStateRecruterMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildInvitationStateRecruterMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildInvitationStateRecruterMessage(output);
        };
        GuildInvitationStateRecruterMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildInvitationStateRecruterMessage(input);
        };
        GuildInvitationStateRecruterMessage.prototype.serializeAs_GuildInvitationStateRecruterMessage = function(output) {
            output.writeUTF(this.recrutedName);
            output.writeByte(this.invitationState);
        };
        GuildInvitationStateRecruterMessage.prototype.deserializeAs_GuildInvitationStateRecruterMessage = function(input) {
            this.recrutedName = input.readUTF();
            this.invitationState = input.readByte();
            if (this.invitationState < 0) {
                throw new Error("Forbidden value (" + this.invitationState + ") on element of GuildInvitationStateRecruterMessage.invitationState.");
            }
        };
        GuildInvitationStateRecruterMessage.ID = 7258;
        return GuildInvitationStateRecruterMessage;
    })(NetworkMessage);
    Protocol.GuildInvitationStateRecruterMessage = GuildInvitationStateRecruterMessage;
    var GuildInvitedMessage = (function(_super) {
        __extends(GuildInvitedMessage, _super);

        function GuildInvitedMessage() {
            this.recruterId = 0;
            this.recruterName = "";
            this.guildInfo = new BasicGuildInformations();
            _super.call(this)
        }
        GuildInvitedMessage.prototype.getMessageId = function() {
            return GuildInvitedMessage.ID;
        };
        GuildInvitedMessage.prototype.reset = function() {
            this.recruterId = 0;
            this.recruterName = "";
            this.guildInfo = new BasicGuildInformations();
        };
        GuildInvitedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildInvitedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildInvitedMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildInvitedMessage(output);
        };
        GuildInvitedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildInvitedMessage(input);
        };
        GuildInvitedMessage.prototype.serializeAs_GuildInvitedMessage = function(output) {
            if (this.recruterId < 0 || this.recruterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.recruterId + ") on element recruterId.");
            }
            output.writeVarLong(this.recruterId);
            output.writeUTF(this.recruterName);
            this.guildInfo.serializeAs_BasicGuildInformations(output);
        };
        GuildInvitedMessage.prototype.deserializeAs_GuildInvitedMessage = function(input) {
            this.recruterId = input.readVarUhLong();
            if (this.recruterId < 0 || this.recruterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.recruterId + ") on element of GuildInvitedMessage.recruterId.");
            }
            this.recruterName = input.readUTF();
            this.guildInfo = new BasicGuildInformations();
            this.guildInfo.deserialize(input);
        };
        GuildInvitedMessage.ID = 3343;
        return GuildInvitedMessage;
    })(NetworkMessage);
    Protocol.GuildInvitedMessage = GuildInvitedMessage;
    var GuildJoinedMessage = (function(_super) {
        __extends(GuildJoinedMessage, _super);

        function GuildJoinedMessage() {
            this.guildInfo = new GuildInformations();
            this.memberRights = 0;
            _super.call(this)
        }
        GuildJoinedMessage.prototype.getMessageId = function() {
            return GuildJoinedMessage.ID;
        };
        GuildJoinedMessage.prototype.reset = function() {
            this.guildInfo = new GuildInformations();
            this.memberRights = 0;
        };
        GuildJoinedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildJoinedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildJoinedMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildJoinedMessage(output);
        };
        GuildJoinedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildJoinedMessage(input);
        };
        GuildJoinedMessage.prototype.serializeAs_GuildJoinedMessage = function(output) {
            this.guildInfo.serializeAs_GuildInformations(output);
            if (this.memberRights < 0) {
                throw new Error("Forbidden value (" + this.memberRights + ") on element memberRights.");
            }
            output.writeVarInt(this.memberRights);
        };
        GuildJoinedMessage.prototype.deserializeAs_GuildJoinedMessage = function(input) {
            this.guildInfo = new GuildInformations();
            this.guildInfo.deserialize(input);
            this.memberRights = input.readVarUhInt();
            if (this.memberRights < 0) {
                throw new Error("Forbidden value (" + this.memberRights + ") on element of GuildJoinedMessage.memberRights.");
            }
        };
        GuildJoinedMessage.ID = 8729;
        return GuildJoinedMessage;
    })(NetworkMessage);
    Protocol.GuildJoinedMessage = GuildJoinedMessage;
    var GuildKickRequestMessage = (function(_super) {
        __extends(GuildKickRequestMessage, _super);

        function GuildKickRequestMessage() {
            this.kickedId = 0;
            _super.call(this)
        }
        GuildKickRequestMessage.prototype.getMessageId = function() {
            return GuildKickRequestMessage.ID;
        };
        GuildKickRequestMessage.prototype.reset = function() {
            this.kickedId = 0;
        };
        GuildKickRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildKickRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildKickRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildKickRequestMessage(output);
        };
        GuildKickRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildKickRequestMessage(input);
        };
        GuildKickRequestMessage.prototype.serializeAs_GuildKickRequestMessage = function(output) {
            if (this.kickedId < 0 || this.kickedId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.kickedId + ") on element kickedId.");
            }
            output.writeVarLong(this.kickedId);
        };
        GuildKickRequestMessage.prototype.deserializeAs_GuildKickRequestMessage = function(input) {
            this.kickedId = input.readVarUhLong();
            if (this.kickedId < 0 || this.kickedId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.kickedId + ") on element of GuildKickRequestMessage.kickedId.");
            }
        };
        GuildKickRequestMessage.ID = 5473;
        return GuildKickRequestMessage;
    })(NetworkMessage);
    Protocol.GuildKickRequestMessage = GuildKickRequestMessage;
    var GuildLeftMessage = (function(_super) {
        __extends(GuildLeftMessage, _super);

        function GuildLeftMessage() {

            _super.call(this)
        }
        GuildLeftMessage.prototype.getMessageId = function() {
            return GuildLeftMessage.ID;
        };
        GuildLeftMessage.prototype.reset = function() {

        };
        GuildLeftMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildLeftMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildLeftMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildLeftMessage(output);
        };
        GuildLeftMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildLeftMessage(input);
        };
        GuildLeftMessage.prototype.serializeAs_GuildLeftMessage = function(output) {

        };
        GuildLeftMessage.prototype.deserializeAs_GuildLeftMessage = function(input) {

        };
        GuildLeftMessage.ID = 105;
        return GuildLeftMessage;
    })(NetworkMessage);
    Protocol.GuildLeftMessage = GuildLeftMessage;
    var GuildLevelUpMessage = (function(_super) {
        __extends(GuildLevelUpMessage, _super);

        function GuildLevelUpMessage() {
            this.newLevel = 0;
            _super.call(this)
        }
        GuildLevelUpMessage.prototype.getMessageId = function() {
            return GuildLevelUpMessage.ID;
        };
        GuildLevelUpMessage.prototype.reset = function() {
            this.newLevel = 0;
        };
        GuildLevelUpMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildLevelUpMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildLevelUpMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildLevelUpMessage(output);
        };
        GuildLevelUpMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildLevelUpMessage(input);
        };
        GuildLevelUpMessage.prototype.serializeAs_GuildLevelUpMessage = function(output) {
            if (this.newLevel < 2 || this.newLevel > 200) {
                throw new Error("Forbidden value (" + this.newLevel + ") on element newLevel.");
            }
            output.writeByte(this.newLevel);
        };
        GuildLevelUpMessage.prototype.deserializeAs_GuildLevelUpMessage = function(input) {
            this.newLevel = input.readUnsignedByte();
            if (this.newLevel < 2 || this.newLevel > 200) {
                throw new Error("Forbidden value (" + this.newLevel + ") on element of GuildLevelUpMessage.newLevel.");
            }
        };
        GuildLevelUpMessage.ID = 963;
        return GuildLevelUpMessage;
    })(NetworkMessage);
    Protocol.GuildLevelUpMessage = GuildLevelUpMessage;
    var GuildListMessage = (function(_super) {
        __extends(GuildListMessage, _super);

        function GuildListMessage() {
            this.guilds = [];
            _super.call(this)
        }
        GuildListMessage.prototype.getMessageId = function() {
            return GuildListMessage.ID;
        };
        GuildListMessage.prototype.reset = function() {
            this.guilds = [];
        };
        GuildListMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildListMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildListMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildListMessage(output);
        };
        GuildListMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildListMessage(input);
        };
        GuildListMessage.prototype.serializeAs_GuildListMessage = function(output) {
            output.writeShort(this.guilds.length);
            for (var _i1 = 0; _i1 < this.guilds.length; _i1++) {
                (this.guilds[_i1]).serializeAs_GuildInformations(output);
            }
        };
        GuildListMessage.prototype.deserializeAs_GuildListMessage = function(input) {
            var _item1 = null;
            var _guildsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _guildsLen; _i1++) {
                _item1 = new GuildInformations();
                _item1.deserialize(input);
                this.guilds.push(_item1);
            }
        };
        GuildListMessage.ID = 7453;
        return GuildListMessage;
    })(NetworkMessage);
    Protocol.GuildListMessage = GuildListMessage;
    var GuildMemberLeavingMessage = (function(_super) {
        __extends(GuildMemberLeavingMessage, _super);

        function GuildMemberLeavingMessage() {
            this.kicked = false;
            this.memberId = 0;
            _super.call(this)
        }
        GuildMemberLeavingMessage.prototype.getMessageId = function() {
            return GuildMemberLeavingMessage.ID;
        };
        GuildMemberLeavingMessage.prototype.reset = function() {
            this.kicked = false;
            this.memberId = 0;
        };
        GuildMemberLeavingMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildMemberLeavingMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildMemberLeavingMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildMemberLeavingMessage(output);
        };
        GuildMemberLeavingMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildMemberLeavingMessage(input);
        };
        GuildMemberLeavingMessage.prototype.serializeAs_GuildMemberLeavingMessage = function(output) {
            output.writeBoolean(this.kicked);
            if (this.memberId < 0 || this.memberId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.memberId + ") on element memberId.");
            }
            output.writeVarLong(this.memberId);
        };
        GuildMemberLeavingMessage.prototype.deserializeAs_GuildMemberLeavingMessage = function(input) {
            this.kicked = input.readBoolean();
            this.memberId = input.readVarUhLong();
            if (this.memberId < 0 || this.memberId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.memberId + ") on element of GuildMemberLeavingMessage.memberId.");
            }
        };
        GuildMemberLeavingMessage.ID = 7590;
        return GuildMemberLeavingMessage;
    })(NetworkMessage);
    Protocol.GuildMemberLeavingMessage = GuildMemberLeavingMessage;
    var GuildMemberOnlineStatusMessage = (function(_super) {
        __extends(GuildMemberOnlineStatusMessage, _super);

        function GuildMemberOnlineStatusMessage() {
            this.memberId = 0;
            this.online = false;
            _super.call(this)
        }
        GuildMemberOnlineStatusMessage.prototype.getMessageId = function() {
            return GuildMemberOnlineStatusMessage.ID;
        };
        GuildMemberOnlineStatusMessage.prototype.reset = function() {
            this.memberId = 0;
            this.online = false;
        };
        GuildMemberOnlineStatusMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildMemberOnlineStatusMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildMemberOnlineStatusMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildMemberOnlineStatusMessage(output);
        };
        GuildMemberOnlineStatusMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildMemberOnlineStatusMessage(input);
        };
        GuildMemberOnlineStatusMessage.prototype.serializeAs_GuildMemberOnlineStatusMessage = function(output) {
            if (this.memberId < 0 || this.memberId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.memberId + ") on element memberId.");
            }
            output.writeVarLong(this.memberId);
            output.writeBoolean(this.online);
        };
        GuildMemberOnlineStatusMessage.prototype.deserializeAs_GuildMemberOnlineStatusMessage = function(input) {
            this.memberId = input.readVarUhLong();
            if (this.memberId < 0 || this.memberId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.memberId + ") on element of GuildMemberOnlineStatusMessage.memberId.");
            }
            this.online = input.readBoolean();
        };
        GuildMemberOnlineStatusMessage.ID = 2910;
        return GuildMemberOnlineStatusMessage;
    })(NetworkMessage);
    Protocol.GuildMemberOnlineStatusMessage = GuildMemberOnlineStatusMessage;
    var GuildMembershipMessage = (function(_super) {
        __extends(GuildMembershipMessage, _super);

        function GuildMembershipMessage() {

            _super.call(this)
        }
        GuildMembershipMessage.prototype.getMessageId = function() {
            return GuildMembershipMessage.ID;
        };
        GuildMembershipMessage.prototype.reset = function() {

        };
        GuildMembershipMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildMembershipMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildMembershipMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildMembershipMessage(output);
        };
        GuildMembershipMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildMembershipMessage(input);
        };
        GuildMembershipMessage.prototype.serializeAs_GuildMembershipMessage = function(output) {
            _super.prototype.serializeAs_GuildJoinedMessage.call(this, output);
        };
        GuildMembershipMessage.prototype.deserializeAs_GuildMembershipMessage = function(input) {
            _super.prototype.deserializeAs_GuildJoinedMessage.call(this, input);
        };
        GuildMembershipMessage.ID = 2509;
        return GuildMembershipMessage;
    })(GuildJoinedMessage);
    Protocol.GuildMembershipMessage = GuildMembershipMessage;
    var GuildModificationEmblemValidMessage = (function(_super) {
        __extends(GuildModificationEmblemValidMessage, _super);

        function GuildModificationEmblemValidMessage() {
            this.guildEmblem = new GuildEmblem();
            _super.call(this)
        }
        GuildModificationEmblemValidMessage.prototype.getMessageId = function() {
            return GuildModificationEmblemValidMessage.ID;
        };
        GuildModificationEmblemValidMessage.prototype.reset = function() {
            this.guildEmblem = new GuildEmblem();
        };
        GuildModificationEmblemValidMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildModificationEmblemValidMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildModificationEmblemValidMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildModificationEmblemValidMessage(output);
        };
        GuildModificationEmblemValidMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildModificationEmblemValidMessage(input);
        };
        GuildModificationEmblemValidMessage.prototype.serializeAs_GuildModificationEmblemValidMessage = function(output) {
            this.guildEmblem.serializeAs_GuildEmblem(output);
        };
        GuildModificationEmblemValidMessage.prototype.deserializeAs_GuildModificationEmblemValidMessage = function(input) {
            this.guildEmblem = new GuildEmblem();
            this.guildEmblem.deserialize(input);
        };
        GuildModificationEmblemValidMessage.ID = 8864;
        return GuildModificationEmblemValidMessage;
    })(NetworkMessage);
    Protocol.GuildModificationEmblemValidMessage = GuildModificationEmblemValidMessage;
    var GuildModificationNameValidMessage = (function(_super) {
        __extends(GuildModificationNameValidMessage, _super);

        function GuildModificationNameValidMessage() {
            this.guildName = "";
            _super.call(this)
        }
        GuildModificationNameValidMessage.prototype.getMessageId = function() {
            return GuildModificationNameValidMessage.ID;
        };
        GuildModificationNameValidMessage.prototype.reset = function() {
            this.guildName = "";
        };
        GuildModificationNameValidMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildModificationNameValidMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildModificationNameValidMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildModificationNameValidMessage(output);
        };
        GuildModificationNameValidMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildModificationNameValidMessage(input);
        };
        GuildModificationNameValidMessage.prototype.serializeAs_GuildModificationNameValidMessage = function(output) {
            output.writeUTF(this.guildName);
        };
        GuildModificationNameValidMessage.prototype.deserializeAs_GuildModificationNameValidMessage = function(input) {
            this.guildName = input.readUTF();
        };
        GuildModificationNameValidMessage.ID = 4598;
        return GuildModificationNameValidMessage;
    })(NetworkMessage);
    Protocol.GuildModificationNameValidMessage = GuildModificationNameValidMessage;
    var GuildModificationStartedMessage = (function(_super) {
        __extends(GuildModificationStartedMessage, _super);

        function GuildModificationStartedMessage() {
            this.canChangeName = false;
            this.canChangeEmblem = false;
            _super.call(this)
        }
        GuildModificationStartedMessage.prototype.getMessageId = function() {
            return GuildModificationStartedMessage.ID;
        };
        GuildModificationStartedMessage.prototype.reset = function() {
            this.canChangeName = false;
            this.canChangeEmblem = false;
        };
        GuildModificationStartedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildModificationStartedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildModificationStartedMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildModificationStartedMessage(output);
        };
        GuildModificationStartedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildModificationStartedMessage(input);
        };
        GuildModificationStartedMessage.prototype.serializeAs_GuildModificationStartedMessage = function(output) {
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.canChangeName);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.canChangeEmblem);
            output.writeByte(_box0);
        };
        GuildModificationStartedMessage.prototype.deserializeAs_GuildModificationStartedMessage = function(input) {
            this.deserializeByteBoxes(input);
        };
        GuildModificationStartedMessage.ID = 8188;
        return GuildModificationStartedMessage;
    })(NetworkMessage);
    Protocol.GuildModificationStartedMessage = GuildModificationStartedMessage;
    var GuildModificationValidMessage = (function(_super) {
        __extends(GuildModificationValidMessage, _super);

        function GuildModificationValidMessage() {
            this.guildName = "";
            this.guildEmblem = new GuildEmblem();
            _super.call(this)
        }
        GuildModificationValidMessage.prototype.getMessageId = function() {
            return GuildModificationValidMessage.ID;
        };
        GuildModificationValidMessage.prototype.reset = function() {
            this.guildName = "";
            this.guildEmblem = new GuildEmblem();
        };
        GuildModificationValidMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildModificationValidMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildModificationValidMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildModificationValidMessage(output);
        };
        GuildModificationValidMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildModificationValidMessage(input);
        };
        GuildModificationValidMessage.prototype.serializeAs_GuildModificationValidMessage = function(output) {
            output.writeUTF(this.guildName);
            this.guildEmblem.serializeAs_GuildEmblem(output);
        };
        GuildModificationValidMessage.prototype.deserializeAs_GuildModificationValidMessage = function(input) {
            this.guildName = input.readUTF();
            this.guildEmblem = new GuildEmblem();
            this.guildEmblem.deserialize(input);
        };
        GuildModificationValidMessage.ID = 9265;
        return GuildModificationValidMessage;
    })(NetworkMessage);
    Protocol.GuildModificationValidMessage = GuildModificationValidMessage;
    var GuildMotdMessage = (function(_super) {
        __extends(GuildMotdMessage, _super);

        function GuildMotdMessage() {

            _super.call(this)
        }
        GuildMotdMessage.prototype.getMessageId = function() {
            return GuildMotdMessage.ID;
        };
        GuildMotdMessage.prototype.reset = function() {

        };
        GuildMotdMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildMotdMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildMotdMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildMotdMessage(output);
        };
        GuildMotdMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildMotdMessage(input);
        };
        GuildMotdMessage.prototype.serializeAs_GuildMotdMessage = function(output) {
            _super.prototype.serializeAs_SocialNoticeMessage.call(this, output);
        };
        GuildMotdMessage.prototype.deserializeAs_GuildMotdMessage = function(input) {
            _super.prototype.deserializeAs_SocialNoticeMessage.call(this, input);
        };
        GuildMotdMessage.ID = 3362;
        return GuildMotdMessage;
    })(SocialNoticeMessage);
    Protocol.GuildMotdMessage = GuildMotdMessage;
    var GuildMotdSetErrorMessage = (function(_super) {
        __extends(GuildMotdSetErrorMessage, _super);

        function GuildMotdSetErrorMessage() {

            _super.call(this)
        }
        GuildMotdSetErrorMessage.prototype.getMessageId = function() {
            return GuildMotdSetErrorMessage.ID;
        };
        GuildMotdSetErrorMessage.prototype.reset = function() {

        };
        GuildMotdSetErrorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildMotdSetErrorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildMotdSetErrorMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildMotdSetErrorMessage(output);
        };
        GuildMotdSetErrorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildMotdSetErrorMessage(input);
        };
        GuildMotdSetErrorMessage.prototype.serializeAs_GuildMotdSetErrorMessage = function(output) {
            _super.prototype.serializeAs_SocialNoticeSetErrorMessage.call(this, output);
        };
        GuildMotdSetErrorMessage.prototype.deserializeAs_GuildMotdSetErrorMessage = function(input) {
            _super.prototype.deserializeAs_SocialNoticeSetErrorMessage.call(this, input);
        };
        GuildMotdSetErrorMessage.ID = 338;
        return GuildMotdSetErrorMessage;
    })(SocialNoticeSetErrorMessage);
    Protocol.GuildMotdSetErrorMessage = GuildMotdSetErrorMessage;
    var GuildMotdSetRequestMessage = (function(_super) {
        __extends(GuildMotdSetRequestMessage, _super);

        function GuildMotdSetRequestMessage() {
            this.content = "";
            _super.call(this)
        }
        GuildMotdSetRequestMessage.prototype.getMessageId = function() {
            return GuildMotdSetRequestMessage.ID;
        };
        GuildMotdSetRequestMessage.prototype.reset = function() {
            this.content = "";
        };
        GuildMotdSetRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildMotdSetRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildMotdSetRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildMotdSetRequestMessage(output);
        };
        GuildMotdSetRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildMotdSetRequestMessage(input);
        };
        GuildMotdSetRequestMessage.prototype.serializeAs_GuildMotdSetRequestMessage = function(output) {
            _super.prototype.serializeAs_SocialNoticeSetRequestMessage.call(this, output);
            output.writeUTF(this.content);
        };
        GuildMotdSetRequestMessage.prototype.deserializeAs_GuildMotdSetRequestMessage = function(input) {
            _super.prototype.deserializeAs_SocialNoticeSetRequestMessage.call(this, input);
            this.content = input.readUTF();
        };
        GuildMotdSetRequestMessage.ID = 9563;
        return GuildMotdSetRequestMessage;
    })(SocialNoticeSetRequestMessage);
    Protocol.GuildMotdSetRequestMessage = GuildMotdSetRequestMessage;
    var GuildPaddockBoughtMessage = (function(_super) {
        __extends(GuildPaddockBoughtMessage, _super);

        function GuildPaddockBoughtMessage() {
            this.paddockInfo = new PaddockContentInformations();
            _super.call(this)
        }
        GuildPaddockBoughtMessage.prototype.getMessageId = function() {
            return GuildPaddockBoughtMessage.ID;
        };
        GuildPaddockBoughtMessage.prototype.reset = function() {
            this.paddockInfo = new PaddockContentInformations();
        };
        GuildPaddockBoughtMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildPaddockBoughtMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildPaddockBoughtMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildPaddockBoughtMessage(output);
        };
        GuildPaddockBoughtMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildPaddockBoughtMessage(input);
        };
        GuildPaddockBoughtMessage.prototype.serializeAs_GuildPaddockBoughtMessage = function(output) {
            this.paddockInfo.serializeAs_PaddockContentInformations(output);
        };
        GuildPaddockBoughtMessage.prototype.deserializeAs_GuildPaddockBoughtMessage = function(input) {
            this.paddockInfo = new PaddockContentInformations();
            this.paddockInfo.deserialize(input);
        };
        GuildPaddockBoughtMessage.ID = 9221;
        return GuildPaddockBoughtMessage;
    })(NetworkMessage);
    Protocol.GuildPaddockBoughtMessage = GuildPaddockBoughtMessage;
    var GuildPaddockRemovedMessage = (function(_super) {
        __extends(GuildPaddockRemovedMessage, _super);

        function GuildPaddockRemovedMessage() {
            this.paddockId = 0;
            _super.call(this)
        }
        GuildPaddockRemovedMessage.prototype.getMessageId = function() {
            return GuildPaddockRemovedMessage.ID;
        };
        GuildPaddockRemovedMessage.prototype.reset = function() {
            this.paddockId = 0;
        };
        GuildPaddockRemovedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildPaddockRemovedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildPaddockRemovedMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildPaddockRemovedMessage(output);
        };
        GuildPaddockRemovedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildPaddockRemovedMessage(input);
        };
        GuildPaddockRemovedMessage.prototype.serializeAs_GuildPaddockRemovedMessage = function(output) {
            if (this.paddockId < 0 || this.paddockId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.paddockId + ") on element paddockId.");
            }
            output.writeDouble(this.paddockId);
        };
        GuildPaddockRemovedMessage.prototype.deserializeAs_GuildPaddockRemovedMessage = function(input) {
            this.paddockId = input.readDouble();
            if (this.paddockId < 0 || this.paddockId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.paddockId + ") on element of GuildPaddockRemovedMessage.paddockId.");
            }
        };
        GuildPaddockRemovedMessage.ID = 369;
        return GuildPaddockRemovedMessage;
    })(NetworkMessage);
    Protocol.GuildPaddockRemovedMessage = GuildPaddockRemovedMessage;
    var GuildPaddockTeleportRequestMessage = (function(_super) {
        __extends(GuildPaddockTeleportRequestMessage, _super);

        function GuildPaddockTeleportRequestMessage() {
            this.paddockId = 0;
            _super.call(this)
        }
        GuildPaddockTeleportRequestMessage.prototype.getMessageId = function() {
            return GuildPaddockTeleportRequestMessage.ID;
        };
        GuildPaddockTeleportRequestMessage.prototype.reset = function() {
            this.paddockId = 0;
        };
        GuildPaddockTeleportRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildPaddockTeleportRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildPaddockTeleportRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildPaddockTeleportRequestMessage(output);
        };
        GuildPaddockTeleportRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildPaddockTeleportRequestMessage(input);
        };
        GuildPaddockTeleportRequestMessage.prototype.serializeAs_GuildPaddockTeleportRequestMessage = function(output) {
            if (this.paddockId < 0 || this.paddockId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.paddockId + ") on element paddockId.");
            }
            output.writeDouble(this.paddockId);
        };
        GuildPaddockTeleportRequestMessage.prototype.deserializeAs_GuildPaddockTeleportRequestMessage = function(input) {
            this.paddockId = input.readDouble();
            if (this.paddockId < 0 || this.paddockId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.paddockId + ") on element of GuildPaddockTeleportRequestMessage.paddockId.");
            }
        };
        GuildPaddockTeleportRequestMessage.ID = 6284;
        return GuildPaddockTeleportRequestMessage;
    })(NetworkMessage);
    Protocol.GuildPaddockTeleportRequestMessage = GuildPaddockTeleportRequestMessage;
    var GuildSpellUpgradeRequestMessage = (function(_super) {
        __extends(GuildSpellUpgradeRequestMessage, _super);

        function GuildSpellUpgradeRequestMessage() {
            this.spellId = 0;
            _super.call(this)
        }
        GuildSpellUpgradeRequestMessage.prototype.getMessageId = function() {
            return GuildSpellUpgradeRequestMessage.ID;
        };
        GuildSpellUpgradeRequestMessage.prototype.reset = function() {
            this.spellId = 0;
        };
        GuildSpellUpgradeRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildSpellUpgradeRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildSpellUpgradeRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildSpellUpgradeRequestMessage(output);
        };
        GuildSpellUpgradeRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildSpellUpgradeRequestMessage(input);
        };
        GuildSpellUpgradeRequestMessage.prototype.serializeAs_GuildSpellUpgradeRequestMessage = function(output) {
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
            }
            output.writeInt(this.spellId);
        };
        GuildSpellUpgradeRequestMessage.prototype.deserializeAs_GuildSpellUpgradeRequestMessage = function(input) {
            this.spellId = input.readInt();
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element of GuildSpellUpgradeRequestMessage.spellId.");
            }
        };
        GuildSpellUpgradeRequestMessage.ID = 7668;
        return GuildSpellUpgradeRequestMessage;
    })(NetworkMessage);
    Protocol.GuildSpellUpgradeRequestMessage = GuildSpellUpgradeRequestMessage;
    var GuildVersatileInfoListMessage = (function(_super) {
        __extends(GuildVersatileInfoListMessage, _super);

        function GuildVersatileInfoListMessage() {
            this.guilds = [];
            _super.call(this)
        }
        GuildVersatileInfoListMessage.prototype.getMessageId = function() {
            return GuildVersatileInfoListMessage.ID;
        };
        GuildVersatileInfoListMessage.prototype.reset = function() {
            this.guilds = [];
        };
        GuildVersatileInfoListMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildVersatileInfoListMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildVersatileInfoListMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildVersatileInfoListMessage(output);
        };
        GuildVersatileInfoListMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildVersatileInfoListMessage(input);
        };
        GuildVersatileInfoListMessage.prototype.serializeAs_GuildVersatileInfoListMessage = function(output) {
            output.writeShort(this.guilds.length);
            for (var _i1 = 0; _i1 < this.guilds.length; _i1++) {
                output.writeShort((this.guilds[_i1]).getTypeId());
                (this.guilds[_i1]).serialize(output);
            }
        };
        GuildVersatileInfoListMessage.prototype.deserializeAs_GuildVersatileInfoListMessage = function(input) {
            var _id1 = 0;
            var _item1 = null;
            var _guildsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _guildsLen; _i1++) {
                _id1 = input.readUnsignedShort();
                _item1 = ProtocolTypeManager.getInstance(GuildVersatileInformations, _id1);
                _item1.deserialize(input);
                this.guilds.push(_item1);
            }
        };
        GuildVersatileInfoListMessage.ID = 7241;
        return GuildVersatileInfoListMessage;
    })(NetworkMessage);
    Protocol.GuildVersatileInfoListMessage = GuildVersatileInfoListMessage;
    var AbstractTaxCollectorListMessage = (function(_super) {
        __extends(AbstractTaxCollectorListMessage, _super);

        function AbstractTaxCollectorListMessage() {
            this.informations = [];
            _super.call(this)
        }
        AbstractTaxCollectorListMessage.prototype.getMessageId = function() {
            return AbstractTaxCollectorListMessage.ID;
        };
        AbstractTaxCollectorListMessage.prototype.reset = function() {
            this.informations = [];
        };
        AbstractTaxCollectorListMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AbstractTaxCollectorListMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AbstractTaxCollectorListMessage.prototype.serialize = function(output) {
            this.serializeAs_AbstractTaxCollectorListMessage(output);
        };
        AbstractTaxCollectorListMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AbstractTaxCollectorListMessage(input);
        };
        AbstractTaxCollectorListMessage.prototype.serializeAs_AbstractTaxCollectorListMessage = function(output) {
            output.writeShort(this.informations.length);
            for (var _i1 = 0; _i1 < this.informations.length; _i1++) {
                output.writeShort((this.informations[_i1]).getTypeId());
                (this.informations[_i1]).serialize(output);
            }
        };
        AbstractTaxCollectorListMessage.prototype.deserializeAs_AbstractTaxCollectorListMessage = function(input) {
            var _id1 = 0;
            var _item1 = null;
            var _informationsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _informationsLen; _i1++) {
                _id1 = input.readUnsignedShort();
                _item1 = ProtocolTypeManager.getInstance(TaxCollectorInformations, _id1);
                _item1.deserialize(input);
                this.informations.push(_item1);
            }
        };
        AbstractTaxCollectorListMessage.ID = 1653;
        return AbstractTaxCollectorListMessage;
    })(NetworkMessage);
    Protocol.AbstractTaxCollectorListMessage = AbstractTaxCollectorListMessage;
    var GameRolePlayTaxCollectorFightRequestMessage = (function(_super) {
        __extends(GameRolePlayTaxCollectorFightRequestMessage, _super);

        function GameRolePlayTaxCollectorFightRequestMessage() {

            _super.call(this)
        }
        GameRolePlayTaxCollectorFightRequestMessage.prototype.getMessageId = function() {
            return GameRolePlayTaxCollectorFightRequestMessage.ID;
        };
        GameRolePlayTaxCollectorFightRequestMessage.prototype.reset = function() {

        };
        GameRolePlayTaxCollectorFightRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GameRolePlayTaxCollectorFightRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GameRolePlayTaxCollectorFightRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_GameRolePlayTaxCollectorFightRequestMessage(output);
        };
        GameRolePlayTaxCollectorFightRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GameRolePlayTaxCollectorFightRequestMessage(input);
        };
        GameRolePlayTaxCollectorFightRequestMessage.prototype.serializeAs_GameRolePlayTaxCollectorFightRequestMessage = function(output) {

        };
        GameRolePlayTaxCollectorFightRequestMessage.prototype.deserializeAs_GameRolePlayTaxCollectorFightRequestMessage = function(input) {

        };
        GameRolePlayTaxCollectorFightRequestMessage.ID = 7175;
        return GameRolePlayTaxCollectorFightRequestMessage;
    })(NetworkMessage);
    Protocol.GameRolePlayTaxCollectorFightRequestMessage = GameRolePlayTaxCollectorFightRequestMessage;
    var GuildFightJoinRequestMessage = (function(_super) {
        __extends(GuildFightJoinRequestMessage, _super);

        function GuildFightJoinRequestMessage() {
            this.taxCollectorId = 0;
            _super.call(this)
        }
        GuildFightJoinRequestMessage.prototype.getMessageId = function() {
            return GuildFightJoinRequestMessage.ID;
        };
        GuildFightJoinRequestMessage.prototype.reset = function() {
            this.taxCollectorId = 0;
        };
        GuildFightJoinRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildFightJoinRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildFightJoinRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildFightJoinRequestMessage(output);
        };
        GuildFightJoinRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildFightJoinRequestMessage(input);
        };
        GuildFightJoinRequestMessage.prototype.serializeAs_GuildFightJoinRequestMessage = function(output) {
            if (this.taxCollectorId < 0 || this.taxCollectorId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.taxCollectorId + ") on element taxCollectorId.");
            }
            output.writeDouble(this.taxCollectorId);
        };
        GuildFightJoinRequestMessage.prototype.deserializeAs_GuildFightJoinRequestMessage = function(input) {
            this.taxCollectorId = input.readDouble();
            if (this.taxCollectorId < 0 || this.taxCollectorId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.taxCollectorId + ") on element of GuildFightJoinRequestMessage.taxCollectorId.");
            }
        };
        GuildFightJoinRequestMessage.ID = 7195;
        return GuildFightJoinRequestMessage;
    })(NetworkMessage);
    Protocol.GuildFightJoinRequestMessage = GuildFightJoinRequestMessage;
    var GuildFightLeaveRequestMessage = (function(_super) {
        __extends(GuildFightLeaveRequestMessage, _super);

        function GuildFightLeaveRequestMessage() {
            this.taxCollectorId = 0;
            this.characterId = 0;
            _super.call(this)
        }
        GuildFightLeaveRequestMessage.prototype.getMessageId = function() {
            return GuildFightLeaveRequestMessage.ID;
        };
        GuildFightLeaveRequestMessage.prototype.reset = function() {
            this.taxCollectorId = 0;
            this.characterId = 0;
        };
        GuildFightLeaveRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildFightLeaveRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildFightLeaveRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildFightLeaveRequestMessage(output);
        };
        GuildFightLeaveRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildFightLeaveRequestMessage(input);
        };
        GuildFightLeaveRequestMessage.prototype.serializeAs_GuildFightLeaveRequestMessage = function(output) {
            if (this.taxCollectorId < 0 || this.taxCollectorId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.taxCollectorId + ") on element taxCollectorId.");
            }
            output.writeDouble(this.taxCollectorId);
            if (this.characterId < 0 || this.characterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.characterId + ") on element characterId.");
            }
            output.writeVarLong(this.characterId);
        };
        GuildFightLeaveRequestMessage.prototype.deserializeAs_GuildFightLeaveRequestMessage = function(input) {
            this.taxCollectorId = input.readDouble();
            if (this.taxCollectorId < 0 || this.taxCollectorId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.taxCollectorId + ") on element of GuildFightLeaveRequestMessage.taxCollectorId.");
            }
            this.characterId = input.readVarUhLong();
            if (this.characterId < 0 || this.characterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.characterId + ") on element of GuildFightLeaveRequestMessage.characterId.");
            }
        };
        GuildFightLeaveRequestMessage.ID = 1328;
        return GuildFightLeaveRequestMessage;
    })(NetworkMessage);
    Protocol.GuildFightLeaveRequestMessage = GuildFightLeaveRequestMessage;
    var GuildFightPlayersEnemiesListMessage = (function(_super) {
        __extends(GuildFightPlayersEnemiesListMessage, _super);

        function GuildFightPlayersEnemiesListMessage() {
            this.fightId = 0;
            this.playerInfo = [];
            _super.call(this)
        }
        GuildFightPlayersEnemiesListMessage.prototype.getMessageId = function() {
            return GuildFightPlayersEnemiesListMessage.ID;
        };
        GuildFightPlayersEnemiesListMessage.prototype.reset = function() {
            this.fightId = 0;
            this.playerInfo = [];
        };
        GuildFightPlayersEnemiesListMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildFightPlayersEnemiesListMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildFightPlayersEnemiesListMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildFightPlayersEnemiesListMessage(output);
        };
        GuildFightPlayersEnemiesListMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildFightPlayersEnemiesListMessage(input);
        };
        GuildFightPlayersEnemiesListMessage.prototype.serializeAs_GuildFightPlayersEnemiesListMessage = function(output) {
            if (this.fightId < 0 || this.fightId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeDouble(this.fightId);
            output.writeShort(this.playerInfo.length);
            for (var _i2 = 0; _i2 < this.playerInfo.length; _i2++) {
                (this.playerInfo[_i2]).serializeAs_CharacterMinimalPlusLookInformations(output);
            }
        };
        GuildFightPlayersEnemiesListMessage.prototype.deserializeAs_GuildFightPlayersEnemiesListMessage = function(input) {
            var _item2 = null;
            this.fightId = input.readDouble();
            if (this.fightId < 0 || this.fightId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of GuildFightPlayersEnemiesListMessage.fightId.");
            }
            var _playerInfoLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _playerInfoLen; _i2++) {
                _item2 = new CharacterMinimalPlusLookInformations();
                _item2.deserialize(input);
                this.playerInfo.push(_item2);
            }
        };
        GuildFightPlayersEnemiesListMessage.ID = 2079;
        return GuildFightPlayersEnemiesListMessage;
    })(NetworkMessage);
    Protocol.GuildFightPlayersEnemiesListMessage = GuildFightPlayersEnemiesListMessage;
    var GuildFightPlayersEnemyRemoveMessage = (function(_super) {
        __extends(GuildFightPlayersEnemyRemoveMessage, _super);

        function GuildFightPlayersEnemyRemoveMessage() {
            this.fightId = 0;
            this.playerId = 0;
            _super.call(this)
        }
        GuildFightPlayersEnemyRemoveMessage.prototype.getMessageId = function() {
            return GuildFightPlayersEnemyRemoveMessage.ID;
        };
        GuildFightPlayersEnemyRemoveMessage.prototype.reset = function() {
            this.fightId = 0;
            this.playerId = 0;
        };
        GuildFightPlayersEnemyRemoveMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildFightPlayersEnemyRemoveMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildFightPlayersEnemyRemoveMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildFightPlayersEnemyRemoveMessage(output);
        };
        GuildFightPlayersEnemyRemoveMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildFightPlayersEnemyRemoveMessage(input);
        };
        GuildFightPlayersEnemyRemoveMessage.prototype.serializeAs_GuildFightPlayersEnemyRemoveMessage = function(output) {
            if (this.fightId < 0 || this.fightId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeDouble(this.fightId);
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
        };
        GuildFightPlayersEnemyRemoveMessage.prototype.deserializeAs_GuildFightPlayersEnemyRemoveMessage = function(input) {
            this.fightId = input.readDouble();
            if (this.fightId < 0 || this.fightId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of GuildFightPlayersEnemyRemoveMessage.fightId.");
            }
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of GuildFightPlayersEnemyRemoveMessage.playerId.");
            }
        };
        GuildFightPlayersEnemyRemoveMessage.ID = 9096;
        return GuildFightPlayersEnemyRemoveMessage;
    })(NetworkMessage);
    Protocol.GuildFightPlayersEnemyRemoveMessage = GuildFightPlayersEnemyRemoveMessage;
    var GuildFightPlayersHelpersJoinMessage = (function(_super) {
        __extends(GuildFightPlayersHelpersJoinMessage, _super);

        function GuildFightPlayersHelpersJoinMessage() {
            this.fightId = 0;
            this.playerInfo = new CharacterMinimalPlusLookInformations();
            _super.call(this)
        }
        GuildFightPlayersHelpersJoinMessage.prototype.getMessageId = function() {
            return GuildFightPlayersHelpersJoinMessage.ID;
        };
        GuildFightPlayersHelpersJoinMessage.prototype.reset = function() {
            this.fightId = 0;
            this.playerInfo = new CharacterMinimalPlusLookInformations();
        };
        GuildFightPlayersHelpersJoinMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildFightPlayersHelpersJoinMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildFightPlayersHelpersJoinMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildFightPlayersHelpersJoinMessage(output);
        };
        GuildFightPlayersHelpersJoinMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildFightPlayersHelpersJoinMessage(input);
        };
        GuildFightPlayersHelpersJoinMessage.prototype.serializeAs_GuildFightPlayersHelpersJoinMessage = function(output) {
            if (this.fightId < 0 || this.fightId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeDouble(this.fightId);
            this.playerInfo.serializeAs_CharacterMinimalPlusLookInformations(output);
        };
        GuildFightPlayersHelpersJoinMessage.prototype.deserializeAs_GuildFightPlayersHelpersJoinMessage = function(input) {
            this.fightId = input.readDouble();
            if (this.fightId < 0 || this.fightId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of GuildFightPlayersHelpersJoinMessage.fightId.");
            }
            this.playerInfo = new CharacterMinimalPlusLookInformations();
            this.playerInfo.deserialize(input);
        };
        GuildFightPlayersHelpersJoinMessage.ID = 5722;
        return GuildFightPlayersHelpersJoinMessage;
    })(NetworkMessage);
    Protocol.GuildFightPlayersHelpersJoinMessage = GuildFightPlayersHelpersJoinMessage;
    var GuildFightPlayersHelpersLeaveMessage = (function(_super) {
        __extends(GuildFightPlayersHelpersLeaveMessage, _super);

        function GuildFightPlayersHelpersLeaveMessage() {
            this.fightId = 0;
            this.playerId = 0;
            _super.call(this)
        }
        GuildFightPlayersHelpersLeaveMessage.prototype.getMessageId = function() {
            return GuildFightPlayersHelpersLeaveMessage.ID;
        };
        GuildFightPlayersHelpersLeaveMessage.prototype.reset = function() {
            this.fightId = 0;
            this.playerId = 0;
        };
        GuildFightPlayersHelpersLeaveMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildFightPlayersHelpersLeaveMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildFightPlayersHelpersLeaveMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildFightPlayersHelpersLeaveMessage(output);
        };
        GuildFightPlayersHelpersLeaveMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildFightPlayersHelpersLeaveMessage(input);
        };
        GuildFightPlayersHelpersLeaveMessage.prototype.serializeAs_GuildFightPlayersHelpersLeaveMessage = function(output) {
            if (this.fightId < 0 || this.fightId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeDouble(this.fightId);
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
        };
        GuildFightPlayersHelpersLeaveMessage.prototype.deserializeAs_GuildFightPlayersHelpersLeaveMessage = function(input) {
            this.fightId = input.readDouble();
            if (this.fightId < 0 || this.fightId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of GuildFightPlayersHelpersLeaveMessage.fightId.");
            }
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of GuildFightPlayersHelpersLeaveMessage.playerId.");
            }
        };
        GuildFightPlayersHelpersLeaveMessage.ID = 6675;
        return GuildFightPlayersHelpersLeaveMessage;
    })(NetworkMessage);
    Protocol.GuildFightPlayersHelpersLeaveMessage = GuildFightPlayersHelpersLeaveMessage;
    var GuildFightTakePlaceRequestMessage = (function(_super) {
        __extends(GuildFightTakePlaceRequestMessage, _super);

        function GuildFightTakePlaceRequestMessage() {
            this.replacedCharacterId = 0;
            _super.call(this)
        }
        GuildFightTakePlaceRequestMessage.prototype.getMessageId = function() {
            return GuildFightTakePlaceRequestMessage.ID;
        };
        GuildFightTakePlaceRequestMessage.prototype.reset = function() {
            this.replacedCharacterId = 0;
        };
        GuildFightTakePlaceRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GuildFightTakePlaceRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GuildFightTakePlaceRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_GuildFightTakePlaceRequestMessage(output);
        };
        GuildFightTakePlaceRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GuildFightTakePlaceRequestMessage(input);
        };
        GuildFightTakePlaceRequestMessage.prototype.serializeAs_GuildFightTakePlaceRequestMessage = function(output) {
            _super.prototype.serializeAs_GuildFightJoinRequestMessage.call(this, output);
            output.writeInt(this.replacedCharacterId);
        };
        GuildFightTakePlaceRequestMessage.prototype.deserializeAs_GuildFightTakePlaceRequestMessage = function(input) {
            _super.prototype.deserializeAs_GuildFightJoinRequestMessage.call(this, input);
            this.replacedCharacterId = input.readInt();
        };
        GuildFightTakePlaceRequestMessage.ID = 2027;
        return GuildFightTakePlaceRequestMessage;
    })(GuildFightJoinRequestMessage);
    Protocol.GuildFightTakePlaceRequestMessage = GuildFightTakePlaceRequestMessage;
    var TaxCollectorAttackedMessage = (function(_super) {
        __extends(TaxCollectorAttackedMessage, _super);

        function TaxCollectorAttackedMessage() {
            this.firstNameId = 0;
            this.lastNameId = 0;
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.guild = new BasicGuildInformations();
            _super.call(this)
        }
        TaxCollectorAttackedMessage.prototype.getMessageId = function() {
            return TaxCollectorAttackedMessage.ID;
        };
        TaxCollectorAttackedMessage.prototype.reset = function() {
            this.firstNameId = 0;
            this.lastNameId = 0;
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.guild = new BasicGuildInformations();
        };
        TaxCollectorAttackedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TaxCollectorAttackedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TaxCollectorAttackedMessage.prototype.serialize = function(output) {
            this.serializeAs_TaxCollectorAttackedMessage(output);
        };
        TaxCollectorAttackedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TaxCollectorAttackedMessage(input);
        };
        TaxCollectorAttackedMessage.prototype.serializeAs_TaxCollectorAttackedMessage = function(output) {
            if (this.firstNameId < 0) {
                throw new Error("Forbidden value (" + this.firstNameId + ") on element firstNameId.");
            }
            output.writeVarShort(this.firstNameId);
            if (this.lastNameId < 0) {
                throw new Error("Forbidden value (" + this.lastNameId + ") on element lastNameId.");
            }
            output.writeVarShort(this.lastNameId);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
            }
            output.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
            }
            output.writeShort(this.worldY);
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
            this.guild.serializeAs_BasicGuildInformations(output);
        };
        TaxCollectorAttackedMessage.prototype.deserializeAs_TaxCollectorAttackedMessage = function(input) {
            this.firstNameId = input.readVarUhShort();
            if (this.firstNameId < 0) {
                throw new Error("Forbidden value (" + this.firstNameId + ") on element of TaxCollectorAttackedMessage.firstNameId.");
            }
            this.lastNameId = input.readVarUhShort();
            if (this.lastNameId < 0) {
                throw new Error("Forbidden value (" + this.lastNameId + ") on element of TaxCollectorAttackedMessage.lastNameId.");
            }
            this.worldX = input.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element of TaxCollectorAttackedMessage.worldX.");
            }
            this.worldY = input.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element of TaxCollectorAttackedMessage.worldY.");
            }
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of TaxCollectorAttackedMessage.mapId.");
            }
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of TaxCollectorAttackedMessage.subAreaId.");
            }
            this.guild = new BasicGuildInformations();
            this.guild.deserialize(input);
        };
        TaxCollectorAttackedMessage.ID = 5749;
        return TaxCollectorAttackedMessage;
    })(NetworkMessage);
    Protocol.TaxCollectorAttackedMessage = TaxCollectorAttackedMessage;
    var TaxCollectorAttackedResultMessage = (function(_super) {
        __extends(TaxCollectorAttackedResultMessage, _super);

        function TaxCollectorAttackedResultMessage() {
            this.deadOrAlive = false;
            this.basicInfos = new TaxCollectorBasicInformations();
            this.guild = new BasicGuildInformations();
            _super.call(this)
        }
        TaxCollectorAttackedResultMessage.prototype.getMessageId = function() {
            return TaxCollectorAttackedResultMessage.ID;
        };
        TaxCollectorAttackedResultMessage.prototype.reset = function() {
            this.deadOrAlive = false;
            this.basicInfos = new TaxCollectorBasicInformations();
            this.guild = new BasicGuildInformations();
        };
        TaxCollectorAttackedResultMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TaxCollectorAttackedResultMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TaxCollectorAttackedResultMessage.prototype.serialize = function(output) {
            this.serializeAs_TaxCollectorAttackedResultMessage(output);
        };
        TaxCollectorAttackedResultMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TaxCollectorAttackedResultMessage(input);
        };
        TaxCollectorAttackedResultMessage.prototype.serializeAs_TaxCollectorAttackedResultMessage = function(output) {
            output.writeBoolean(this.deadOrAlive);
            this.basicInfos.serializeAs_TaxCollectorBasicInformations(output);
            this.guild.serializeAs_BasicGuildInformations(output);
        };
        TaxCollectorAttackedResultMessage.prototype.deserializeAs_TaxCollectorAttackedResultMessage = function(input) {
            this.deadOrAlive = input.readBoolean();
            this.basicInfos = new TaxCollectorBasicInformations();
            this.basicInfos.deserialize(input);
            this.guild = new BasicGuildInformations();
            this.guild.deserialize(input);
        };
        TaxCollectorAttackedResultMessage.ID = 1261;
        return TaxCollectorAttackedResultMessage;
    })(NetworkMessage);
    Protocol.TaxCollectorAttackedResultMessage = TaxCollectorAttackedResultMessage;
    var TaxCollectorErrorMessage = (function(_super) {
        __extends(TaxCollectorErrorMessage, _super);

        function TaxCollectorErrorMessage() {
            this.reason = 0;
            _super.call(this)
        }
        TaxCollectorErrorMessage.prototype.getMessageId = function() {
            return TaxCollectorErrorMessage.ID;
        };
        TaxCollectorErrorMessage.prototype.reset = function() {
            this.reason = 0;
        };
        TaxCollectorErrorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TaxCollectorErrorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TaxCollectorErrorMessage.prototype.serialize = function(output) {
            this.serializeAs_TaxCollectorErrorMessage(output);
        };
        TaxCollectorErrorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TaxCollectorErrorMessage(input);
        };
        TaxCollectorErrorMessage.prototype.serializeAs_TaxCollectorErrorMessage = function(output) {
            output.writeByte(this.reason);
        };
        TaxCollectorErrorMessage.prototype.deserializeAs_TaxCollectorErrorMessage = function(input) {
            this.reason = input.readByte();
        };
        TaxCollectorErrorMessage.ID = 8117;
        return TaxCollectorErrorMessage;
    })(NetworkMessage);
    Protocol.TaxCollectorErrorMessage = TaxCollectorErrorMessage;
    var TaxCollectorListMessage = (function(_super) {
        __extends(TaxCollectorListMessage, _super);

        function TaxCollectorListMessage() {
            this.nbcollectorMax = 0;
            this.fightersInformations = [];
            this.infoType = 0;
            _super.call(this)
        }
        TaxCollectorListMessage.prototype.getMessageId = function() {
            return TaxCollectorListMessage.ID;
        };
        TaxCollectorListMessage.prototype.reset = function() {
            this.nbcollectorMax = 0;
            this.fightersInformations = [];
            this.infoType = 0;
        };
        TaxCollectorListMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TaxCollectorListMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TaxCollectorListMessage.prototype.serialize = function(output) {
            this.serializeAs_TaxCollectorListMessage(output);
        };
        TaxCollectorListMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TaxCollectorListMessage(input);
        };
        TaxCollectorListMessage.prototype.serializeAs_TaxCollectorListMessage = function(output) {
            _super.prototype.serializeAs_AbstractTaxCollectorListMessage.call(this, output);
            if (this.nbcollectorMax < 0) {
                throw new Error("Forbidden value (" + this.nbcollectorMax + ") on element nbcollectorMax.");
            }
            output.writeByte(this.nbcollectorMax);
            output.writeShort(this.fightersInformations.length);
            for (var _i2 = 0; _i2 < this.fightersInformations.length; _i2++) {
                (this.fightersInformations[_i2]).serializeAs_TaxCollectorFightersInformation(output);
            }
            output.writeByte(this.infoType);
        };
        TaxCollectorListMessage.prototype.deserializeAs_TaxCollectorListMessage = function(input) {
            var _item2 = null;
            _super.prototype.deserializeAs_AbstractTaxCollectorListMessage.call(this, input);
            this.nbcollectorMax = input.readByte();
            if (this.nbcollectorMax < 0) {
                throw new Error("Forbidden value (" + this.nbcollectorMax + ") on element of TaxCollectorListMessage.nbcollectorMax.");
            }
            var _fightersInformationsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _fightersInformationsLen; _i2++) {
                _item2 = new TaxCollectorFightersInformation();
                _item2.deserialize(input);
                this.fightersInformations.push(_item2);
            }
            this.infoType = input.readByte();
            if (this.infoType < 0) {
                throw new Error("Forbidden value (" + this.infoType + ") on element of TaxCollectorListMessage.infoType.");
            }
        };
        TaxCollectorListMessage.ID = 6709;
        return TaxCollectorListMessage;
    })(AbstractTaxCollectorListMessage);
    Protocol.TaxCollectorListMessage = TaxCollectorListMessage;
    var TaxCollectorMovementAddMessage = (function(_super) {
        __extends(TaxCollectorMovementAddMessage, _super);

        function TaxCollectorMovementAddMessage() {
            this.informations = new TaxCollectorInformations();
            _super.call(this)
        }
        TaxCollectorMovementAddMessage.prototype.getMessageId = function() {
            return TaxCollectorMovementAddMessage.ID;
        };
        TaxCollectorMovementAddMessage.prototype.reset = function() {
            this.informations = new TaxCollectorInformations();
        };
        TaxCollectorMovementAddMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TaxCollectorMovementAddMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TaxCollectorMovementAddMessage.prototype.serialize = function(output) {
            this.serializeAs_TaxCollectorMovementAddMessage(output);
        };
        TaxCollectorMovementAddMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TaxCollectorMovementAddMessage(input);
        };
        TaxCollectorMovementAddMessage.prototype.serializeAs_TaxCollectorMovementAddMessage = function(output) {
            output.writeShort(this.informations.getTypeId());
            this.informations.serialize(output);
        };
        TaxCollectorMovementAddMessage.prototype.deserializeAs_TaxCollectorMovementAddMessage = function(input) {
            var _id1 = input.readUnsignedShort();
            this.informations = ProtocolTypeManager.getInstance(TaxCollectorInformations, _id1);
            this.informations.deserialize(input);
        };
        TaxCollectorMovementAddMessage.ID = 3252;
        return TaxCollectorMovementAddMessage;
    })(NetworkMessage);
    Protocol.TaxCollectorMovementAddMessage = TaxCollectorMovementAddMessage;
    var TaxCollectorMovementMessage = (function(_super) {
        __extends(TaxCollectorMovementMessage, _super);

        function TaxCollectorMovementMessage() {
            this.movementType = 0;
            this.basicInfos = new TaxCollectorBasicInformations();
            this.playerId = 0;
            this.playerName = "";
            _super.call(this)
        }
        TaxCollectorMovementMessage.prototype.getMessageId = function() {
            return TaxCollectorMovementMessage.ID;
        };
        TaxCollectorMovementMessage.prototype.reset = function() {
            this.movementType = 0;
            this.basicInfos = new TaxCollectorBasicInformations();
            this.playerId = 0;
            this.playerName = "";
        };
        TaxCollectorMovementMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TaxCollectorMovementMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TaxCollectorMovementMessage.prototype.serialize = function(output) {
            this.serializeAs_TaxCollectorMovementMessage(output);
        };
        TaxCollectorMovementMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TaxCollectorMovementMessage(input);
        };
        TaxCollectorMovementMessage.prototype.serializeAs_TaxCollectorMovementMessage = function(output) {
            output.writeByte(this.movementType);
            this.basicInfos.serializeAs_TaxCollectorBasicInformations(output);
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
            output.writeUTF(this.playerName);
        };
        TaxCollectorMovementMessage.prototype.deserializeAs_TaxCollectorMovementMessage = function(input) {
            this.movementType = input.readByte();
            if (this.movementType < 0) {
                throw new Error("Forbidden value (" + this.movementType + ") on element of TaxCollectorMovementMessage.movementType.");
            }
            this.basicInfos = new TaxCollectorBasicInformations();
            this.basicInfos.deserialize(input);
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of TaxCollectorMovementMessage.playerId.");
            }
            this.playerName = input.readUTF();
        };
        TaxCollectorMovementMessage.ID = 5525;
        return TaxCollectorMovementMessage;
    })(NetworkMessage);
    Protocol.TaxCollectorMovementMessage = TaxCollectorMovementMessage;
    var TaxCollectorMovementRemoveMessage = (function(_super) {
        __extends(TaxCollectorMovementRemoveMessage, _super);

        function TaxCollectorMovementRemoveMessage() {
            this.collectorId = 0;
            _super.call(this)
        }
        TaxCollectorMovementRemoveMessage.prototype.getMessageId = function() {
            return TaxCollectorMovementRemoveMessage.ID;
        };
        TaxCollectorMovementRemoveMessage.prototype.reset = function() {
            this.collectorId = 0;
        };
        TaxCollectorMovementRemoveMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TaxCollectorMovementRemoveMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TaxCollectorMovementRemoveMessage.prototype.serialize = function(output) {
            this.serializeAs_TaxCollectorMovementRemoveMessage(output);
        };
        TaxCollectorMovementRemoveMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TaxCollectorMovementRemoveMessage(input);
        };
        TaxCollectorMovementRemoveMessage.prototype.serializeAs_TaxCollectorMovementRemoveMessage = function(output) {
            if (this.collectorId < 0 || this.collectorId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.collectorId + ") on element collectorId.");
            }
            output.writeDouble(this.collectorId);
        };
        TaxCollectorMovementRemoveMessage.prototype.deserializeAs_TaxCollectorMovementRemoveMessage = function(input) {
            this.collectorId = input.readDouble();
            if (this.collectorId < 0 || this.collectorId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.collectorId + ") on element of TaxCollectorMovementRemoveMessage.collectorId.");
            }
        };
        TaxCollectorMovementRemoveMessage.ID = 9648;
        return TaxCollectorMovementRemoveMessage;
    })(NetworkMessage);
    Protocol.TaxCollectorMovementRemoveMessage = TaxCollectorMovementRemoveMessage;
    var TaxCollectorMovementsOfflineMessage = (function(_super) {
        __extends(TaxCollectorMovementsOfflineMessage, _super);

        function TaxCollectorMovementsOfflineMessage() {
            this.movements = [];
            _super.call(this)
        }
        TaxCollectorMovementsOfflineMessage.prototype.getMessageId = function() {
            return TaxCollectorMovementsOfflineMessage.ID;
        };
        TaxCollectorMovementsOfflineMessage.prototype.reset = function() {
            this.movements = [];
        };
        TaxCollectorMovementsOfflineMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TaxCollectorMovementsOfflineMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TaxCollectorMovementsOfflineMessage.prototype.serialize = function(output) {
            this.serializeAs_TaxCollectorMovementsOfflineMessage(output);
        };
        TaxCollectorMovementsOfflineMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TaxCollectorMovementsOfflineMessage(input);
        };
        TaxCollectorMovementsOfflineMessage.prototype.serializeAs_TaxCollectorMovementsOfflineMessage = function(output) {
            output.writeShort(this.movements.length);
            for (var _i1 = 0; _i1 < this.movements.length; _i1++) {
                (this.movements[_i1]).serializeAs_TaxCollectorMovement(output);
            }
        };
        TaxCollectorMovementsOfflineMessage.prototype.deserializeAs_TaxCollectorMovementsOfflineMessage = function(input) {
            var _item1 = null;
            var _movementsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _movementsLen; _i1++) {
                _item1 = new TaxCollectorMovement();
                _item1.deserialize(input);
                this.movements.push(_item1);
            }
        };
        TaxCollectorMovementsOfflineMessage.ID = 3995;
        return TaxCollectorMovementsOfflineMessage;
    })(NetworkMessage);
    Protocol.TaxCollectorMovementsOfflineMessage = TaxCollectorMovementsOfflineMessage;
    var TaxCollectorStateUpdateMessage = (function(_super) {
        __extends(TaxCollectorStateUpdateMessage, _super);

        function TaxCollectorStateUpdateMessage() {
            this.uniqueId = 0;
            this.state = 0;
            _super.call(this)
        }
        TaxCollectorStateUpdateMessage.prototype.getMessageId = function() {
            return TaxCollectorStateUpdateMessage.ID;
        };
        TaxCollectorStateUpdateMessage.prototype.reset = function() {
            this.uniqueId = 0;
            this.state = 0;
        };
        TaxCollectorStateUpdateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TaxCollectorStateUpdateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TaxCollectorStateUpdateMessage.prototype.serialize = function(output) {
            this.serializeAs_TaxCollectorStateUpdateMessage(output);
        };
        TaxCollectorStateUpdateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TaxCollectorStateUpdateMessage(input);
        };
        TaxCollectorStateUpdateMessage.prototype.serializeAs_TaxCollectorStateUpdateMessage = function(output) {
            if (this.uniqueId < 0 || this.uniqueId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.uniqueId + ") on element uniqueId.");
            }
            output.writeDouble(this.uniqueId);
            output.writeByte(this.state);
        };
        TaxCollectorStateUpdateMessage.prototype.deserializeAs_TaxCollectorStateUpdateMessage = function(input) {
            this.uniqueId = input.readDouble();
            if (this.uniqueId < 0 || this.uniqueId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.uniqueId + ") on element of TaxCollectorStateUpdateMessage.uniqueId.");
            }
            this.state = input.readByte();
        };
        TaxCollectorStateUpdateMessage.ID = 8589;
        return TaxCollectorStateUpdateMessage;
    })(NetworkMessage);
    Protocol.TaxCollectorStateUpdateMessage = TaxCollectorStateUpdateMessage;
    var TopTaxCollectorListMessage = (function(_super) {
        __extends(TopTaxCollectorListMessage, _super);

        function TopTaxCollectorListMessage() {
            this.isDungeon = false;
            _super.call(this)
        }
        TopTaxCollectorListMessage.prototype.getMessageId = function() {
            return TopTaxCollectorListMessage.ID;
        };
        TopTaxCollectorListMessage.prototype.reset = function() {
            this.isDungeon = false;
        };
        TopTaxCollectorListMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TopTaxCollectorListMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TopTaxCollectorListMessage.prototype.serialize = function(output) {
            this.serializeAs_TopTaxCollectorListMessage(output);
        };
        TopTaxCollectorListMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TopTaxCollectorListMessage(input);
        };
        TopTaxCollectorListMessage.prototype.serializeAs_TopTaxCollectorListMessage = function(output) {
            _super.prototype.serializeAs_AbstractTaxCollectorListMessage.call(this, output);
            output.writeBoolean(this.isDungeon);
        };
        TopTaxCollectorListMessage.prototype.deserializeAs_TopTaxCollectorListMessage = function(input) {
            _super.prototype.deserializeAs_AbstractTaxCollectorListMessage.call(this, input);
            this.isDungeon = input.readBoolean();
        };
        TopTaxCollectorListMessage.ID = 1779;
        return TopTaxCollectorListMessage;
    })(AbstractTaxCollectorListMessage);
    Protocol.TopTaxCollectorListMessage = TopTaxCollectorListMessage;
    var HouseTeleportRequestMessage = (function(_super) {
        __extends(HouseTeleportRequestMessage, _super);

        function HouseTeleportRequestMessage() {
            this.houseId = 0;
            this.houseInstanceId = 0;
            _super.call(this)
        }
        HouseTeleportRequestMessage.prototype.getMessageId = function() {
            return HouseTeleportRequestMessage.ID;
        };
        HouseTeleportRequestMessage.prototype.reset = function() {
            this.houseId = 0;
            this.houseInstanceId = 0;
        };
        HouseTeleportRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        HouseTeleportRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        HouseTeleportRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_HouseTeleportRequestMessage(output);
        };
        HouseTeleportRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_HouseTeleportRequestMessage(input);
        };
        HouseTeleportRequestMessage.prototype.serializeAs_HouseTeleportRequestMessage = function(output) {
            if (this.houseId < 0) {
                throw new Error("Forbidden value (" + this.houseId + ") on element houseId.");
            }
            output.writeVarInt(this.houseId);
            if (this.houseInstanceId < 0) {
                throw new Error("Forbidden value (" + this.houseInstanceId + ") on element houseInstanceId.");
            }
            output.writeInt(this.houseInstanceId);
        };
        HouseTeleportRequestMessage.prototype.deserializeAs_HouseTeleportRequestMessage = function(input) {
            this.houseId = input.readVarUhInt();
            if (this.houseId < 0) {
                throw new Error("Forbidden value (" + this.houseId + ") on element of HouseTeleportRequestMessage.houseId.");
            }
            this.houseInstanceId = input.readInt();
            if (this.houseInstanceId < 0) {
                throw new Error("Forbidden value (" + this.houseInstanceId + ") on element of HouseTeleportRequestMessage.houseInstanceId.");
            }
        };
        HouseTeleportRequestMessage.ID = 2580;
        return HouseTeleportRequestMessage;
    })(NetworkMessage);
    Protocol.HouseTeleportRequestMessage = HouseTeleportRequestMessage;
    var IdolFightPreparationUpdateMessage = (function(_super) {
        __extends(IdolFightPreparationUpdateMessage, _super);

        function IdolFightPreparationUpdateMessage() {
            this.idolSource = 0;
            this.idols = [];
            _super.call(this)
        }
        IdolFightPreparationUpdateMessage.prototype.getMessageId = function() {
            return IdolFightPreparationUpdateMessage.ID;
        };
        IdolFightPreparationUpdateMessage.prototype.reset = function() {
            this.idolSource = 0;
            this.idols = [];
        };
        IdolFightPreparationUpdateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        IdolFightPreparationUpdateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        IdolFightPreparationUpdateMessage.prototype.serialize = function(output) {
            this.serializeAs_IdolFightPreparationUpdateMessage(output);
        };
        IdolFightPreparationUpdateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_IdolFightPreparationUpdateMessage(input);
        };
        IdolFightPreparationUpdateMessage.prototype.serializeAs_IdolFightPreparationUpdateMessage = function(output) {
            output.writeByte(this.idolSource);
            output.writeShort(this.idols.length);
            for (var _i2 = 0; _i2 < this.idols.length; _i2++) {
                output.writeShort((this.idols[_i2]).getTypeId());
                (this.idols[_i2]).serialize(output);
            }
        };
        IdolFightPreparationUpdateMessage.prototype.deserializeAs_IdolFightPreparationUpdateMessage = function(input) {
            var _id2 = 0;
            var _item2 = null;
            this.idolSource = input.readByte();
            if (this.idolSource < 0) {
                throw new Error("Forbidden value (" + this.idolSource + ") on element of IdolFightPreparationUpdateMessage.idolSource.");
            }
            var _idolsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _idolsLen; _i2++) {
                _id2 = input.readUnsignedShort();
                _item2 = ProtocolTypeManager.getInstance(Idol, _id2);
                _item2.deserialize(input);
                this.idols.push(_item2);
            }
        };
        IdolFightPreparationUpdateMessage.ID = 4921;
        return IdolFightPreparationUpdateMessage;
    })(NetworkMessage);
    Protocol.IdolFightPreparationUpdateMessage = IdolFightPreparationUpdateMessage;
    var IdolListMessage = (function(_super) {
        __extends(IdolListMessage, _super);

        function IdolListMessage() {
            this.chosenIdols = [];
            this.partyChosenIdols = [];
            this.partyIdols = [];
            _super.call(this)
        }
        IdolListMessage.prototype.getMessageId = function() {
            return IdolListMessage.ID;
        };
        IdolListMessage.prototype.reset = function() {
            this.chosenIdols = [];
            this.partyChosenIdols = [];
            this.partyIdols = [];
        };
        IdolListMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        IdolListMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        IdolListMessage.prototype.serialize = function(output) {
            this.serializeAs_IdolListMessage(output);
        };
        IdolListMessage.prototype.deserialize = function(input) {
            this.deserializeAs_IdolListMessage(input);
        };
        IdolListMessage.prototype.serializeAs_IdolListMessage = function(output) {
            output.writeShort(this.chosenIdols.length);
            for (var _i1 = 0; _i1 < this.chosenIdols.length; _i1++) {
                if (this.chosenIdols[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.chosenIdols[_i1] + ") on element 1 (starting at 1) of chosenIdols.");
                }
                output.writeVarShort(this.chosenIdols[_i1]);
            }
            output.writeShort(this.partyChosenIdols.length);
            for (var _i2 = 0; _i2 < this.partyChosenIdols.length; _i2++) {
                if (this.partyChosenIdols[_i2] < 0) {
                    throw new Error("Forbidden value (" + this.partyChosenIdols[_i2] + ") on element 2 (starting at 1) of partyChosenIdols.");
                }
                output.writeVarShort(this.partyChosenIdols[_i2]);
            }
            output.writeShort(this.partyIdols.length);
            for (var _i3 = 0; _i3 < this.partyIdols.length; _i3++) {
                output.writeShort((this.partyIdols[_i3]).getTypeId());
                (this.partyIdols[_i3]).serialize(output);
            }
        };
        IdolListMessage.prototype.deserializeAs_IdolListMessage = function(input) {
            var _val1 = 0;
            var _val2 = 0;
            var _id3 = 0;
            var _item3 = null;
            var _chosenIdolsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _chosenIdolsLen; _i1++) {
                _val1 = input.readVarUhShort();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of chosenIdols.");
                }
                this.chosenIdols.push(_val1);
            }
            var _partyChosenIdolsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _partyChosenIdolsLen; _i2++) {
                _val2 = input.readVarUhShort();
                if (_val2 < 0) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of partyChosenIdols.");
                }
                this.partyChosenIdols.push(_val2);
            }
            var _partyIdolsLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _partyIdolsLen; _i3++) {
                _id3 = input.readUnsignedShort();
                _item3 = ProtocolTypeManager.getInstance(PartyIdol, _id3);
                _item3.deserialize(input);
                this.partyIdols.push(_item3);
            }
        };
        IdolListMessage.ID = 6079;
        return IdolListMessage;
    })(NetworkMessage);
    Protocol.IdolListMessage = IdolListMessage;
    var IdolPartyLostMessage = (function(_super) {
        __extends(IdolPartyLostMessage, _super);

        function IdolPartyLostMessage() {
            this.idolId = 0;
            _super.call(this)
        }
        IdolPartyLostMessage.prototype.getMessageId = function() {
            return IdolPartyLostMessage.ID;
        };
        IdolPartyLostMessage.prototype.reset = function() {
            this.idolId = 0;
        };
        IdolPartyLostMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        IdolPartyLostMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        IdolPartyLostMessage.prototype.serialize = function(output) {
            this.serializeAs_IdolPartyLostMessage(output);
        };
        IdolPartyLostMessage.prototype.deserialize = function(input) {
            this.deserializeAs_IdolPartyLostMessage(input);
        };
        IdolPartyLostMessage.prototype.serializeAs_IdolPartyLostMessage = function(output) {
            if (this.idolId < 0) {
                throw new Error("Forbidden value (" + this.idolId + ") on element idolId.");
            }
            output.writeVarShort(this.idolId);
        };
        IdolPartyLostMessage.prototype.deserializeAs_IdolPartyLostMessage = function(input) {
            this.idolId = input.readVarUhShort();
            if (this.idolId < 0) {
                throw new Error("Forbidden value (" + this.idolId + ") on element of IdolPartyLostMessage.idolId.");
            }
        };
        IdolPartyLostMessage.ID = 9953;
        return IdolPartyLostMessage;
    })(NetworkMessage);
    Protocol.IdolPartyLostMessage = IdolPartyLostMessage;
    var IdolPartyRefreshMessage = (function(_super) {
        __extends(IdolPartyRefreshMessage, _super);

        function IdolPartyRefreshMessage() {
            this.partyIdol = new PartyIdol();
            _super.call(this)
        }
        IdolPartyRefreshMessage.prototype.getMessageId = function() {
            return IdolPartyRefreshMessage.ID;
        };
        IdolPartyRefreshMessage.prototype.reset = function() {
            this.partyIdol = new PartyIdol();
        };
        IdolPartyRefreshMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        IdolPartyRefreshMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        IdolPartyRefreshMessage.prototype.serialize = function(output) {
            this.serializeAs_IdolPartyRefreshMessage(output);
        };
        IdolPartyRefreshMessage.prototype.deserialize = function(input) {
            this.deserializeAs_IdolPartyRefreshMessage(input);
        };
        IdolPartyRefreshMessage.prototype.serializeAs_IdolPartyRefreshMessage = function(output) {
            this.partyIdol.serializeAs_PartyIdol(output);
        };
        IdolPartyRefreshMessage.prototype.deserializeAs_IdolPartyRefreshMessage = function(input) {
            this.partyIdol = new PartyIdol();
            this.partyIdol.deserialize(input);
        };
        IdolPartyRefreshMessage.ID = 5851;
        return IdolPartyRefreshMessage;
    })(NetworkMessage);
    Protocol.IdolPartyRefreshMessage = IdolPartyRefreshMessage;
    var IdolPartyRegisterRequestMessage = (function(_super) {
        __extends(IdolPartyRegisterRequestMessage, _super);

        function IdolPartyRegisterRequestMessage() {
            this.register = false;
            _super.call(this)
        }
        IdolPartyRegisterRequestMessage.prototype.getMessageId = function() {
            return IdolPartyRegisterRequestMessage.ID;
        };
        IdolPartyRegisterRequestMessage.prototype.reset = function() {
            this.register = false;
        };
        IdolPartyRegisterRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        IdolPartyRegisterRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        IdolPartyRegisterRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_IdolPartyRegisterRequestMessage(output);
        };
        IdolPartyRegisterRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_IdolPartyRegisterRequestMessage(input);
        };
        IdolPartyRegisterRequestMessage.prototype.serializeAs_IdolPartyRegisterRequestMessage = function(output) {
            output.writeBoolean(this.register);
        };
        IdolPartyRegisterRequestMessage.prototype.deserializeAs_IdolPartyRegisterRequestMessage = function(input) {
            this.register = input.readBoolean();
        };
        IdolPartyRegisterRequestMessage.ID = 7898;
        return IdolPartyRegisterRequestMessage;
    })(NetworkMessage);
    Protocol.IdolPartyRegisterRequestMessage = IdolPartyRegisterRequestMessage;
    var IdolSelectedMessage = (function(_super) {
        __extends(IdolSelectedMessage, _super);

        function IdolSelectedMessage() {
            this.idolId = 0;
            this.activate = false;
            this.party = false;
            _super.call(this)
        }
        IdolSelectedMessage.prototype.getMessageId = function() {
            return IdolSelectedMessage.ID;
        };
        IdolSelectedMessage.prototype.reset = function() {
            this.idolId = 0;
            this.activate = false;
            this.party = false;
        };
        IdolSelectedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        IdolSelectedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        IdolSelectedMessage.prototype.serialize = function(output) {
            this.serializeAs_IdolSelectedMessage(output);
        };
        IdolSelectedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_IdolSelectedMessage(input);
        };
        IdolSelectedMessage.prototype.serializeAs_IdolSelectedMessage = function(output) {
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.activate);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.party);
            output.writeByte(_box0);
            if (this.idolId < 0) {
                throw new Error("Forbidden value (" + this.idolId + ") on element idolId.");
            }
            output.writeVarShort(this.idolId);
        };
        IdolSelectedMessage.prototype.deserializeAs_IdolSelectedMessage = function(input) {
            this.deserializeByteBoxes(input);
            this.idolId = input.readVarUhShort();
            if (this.idolId < 0) {
                throw new Error("Forbidden value (" + this.idolId + ") on element of IdolSelectedMessage.idolId.");
            }
        };
        IdolSelectedMessage.ID = 2458;
        return IdolSelectedMessage;
    })(NetworkMessage);
    Protocol.IdolSelectedMessage = IdolSelectedMessage;
    var IdolSelectErrorMessage = (function(_super) {
        __extends(IdolSelectErrorMessage, _super);

        function IdolSelectErrorMessage() {
            this.reason = 0;
            this.idolId = 0;
            this.activate = false;
            this.party = false;
            _super.call(this)
        }
        IdolSelectErrorMessage.prototype.getMessageId = function() {
            return IdolSelectErrorMessage.ID;
        };
        IdolSelectErrorMessage.prototype.reset = function() {
            this.reason = 0;
            this.idolId = 0;
            this.activate = false;
            this.party = false;
        };
        IdolSelectErrorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        IdolSelectErrorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        IdolSelectErrorMessage.prototype.serialize = function(output) {
            this.serializeAs_IdolSelectErrorMessage(output);
        };
        IdolSelectErrorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_IdolSelectErrorMessage(input);
        };
        IdolSelectErrorMessage.prototype.serializeAs_IdolSelectErrorMessage = function(output) {
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.activate);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.party);
            output.writeByte(_box0);
            output.writeByte(this.reason);
            if (this.idolId < 0) {
                throw new Error("Forbidden value (" + this.idolId + ") on element idolId.");
            }
            output.writeVarShort(this.idolId);
        };
        IdolSelectErrorMessage.prototype.deserializeAs_IdolSelectErrorMessage = function(input) {
            this.deserializeByteBoxes(input);
            this.reason = input.readByte();
            if (this.reason < 0) {
                throw new Error("Forbidden value (" + this.reason + ") on element of IdolSelectErrorMessage.reason.");
            }
            this.idolId = input.readVarUhShort();
            if (this.idolId < 0) {
                throw new Error("Forbidden value (" + this.idolId + ") on element of IdolSelectErrorMessage.idolId.");
            }
        };
        IdolSelectErrorMessage.ID = 1593;
        return IdolSelectErrorMessage;
    })(NetworkMessage);
    Protocol.IdolSelectErrorMessage = IdolSelectErrorMessage;
    var IdolSelectRequestMessage = (function(_super) {
        __extends(IdolSelectRequestMessage, _super);

        function IdolSelectRequestMessage() {
            this.idolId = 0;
            this.activate = false;
            this.party = false;
            _super.call(this)
        }
        IdolSelectRequestMessage.prototype.getMessageId = function() {
            return IdolSelectRequestMessage.ID;
        };
        IdolSelectRequestMessage.prototype.reset = function() {
            this.idolId = 0;
            this.activate = false;
            this.party = false;
        };
        IdolSelectRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        IdolSelectRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        IdolSelectRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_IdolSelectRequestMessage(output);
        };
        IdolSelectRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_IdolSelectRequestMessage(input);
        };
        IdolSelectRequestMessage.prototype.serializeAs_IdolSelectRequestMessage = function(output) {
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.activate);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.party);
            output.writeByte(_box0);
            if (this.idolId < 0) {
                throw new Error("Forbidden value (" + this.idolId + ") on element idolId.");
            }
            output.writeVarShort(this.idolId);
        };
        IdolSelectRequestMessage.prototype.deserializeAs_IdolSelectRequestMessage = function(input) {
            this.deserializeByteBoxes(input);
            this.idolId = input.readVarUhShort();
            if (this.idolId < 0) {
                throw new Error("Forbidden value (" + this.idolId + ") on element of IdolSelectRequestMessage.idolId.");
            }
        };
        IdolSelectRequestMessage.ID = 9165;
        return IdolSelectRequestMessage;
    })(NetworkMessage);
    Protocol.IdolSelectRequestMessage = IdolSelectRequestMessage;
    var CharacterCapabilitiesMessage = (function(_super) {
        __extends(CharacterCapabilitiesMessage, _super);

        function CharacterCapabilitiesMessage() {
            this.guildEmblemSymbolCategories = 0;
            _super.call(this)
        }
        CharacterCapabilitiesMessage.prototype.getMessageId = function() {
            return CharacterCapabilitiesMessage.ID;
        };
        CharacterCapabilitiesMessage.prototype.reset = function() {
            this.guildEmblemSymbolCategories = 0;
        };
        CharacterCapabilitiesMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        CharacterCapabilitiesMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        CharacterCapabilitiesMessage.prototype.serialize = function(output) {
            this.serializeAs_CharacterCapabilitiesMessage(output);
        };
        CharacterCapabilitiesMessage.prototype.deserialize = function(input) {
            this.deserializeAs_CharacterCapabilitiesMessage(input);
        };
        CharacterCapabilitiesMessage.prototype.serializeAs_CharacterCapabilitiesMessage = function(output) {
            if (this.guildEmblemSymbolCategories < 0) {
                throw new Error("Forbidden value (" + this.guildEmblemSymbolCategories + ") on element guildEmblemSymbolCategories.");
            }
            output.writeVarInt(this.guildEmblemSymbolCategories);
        };
        CharacterCapabilitiesMessage.prototype.deserializeAs_CharacterCapabilitiesMessage = function(input) {
            this.guildEmblemSymbolCategories = input.readVarUhInt();
            if (this.guildEmblemSymbolCategories < 0) {
                throw new Error("Forbidden value (" + this.guildEmblemSymbolCategories + ") on element of CharacterCapabilitiesMessage.guildEmblemSymbolCategories.");
            }
        };
        CharacterCapabilitiesMessage.ID = 9322;
        return CharacterCapabilitiesMessage;
    })(NetworkMessage);
    Protocol.CharacterCapabilitiesMessage = CharacterCapabilitiesMessage;
    var CharacterLoadingCompleteMessage = (function(_super) {
        __extends(CharacterLoadingCompleteMessage, _super);

        function CharacterLoadingCompleteMessage() {

            _super.call(this)
        }
        CharacterLoadingCompleteMessage.prototype.getMessageId = function() {
            return CharacterLoadingCompleteMessage.ID;
        };
        CharacterLoadingCompleteMessage.prototype.reset = function() {

        };
        CharacterLoadingCompleteMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        CharacterLoadingCompleteMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        CharacterLoadingCompleteMessage.prototype.serialize = function(output) {
            this.serializeAs_CharacterLoadingCompleteMessage(output);
        };
        CharacterLoadingCompleteMessage.prototype.deserialize = function(input) {
            this.deserializeAs_CharacterLoadingCompleteMessage(input);
        };
        CharacterLoadingCompleteMessage.prototype.serializeAs_CharacterLoadingCompleteMessage = function(output) {

        };
        CharacterLoadingCompleteMessage.prototype.deserializeAs_CharacterLoadingCompleteMessage = function(input) {

        };
        CharacterLoadingCompleteMessage.ID = 7087;
        return CharacterLoadingCompleteMessage;
    })(NetworkMessage);
    Protocol.CharacterLoadingCompleteMessage = CharacterLoadingCompleteMessage;
    var OnConnectionEventMessage = (function(_super) {
        __extends(OnConnectionEventMessage, _super);

        function OnConnectionEventMessage() {
            this.eventType = 0;
            _super.call(this)
        }
        OnConnectionEventMessage.prototype.getMessageId = function() {
            return OnConnectionEventMessage.ID;
        };
        OnConnectionEventMessage.prototype.reset = function() {
            this.eventType = 0;
        };
        OnConnectionEventMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        OnConnectionEventMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        OnConnectionEventMessage.prototype.serialize = function(output) {
            this.serializeAs_OnConnectionEventMessage(output);
        };
        OnConnectionEventMessage.prototype.deserialize = function(input) {
            this.deserializeAs_OnConnectionEventMessage(input);
        };
        OnConnectionEventMessage.prototype.serializeAs_OnConnectionEventMessage = function(output) {
            output.writeByte(this.eventType);
        };
        OnConnectionEventMessage.prototype.deserializeAs_OnConnectionEventMessage = function(input) {
            this.eventType = input.readByte();
            if (this.eventType < 0) {
                throw new Error("Forbidden value (" + this.eventType + ") on element of OnConnectionEventMessage.eventType.");
            }
        };
        OnConnectionEventMessage.ID = 4557;
        return OnConnectionEventMessage;
    })(NetworkMessage);
    Protocol.OnConnectionEventMessage = OnConnectionEventMessage;
    var ServerExperienceModificatorMessage = (function(_super) {
        __extends(ServerExperienceModificatorMessage, _super);

        function ServerExperienceModificatorMessage() {
            this.experiencePercent = 0;
            _super.call(this)
        }
        ServerExperienceModificatorMessage.prototype.getMessageId = function() {
            return ServerExperienceModificatorMessage.ID;
        };
        ServerExperienceModificatorMessage.prototype.reset = function() {
            this.experiencePercent = 0;
        };
        ServerExperienceModificatorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ServerExperienceModificatorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ServerExperienceModificatorMessage.prototype.serialize = function(output) {
            this.serializeAs_ServerExperienceModificatorMessage(output);
        };
        ServerExperienceModificatorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ServerExperienceModificatorMessage(input);
        };
        ServerExperienceModificatorMessage.prototype.serializeAs_ServerExperienceModificatorMessage = function(output) {
            if (this.experiencePercent < 0) {
                throw new Error("Forbidden value (" + this.experiencePercent + ") on element experiencePercent.");
            }
            output.writeVarShort(this.experiencePercent);
        };
        ServerExperienceModificatorMessage.prototype.deserializeAs_ServerExperienceModificatorMessage = function(input) {
            this.experiencePercent = input.readVarUhShort();
            if (this.experiencePercent < 0) {
                throw new Error("Forbidden value (" + this.experiencePercent + ") on element of ServerExperienceModificatorMessage.experiencePercent.");
            }
        };
        ServerExperienceModificatorMessage.ID = 4222;
        return ServerExperienceModificatorMessage;
    })(NetworkMessage);
    Protocol.ServerExperienceModificatorMessage = ServerExperienceModificatorMessage;
    var SetCharacterRestrictionsMessage = (function(_super) {
        __extends(SetCharacterRestrictionsMessage, _super);

        function SetCharacterRestrictionsMessage() {
            this.actorId = 0;
            this.restrictions = new ActorRestrictionsInformations();
            _super.call(this)
        }
        SetCharacterRestrictionsMessage.prototype.getMessageId = function() {
            return SetCharacterRestrictionsMessage.ID;
        };
        SetCharacterRestrictionsMessage.prototype.reset = function() {
            this.actorId = 0;
            this.restrictions = new ActorRestrictionsInformations();
        };
        SetCharacterRestrictionsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        SetCharacterRestrictionsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        SetCharacterRestrictionsMessage.prototype.serialize = function(output) {
            this.serializeAs_SetCharacterRestrictionsMessage(output);
        };
        SetCharacterRestrictionsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_SetCharacterRestrictionsMessage(input);
        };
        SetCharacterRestrictionsMessage.prototype.serializeAs_SetCharacterRestrictionsMessage = function(output) {
            if (this.actorId < -9007199254740990 || this.actorId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.actorId + ") on element actorId.");
            }
            output.writeDouble(this.actorId);
            this.restrictions.serializeAs_ActorRestrictionsInformations(output);
        };
        SetCharacterRestrictionsMessage.prototype.deserializeAs_SetCharacterRestrictionsMessage = function(input) {
            this.actorId = input.readDouble();
            if (this.actorId < -9007199254740990 || this.actorId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.actorId + ") on element of SetCharacterRestrictionsMessage.actorId.");
            }
            this.restrictions = new ActorRestrictionsInformations();
            this.restrictions.deserialize(input);
        };
        SetCharacterRestrictionsMessage.ID = 8111;
        return SetCharacterRestrictionsMessage;
    })(NetworkMessage);
    Protocol.SetCharacterRestrictionsMessage = SetCharacterRestrictionsMessage;
    var InteractiveElementUpdatedMessage = (function(_super) {
        __extends(InteractiveElementUpdatedMessage, _super);

        function InteractiveElementUpdatedMessage() {
            this.interactiveElement = new InteractiveElement();
            _super.call(this)
        }
        InteractiveElementUpdatedMessage.prototype.getMessageId = function() {
            return InteractiveElementUpdatedMessage.ID;
        };
        InteractiveElementUpdatedMessage.prototype.reset = function() {
            this.interactiveElement = new InteractiveElement();
        };
        InteractiveElementUpdatedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        InteractiveElementUpdatedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        InteractiveElementUpdatedMessage.prototype.serialize = function(output) {
            this.serializeAs_InteractiveElementUpdatedMessage(output);
        };
        InteractiveElementUpdatedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_InteractiveElementUpdatedMessage(input);
        };
        InteractiveElementUpdatedMessage.prototype.serializeAs_InteractiveElementUpdatedMessage = function(output) {
            this.interactiveElement.serializeAs_InteractiveElement(output);
        };
        InteractiveElementUpdatedMessage.prototype.deserializeAs_InteractiveElementUpdatedMessage = function(input) {
            this.interactiveElement = new InteractiveElement();
            this.interactiveElement.deserialize(input);
        };
        InteractiveElementUpdatedMessage.ID = 9817;
        return InteractiveElementUpdatedMessage;
    })(NetworkMessage);
    Protocol.InteractiveElementUpdatedMessage = InteractiveElementUpdatedMessage;
    var InteractiveMapUpdateMessage = (function(_super) {
        __extends(InteractiveMapUpdateMessage, _super);

        function InteractiveMapUpdateMessage() {
            this.interactiveElements = [];
            _super.call(this)
        }
        InteractiveMapUpdateMessage.prototype.getMessageId = function() {
            return InteractiveMapUpdateMessage.ID;
        };
        InteractiveMapUpdateMessage.prototype.reset = function() {
            this.interactiveElements = [];
        };
        InteractiveMapUpdateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        InteractiveMapUpdateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        InteractiveMapUpdateMessage.prototype.serialize = function(output) {
            this.serializeAs_InteractiveMapUpdateMessage(output);
        };
        InteractiveMapUpdateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_InteractiveMapUpdateMessage(input);
        };
        InteractiveMapUpdateMessage.prototype.serializeAs_InteractiveMapUpdateMessage = function(output) {
            output.writeShort(this.interactiveElements.length);
            for (var _i1 = 0; _i1 < this.interactiveElements.length; _i1++) {
                output.writeShort((this.interactiveElements[_i1]).getTypeId());
                (this.interactiveElements[_i1]).serialize(output);
            }
        };
        InteractiveMapUpdateMessage.prototype.deserializeAs_InteractiveMapUpdateMessage = function(input) {
            var _id1 = 0;
            var _item1 = null;
            var _interactiveElementsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _interactiveElementsLen; _i1++) {
                _id1 = input.readUnsignedShort();
                _item1 = ProtocolTypeManager.getInstance(InteractiveElement, _id1);
                _item1.deserialize(input);
                this.interactiveElements.push(_item1);
            }
        };
        InteractiveMapUpdateMessage.ID = 2058;
        return InteractiveMapUpdateMessage;
    })(NetworkMessage);
    Protocol.InteractiveMapUpdateMessage = InteractiveMapUpdateMessage;
    var InteractiveUsedMessage = (function(_super) {
        __extends(InteractiveUsedMessage, _super);

        function InteractiveUsedMessage() {
            this.entityId = 0;
            this.elemId = 0;
            this.skillId = 0;
            this.duration = 0;
            this.canMove = false;
            _super.call(this)
        }
        InteractiveUsedMessage.prototype.getMessageId = function() {
            return InteractiveUsedMessage.ID;
        };
        InteractiveUsedMessage.prototype.reset = function() {
            this.entityId = 0;
            this.elemId = 0;
            this.skillId = 0;
            this.duration = 0;
            this.canMove = false;
        };
        InteractiveUsedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        InteractiveUsedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        InteractiveUsedMessage.prototype.serialize = function(output) {
            this.serializeAs_InteractiveUsedMessage(output);
        };
        InteractiveUsedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_InteractiveUsedMessage(input);
        };
        InteractiveUsedMessage.prototype.serializeAs_InteractiveUsedMessage = function(output) {
            if (this.entityId < 0 || this.entityId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.entityId + ") on element entityId.");
            }
            output.writeVarLong(this.entityId);
            if (this.elemId < 0) {
                throw new Error("Forbidden value (" + this.elemId + ") on element elemId.");
            }
            output.writeVarInt(this.elemId);
            if (this.skillId < 0) {
                throw new Error("Forbidden value (" + this.skillId + ") on element skillId.");
            }
            output.writeVarShort(this.skillId);
            if (this.duration < 0) {
                throw new Error("Forbidden value (" + this.duration + ") on element duration.");
            }
            output.writeVarShort(this.duration);
            output.writeBoolean(this.canMove);
        };
        InteractiveUsedMessage.prototype.deserializeAs_InteractiveUsedMessage = function(input) {
            this.entityId = input.readVarUhLong();
            if (this.entityId < 0 || this.entityId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.entityId + ") on element of InteractiveUsedMessage.entityId.");
            }
            this.elemId = input.readVarUhInt();
            if (this.elemId < 0) {
                throw new Error("Forbidden value (" + this.elemId + ") on element of InteractiveUsedMessage.elemId.");
            }
            this.skillId = input.readVarUhShort();
            if (this.skillId < 0) {
                throw new Error("Forbidden value (" + this.skillId + ") on element of InteractiveUsedMessage.skillId.");
            }
            this.duration = input.readVarUhShort();
            if (this.duration < 0) {
                throw new Error("Forbidden value (" + this.duration + ") on element of InteractiveUsedMessage.duration.");
            }
            this.canMove = input.readBoolean();
        };
        InteractiveUsedMessage.ID = 9111;
        return InteractiveUsedMessage;
    })(NetworkMessage);
    Protocol.InteractiveUsedMessage = InteractiveUsedMessage;
    var InteractiveUseEndedMessage = (function(_super) {
        __extends(InteractiveUseEndedMessage, _super);

        function InteractiveUseEndedMessage() {
            this.elemId = 0;
            this.skillId = 0;
            _super.call(this)
        }
        InteractiveUseEndedMessage.prototype.getMessageId = function() {
            return InteractiveUseEndedMessage.ID;
        };
        InteractiveUseEndedMessage.prototype.reset = function() {
            this.elemId = 0;
            this.skillId = 0;
        };
        InteractiveUseEndedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        InteractiveUseEndedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        InteractiveUseEndedMessage.prototype.serialize = function(output) {
            this.serializeAs_InteractiveUseEndedMessage(output);
        };
        InteractiveUseEndedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_InteractiveUseEndedMessage(input);
        };
        InteractiveUseEndedMessage.prototype.serializeAs_InteractiveUseEndedMessage = function(output) {
            if (this.elemId < 0) {
                throw new Error("Forbidden value (" + this.elemId + ") on element elemId.");
            }
            output.writeVarInt(this.elemId);
            if (this.skillId < 0) {
                throw new Error("Forbidden value (" + this.skillId + ") on element skillId.");
            }
            output.writeVarShort(this.skillId);
        };
        InteractiveUseEndedMessage.prototype.deserializeAs_InteractiveUseEndedMessage = function(input) {
            this.elemId = input.readVarUhInt();
            if (this.elemId < 0) {
                throw new Error("Forbidden value (" + this.elemId + ") on element of InteractiveUseEndedMessage.elemId.");
            }
            this.skillId = input.readVarUhShort();
            if (this.skillId < 0) {
                throw new Error("Forbidden value (" + this.skillId + ") on element of InteractiveUseEndedMessage.skillId.");
            }
        };
        InteractiveUseEndedMessage.ID = 2904;
        return InteractiveUseEndedMessage;
    })(NetworkMessage);
    Protocol.InteractiveUseEndedMessage = InteractiveUseEndedMessage;
    var InteractiveUseErrorMessage = (function(_super) {
        __extends(InteractiveUseErrorMessage, _super);

        function InteractiveUseErrorMessage() {
            this.elemId = 0;
            this.skillInstanceUid = 0;
            _super.call(this)
        }
        InteractiveUseErrorMessage.prototype.getMessageId = function() {
            return InteractiveUseErrorMessage.ID;
        };
        InteractiveUseErrorMessage.prototype.reset = function() {
            this.elemId = 0;
            this.skillInstanceUid = 0;
        };
        InteractiveUseErrorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        InteractiveUseErrorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        InteractiveUseErrorMessage.prototype.serialize = function(output) {
            this.serializeAs_InteractiveUseErrorMessage(output);
        };
        InteractiveUseErrorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_InteractiveUseErrorMessage(input);
        };
        InteractiveUseErrorMessage.prototype.serializeAs_InteractiveUseErrorMessage = function(output) {
            if (this.elemId < 0) {
                throw new Error("Forbidden value (" + this.elemId + ") on element elemId.");
            }
            output.writeVarInt(this.elemId);
            if (this.skillInstanceUid < 0) {
                throw new Error("Forbidden value (" + this.skillInstanceUid + ") on element skillInstanceUid.");
            }
            output.writeVarInt(this.skillInstanceUid);
        };
        InteractiveUseErrorMessage.prototype.deserializeAs_InteractiveUseErrorMessage = function(input) {
            this.elemId = input.readVarUhInt();
            if (this.elemId < 0) {
                throw new Error("Forbidden value (" + this.elemId + ") on element of InteractiveUseErrorMessage.elemId.");
            }
            this.skillInstanceUid = input.readVarUhInt();
            if (this.skillInstanceUid < 0) {
                throw new Error("Forbidden value (" + this.skillInstanceUid + ") on element of InteractiveUseErrorMessage.skillInstanceUid.");
            }
        };
        InteractiveUseErrorMessage.ID = 1013;
        return InteractiveUseErrorMessage;
    })(NetworkMessage);
    Protocol.InteractiveUseErrorMessage = InteractiveUseErrorMessage;
    var InteractiveUseRequestMessage = (function(_super) {
        __extends(InteractiveUseRequestMessage, _super);

        function InteractiveUseRequestMessage() {
            this.elemId = 0;
            this.skillInstanceUid = 0;
            _super.call(this)
        }
        InteractiveUseRequestMessage.prototype.getMessageId = function() {
            return InteractiveUseRequestMessage.ID;
        };
        InteractiveUseRequestMessage.prototype.reset = function() {
            this.elemId = 0;
            this.skillInstanceUid = 0;
        };
        InteractiveUseRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        InteractiveUseRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        InteractiveUseRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_InteractiveUseRequestMessage(output);
        };
        InteractiveUseRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_InteractiveUseRequestMessage(input);
        };
        InteractiveUseRequestMessage.prototype.serializeAs_InteractiveUseRequestMessage = function(output) {
            if (this.elemId < 0) {
                throw new Error("Forbidden value (" + this.elemId + ") on element elemId.");
            }
            output.writeVarInt(this.elemId);
            if (this.skillInstanceUid < 0) {
                throw new Error("Forbidden value (" + this.skillInstanceUid + ") on element skillInstanceUid.");
            }
            output.writeVarInt(this.skillInstanceUid);
        };
        InteractiveUseRequestMessage.prototype.deserializeAs_InteractiveUseRequestMessage = function(input) {
            this.elemId = input.readVarUhInt();
            if (this.elemId < 0) {
                throw new Error("Forbidden value (" + this.elemId + ") on element of InteractiveUseRequestMessage.elemId.");
            }
            this.skillInstanceUid = input.readVarUhInt();
            if (this.skillInstanceUid < 0) {
                throw new Error("Forbidden value (" + this.skillInstanceUid + ") on element of InteractiveUseRequestMessage.skillInstanceUid.");
            }
        };
        InteractiveUseRequestMessage.ID = 3068;
        return InteractiveUseRequestMessage;
    })(NetworkMessage);
    Protocol.InteractiveUseRequestMessage = InteractiveUseRequestMessage;
    var TeleportBuddiesAnswerMessage = (function(_super) {
        __extends(TeleportBuddiesAnswerMessage, _super);

        function TeleportBuddiesAnswerMessage() {
            this.accept = false;
            _super.call(this)
        }
        TeleportBuddiesAnswerMessage.prototype.getMessageId = function() {
            return TeleportBuddiesAnswerMessage.ID;
        };
        TeleportBuddiesAnswerMessage.prototype.reset = function() {
            this.accept = false;
        };
        TeleportBuddiesAnswerMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TeleportBuddiesAnswerMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TeleportBuddiesAnswerMessage.prototype.serialize = function(output) {
            this.serializeAs_TeleportBuddiesAnswerMessage(output);
        };
        TeleportBuddiesAnswerMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TeleportBuddiesAnswerMessage(input);
        };
        TeleportBuddiesAnswerMessage.prototype.serializeAs_TeleportBuddiesAnswerMessage = function(output) {
            output.writeBoolean(this.accept);
        };
        TeleportBuddiesAnswerMessage.prototype.deserializeAs_TeleportBuddiesAnswerMessage = function(input) {
            this.accept = input.readBoolean();
        };
        TeleportBuddiesAnswerMessage.ID = 396;
        return TeleportBuddiesAnswerMessage;
    })(NetworkMessage);
    Protocol.TeleportBuddiesAnswerMessage = TeleportBuddiesAnswerMessage;
    var TeleportBuddiesMessage = (function(_super) {
        __extends(TeleportBuddiesMessage, _super);

        function TeleportBuddiesMessage() {
            this.dungeonId = 0;
            _super.call(this)
        }
        TeleportBuddiesMessage.prototype.getMessageId = function() {
            return TeleportBuddiesMessage.ID;
        };
        TeleportBuddiesMessage.prototype.reset = function() {
            this.dungeonId = 0;
        };
        TeleportBuddiesMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TeleportBuddiesMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TeleportBuddiesMessage.prototype.serialize = function(output) {
            this.serializeAs_TeleportBuddiesMessage(output);
        };
        TeleportBuddiesMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TeleportBuddiesMessage(input);
        };
        TeleportBuddiesMessage.prototype.serializeAs_TeleportBuddiesMessage = function(output) {
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
            }
            output.writeVarShort(this.dungeonId);
        };
        TeleportBuddiesMessage.prototype.deserializeAs_TeleportBuddiesMessage = function(input) {
            this.dungeonId = input.readVarUhShort();
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element of TeleportBuddiesMessage.dungeonId.");
            }
        };
        TeleportBuddiesMessage.ID = 8443;
        return TeleportBuddiesMessage;
    })(NetworkMessage);
    Protocol.TeleportBuddiesMessage = TeleportBuddiesMessage;
    var TeleportBuddiesRequestedMessage = (function(_super) {
        __extends(TeleportBuddiesRequestedMessage, _super);

        function TeleportBuddiesRequestedMessage() {
            this.dungeonId = 0;
            this.inviterId = 0;
            this.invalidBuddiesIds = [];
            _super.call(this)
        }
        TeleportBuddiesRequestedMessage.prototype.getMessageId = function() {
            return TeleportBuddiesRequestedMessage.ID;
        };
        TeleportBuddiesRequestedMessage.prototype.reset = function() {
            this.dungeonId = 0;
            this.inviterId = 0;
            this.invalidBuddiesIds = [];
        };
        TeleportBuddiesRequestedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TeleportBuddiesRequestedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TeleportBuddiesRequestedMessage.prototype.serialize = function(output) {
            this.serializeAs_TeleportBuddiesRequestedMessage(output);
        };
        TeleportBuddiesRequestedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TeleportBuddiesRequestedMessage(input);
        };
        TeleportBuddiesRequestedMessage.prototype.serializeAs_TeleportBuddiesRequestedMessage = function(output) {
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
            }
            output.writeVarShort(this.dungeonId);
            if (this.inviterId < 0 || this.inviterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.inviterId + ") on element inviterId.");
            }
            output.writeVarLong(this.inviterId);
            output.writeShort(this.invalidBuddiesIds.length);
            for (var _i3 = 0; _i3 < this.invalidBuddiesIds.length; _i3++) {
                if (this.invalidBuddiesIds[_i3] < 0 || this.invalidBuddiesIds[_i3] > 9007199254740990) {
                    throw new Error("Forbidden value (" + this.invalidBuddiesIds[_i3] + ") on element 3 (starting at 1) of invalidBuddiesIds.");
                }
                output.writeVarLong(this.invalidBuddiesIds[_i3]);
            }
        };
        TeleportBuddiesRequestedMessage.prototype.deserializeAs_TeleportBuddiesRequestedMessage = function(input) {
            var _val3 = NaN;
            this.dungeonId = input.readVarUhShort();
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element of TeleportBuddiesRequestedMessage.dungeonId.");
            }
            this.inviterId = input.readVarUhLong();
            if (this.inviterId < 0 || this.inviterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.inviterId + ") on element of TeleportBuddiesRequestedMessage.inviterId.");
            }
            var _invalidBuddiesIdsLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _invalidBuddiesIdsLen; _i3++) {
                _val3 = input.readVarUhLong();
                if (_val3 < 0 || _val3 > 9007199254740990) {
                    throw new Error("Forbidden value (" + _val3 + ") on elements of invalidBuddiesIds.");
                }
                this.invalidBuddiesIds.push(_val3);
            }
        };
        TeleportBuddiesRequestedMessage.ID = 2270;
        return TeleportBuddiesRequestedMessage;
    })(NetworkMessage);
    Protocol.TeleportBuddiesRequestedMessage = TeleportBuddiesRequestedMessage;
    var TeleportToBuddyAnswerMessage = (function(_super) {
        __extends(TeleportToBuddyAnswerMessage, _super);

        function TeleportToBuddyAnswerMessage() {
            this.dungeonId = 0;
            this.buddyId = 0;
            this.accept = false;
            _super.call(this)
        }
        TeleportToBuddyAnswerMessage.prototype.getMessageId = function() {
            return TeleportToBuddyAnswerMessage.ID;
        };
        TeleportToBuddyAnswerMessage.prototype.reset = function() {
            this.dungeonId = 0;
            this.buddyId = 0;
            this.accept = false;
        };
        TeleportToBuddyAnswerMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TeleportToBuddyAnswerMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TeleportToBuddyAnswerMessage.prototype.serialize = function(output) {
            this.serializeAs_TeleportToBuddyAnswerMessage(output);
        };
        TeleportToBuddyAnswerMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TeleportToBuddyAnswerMessage(input);
        };
        TeleportToBuddyAnswerMessage.prototype.serializeAs_TeleportToBuddyAnswerMessage = function(output) {
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
            }
            output.writeVarShort(this.dungeonId);
            if (this.buddyId < 0 || this.buddyId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.buddyId + ") on element buddyId.");
            }
            output.writeVarLong(this.buddyId);
            output.writeBoolean(this.accept);
        };
        TeleportToBuddyAnswerMessage.prototype.deserializeAs_TeleportToBuddyAnswerMessage = function(input) {
            this.dungeonId = input.readVarUhShort();
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element of TeleportToBuddyAnswerMessage.dungeonId.");
            }
            this.buddyId = input.readVarUhLong();
            if (this.buddyId < 0 || this.buddyId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.buddyId + ") on element of TeleportToBuddyAnswerMessage.buddyId.");
            }
            this.accept = input.readBoolean();
        };
        TeleportToBuddyAnswerMessage.ID = 4262;
        return TeleportToBuddyAnswerMessage;
    })(NetworkMessage);
    Protocol.TeleportToBuddyAnswerMessage = TeleportToBuddyAnswerMessage;
    var TeleportToBuddyCloseMessage = (function(_super) {
        __extends(TeleportToBuddyCloseMessage, _super);

        function TeleportToBuddyCloseMessage() {
            this.dungeonId = 0;
            this.buddyId = 0;
            _super.call(this)
        }
        TeleportToBuddyCloseMessage.prototype.getMessageId = function() {
            return TeleportToBuddyCloseMessage.ID;
        };
        TeleportToBuddyCloseMessage.prototype.reset = function() {
            this.dungeonId = 0;
            this.buddyId = 0;
        };
        TeleportToBuddyCloseMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TeleportToBuddyCloseMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TeleportToBuddyCloseMessage.prototype.serialize = function(output) {
            this.serializeAs_TeleportToBuddyCloseMessage(output);
        };
        TeleportToBuddyCloseMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TeleportToBuddyCloseMessage(input);
        };
        TeleportToBuddyCloseMessage.prototype.serializeAs_TeleportToBuddyCloseMessage = function(output) {
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
            }
            output.writeVarShort(this.dungeonId);
            if (this.buddyId < 0 || this.buddyId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.buddyId + ") on element buddyId.");
            }
            output.writeVarLong(this.buddyId);
        };
        TeleportToBuddyCloseMessage.prototype.deserializeAs_TeleportToBuddyCloseMessage = function(input) {
            this.dungeonId = input.readVarUhShort();
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element of TeleportToBuddyCloseMessage.dungeonId.");
            }
            this.buddyId = input.readVarUhLong();
            if (this.buddyId < 0 || this.buddyId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.buddyId + ") on element of TeleportToBuddyCloseMessage.buddyId.");
            }
        };
        TeleportToBuddyCloseMessage.ID = 2919;
        return TeleportToBuddyCloseMessage;
    })(NetworkMessage);
    Protocol.TeleportToBuddyCloseMessage = TeleportToBuddyCloseMessage;
    var TeleportToBuddyOfferMessage = (function(_super) {
        __extends(TeleportToBuddyOfferMessage, _super);

        function TeleportToBuddyOfferMessage() {
            this.dungeonId = 0;
            this.buddyId = 0;
            this.timeLeft = 0;
            _super.call(this)
        }
        TeleportToBuddyOfferMessage.prototype.getMessageId = function() {
            return TeleportToBuddyOfferMessage.ID;
        };
        TeleportToBuddyOfferMessage.prototype.reset = function() {
            this.dungeonId = 0;
            this.buddyId = 0;
            this.timeLeft = 0;
        };
        TeleportToBuddyOfferMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TeleportToBuddyOfferMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TeleportToBuddyOfferMessage.prototype.serialize = function(output) {
            this.serializeAs_TeleportToBuddyOfferMessage(output);
        };
        TeleportToBuddyOfferMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TeleportToBuddyOfferMessage(input);
        };
        TeleportToBuddyOfferMessage.prototype.serializeAs_TeleportToBuddyOfferMessage = function(output) {
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
            }
            output.writeVarShort(this.dungeonId);
            if (this.buddyId < 0 || this.buddyId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.buddyId + ") on element buddyId.");
            }
            output.writeVarLong(this.buddyId);
            if (this.timeLeft < 0) {
                throw new Error("Forbidden value (" + this.timeLeft + ") on element timeLeft.");
            }
            output.writeVarInt(this.timeLeft);
        };
        TeleportToBuddyOfferMessage.prototype.deserializeAs_TeleportToBuddyOfferMessage = function(input) {
            this.dungeonId = input.readVarUhShort();
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element of TeleportToBuddyOfferMessage.dungeonId.");
            }
            this.buddyId = input.readVarUhLong();
            if (this.buddyId < 0 || this.buddyId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.buddyId + ") on element of TeleportToBuddyOfferMessage.buddyId.");
            }
            this.timeLeft = input.readVarUhInt();
            if (this.timeLeft < 0) {
                throw new Error("Forbidden value (" + this.timeLeft + ") on element of TeleportToBuddyOfferMessage.timeLeft.");
            }
        };
        TeleportToBuddyOfferMessage.ID = 5505;
        return TeleportToBuddyOfferMessage;
    })(NetworkMessage);
    Protocol.TeleportToBuddyOfferMessage = TeleportToBuddyOfferMessage;
    var InteractiveUseWithParamRequestMessage = (function(_super) {
        __extends(InteractiveUseWithParamRequestMessage, _super);

        function InteractiveUseWithParamRequestMessage() {
            this.id = 0;
            _super.call(this)
        }
        InteractiveUseWithParamRequestMessage.prototype.getMessageId = function() {
            return InteractiveUseWithParamRequestMessage.ID;
        };
        InteractiveUseWithParamRequestMessage.prototype.reset = function() {
            this.id = 0;
        };
        InteractiveUseWithParamRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        InteractiveUseWithParamRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        InteractiveUseWithParamRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_InteractiveUseWithParamRequestMessage(output);
        };
        InteractiveUseWithParamRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_InteractiveUseWithParamRequestMessage(input);
        };
        InteractiveUseWithParamRequestMessage.prototype.serializeAs_InteractiveUseWithParamRequestMessage = function(output) {
            _super.prototype.serializeAs_InteractiveUseRequestMessage.call(this, output);
            output.writeInt(this.id);
        };
        InteractiveUseWithParamRequestMessage.prototype.deserializeAs_InteractiveUseWithParamRequestMessage = function(input) {
            _super.prototype.deserializeAs_InteractiveUseRequestMessage.call(this, input);
            this.id = input.readInt();
        };
        InteractiveUseWithParamRequestMessage.ID = 2661;
        return InteractiveUseWithParamRequestMessage;
    })(InteractiveUseRequestMessage);
    Protocol.InteractiveUseWithParamRequestMessage = InteractiveUseWithParamRequestMessage;
    var StatedElementUpdatedMessage = (function(_super) {
        __extends(StatedElementUpdatedMessage, _super);

        function StatedElementUpdatedMessage() {
            this.statedElement = new StatedElement();
            _super.call(this)
        }
        StatedElementUpdatedMessage.prototype.getMessageId = function() {
            return StatedElementUpdatedMessage.ID;
        };
        StatedElementUpdatedMessage.prototype.reset = function() {
            this.statedElement = new StatedElement();
        };
        StatedElementUpdatedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        StatedElementUpdatedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        StatedElementUpdatedMessage.prototype.serialize = function(output) {
            this.serializeAs_StatedElementUpdatedMessage(output);
        };
        StatedElementUpdatedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_StatedElementUpdatedMessage(input);
        };
        StatedElementUpdatedMessage.prototype.serializeAs_StatedElementUpdatedMessage = function(output) {
            this.statedElement.serializeAs_StatedElement(output);
        };
        StatedElementUpdatedMessage.prototype.deserializeAs_StatedElementUpdatedMessage = function(input) {
            this.statedElement = new StatedElement();
            this.statedElement.deserialize(input);
        };
        StatedElementUpdatedMessage.ID = 5472;
        return StatedElementUpdatedMessage;
    })(NetworkMessage);
    Protocol.StatedElementUpdatedMessage = StatedElementUpdatedMessage;
    var StatedMapUpdateMessage = (function(_super) {
        __extends(StatedMapUpdateMessage, _super);

        function StatedMapUpdateMessage() {
            this.statedElements = [];
            _super.call(this)
        }
        StatedMapUpdateMessage.prototype.getMessageId = function() {
            return StatedMapUpdateMessage.ID;
        };
        StatedMapUpdateMessage.prototype.reset = function() {
            this.statedElements = [];
        };
        StatedMapUpdateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        StatedMapUpdateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        StatedMapUpdateMessage.prototype.serialize = function(output) {
            this.serializeAs_StatedMapUpdateMessage(output);
        };
        StatedMapUpdateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_StatedMapUpdateMessage(input);
        };
        StatedMapUpdateMessage.prototype.serializeAs_StatedMapUpdateMessage = function(output) {
            output.writeShort(this.statedElements.length);
            for (var _i1 = 0; _i1 < this.statedElements.length; _i1++) {
                (this.statedElements[_i1]).serializeAs_StatedElement(output);
            }
        };
        StatedMapUpdateMessage.prototype.deserializeAs_StatedMapUpdateMessage = function(input) {
            var _item1 = null;
            var _statedElementsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _statedElementsLen; _i1++) {
                _item1 = new StatedElement();
                _item1.deserialize(input);
                this.statedElements.push(_item1);
            }
        };
        StatedMapUpdateMessage.ID = 9971;
        return StatedMapUpdateMessage;
    })(NetworkMessage);
    Protocol.StatedMapUpdateMessage = StatedMapUpdateMessage;
    var TeleportDestinationsMessage = (function(_super) {
        __extends(TeleportDestinationsMessage, _super);

        function TeleportDestinationsMessage() {
            this.type = 0;
            this.destinations = [];
            _super.call(this)
        }
        TeleportDestinationsMessage.prototype.getMessageId = function() {
            return TeleportDestinationsMessage.ID;
        };
        TeleportDestinationsMessage.prototype.reset = function() {
            this.type = 0;
            this.destinations = [];
        };
        TeleportDestinationsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TeleportDestinationsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TeleportDestinationsMessage.prototype.serialize = function(output) {
            this.serializeAs_TeleportDestinationsMessage(output);
        };
        TeleportDestinationsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TeleportDestinationsMessage(input);
        };
        TeleportDestinationsMessage.prototype.serializeAs_TeleportDestinationsMessage = function(output) {
            output.writeByte(this.type);
            output.writeShort(this.destinations.length);
            for (var _i2 = 0; _i2 < this.destinations.length; _i2++) {
                (this.destinations[_i2]).serializeAs_TeleportDestination(output);
            }
        };
        TeleportDestinationsMessage.prototype.deserializeAs_TeleportDestinationsMessage = function(input) {
            var _item2 = null;
            this.type = input.readByte();
            if (this.type < 0) {
                throw new Error("Forbidden value (" + this.type + ") on element of TeleportDestinationsMessage.type.");
            }
            var _destinationsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _destinationsLen; _i2++) {
                _item2 = new TeleportDestination();
                _item2.deserialize(input);
                this.destinations.push(_item2);
            }
        };
        TeleportDestinationsMessage.ID = 5005;
        return TeleportDestinationsMessage;
    })(NetworkMessage);
    Protocol.TeleportDestinationsMessage = TeleportDestinationsMessage;
    var TeleportRequestMessage = (function(_super) {
        __extends(TeleportRequestMessage, _super);

        function TeleportRequestMessage() {
            this.sourceType = 0;
            this.destinationType = 0;
            this.mapId = 0;
            _super.call(this)
        }
        TeleportRequestMessage.prototype.getMessageId = function() {
            return TeleportRequestMessage.ID;
        };
        TeleportRequestMessage.prototype.reset = function() {
            this.sourceType = 0;
            this.destinationType = 0;
            this.mapId = 0;
        };
        TeleportRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TeleportRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TeleportRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_TeleportRequestMessage(output);
        };
        TeleportRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TeleportRequestMessage(input);
        };
        TeleportRequestMessage.prototype.serializeAs_TeleportRequestMessage = function(output) {
            output.writeByte(this.sourceType);
            output.writeByte(this.destinationType);
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
        };
        TeleportRequestMessage.prototype.deserializeAs_TeleportRequestMessage = function(input) {
            this.sourceType = input.readByte();
            if (this.sourceType < 0) {
                throw new Error("Forbidden value (" + this.sourceType + ") on element of TeleportRequestMessage.sourceType.");
            }
            this.destinationType = input.readByte();
            if (this.destinationType < 0) {
                throw new Error("Forbidden value (" + this.destinationType + ") on element of TeleportRequestMessage.destinationType.");
            }
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of TeleportRequestMessage.mapId.");
            }
        };
        TeleportRequestMessage.ID = 657;
        return TeleportRequestMessage;
    })(NetworkMessage);
    Protocol.TeleportRequestMessage = TeleportRequestMessage;
    var ZaapDestinationsMessage = (function(_super) {
        __extends(ZaapDestinationsMessage, _super);

        function ZaapDestinationsMessage() {
            this.spawnMapId = 0;
            _super.call(this)
        }
        ZaapDestinationsMessage.prototype.getMessageId = function() {
            return ZaapDestinationsMessage.ID;
        };
        ZaapDestinationsMessage.prototype.reset = function() {
            this.spawnMapId = 0;
        };
        ZaapDestinationsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ZaapDestinationsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ZaapDestinationsMessage.prototype.serialize = function(output) {
            this.serializeAs_ZaapDestinationsMessage(output);
        };
        ZaapDestinationsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ZaapDestinationsMessage(input);
        };
        ZaapDestinationsMessage.prototype.serializeAs_ZaapDestinationsMessage = function(output) {
            _super.prototype.serializeAs_TeleportDestinationsMessage.call(this, output);
            if (this.spawnMapId < 0 || this.spawnMapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.spawnMapId + ") on element spawnMapId.");
            }
            output.writeDouble(this.spawnMapId);
        };
        ZaapDestinationsMessage.prototype.deserializeAs_ZaapDestinationsMessage = function(input) {
            _super.prototype.deserializeAs_TeleportDestinationsMessage.call(this, input);
            this.spawnMapId = input.readDouble();
            if (this.spawnMapId < 0 || this.spawnMapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.spawnMapId + ") on element of ZaapDestinationsMessage.spawnMapId.");
            }
        };
        ZaapDestinationsMessage.ID = 8975;
        return ZaapDestinationsMessage;
    })(TeleportDestinationsMessage);
    Protocol.ZaapDestinationsMessage = ZaapDestinationsMessage;
    var ZaapRespawnSaveRequestMessage = (function(_super) {
        __extends(ZaapRespawnSaveRequestMessage, _super);

        function ZaapRespawnSaveRequestMessage() {

            _super.call(this)
        }
        ZaapRespawnSaveRequestMessage.prototype.getMessageId = function() {
            return ZaapRespawnSaveRequestMessage.ID;
        };
        ZaapRespawnSaveRequestMessage.prototype.reset = function() {

        };
        ZaapRespawnSaveRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ZaapRespawnSaveRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ZaapRespawnSaveRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_ZaapRespawnSaveRequestMessage(output);
        };
        ZaapRespawnSaveRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ZaapRespawnSaveRequestMessage(input);
        };
        ZaapRespawnSaveRequestMessage.prototype.serializeAs_ZaapRespawnSaveRequestMessage = function(output) {

        };
        ZaapRespawnSaveRequestMessage.prototype.deserializeAs_ZaapRespawnSaveRequestMessage = function(input) {

        };
        ZaapRespawnSaveRequestMessage.ID = 8078;
        return ZaapRespawnSaveRequestMessage;
    })(NetworkMessage);
    Protocol.ZaapRespawnSaveRequestMessage = ZaapRespawnSaveRequestMessage;
    var ZaapRespawnUpdatedMessage = (function(_super) {
        __extends(ZaapRespawnUpdatedMessage, _super);

        function ZaapRespawnUpdatedMessage() {
            this.mapId = 0;
            _super.call(this)
        }
        ZaapRespawnUpdatedMessage.prototype.getMessageId = function() {
            return ZaapRespawnUpdatedMessage.ID;
        };
        ZaapRespawnUpdatedMessage.prototype.reset = function() {
            this.mapId = 0;
        };
        ZaapRespawnUpdatedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ZaapRespawnUpdatedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ZaapRespawnUpdatedMessage.prototype.serialize = function(output) {
            this.serializeAs_ZaapRespawnUpdatedMessage(output);
        };
        ZaapRespawnUpdatedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ZaapRespawnUpdatedMessage(input);
        };
        ZaapRespawnUpdatedMessage.prototype.serializeAs_ZaapRespawnUpdatedMessage = function(output) {
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
        };
        ZaapRespawnUpdatedMessage.prototype.deserializeAs_ZaapRespawnUpdatedMessage = function(input) {
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of ZaapRespawnUpdatedMessage.mapId.");
            }
        };
        ZaapRespawnUpdatedMessage.ID = 7539;
        return ZaapRespawnUpdatedMessage;
    })(NetworkMessage);
    Protocol.ZaapRespawnUpdatedMessage = ZaapRespawnUpdatedMessage;
    var DecraftResultMessage = (function(_super) {
        __extends(DecraftResultMessage, _super);

        function DecraftResultMessage() {
            this.results = [];
            _super.call(this)
        }
        DecraftResultMessage.prototype.getMessageId = function() {
            return DecraftResultMessage.ID;
        };
        DecraftResultMessage.prototype.reset = function() {
            this.results = [];
        };
        DecraftResultMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        DecraftResultMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        DecraftResultMessage.prototype.serialize = function(output) {
            this.serializeAs_DecraftResultMessage(output);
        };
        DecraftResultMessage.prototype.deserialize = function(input) {
            this.deserializeAs_DecraftResultMessage(input);
        };
        DecraftResultMessage.prototype.serializeAs_DecraftResultMessage = function(output) {
            output.writeShort(this.results.length);
            for (var _i1 = 0; _i1 < this.results.length; _i1++) {
                (this.results[_i1]).serializeAs_DecraftedItemStackInfo(output);
            }
        };
        DecraftResultMessage.prototype.deserializeAs_DecraftResultMessage = function(input) {
            var _item1 = null;
            var _resultsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _resultsLen; _i1++) {
                _item1 = new DecraftedItemStackInfo();
                _item1.deserialize(input);
                this.results.push(_item1);
            }
        };
        DecraftResultMessage.ID = 9469;
        return DecraftResultMessage;
    })(NetworkMessage);
    Protocol.DecraftResultMessage = DecraftResultMessage;
    var EvolutiveObjectRecycleResultMessage = (function(_super) {
        __extends(EvolutiveObjectRecycleResultMessage, _super);

        function EvolutiveObjectRecycleResultMessage() {
            this.recycledItems = [];
            _super.call(this)
        }
        EvolutiveObjectRecycleResultMessage.prototype.getMessageId = function() {
            return EvolutiveObjectRecycleResultMessage.ID;
        };
        EvolutiveObjectRecycleResultMessage.prototype.reset = function() {
            this.recycledItems = [];
        };
        EvolutiveObjectRecycleResultMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        EvolutiveObjectRecycleResultMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        EvolutiveObjectRecycleResultMessage.prototype.serialize = function(output) {
            this.serializeAs_EvolutiveObjectRecycleResultMessage(output);
        };
        EvolutiveObjectRecycleResultMessage.prototype.deserialize = function(input) {
            this.deserializeAs_EvolutiveObjectRecycleResultMessage(input);
        };
        EvolutiveObjectRecycleResultMessage.prototype.serializeAs_EvolutiveObjectRecycleResultMessage = function(output) {
            output.writeShort(this.recycledItems.length);
            for (var _i1 = 0; _i1 < this.recycledItems.length; _i1++) {
                (this.recycledItems[_i1]).serializeAs_RecycledItem(output);
            }
        };
        EvolutiveObjectRecycleResultMessage.prototype.deserializeAs_EvolutiveObjectRecycleResultMessage = function(input) {
            var _item1 = null;
            var _recycledItemsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _recycledItemsLen; _i1++) {
                _item1 = new RecycledItem();
                _item1.deserialize(input);
                this.recycledItems.push(_item1);
            }
        };
        EvolutiveObjectRecycleResultMessage.ID = 8622;
        return EvolutiveObjectRecycleResultMessage;
    })(NetworkMessage);
    Protocol.EvolutiveObjectRecycleResultMessage = EvolutiveObjectRecycleResultMessage;
    var ExchangeAcceptMessage = (function(_super) {
        __extends(ExchangeAcceptMessage, _super);

        function ExchangeAcceptMessage() {

            _super.call(this)
        }
        ExchangeAcceptMessage.prototype.getMessageId = function() {
            return ExchangeAcceptMessage.ID;
        };
        ExchangeAcceptMessage.prototype.reset = function() {

        };
        ExchangeAcceptMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeAcceptMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeAcceptMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeAcceptMessage(output);
        };
        ExchangeAcceptMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeAcceptMessage(input);
        };
        ExchangeAcceptMessage.prototype.serializeAs_ExchangeAcceptMessage = function(output) {

        };
        ExchangeAcceptMessage.prototype.deserializeAs_ExchangeAcceptMessage = function(input) {

        };
        ExchangeAcceptMessage.ID = 9042;
        return ExchangeAcceptMessage;
    })(NetworkMessage);
    Protocol.ExchangeAcceptMessage = ExchangeAcceptMessage;
    var ExchangeBidHouseBuyMessage = (function(_super) {
        __extends(ExchangeBidHouseBuyMessage, _super);

        function ExchangeBidHouseBuyMessage() {
            this.uid = 0;
            this.qty = 0;
            this.price = 0;
            _super.call(this)
        }
        ExchangeBidHouseBuyMessage.prototype.getMessageId = function() {
            return ExchangeBidHouseBuyMessage.ID;
        };
        ExchangeBidHouseBuyMessage.prototype.reset = function() {
            this.uid = 0;
            this.qty = 0;
            this.price = 0;
        };
        ExchangeBidHouseBuyMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeBidHouseBuyMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeBidHouseBuyMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeBidHouseBuyMessage(output);
        };
        ExchangeBidHouseBuyMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeBidHouseBuyMessage(input);
        };
        ExchangeBidHouseBuyMessage.prototype.serializeAs_ExchangeBidHouseBuyMessage = function(output) {
            if (this.uid < 0) {
                throw new Error("Forbidden value (" + this.uid + ") on element uid.");
            }
            output.writeVarInt(this.uid);
            if (this.qty < 0) {
                throw new Error("Forbidden value (" + this.qty + ") on element qty.");
            }
            output.writeVarInt(this.qty);
            if (this.price < 0 || this.price > 9007199254740990) {
                throw new Error("Forbidden value (" + this.price + ") on element price.");
            }
            output.writeVarLong(this.price);
        };
        ExchangeBidHouseBuyMessage.prototype.deserializeAs_ExchangeBidHouseBuyMessage = function(input) {
            this.uid = input.readVarUhInt();
            if (this.uid < 0) {
                throw new Error("Forbidden value (" + this.uid + ") on element of ExchangeBidHouseBuyMessage.uid.");
            }
            this.qty = input.readVarUhInt();
            if (this.qty < 0) {
                throw new Error("Forbidden value (" + this.qty + ") on element of ExchangeBidHouseBuyMessage.qty.");
            }
            this.price = input.readVarUhLong();
            if (this.price < 0 || this.price > 9007199254740990) {
                throw new Error("Forbidden value (" + this.price + ") on element of ExchangeBidHouseBuyMessage.price.");
            }
        };
        ExchangeBidHouseBuyMessage.ID = 6676;
        return ExchangeBidHouseBuyMessage;
    })(NetworkMessage);
    Protocol.ExchangeBidHouseBuyMessage = ExchangeBidHouseBuyMessage;
    var ExchangeBidHouseBuyResultMessage = (function(_super) {
        __extends(ExchangeBidHouseBuyResultMessage, _super);

        function ExchangeBidHouseBuyResultMessage() {
            this.uid = 0;
            this.bought = false;
            _super.call(this)
        }
        ExchangeBidHouseBuyResultMessage.prototype.getMessageId = function() {
            return ExchangeBidHouseBuyResultMessage.ID;
        };
        ExchangeBidHouseBuyResultMessage.prototype.reset = function() {
            this.uid = 0;
            this.bought = false;
        };
        ExchangeBidHouseBuyResultMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeBidHouseBuyResultMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeBidHouseBuyResultMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeBidHouseBuyResultMessage(output);
        };
        ExchangeBidHouseBuyResultMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeBidHouseBuyResultMessage(input);
        };
        ExchangeBidHouseBuyResultMessage.prototype.serializeAs_ExchangeBidHouseBuyResultMessage = function(output) {
            if (this.uid < 0) {
                throw new Error("Forbidden value (" + this.uid + ") on element uid.");
            }
            output.writeVarInt(this.uid);
            output.writeBoolean(this.bought);
        };
        ExchangeBidHouseBuyResultMessage.prototype.deserializeAs_ExchangeBidHouseBuyResultMessage = function(input) {
            this.uid = input.readVarUhInt();
            if (this.uid < 0) {
                throw new Error("Forbidden value (" + this.uid + ") on element of ExchangeBidHouseBuyResultMessage.uid.");
            }
            this.bought = input.readBoolean();
        };
        ExchangeBidHouseBuyResultMessage.ID = 9696;
        return ExchangeBidHouseBuyResultMessage;
    })(NetworkMessage);
    Protocol.ExchangeBidHouseBuyResultMessage = ExchangeBidHouseBuyResultMessage;
    var ExchangeBidHouseGenericItemAddedMessage = (function(_super) {
        __extends(ExchangeBidHouseGenericItemAddedMessage, _super);

        function ExchangeBidHouseGenericItemAddedMessage() {
            this.objGenericId = 0;
            _super.call(this)
        }
        ExchangeBidHouseGenericItemAddedMessage.prototype.getMessageId = function() {
            return ExchangeBidHouseGenericItemAddedMessage.ID;
        };
        ExchangeBidHouseGenericItemAddedMessage.prototype.reset = function() {
            this.objGenericId = 0;
        };
        ExchangeBidHouseGenericItemAddedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeBidHouseGenericItemAddedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeBidHouseGenericItemAddedMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeBidHouseGenericItemAddedMessage(output);
        };
        ExchangeBidHouseGenericItemAddedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeBidHouseGenericItemAddedMessage(input);
        };
        ExchangeBidHouseGenericItemAddedMessage.prototype.serializeAs_ExchangeBidHouseGenericItemAddedMessage = function(output) {
            if (this.objGenericId < 0) {
                throw new Error("Forbidden value (" + this.objGenericId + ") on element objGenericId.");
            }
            output.writeVarShort(this.objGenericId);
        };
        ExchangeBidHouseGenericItemAddedMessage.prototype.deserializeAs_ExchangeBidHouseGenericItemAddedMessage = function(input) {
            this.objGenericId = input.readVarUhShort();
            if (this.objGenericId < 0) {
                throw new Error("Forbidden value (" + this.objGenericId + ") on element of ExchangeBidHouseGenericItemAddedMessage.objGenericId.");
            }
        };
        ExchangeBidHouseGenericItemAddedMessage.ID = 9722;
        return ExchangeBidHouseGenericItemAddedMessage;
    })(NetworkMessage);
    Protocol.ExchangeBidHouseGenericItemAddedMessage = ExchangeBidHouseGenericItemAddedMessage;
    var ExchangeBidHouseGenericItemRemovedMessage = (function(_super) {
        __extends(ExchangeBidHouseGenericItemRemovedMessage, _super);

        function ExchangeBidHouseGenericItemRemovedMessage() {
            this.objGenericId = 0;
            _super.call(this)
        }
        ExchangeBidHouseGenericItemRemovedMessage.prototype.getMessageId = function() {
            return ExchangeBidHouseGenericItemRemovedMessage.ID;
        };
        ExchangeBidHouseGenericItemRemovedMessage.prototype.reset = function() {
            this.objGenericId = 0;
        };
        ExchangeBidHouseGenericItemRemovedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeBidHouseGenericItemRemovedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeBidHouseGenericItemRemovedMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeBidHouseGenericItemRemovedMessage(output);
        };
        ExchangeBidHouseGenericItemRemovedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeBidHouseGenericItemRemovedMessage(input);
        };
        ExchangeBidHouseGenericItemRemovedMessage.prototype.serializeAs_ExchangeBidHouseGenericItemRemovedMessage = function(output) {
            if (this.objGenericId < 0) {
                throw new Error("Forbidden value (" + this.objGenericId + ") on element objGenericId.");
            }
            output.writeVarShort(this.objGenericId);
        };
        ExchangeBidHouseGenericItemRemovedMessage.prototype.deserializeAs_ExchangeBidHouseGenericItemRemovedMessage = function(input) {
            this.objGenericId = input.readVarUhShort();
            if (this.objGenericId < 0) {
                throw new Error("Forbidden value (" + this.objGenericId + ") on element of ExchangeBidHouseGenericItemRemovedMessage.objGenericId.");
            }
        };
        ExchangeBidHouseGenericItemRemovedMessage.ID = 636;
        return ExchangeBidHouseGenericItemRemovedMessage;
    })(NetworkMessage);
    Protocol.ExchangeBidHouseGenericItemRemovedMessage = ExchangeBidHouseGenericItemRemovedMessage;
    var ExchangeBidHouseInListAddedMessage = (function(_super) {
        __extends(ExchangeBidHouseInListAddedMessage, _super);

        function ExchangeBidHouseInListAddedMessage() {
            this.itemUID = 0;
            this.objectGID = 0;
            this.objectType = 0;
            this.effects = [];
            this.prices = [];
            _super.call(this)
        }
        ExchangeBidHouseInListAddedMessage.prototype.getMessageId = function() {
            return ExchangeBidHouseInListAddedMessage.ID;
        };
        ExchangeBidHouseInListAddedMessage.prototype.reset = function() {
            this.itemUID = 0;
            this.objectGID = 0;
            this.objectType = 0;
            this.effects = [];
            this.prices = [];
        };
        ExchangeBidHouseInListAddedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeBidHouseInListAddedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeBidHouseInListAddedMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeBidHouseInListAddedMessage(output);
        };
        ExchangeBidHouseInListAddedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeBidHouseInListAddedMessage(input);
        };
        ExchangeBidHouseInListAddedMessage.prototype.serializeAs_ExchangeBidHouseInListAddedMessage = function(output) {
            output.writeInt(this.itemUID);
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element objectGID.");
            }
            output.writeVarShort(this.objectGID);
            if (this.objectType < 0) {
                throw new Error("Forbidden value (" + this.objectType + ") on element objectType.");
            }
            output.writeInt(this.objectType);
            output.writeShort(this.effects.length);
            for (var _i4 = 0; _i4 < this.effects.length; _i4++) {
                output.writeShort((this.effects[_i4]).getTypeId());
                (this.effects[_i4]).serialize(output);
            }
            output.writeShort(this.prices.length);
            for (var _i5 = 0; _i5 < this.prices.length; _i5++) {
                if (this.prices[_i5] < 0 || this.prices[_i5] > 9007199254740990) {
                    throw new Error("Forbidden value (" + this.prices[_i5] + ") on element 5 (starting at 1) of prices.");
                }
                output.writeVarLong(this.prices[_i5]);
            }
        };
        ExchangeBidHouseInListAddedMessage.prototype.deserializeAs_ExchangeBidHouseInListAddedMessage = function(input) {
            var _id4 = 0;
            var _item4 = null;
            var _val5 = NaN;
            this.itemUID = input.readInt();
            this.objectGID = input.readVarUhShort();
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element of ExchangeBidHouseInListAddedMessage.objectGID.");
            }
            this.objectType = input.readInt();
            if (this.objectType < 0) {
                throw new Error("Forbidden value (" + this.objectType + ") on element of ExchangeBidHouseInListAddedMessage.objectType.");
            }
            var _effectsLen = input.readUnsignedShort();
            for (var _i4 = 0; _i4 < _effectsLen; _i4++) {
                _id4 = input.readUnsignedShort();
                _item4 = ProtocolTypeManager.getInstance(ObjectEffect, _id4);
                _item4.deserialize(input);
                this.effects.push(_item4);
            }
            var _pricesLen = input.readUnsignedShort();
            for (var _i5 = 0; _i5 < _pricesLen; _i5++) {
                _val5 = input.readVarUhLong();
                if (_val5 < 0 || _val5 > 9007199254740990) {
                    throw new Error("Forbidden value (" + _val5 + ") on elements of prices.");
                }
                this.prices.push(_val5);
            }
        };
        ExchangeBidHouseInListAddedMessage.ID = 1407;
        return ExchangeBidHouseInListAddedMessage;
    })(NetworkMessage);
    Protocol.ExchangeBidHouseInListAddedMessage = ExchangeBidHouseInListAddedMessage;
    var ExchangeBidHouseInListRemovedMessage = (function(_super) {
        __extends(ExchangeBidHouseInListRemovedMessage, _super);

        function ExchangeBidHouseInListRemovedMessage() {
            this.itemUID = 0;
            this.objectGID = 0;
            this.objectType = 0;
            _super.call(this)
        }
        ExchangeBidHouseInListRemovedMessage.prototype.getMessageId = function() {
            return ExchangeBidHouseInListRemovedMessage.ID;
        };
        ExchangeBidHouseInListRemovedMessage.prototype.reset = function() {
            this.itemUID = 0;
            this.objectGID = 0;
            this.objectType = 0;
        };
        ExchangeBidHouseInListRemovedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeBidHouseInListRemovedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeBidHouseInListRemovedMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeBidHouseInListRemovedMessage(output);
        };
        ExchangeBidHouseInListRemovedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeBidHouseInListRemovedMessage(input);
        };
        ExchangeBidHouseInListRemovedMessage.prototype.serializeAs_ExchangeBidHouseInListRemovedMessage = function(output) {
            output.writeInt(this.itemUID);
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element objectGID.");
            }
            output.writeVarShort(this.objectGID);
            if (this.objectType < 0) {
                throw new Error("Forbidden value (" + this.objectType + ") on element objectType.");
            }
            output.writeInt(this.objectType);
        };
        ExchangeBidHouseInListRemovedMessage.prototype.deserializeAs_ExchangeBidHouseInListRemovedMessage = function(input) {
            this.itemUID = input.readInt();
            this.objectGID = input.readVarUhShort();
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element of ExchangeBidHouseInListRemovedMessage.objectGID.");
            }
            this.objectType = input.readInt();
            if (this.objectType < 0) {
                throw new Error("Forbidden value (" + this.objectType + ") on element of ExchangeBidHouseInListRemovedMessage.objectType.");
            }
        };
        ExchangeBidHouseInListRemovedMessage.ID = 1444;
        return ExchangeBidHouseInListRemovedMessage;
    })(NetworkMessage);
    Protocol.ExchangeBidHouseInListRemovedMessage = ExchangeBidHouseInListRemovedMessage;
    var ExchangeBidHouseInListUpdatedMessage = (function(_super) {
        __extends(ExchangeBidHouseInListUpdatedMessage, _super);

        function ExchangeBidHouseInListUpdatedMessage() {

            _super.call(this)
        }
        ExchangeBidHouseInListUpdatedMessage.prototype.getMessageId = function() {
            return ExchangeBidHouseInListUpdatedMessage.ID;
        };
        ExchangeBidHouseInListUpdatedMessage.prototype.reset = function() {

        };
        ExchangeBidHouseInListUpdatedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeBidHouseInListUpdatedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeBidHouseInListUpdatedMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeBidHouseInListUpdatedMessage(output);
        };
        ExchangeBidHouseInListUpdatedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeBidHouseInListUpdatedMessage(input);
        };
        ExchangeBidHouseInListUpdatedMessage.prototype.serializeAs_ExchangeBidHouseInListUpdatedMessage = function(output) {
            _super.prototype.serializeAs_ExchangeBidHouseInListAddedMessage.call(this, output);
        };
        ExchangeBidHouseInListUpdatedMessage.prototype.deserializeAs_ExchangeBidHouseInListUpdatedMessage = function(input) {
            _super.prototype.deserializeAs_ExchangeBidHouseInListAddedMessage.call(this, input);
        };
        ExchangeBidHouseInListUpdatedMessage.ID = 2741;
        return ExchangeBidHouseInListUpdatedMessage;
    })(ExchangeBidHouseInListAddedMessage);
    Protocol.ExchangeBidHouseInListUpdatedMessage = ExchangeBidHouseInListUpdatedMessage;
    var ExchangeBidHouseItemAddOkMessage = (function(_super) {
        __extends(ExchangeBidHouseItemAddOkMessage, _super);

        function ExchangeBidHouseItemAddOkMessage() {
            this.itemInfo = new ObjectItemToSellInBid();
            _super.call(this)
        }
        ExchangeBidHouseItemAddOkMessage.prototype.getMessageId = function() {
            return ExchangeBidHouseItemAddOkMessage.ID;
        };
        ExchangeBidHouseItemAddOkMessage.prototype.reset = function() {
            this.itemInfo = new ObjectItemToSellInBid();
        };
        ExchangeBidHouseItemAddOkMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeBidHouseItemAddOkMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeBidHouseItemAddOkMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeBidHouseItemAddOkMessage(output);
        };
        ExchangeBidHouseItemAddOkMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeBidHouseItemAddOkMessage(input);
        };
        ExchangeBidHouseItemAddOkMessage.prototype.serializeAs_ExchangeBidHouseItemAddOkMessage = function(output) {
            this.itemInfo.serializeAs_ObjectItemToSellInBid(output);
        };
        ExchangeBidHouseItemAddOkMessage.prototype.deserializeAs_ExchangeBidHouseItemAddOkMessage = function(input) {
            this.itemInfo = new ObjectItemToSellInBid();
            this.itemInfo.deserialize(input);
        };
        ExchangeBidHouseItemAddOkMessage.ID = 806;
        return ExchangeBidHouseItemAddOkMessage;
    })(NetworkMessage);
    Protocol.ExchangeBidHouseItemAddOkMessage = ExchangeBidHouseItemAddOkMessage;
    var ExchangeBidHouseItemRemoveOkMessage = (function(_super) {
        __extends(ExchangeBidHouseItemRemoveOkMessage, _super);

        function ExchangeBidHouseItemRemoveOkMessage() {
            this.sellerId = 0;
            _super.call(this)
        }
        ExchangeBidHouseItemRemoveOkMessage.prototype.getMessageId = function() {
            return ExchangeBidHouseItemRemoveOkMessage.ID;
        };
        ExchangeBidHouseItemRemoveOkMessage.prototype.reset = function() {
            this.sellerId = 0;
        };
        ExchangeBidHouseItemRemoveOkMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeBidHouseItemRemoveOkMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeBidHouseItemRemoveOkMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeBidHouseItemRemoveOkMessage(output);
        };
        ExchangeBidHouseItemRemoveOkMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeBidHouseItemRemoveOkMessage(input);
        };
        ExchangeBidHouseItemRemoveOkMessage.prototype.serializeAs_ExchangeBidHouseItemRemoveOkMessage = function(output) {
            output.writeInt(this.sellerId);
        };
        ExchangeBidHouseItemRemoveOkMessage.prototype.deserializeAs_ExchangeBidHouseItemRemoveOkMessage = function(input) {
            this.sellerId = input.readInt();
        };
        ExchangeBidHouseItemRemoveOkMessage.ID = 8459;
        return ExchangeBidHouseItemRemoveOkMessage;
    })(NetworkMessage);
    Protocol.ExchangeBidHouseItemRemoveOkMessage = ExchangeBidHouseItemRemoveOkMessage;
    var ExchangeBidHouseListMessage = (function(_super) {
        __extends(ExchangeBidHouseListMessage, _super);

        function ExchangeBidHouseListMessage() {
            this.id = 0;
            this.follow = false;
            _super.call(this)
        }
        ExchangeBidHouseListMessage.prototype.getMessageId = function() {
            return ExchangeBidHouseListMessage.ID;
        };
        ExchangeBidHouseListMessage.prototype.reset = function() {
            this.id = 0;
            this.follow = false;
        };
        ExchangeBidHouseListMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeBidHouseListMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeBidHouseListMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeBidHouseListMessage(output);
        };
        ExchangeBidHouseListMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeBidHouseListMessage(input);
        };
        ExchangeBidHouseListMessage.prototype.serializeAs_ExchangeBidHouseListMessage = function(output) {
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarShort(this.id);
            output.writeBoolean(this.follow);
        };
        ExchangeBidHouseListMessage.prototype.deserializeAs_ExchangeBidHouseListMessage = function(input) {
            this.id = input.readVarUhShort();
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element of ExchangeBidHouseListMessage.id.");
            }
            this.follow = input.readBoolean();
        };
        ExchangeBidHouseListMessage.ID = 1285;
        return ExchangeBidHouseListMessage;
    })(NetworkMessage);
    Protocol.ExchangeBidHouseListMessage = ExchangeBidHouseListMessage;
    var ExchangeBidHousePriceMessage = (function(_super) {
        __extends(ExchangeBidHousePriceMessage, _super);

        function ExchangeBidHousePriceMessage() {
            this.genId = 0;
            _super.call(this)
        }
        ExchangeBidHousePriceMessage.prototype.getMessageId = function() {
            return ExchangeBidHousePriceMessage.ID;
        };
        ExchangeBidHousePriceMessage.prototype.reset = function() {
            this.genId = 0;
        };
        ExchangeBidHousePriceMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeBidHousePriceMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeBidHousePriceMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeBidHousePriceMessage(output);
        };
        ExchangeBidHousePriceMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeBidHousePriceMessage(input);
        };
        ExchangeBidHousePriceMessage.prototype.serializeAs_ExchangeBidHousePriceMessage = function(output) {
            if (this.genId < 0) {
                throw new Error("Forbidden value (" + this.genId + ") on element genId.");
            }
            output.writeVarShort(this.genId);
        };
        ExchangeBidHousePriceMessage.prototype.deserializeAs_ExchangeBidHousePriceMessage = function(input) {
            this.genId = input.readVarUhShort();
            if (this.genId < 0) {
                throw new Error("Forbidden value (" + this.genId + ") on element of ExchangeBidHousePriceMessage.genId.");
            }
        };
        ExchangeBidHousePriceMessage.ID = 3234;
        return ExchangeBidHousePriceMessage;
    })(NetworkMessage);
    Protocol.ExchangeBidHousePriceMessage = ExchangeBidHousePriceMessage;
    var ExchangeBidHouseSearchMessage = (function(_super) {
        __extends(ExchangeBidHouseSearchMessage, _super);

        function ExchangeBidHouseSearchMessage() {
            this.genId = 0;
            this.follow = false;
            _super.call(this)
        }
        ExchangeBidHouseSearchMessage.prototype.getMessageId = function() {
            return ExchangeBidHouseSearchMessage.ID;
        };
        ExchangeBidHouseSearchMessage.prototype.reset = function() {
            this.genId = 0;
            this.follow = false;
        };
        ExchangeBidHouseSearchMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeBidHouseSearchMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeBidHouseSearchMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeBidHouseSearchMessage(output);
        };
        ExchangeBidHouseSearchMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeBidHouseSearchMessage(input);
        };
        ExchangeBidHouseSearchMessage.prototype.serializeAs_ExchangeBidHouseSearchMessage = function(output) {
            if (this.genId < 0) {
                throw new Error("Forbidden value (" + this.genId + ") on element genId.");
            }
            output.writeVarShort(this.genId);
            output.writeBoolean(this.follow);
        };
        ExchangeBidHouseSearchMessage.prototype.deserializeAs_ExchangeBidHouseSearchMessage = function(input) {
            this.genId = input.readVarUhShort();
            if (this.genId < 0) {
                throw new Error("Forbidden value (" + this.genId + ") on element of ExchangeBidHouseSearchMessage.genId.");
            }
            this.follow = input.readBoolean();
        };
        ExchangeBidHouseSearchMessage.ID = 3308;
        return ExchangeBidHouseSearchMessage;
    })(NetworkMessage);
    Protocol.ExchangeBidHouseSearchMessage = ExchangeBidHouseSearchMessage;
    var ExchangeBidHouseTypeMessage = (function(_super) {
        __extends(ExchangeBidHouseTypeMessage, _super);

        function ExchangeBidHouseTypeMessage() {
            this.type = 0;
            this.follow = false;
            _super.call(this)
        }
        ExchangeBidHouseTypeMessage.prototype.getMessageId = function() {
            return ExchangeBidHouseTypeMessage.ID;
        };
        ExchangeBidHouseTypeMessage.prototype.reset = function() {
            this.type = 0;
            this.follow = false;
        };
        ExchangeBidHouseTypeMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeBidHouseTypeMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeBidHouseTypeMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeBidHouseTypeMessage(output);
        };
        ExchangeBidHouseTypeMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeBidHouseTypeMessage(input);
        };
        ExchangeBidHouseTypeMessage.prototype.serializeAs_ExchangeBidHouseTypeMessage = function(output) {
            if (this.type < 0) {
                throw new Error("Forbidden value (" + this.type + ") on element type.");
            }
            output.writeVarInt(this.type);
            output.writeBoolean(this.follow);
        };
        ExchangeBidHouseTypeMessage.prototype.deserializeAs_ExchangeBidHouseTypeMessage = function(input) {
            this.type = input.readVarUhInt();
            if (this.type < 0) {
                throw new Error("Forbidden value (" + this.type + ") on element of ExchangeBidHouseTypeMessage.type.");
            }
            this.follow = input.readBoolean();
        };
        ExchangeBidHouseTypeMessage.ID = 270;
        return ExchangeBidHouseTypeMessage;
    })(NetworkMessage);
    Protocol.ExchangeBidHouseTypeMessage = ExchangeBidHouseTypeMessage;
    var ExchangeBidHouseUnsoldItemsMessage = (function(_super) {
        __extends(ExchangeBidHouseUnsoldItemsMessage, _super);

        function ExchangeBidHouseUnsoldItemsMessage() {
            this.items = [];
            _super.call(this)
        }
        ExchangeBidHouseUnsoldItemsMessage.prototype.getMessageId = function() {
            return ExchangeBidHouseUnsoldItemsMessage.ID;
        };
        ExchangeBidHouseUnsoldItemsMessage.prototype.reset = function() {
            this.items = [];
        };
        ExchangeBidHouseUnsoldItemsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeBidHouseUnsoldItemsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeBidHouseUnsoldItemsMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeBidHouseUnsoldItemsMessage(output);
        };
        ExchangeBidHouseUnsoldItemsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeBidHouseUnsoldItemsMessage(input);
        };
        ExchangeBidHouseUnsoldItemsMessage.prototype.serializeAs_ExchangeBidHouseUnsoldItemsMessage = function(output) {
            output.writeShort(this.items.length);
            for (var _i1 = 0; _i1 < this.items.length; _i1++) {
                (this.items[_i1]).serializeAs_ObjectItemGenericQuantity(output);
            }
        };
        ExchangeBidHouseUnsoldItemsMessage.prototype.deserializeAs_ExchangeBidHouseUnsoldItemsMessage = function(input) {
            var _item1 = null;
            var _itemsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _itemsLen; _i1++) {
                _item1 = new ObjectItemGenericQuantity();
                _item1.deserialize(input);
                this.items.push(_item1);
            }
        };
        ExchangeBidHouseUnsoldItemsMessage.ID = 4688;
        return ExchangeBidHouseUnsoldItemsMessage;
    })(NetworkMessage);
    Protocol.ExchangeBidHouseUnsoldItemsMessage = ExchangeBidHouseUnsoldItemsMessage;
    var ExchangeBidPriceMessage = (function(_super) {
        __extends(ExchangeBidPriceMessage, _super);

        function ExchangeBidPriceMessage() {
            this.genericId = 0;
            this.averagePrice = 0;
            _super.call(this)
        }
        ExchangeBidPriceMessage.prototype.getMessageId = function() {
            return ExchangeBidPriceMessage.ID;
        };
        ExchangeBidPriceMessage.prototype.reset = function() {
            this.genericId = 0;
            this.averagePrice = 0;
        };
        ExchangeBidPriceMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeBidPriceMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeBidPriceMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeBidPriceMessage(output);
        };
        ExchangeBidPriceMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeBidPriceMessage(input);
        };
        ExchangeBidPriceMessage.prototype.serializeAs_ExchangeBidPriceMessage = function(output) {
            if (this.genericId < 0) {
                throw new Error("Forbidden value (" + this.genericId + ") on element genericId.");
            }
            output.writeVarShort(this.genericId);
            if (this.averagePrice < -9007199254740990 || this.averagePrice > 9007199254740990) {
                throw new Error("Forbidden value (" + this.averagePrice + ") on element averagePrice.");
            }
            output.writeVarLong(this.averagePrice);
        };
        ExchangeBidPriceMessage.prototype.deserializeAs_ExchangeBidPriceMessage = function(input) {
            this.genericId = input.readVarUhShort();
            if (this.genericId < 0) {
                throw new Error("Forbidden value (" + this.genericId + ") on element of ExchangeBidPriceMessage.genericId.");
            }
            this.averagePrice = input.readVarLong();
            if (this.averagePrice < -9007199254740990 || this.averagePrice > 9007199254740990) {
                throw new Error("Forbidden value (" + this.averagePrice + ") on element of ExchangeBidPriceMessage.averagePrice.");
            }
        };
        ExchangeBidPriceMessage.ID = 3774;
        return ExchangeBidPriceMessage;
    })(NetworkMessage);
    Protocol.ExchangeBidPriceMessage = ExchangeBidPriceMessage;
    var ExchangeBidPriceForSellerMessage = (function(_super) {
        __extends(ExchangeBidPriceForSellerMessage, _super);

        function ExchangeBidPriceForSellerMessage() {
            this.allIdentical = false;
            this.minimalPrices = [];
            _super.call(this)
        }
        ExchangeBidPriceForSellerMessage.prototype.getMessageId = function() {
            return ExchangeBidPriceForSellerMessage.ID;
        };
        ExchangeBidPriceForSellerMessage.prototype.reset = function() {
            this.allIdentical = false;
            this.minimalPrices = [];
        };
        ExchangeBidPriceForSellerMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeBidPriceForSellerMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeBidPriceForSellerMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeBidPriceForSellerMessage(output);
        };
        ExchangeBidPriceForSellerMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeBidPriceForSellerMessage(input);
        };
        ExchangeBidPriceForSellerMessage.prototype.serializeAs_ExchangeBidPriceForSellerMessage = function(output) {
            _super.prototype.serializeAs_ExchangeBidPriceMessage.call(this, output);
            output.writeBoolean(this.allIdentical);
            output.writeShort(this.minimalPrices.length);
            for (var _i2 = 0; _i2 < this.minimalPrices.length; _i2++) {
                if (this.minimalPrices[_i2] < 0 || this.minimalPrices[_i2] > 9007199254740990) {
                    throw new Error("Forbidden value (" + this.minimalPrices[_i2] + ") on element 2 (starting at 1) of minimalPrices.");
                }
                output.writeVarLong(this.minimalPrices[_i2]);
            }
        };
        ExchangeBidPriceForSellerMessage.prototype.deserializeAs_ExchangeBidPriceForSellerMessage = function(input) {
            var _val2 = NaN;
            _super.prototype.deserializeAs_ExchangeBidPriceMessage.call(this, input);
            this.allIdentical = input.readBoolean();
            var _minimalPricesLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _minimalPricesLen; _i2++) {
                _val2 = input.readVarUhLong();
                if (_val2 < 0 || _val2 > 9007199254740990) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of minimalPrices.");
                }
                this.minimalPrices.push(_val2);
            }
        };
        ExchangeBidPriceForSellerMessage.ID = 4716;
        return ExchangeBidPriceForSellerMessage;
    })(ExchangeBidPriceMessage);
    Protocol.ExchangeBidPriceForSellerMessage = ExchangeBidPriceForSellerMessage;
    var ExchangeBidSearchOkMessage = (function(_super) {
        __extends(ExchangeBidSearchOkMessage, _super);

        function ExchangeBidSearchOkMessage() {

            _super.call(this)
        }
        ExchangeBidSearchOkMessage.prototype.getMessageId = function() {
            return ExchangeBidSearchOkMessage.ID;
        };
        ExchangeBidSearchOkMessage.prototype.reset = function() {

        };
        ExchangeBidSearchOkMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeBidSearchOkMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeBidSearchOkMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeBidSearchOkMessage(output);
        };
        ExchangeBidSearchOkMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeBidSearchOkMessage(input);
        };
        ExchangeBidSearchOkMessage.prototype.serializeAs_ExchangeBidSearchOkMessage = function(output) {

        };
        ExchangeBidSearchOkMessage.prototype.deserializeAs_ExchangeBidSearchOkMessage = function(input) {

        };
        ExchangeBidSearchOkMessage.ID = 8600;
        return ExchangeBidSearchOkMessage;
    })(NetworkMessage);
    Protocol.ExchangeBidSearchOkMessage = ExchangeBidSearchOkMessage;
    var ExchangeBuyMessage = (function(_super) {
        __extends(ExchangeBuyMessage, _super);

        function ExchangeBuyMessage() {
            this.objectToBuyId = 0;
            this.quantity = 0;
            _super.call(this)
        }
        ExchangeBuyMessage.prototype.getMessageId = function() {
            return ExchangeBuyMessage.ID;
        };
        ExchangeBuyMessage.prototype.reset = function() {
            this.objectToBuyId = 0;
            this.quantity = 0;
        };
        ExchangeBuyMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeBuyMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeBuyMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeBuyMessage(output);
        };
        ExchangeBuyMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeBuyMessage(input);
        };
        ExchangeBuyMessage.prototype.serializeAs_ExchangeBuyMessage = function(output) {
            if (this.objectToBuyId < 0) {
                throw new Error("Forbidden value (" + this.objectToBuyId + ") on element objectToBuyId.");
            }
            output.writeVarInt(this.objectToBuyId);
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
            }
            output.writeVarInt(this.quantity);
        };
        ExchangeBuyMessage.prototype.deserializeAs_ExchangeBuyMessage = function(input) {
            this.objectToBuyId = input.readVarUhInt();
            if (this.objectToBuyId < 0) {
                throw new Error("Forbidden value (" + this.objectToBuyId + ") on element of ExchangeBuyMessage.objectToBuyId.");
            }
            this.quantity = input.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element of ExchangeBuyMessage.quantity.");
            }
        };
        ExchangeBuyMessage.ID = 8531;
        return ExchangeBuyMessage;
    })(NetworkMessage);
    Protocol.ExchangeBuyMessage = ExchangeBuyMessage;
    var ExchangeBuyOkMessage = (function(_super) {
        __extends(ExchangeBuyOkMessage, _super);

        function ExchangeBuyOkMessage() {

            _super.call(this)
        }
        ExchangeBuyOkMessage.prototype.getMessageId = function() {
            return ExchangeBuyOkMessage.ID;
        };
        ExchangeBuyOkMessage.prototype.reset = function() {

        };
        ExchangeBuyOkMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeBuyOkMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeBuyOkMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeBuyOkMessage(output);
        };
        ExchangeBuyOkMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeBuyOkMessage(input);
        };
        ExchangeBuyOkMessage.prototype.serializeAs_ExchangeBuyOkMessage = function(output) {

        };
        ExchangeBuyOkMessage.prototype.deserializeAs_ExchangeBuyOkMessage = function(input) {

        };
        ExchangeBuyOkMessage.ID = 35;
        return ExchangeBuyOkMessage;
    })(NetworkMessage);
    Protocol.ExchangeBuyOkMessage = ExchangeBuyOkMessage;
    var ExchangeCraftCountModifiedMessage = (function(_super) {
        __extends(ExchangeCraftCountModifiedMessage, _super);

        function ExchangeCraftCountModifiedMessage() {
            this.count = 0;
            _super.call(this)
        }
        ExchangeCraftCountModifiedMessage.prototype.getMessageId = function() {
            return ExchangeCraftCountModifiedMessage.ID;
        };
        ExchangeCraftCountModifiedMessage.prototype.reset = function() {
            this.count = 0;
        };
        ExchangeCraftCountModifiedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeCraftCountModifiedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeCraftCountModifiedMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeCraftCountModifiedMessage(output);
        };
        ExchangeCraftCountModifiedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeCraftCountModifiedMessage(input);
        };
        ExchangeCraftCountModifiedMessage.prototype.serializeAs_ExchangeCraftCountModifiedMessage = function(output) {
            output.writeVarInt(this.count);
        };
        ExchangeCraftCountModifiedMessage.prototype.deserializeAs_ExchangeCraftCountModifiedMessage = function(input) {
            this.count = input.readVarInt();
        };
        ExchangeCraftCountModifiedMessage.ID = 3137;
        return ExchangeCraftCountModifiedMessage;
    })(NetworkMessage);
    Protocol.ExchangeCraftCountModifiedMessage = ExchangeCraftCountModifiedMessage;
    var ExchangeCraftCountRequestMessage = (function(_super) {
        __extends(ExchangeCraftCountRequestMessage, _super);

        function ExchangeCraftCountRequestMessage() {
            this.count = 0;
            _super.call(this)
        }
        ExchangeCraftCountRequestMessage.prototype.getMessageId = function() {
            return ExchangeCraftCountRequestMessage.ID;
        };
        ExchangeCraftCountRequestMessage.prototype.reset = function() {
            this.count = 0;
        };
        ExchangeCraftCountRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeCraftCountRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeCraftCountRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeCraftCountRequestMessage(output);
        };
        ExchangeCraftCountRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeCraftCountRequestMessage(input);
        };
        ExchangeCraftCountRequestMessage.prototype.serializeAs_ExchangeCraftCountRequestMessage = function(output) {
            output.writeVarInt(this.count);
        };
        ExchangeCraftCountRequestMessage.prototype.deserializeAs_ExchangeCraftCountRequestMessage = function(input) {
            this.count = input.readVarInt();
        };
        ExchangeCraftCountRequestMessage.ID = 1855;
        return ExchangeCraftCountRequestMessage;
    })(NetworkMessage);
    Protocol.ExchangeCraftCountRequestMessage = ExchangeCraftCountRequestMessage;
    var ExchangeCrafterJobLevelupMessage = (function(_super) {
        __extends(ExchangeCrafterJobLevelupMessage, _super);

        function ExchangeCrafterJobLevelupMessage() {
            this.crafterJobLevel = 0;
            _super.call(this)
        }
        ExchangeCrafterJobLevelupMessage.prototype.getMessageId = function() {
            return ExchangeCrafterJobLevelupMessage.ID;
        };
        ExchangeCrafterJobLevelupMessage.prototype.reset = function() {
            this.crafterJobLevel = 0;
        };
        ExchangeCrafterJobLevelupMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeCrafterJobLevelupMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeCrafterJobLevelupMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeCrafterJobLevelupMessage(output);
        };
        ExchangeCrafterJobLevelupMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeCrafterJobLevelupMessage(input);
        };
        ExchangeCrafterJobLevelupMessage.prototype.serializeAs_ExchangeCrafterJobLevelupMessage = function(output) {
            if (this.crafterJobLevel < 0 || this.crafterJobLevel > 255) {
                throw new Error("Forbidden value (" + this.crafterJobLevel + ") on element crafterJobLevel.");
            }
            output.writeByte(this.crafterJobLevel);
        };
        ExchangeCrafterJobLevelupMessage.prototype.deserializeAs_ExchangeCrafterJobLevelupMessage = function(input) {
            this.crafterJobLevel = input.readUnsignedByte();
            if (this.crafterJobLevel < 0 || this.crafterJobLevel > 255) {
                throw new Error("Forbidden value (" + this.crafterJobLevel + ") on element of ExchangeCrafterJobLevelupMessage.crafterJobLevel.");
            }
        };
        ExchangeCrafterJobLevelupMessage.ID = 6788;
        return ExchangeCrafterJobLevelupMessage;
    })(NetworkMessage);
    Protocol.ExchangeCrafterJobLevelupMessage = ExchangeCrafterJobLevelupMessage;
    var ExchangeCraftResultMessage = (function(_super) {
        __extends(ExchangeCraftResultMessage, _super);

        function ExchangeCraftResultMessage() {
            this.craftResult = 0;
            _super.call(this)
        }
        ExchangeCraftResultMessage.prototype.getMessageId = function() {
            return ExchangeCraftResultMessage.ID;
        };
        ExchangeCraftResultMessage.prototype.reset = function() {
            this.craftResult = 0;
        };
        ExchangeCraftResultMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeCraftResultMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeCraftResultMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeCraftResultMessage(output);
        };
        ExchangeCraftResultMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeCraftResultMessage(input);
        };
        ExchangeCraftResultMessage.prototype.serializeAs_ExchangeCraftResultMessage = function(output) {
            output.writeByte(this.craftResult);
        };
        ExchangeCraftResultMessage.prototype.deserializeAs_ExchangeCraftResultMessage = function(input) {
            this.craftResult = input.readByte();
            if (this.craftResult < 0) {
                throw new Error("Forbidden value (" + this.craftResult + ") on element of ExchangeCraftResultMessage.craftResult.");
            }
        };
        ExchangeCraftResultMessage.ID = 1845;
        return ExchangeCraftResultMessage;
    })(NetworkMessage);
    Protocol.ExchangeCraftResultMessage = ExchangeCraftResultMessage;
    var ExchangeCraftResultWithObjectIdMessage = (function(_super) {
        __extends(ExchangeCraftResultWithObjectIdMessage, _super);

        function ExchangeCraftResultWithObjectIdMessage() {
            this.objectGenericId = 0;
            _super.call(this)
        }
        ExchangeCraftResultWithObjectIdMessage.prototype.getMessageId = function() {
            return ExchangeCraftResultWithObjectIdMessage.ID;
        };
        ExchangeCraftResultWithObjectIdMessage.prototype.reset = function() {
            this.objectGenericId = 0;
        };
        ExchangeCraftResultWithObjectIdMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeCraftResultWithObjectIdMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeCraftResultWithObjectIdMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeCraftResultWithObjectIdMessage(output);
        };
        ExchangeCraftResultWithObjectIdMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeCraftResultWithObjectIdMessage(input);
        };
        ExchangeCraftResultWithObjectIdMessage.prototype.serializeAs_ExchangeCraftResultWithObjectIdMessage = function(output) {
            _super.prototype.serializeAs_ExchangeCraftResultMessage.call(this, output);
            if (this.objectGenericId < 0) {
                throw new Error("Forbidden value (" + this.objectGenericId + ") on element objectGenericId.");
            }
            output.writeVarShort(this.objectGenericId);
        };
        ExchangeCraftResultWithObjectIdMessage.prototype.deserializeAs_ExchangeCraftResultWithObjectIdMessage = function(input) {
            _super.prototype.deserializeAs_ExchangeCraftResultMessage.call(this, input);
            this.objectGenericId = input.readVarUhShort();
            if (this.objectGenericId < 0) {
                throw new Error("Forbidden value (" + this.objectGenericId + ") on element of ExchangeCraftResultWithObjectIdMessage.objectGenericId.");
            }
        };
        ExchangeCraftResultWithObjectIdMessage.ID = 1951;
        return ExchangeCraftResultWithObjectIdMessage;
    })(ExchangeCraftResultMessage);
    Protocol.ExchangeCraftResultWithObjectIdMessage = ExchangeCraftResultWithObjectIdMessage;
    var ExchangeCraftInformationObjectMessage = (function(_super) {
        __extends(ExchangeCraftInformationObjectMessage, _super);

        function ExchangeCraftInformationObjectMessage() {
            this.playerId = 0;
            _super.call(this)
        }
        ExchangeCraftInformationObjectMessage.prototype.getMessageId = function() {
            return ExchangeCraftInformationObjectMessage.ID;
        };
        ExchangeCraftInformationObjectMessage.prototype.reset = function() {
            this.playerId = 0;
        };
        ExchangeCraftInformationObjectMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeCraftInformationObjectMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeCraftInformationObjectMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeCraftInformationObjectMessage(output);
        };
        ExchangeCraftInformationObjectMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeCraftInformationObjectMessage(input);
        };
        ExchangeCraftInformationObjectMessage.prototype.serializeAs_ExchangeCraftInformationObjectMessage = function(output) {
            _super.prototype.serializeAs_ExchangeCraftResultWithObjectIdMessage.call(this, output);
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
        };
        ExchangeCraftInformationObjectMessage.prototype.deserializeAs_ExchangeCraftInformationObjectMessage = function(input) {
            _super.prototype.deserializeAs_ExchangeCraftResultWithObjectIdMessage.call(this, input);
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of ExchangeCraftInformationObjectMessage.playerId.");
            }
        };
        ExchangeCraftInformationObjectMessage.ID = 819;
        return ExchangeCraftInformationObjectMessage;
    })(ExchangeCraftResultWithObjectIdMessage);
    Protocol.ExchangeCraftInformationObjectMessage = ExchangeCraftInformationObjectMessage;
    var ExchangeCraftPaymentModificationRequestMessage = (function(_super) {
        __extends(ExchangeCraftPaymentModificationRequestMessage, _super);

        function ExchangeCraftPaymentModificationRequestMessage() {
            this.quantity = 0;
            _super.call(this)
        }
        ExchangeCraftPaymentModificationRequestMessage.prototype.getMessageId = function() {
            return ExchangeCraftPaymentModificationRequestMessage.ID;
        };
        ExchangeCraftPaymentModificationRequestMessage.prototype.reset = function() {
            this.quantity = 0;
        };
        ExchangeCraftPaymentModificationRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeCraftPaymentModificationRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeCraftPaymentModificationRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeCraftPaymentModificationRequestMessage(output);
        };
        ExchangeCraftPaymentModificationRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeCraftPaymentModificationRequestMessage(input);
        };
        ExchangeCraftPaymentModificationRequestMessage.prototype.serializeAs_ExchangeCraftPaymentModificationRequestMessage = function(output) {
            if (this.quantity < 0 || this.quantity > 9007199254740990) {
                throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
            }
            output.writeVarLong(this.quantity);
        };
        ExchangeCraftPaymentModificationRequestMessage.prototype.deserializeAs_ExchangeCraftPaymentModificationRequestMessage = function(input) {
            this.quantity = input.readVarUhLong();
            if (this.quantity < 0 || this.quantity > 9007199254740990) {
                throw new Error("Forbidden value (" + this.quantity + ") on element of ExchangeCraftPaymentModificationRequestMessage.quantity.");
            }
        };
        ExchangeCraftPaymentModificationRequestMessage.ID = 9081;
        return ExchangeCraftPaymentModificationRequestMessage;
    })(NetworkMessage);
    Protocol.ExchangeCraftPaymentModificationRequestMessage = ExchangeCraftPaymentModificationRequestMessage;
    var ExchangeCraftPaymentModifiedMessage = (function(_super) {
        __extends(ExchangeCraftPaymentModifiedMessage, _super);

        function ExchangeCraftPaymentModifiedMessage() {
            this.goldSum = 0;
            _super.call(this)
        }
        ExchangeCraftPaymentModifiedMessage.prototype.getMessageId = function() {
            return ExchangeCraftPaymentModifiedMessage.ID;
        };
        ExchangeCraftPaymentModifiedMessage.prototype.reset = function() {
            this.goldSum = 0;
        };
        ExchangeCraftPaymentModifiedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeCraftPaymentModifiedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeCraftPaymentModifiedMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeCraftPaymentModifiedMessage(output);
        };
        ExchangeCraftPaymentModifiedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeCraftPaymentModifiedMessage(input);
        };
        ExchangeCraftPaymentModifiedMessage.prototype.serializeAs_ExchangeCraftPaymentModifiedMessage = function(output) {
            if (this.goldSum < 0 || this.goldSum > 9007199254740990) {
                throw new Error("Forbidden value (" + this.goldSum + ") on element goldSum.");
            }
            output.writeVarLong(this.goldSum);
        };
        ExchangeCraftPaymentModifiedMessage.prototype.deserializeAs_ExchangeCraftPaymentModifiedMessage = function(input) {
            this.goldSum = input.readVarUhLong();
            if (this.goldSum < 0 || this.goldSum > 9007199254740990) {
                throw new Error("Forbidden value (" + this.goldSum + ") on element of ExchangeCraftPaymentModifiedMessage.goldSum.");
            }
        };
        ExchangeCraftPaymentModifiedMessage.ID = 8994;
        return ExchangeCraftPaymentModifiedMessage;
    })(NetworkMessage);
    Protocol.ExchangeCraftPaymentModifiedMessage = ExchangeCraftPaymentModifiedMessage;
    var ExchangeCraftResultWithObjectDescMessage = (function(_super) {
        __extends(ExchangeCraftResultWithObjectDescMessage, _super);

        function ExchangeCraftResultWithObjectDescMessage() {
            this.objectInfo = new ObjectItemNotInContainer();
            _super.call(this)
        }
        ExchangeCraftResultWithObjectDescMessage.prototype.getMessageId = function() {
            return ExchangeCraftResultWithObjectDescMessage.ID;
        };
        ExchangeCraftResultWithObjectDescMessage.prototype.reset = function() {
            this.objectInfo = new ObjectItemNotInContainer();
        };
        ExchangeCraftResultWithObjectDescMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeCraftResultWithObjectDescMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeCraftResultWithObjectDescMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeCraftResultWithObjectDescMessage(output);
        };
        ExchangeCraftResultWithObjectDescMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeCraftResultWithObjectDescMessage(input);
        };
        ExchangeCraftResultWithObjectDescMessage.prototype.serializeAs_ExchangeCraftResultWithObjectDescMessage = function(output) {
            _super.prototype.serializeAs_ExchangeCraftResultMessage.call(this, output);
            this.objectInfo.serializeAs_ObjectItemNotInContainer(output);
        };
        ExchangeCraftResultWithObjectDescMessage.prototype.deserializeAs_ExchangeCraftResultWithObjectDescMessage = function(input) {
            _super.prototype.deserializeAs_ExchangeCraftResultMessage.call(this, input);
            this.objectInfo = new ObjectItemNotInContainer();
            this.objectInfo.deserialize(input);
        };
        ExchangeCraftResultWithObjectDescMessage.ID = 5780;
        return ExchangeCraftResultWithObjectDescMessage;
    })(ExchangeCraftResultMessage);
    Protocol.ExchangeCraftResultWithObjectDescMessage = ExchangeCraftResultWithObjectDescMessage;
    var ExchangeCraftResultMagicWithObjectDescMessage = (function(_super) {
        __extends(ExchangeCraftResultMagicWithObjectDescMessage, _super);

        function ExchangeCraftResultMagicWithObjectDescMessage() {
            this.magicPoolStatus = 0;
            _super.call(this)
        }
        ExchangeCraftResultMagicWithObjectDescMessage.prototype.getMessageId = function() {
            return ExchangeCraftResultMagicWithObjectDescMessage.ID;
        };
        ExchangeCraftResultMagicWithObjectDescMessage.prototype.reset = function() {
            this.magicPoolStatus = 0;
        };
        ExchangeCraftResultMagicWithObjectDescMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeCraftResultMagicWithObjectDescMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeCraftResultMagicWithObjectDescMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeCraftResultMagicWithObjectDescMessage(output);
        };
        ExchangeCraftResultMagicWithObjectDescMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeCraftResultMagicWithObjectDescMessage(input);
        };
        ExchangeCraftResultMagicWithObjectDescMessage.prototype.serializeAs_ExchangeCraftResultMagicWithObjectDescMessage = function(output) {
            _super.prototype.serializeAs_ExchangeCraftResultWithObjectDescMessage.call(this, output);
            output.writeByte(this.magicPoolStatus);
        };
        ExchangeCraftResultMagicWithObjectDescMessage.prototype.deserializeAs_ExchangeCraftResultMagicWithObjectDescMessage = function(input) {
            _super.prototype.deserializeAs_ExchangeCraftResultWithObjectDescMessage.call(this, input);
            this.magicPoolStatus = input.readByte();
        };
        ExchangeCraftResultMagicWithObjectDescMessage.ID = 4882;
        return ExchangeCraftResultMagicWithObjectDescMessage;
    })(ExchangeCraftResultWithObjectDescMessage);
    Protocol.ExchangeCraftResultMagicWithObjectDescMessage = ExchangeCraftResultMagicWithObjectDescMessage;
    var ExchangeErrorMessage = (function(_super) {
        __extends(ExchangeErrorMessage, _super);

        function ExchangeErrorMessage() {
            this.errorType = 0;
            _super.call(this)
        }
        ExchangeErrorMessage.prototype.getMessageId = function() {
            return ExchangeErrorMessage.ID;
        };
        ExchangeErrorMessage.prototype.reset = function() {
            this.errorType = 0;
        };
        ExchangeErrorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeErrorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeErrorMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeErrorMessage(output);
        };
        ExchangeErrorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeErrorMessage(input);
        };
        ExchangeErrorMessage.prototype.serializeAs_ExchangeErrorMessage = function(output) {
            output.writeByte(this.errorType);
        };
        ExchangeErrorMessage.prototype.deserializeAs_ExchangeErrorMessage = function(input) {
            this.errorType = input.readByte();
        };
        ExchangeErrorMessage.ID = 9003;
        return ExchangeErrorMessage;
    })(NetworkMessage);
    Protocol.ExchangeErrorMessage = ExchangeErrorMessage;
    var ExchangeGuildTaxCollectorGetMessage = (function(_super) {
        __extends(ExchangeGuildTaxCollectorGetMessage, _super);

        function ExchangeGuildTaxCollectorGetMessage() {
            this.collectorName = "";
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.userName = "";
            this.callerId = 0;
            this.callerName = "";
            this.experience = 0;
            this.pods = 0;
            this.objectsInfos = [];
            _super.call(this)
        }
        ExchangeGuildTaxCollectorGetMessage.prototype.getMessageId = function() {
            return ExchangeGuildTaxCollectorGetMessage.ID;
        };
        ExchangeGuildTaxCollectorGetMessage.prototype.reset = function() {
            this.collectorName = "";
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.userName = "";
            this.callerId = 0;
            this.callerName = "";
            this.experience = 0;
            this.pods = 0;
            this.objectsInfos = [];
        };
        ExchangeGuildTaxCollectorGetMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeGuildTaxCollectorGetMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeGuildTaxCollectorGetMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeGuildTaxCollectorGetMessage(output);
        };
        ExchangeGuildTaxCollectorGetMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeGuildTaxCollectorGetMessage(input);
        };
        ExchangeGuildTaxCollectorGetMessage.prototype.serializeAs_ExchangeGuildTaxCollectorGetMessage = function(output) {
            output.writeUTF(this.collectorName);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
            }
            output.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
            }
            output.writeShort(this.worldY);
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
            output.writeUTF(this.userName);
            if (this.callerId < 0 || this.callerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.callerId + ") on element callerId.");
            }
            output.writeVarLong(this.callerId);
            output.writeUTF(this.callerName);
            if (this.experience < -9007199254740990 || this.experience > 9007199254740990) {
                throw new Error("Forbidden value (" + this.experience + ") on element experience.");
            }
            output.writeDouble(this.experience);
            if (this.pods < 0) {
                throw new Error("Forbidden value (" + this.pods + ") on element pods.");
            }
            output.writeVarShort(this.pods);
            output.writeShort(this.objectsInfos.length);
            for (var _i11 = 0; _i11 < this.objectsInfos.length; _i11++) {
                (this.objectsInfos[_i11]).serializeAs_ObjectItemGenericQuantity(output);
            }
        };
        ExchangeGuildTaxCollectorGetMessage.prototype.deserializeAs_ExchangeGuildTaxCollectorGetMessage = function(input) {
            var _item11 = null;
            this.collectorName = input.readUTF();
            this.worldX = input.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element of ExchangeGuildTaxCollectorGetMessage.worldX.");
            }
            this.worldY = input.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element of ExchangeGuildTaxCollectorGetMessage.worldY.");
            }
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of ExchangeGuildTaxCollectorGetMessage.mapId.");
            }
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of ExchangeGuildTaxCollectorGetMessage.subAreaId.");
            }
            this.userName = input.readUTF();
            this.callerId = input.readVarUhLong();
            if (this.callerId < 0 || this.callerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.callerId + ") on element of ExchangeGuildTaxCollectorGetMessage.callerId.");
            }
            this.callerName = input.readUTF();
            this.experience = input.readDouble();
            if (this.experience < -9007199254740990 || this.experience > 9007199254740990) {
                throw new Error("Forbidden value (" + this.experience + ") on element of ExchangeGuildTaxCollectorGetMessage.experience.");
            }
            this.pods = input.readVarUhShort();
            if (this.pods < 0) {
                throw new Error("Forbidden value (" + this.pods + ") on element of ExchangeGuildTaxCollectorGetMessage.pods.");
            }
            var _objectsInfosLen = input.readUnsignedShort();
            for (var _i11 = 0; _i11 < _objectsInfosLen; _i11++) {
                _item11 = new ObjectItemGenericQuantity();
                _item11.deserialize(input);
                this.objectsInfos.push(_item11);
            }
        };
        ExchangeGuildTaxCollectorGetMessage.ID = 2268;
        return ExchangeGuildTaxCollectorGetMessage;
    })(NetworkMessage);
    Protocol.ExchangeGuildTaxCollectorGetMessage = ExchangeGuildTaxCollectorGetMessage;
    var ExchangeHandleMountsMessage = (function(_super) {
        __extends(ExchangeHandleMountsMessage, _super);

        function ExchangeHandleMountsMessage() {
            this.actionType = 0;
            this.ridesId = [];
            _super.call(this)
        }
        ExchangeHandleMountsMessage.prototype.getMessageId = function() {
            return ExchangeHandleMountsMessage.ID;
        };
        ExchangeHandleMountsMessage.prototype.reset = function() {
            this.actionType = 0;
            this.ridesId = [];
        };
        ExchangeHandleMountsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeHandleMountsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeHandleMountsMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeHandleMountsMessage(output);
        };
        ExchangeHandleMountsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeHandleMountsMessage(input);
        };
        ExchangeHandleMountsMessage.prototype.serializeAs_ExchangeHandleMountsMessage = function(output) {
            output.writeByte(this.actionType);
            output.writeShort(this.ridesId.length);
            for (var _i2 = 0; _i2 < this.ridesId.length; _i2++) {
                if (this.ridesId[_i2] < 0) {
                    throw new Error("Forbidden value (" + this.ridesId[_i2] + ") on element 2 (starting at 1) of ridesId.");
                }
                output.writeVarInt(this.ridesId[_i2]);
            }
        };
        ExchangeHandleMountsMessage.prototype.deserializeAs_ExchangeHandleMountsMessage = function(input) {
            var _val2 = 0;
            this.actionType = input.readByte();
            var _ridesIdLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _ridesIdLen; _i2++) {
                _val2 = input.readVarUhInt();
                if (_val2 < 0) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of ridesId.");
                }
                this.ridesId.push(_val2);
            }
        };
        ExchangeHandleMountsMessage.ID = 173;
        return ExchangeHandleMountsMessage;
    })(NetworkMessage);
    Protocol.ExchangeHandleMountsMessage = ExchangeHandleMountsMessage;
    var ExchangeIsReadyMessage = (function(_super) {
        __extends(ExchangeIsReadyMessage, _super);

        function ExchangeIsReadyMessage() {
            this.id = 0;
            this.ready = false;
            _super.call(this)
        }
        ExchangeIsReadyMessage.prototype.getMessageId = function() {
            return ExchangeIsReadyMessage.ID;
        };
        ExchangeIsReadyMessage.prototype.reset = function() {
            this.id = 0;
            this.ready = false;
        };
        ExchangeIsReadyMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeIsReadyMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeIsReadyMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeIsReadyMessage(output);
        };
        ExchangeIsReadyMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeIsReadyMessage(input);
        };
        ExchangeIsReadyMessage.prototype.serializeAs_ExchangeIsReadyMessage = function(output) {
            if (this.id < -9007199254740990 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeDouble(this.id);
            output.writeBoolean(this.ready);
        };
        ExchangeIsReadyMessage.prototype.deserializeAs_ExchangeIsReadyMessage = function(input) {
            this.id = input.readDouble();
            if (this.id < -9007199254740990 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element of ExchangeIsReadyMessage.id.");
            }
            this.ready = input.readBoolean();
        };
        ExchangeIsReadyMessage.ID = 8789;
        return ExchangeIsReadyMessage;
    })(NetworkMessage);
    Protocol.ExchangeIsReadyMessage = ExchangeIsReadyMessage;
    var ExchangeItemAutoCraftStopedMessage = (function(_super) {
        __extends(ExchangeItemAutoCraftStopedMessage, _super);

        function ExchangeItemAutoCraftStopedMessage() {
            this.reason = 0;
            _super.call(this)
        }
        ExchangeItemAutoCraftStopedMessage.prototype.getMessageId = function() {
            return ExchangeItemAutoCraftStopedMessage.ID;
        };
        ExchangeItemAutoCraftStopedMessage.prototype.reset = function() {
            this.reason = 0;
        };
        ExchangeItemAutoCraftStopedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeItemAutoCraftStopedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeItemAutoCraftStopedMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeItemAutoCraftStopedMessage(output);
        };
        ExchangeItemAutoCraftStopedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeItemAutoCraftStopedMessage(input);
        };
        ExchangeItemAutoCraftStopedMessage.prototype.serializeAs_ExchangeItemAutoCraftStopedMessage = function(output) {
            output.writeByte(this.reason);
        };
        ExchangeItemAutoCraftStopedMessage.prototype.deserializeAs_ExchangeItemAutoCraftStopedMessage = function(input) {
            this.reason = input.readByte();
        };
        ExchangeItemAutoCraftStopedMessage.ID = 526;
        return ExchangeItemAutoCraftStopedMessage;
    })(NetworkMessage);
    Protocol.ExchangeItemAutoCraftStopedMessage = ExchangeItemAutoCraftStopedMessage;
    var ExchangeLeaveMessage = (function(_super) {
        __extends(ExchangeLeaveMessage, _super);

        function ExchangeLeaveMessage() {
            this.success = false;
            _super.call(this)
        }
        ExchangeLeaveMessage.prototype.getMessageId = function() {
            return ExchangeLeaveMessage.ID;
        };
        ExchangeLeaveMessage.prototype.reset = function() {
            this.success = false;
        };
        ExchangeLeaveMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeLeaveMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeLeaveMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeLeaveMessage(output);
        };
        ExchangeLeaveMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeLeaveMessage(input);
        };
        ExchangeLeaveMessage.prototype.serializeAs_ExchangeLeaveMessage = function(output) {
            _super.prototype.serializeAs_LeaveDialogMessage.call(this, output);
            output.writeBoolean(this.success);
        };
        ExchangeLeaveMessage.prototype.deserializeAs_ExchangeLeaveMessage = function(input) {
            _super.prototype.deserializeAs_LeaveDialogMessage.call(this, input);
            this.success = input.readBoolean();
        };
        ExchangeLeaveMessage.ID = 9053;
        return ExchangeLeaveMessage;
    })(LeaveDialogMessage);
    Protocol.ExchangeLeaveMessage = ExchangeLeaveMessage;
    var ExchangeMoneyMovementInformationMessage = (function(_super) {
        __extends(ExchangeMoneyMovementInformationMessage, _super);

        function ExchangeMoneyMovementInformationMessage() {
            this.limit = 0;
            _super.call(this)
        }
        ExchangeMoneyMovementInformationMessage.prototype.getMessageId = function() {
            return ExchangeMoneyMovementInformationMessage.ID;
        };
        ExchangeMoneyMovementInformationMessage.prototype.reset = function() {
            this.limit = 0;
        };
        ExchangeMoneyMovementInformationMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeMoneyMovementInformationMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeMoneyMovementInformationMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeMoneyMovementInformationMessage(output);
        };
        ExchangeMoneyMovementInformationMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeMoneyMovementInformationMessage(input);
        };
        ExchangeMoneyMovementInformationMessage.prototype.serializeAs_ExchangeMoneyMovementInformationMessage = function(output) {
            if (this.limit < 0 || this.limit > 9007199254740990) {
                throw new Error("Forbidden value (" + this.limit + ") on element limit.");
            }
            output.writeVarLong(this.limit);
        };
        ExchangeMoneyMovementInformationMessage.prototype.deserializeAs_ExchangeMoneyMovementInformationMessage = function(input) {
            this.limit = input.readVarUhLong();
            if (this.limit < 0 || this.limit > 9007199254740990) {
                throw new Error("Forbidden value (" + this.limit + ") on element of ExchangeMoneyMovementInformationMessage.limit.");
            }
        };
        ExchangeMoneyMovementInformationMessage.ID = 4402;
        return ExchangeMoneyMovementInformationMessage;
    })(NetworkMessage);
    Protocol.ExchangeMoneyMovementInformationMessage = ExchangeMoneyMovementInformationMessage;
    var ExchangeMountFreeFromPaddockMessage = (function(_super) {
        __extends(ExchangeMountFreeFromPaddockMessage, _super);

        function ExchangeMountFreeFromPaddockMessage() {
            this.name = "";
            this.worldX = 0;
            this.worldY = 0;
            this.liberator = "";
            _super.call(this)
        }
        ExchangeMountFreeFromPaddockMessage.prototype.getMessageId = function() {
            return ExchangeMountFreeFromPaddockMessage.ID;
        };
        ExchangeMountFreeFromPaddockMessage.prototype.reset = function() {
            this.name = "";
            this.worldX = 0;
            this.worldY = 0;
            this.liberator = "";
        };
        ExchangeMountFreeFromPaddockMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeMountFreeFromPaddockMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeMountFreeFromPaddockMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeMountFreeFromPaddockMessage(output);
        };
        ExchangeMountFreeFromPaddockMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeMountFreeFromPaddockMessage(input);
        };
        ExchangeMountFreeFromPaddockMessage.prototype.serializeAs_ExchangeMountFreeFromPaddockMessage = function(output) {
            output.writeUTF(this.name);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
            }
            output.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
            }
            output.writeShort(this.worldY);
            output.writeUTF(this.liberator);
        };
        ExchangeMountFreeFromPaddockMessage.prototype.deserializeAs_ExchangeMountFreeFromPaddockMessage = function(input) {
            this.name = input.readUTF();
            this.worldX = input.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element of ExchangeMountFreeFromPaddockMessage.worldX.");
            }
            this.worldY = input.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element of ExchangeMountFreeFromPaddockMessage.worldY.");
            }
            this.liberator = input.readUTF();
        };
        ExchangeMountFreeFromPaddockMessage.ID = 8720;
        return ExchangeMountFreeFromPaddockMessage;
    })(NetworkMessage);
    Protocol.ExchangeMountFreeFromPaddockMessage = ExchangeMountFreeFromPaddockMessage;
    var ExchangeMountsPaddockAddMessage = (function(_super) {
        __extends(ExchangeMountsPaddockAddMessage, _super);

        function ExchangeMountsPaddockAddMessage() {
            this.mountDescription = [];
            _super.call(this)
        }
        ExchangeMountsPaddockAddMessage.prototype.getMessageId = function() {
            return ExchangeMountsPaddockAddMessage.ID;
        };
        ExchangeMountsPaddockAddMessage.prototype.reset = function() {
            this.mountDescription = [];
        };
        ExchangeMountsPaddockAddMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeMountsPaddockAddMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeMountsPaddockAddMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeMountsPaddockAddMessage(output);
        };
        ExchangeMountsPaddockAddMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeMountsPaddockAddMessage(input);
        };
        ExchangeMountsPaddockAddMessage.prototype.serializeAs_ExchangeMountsPaddockAddMessage = function(output) {
            output.writeShort(this.mountDescription.length);
            for (var _i1 = 0; _i1 < this.mountDescription.length; _i1++) {
                (this.mountDescription[_i1]).serializeAs_MountClientData(output);
            }
        };
        ExchangeMountsPaddockAddMessage.prototype.deserializeAs_ExchangeMountsPaddockAddMessage = function(input) {
            var _item1 = null;
            var _mountDescriptionLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _mountDescriptionLen; _i1++) {
                _item1 = new MountClientData();
                _item1.deserialize(input);
                this.mountDescription.push(_item1);
            }
        };
        ExchangeMountsPaddockAddMessage.ID = 7611;
        return ExchangeMountsPaddockAddMessage;
    })(NetworkMessage);
    Protocol.ExchangeMountsPaddockAddMessage = ExchangeMountsPaddockAddMessage;
    var ExchangeMountsPaddockRemoveMessage = (function(_super) {
        __extends(ExchangeMountsPaddockRemoveMessage, _super);

        function ExchangeMountsPaddockRemoveMessage() {
            this.mountsId = [];
            _super.call(this)
        }
        ExchangeMountsPaddockRemoveMessage.prototype.getMessageId = function() {
            return ExchangeMountsPaddockRemoveMessage.ID;
        };
        ExchangeMountsPaddockRemoveMessage.prototype.reset = function() {
            this.mountsId = [];
        };
        ExchangeMountsPaddockRemoveMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeMountsPaddockRemoveMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeMountsPaddockRemoveMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeMountsPaddockRemoveMessage(output);
        };
        ExchangeMountsPaddockRemoveMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeMountsPaddockRemoveMessage(input);
        };
        ExchangeMountsPaddockRemoveMessage.prototype.serializeAs_ExchangeMountsPaddockRemoveMessage = function(output) {
            output.writeShort(this.mountsId.length);
            for (var _i1 = 0; _i1 < this.mountsId.length; _i1++) {
                output.writeVarInt(this.mountsId[_i1]);
            }
        };
        ExchangeMountsPaddockRemoveMessage.prototype.deserializeAs_ExchangeMountsPaddockRemoveMessage = function(input) {
            var _val1 = 0;
            var _mountsIdLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _mountsIdLen; _i1++) {
                _val1 = input.readVarInt();
                this.mountsId.push(_val1);
            }
        };
        ExchangeMountsPaddockRemoveMessage.ID = 4871;
        return ExchangeMountsPaddockRemoveMessage;
    })(NetworkMessage);
    Protocol.ExchangeMountsPaddockRemoveMessage = ExchangeMountsPaddockRemoveMessage;
    var ExchangeMountsStableAddMessage = (function(_super) {
        __extends(ExchangeMountsStableAddMessage, _super);

        function ExchangeMountsStableAddMessage() {
            this.mountDescription = [];
            _super.call(this)
        }
        ExchangeMountsStableAddMessage.prototype.getMessageId = function() {
            return ExchangeMountsStableAddMessage.ID;
        };
        ExchangeMountsStableAddMessage.prototype.reset = function() {
            this.mountDescription = [];
        };
        ExchangeMountsStableAddMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeMountsStableAddMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeMountsStableAddMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeMountsStableAddMessage(output);
        };
        ExchangeMountsStableAddMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeMountsStableAddMessage(input);
        };
        ExchangeMountsStableAddMessage.prototype.serializeAs_ExchangeMountsStableAddMessage = function(output) {
            output.writeShort(this.mountDescription.length);
            for (var _i1 = 0; _i1 < this.mountDescription.length; _i1++) {
                (this.mountDescription[_i1]).serializeAs_MountClientData(output);
            }
        };
        ExchangeMountsStableAddMessage.prototype.deserializeAs_ExchangeMountsStableAddMessage = function(input) {
            var _item1 = null;
            var _mountDescriptionLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _mountDescriptionLen; _i1++) {
                _item1 = new MountClientData();
                _item1.deserialize(input);
                this.mountDescription.push(_item1);
            }
        };
        ExchangeMountsStableAddMessage.ID = 1752;
        return ExchangeMountsStableAddMessage;
    })(NetworkMessage);
    Protocol.ExchangeMountsStableAddMessage = ExchangeMountsStableAddMessage;
    var ExchangeMountsStableBornAddMessage = (function(_super) {
        __extends(ExchangeMountsStableBornAddMessage, _super);

        function ExchangeMountsStableBornAddMessage() {

            _super.call(this)
        }
        ExchangeMountsStableBornAddMessage.prototype.getMessageId = function() {
            return ExchangeMountsStableBornAddMessage.ID;
        };
        ExchangeMountsStableBornAddMessage.prototype.reset = function() {

        };
        ExchangeMountsStableBornAddMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeMountsStableBornAddMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeMountsStableBornAddMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeMountsStableBornAddMessage(output);
        };
        ExchangeMountsStableBornAddMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeMountsStableBornAddMessage(input);
        };
        ExchangeMountsStableBornAddMessage.prototype.serializeAs_ExchangeMountsStableBornAddMessage = function(output) {
            _super.prototype.serializeAs_ExchangeMountsStableAddMessage.call(this, output);
        };
        ExchangeMountsStableBornAddMessage.prototype.deserializeAs_ExchangeMountsStableBornAddMessage = function(input) {
            _super.prototype.deserializeAs_ExchangeMountsStableAddMessage.call(this, input);
        };
        ExchangeMountsStableBornAddMessage.ID = 839;
        return ExchangeMountsStableBornAddMessage;
    })(ExchangeMountsStableAddMessage);
    Protocol.ExchangeMountsStableBornAddMessage = ExchangeMountsStableBornAddMessage;
    var ExchangeMountsStableRemoveMessage = (function(_super) {
        __extends(ExchangeMountsStableRemoveMessage, _super);

        function ExchangeMountsStableRemoveMessage() {
            this.mountsId = [];
            _super.call(this)
        }
        ExchangeMountsStableRemoveMessage.prototype.getMessageId = function() {
            return ExchangeMountsStableRemoveMessage.ID;
        };
        ExchangeMountsStableRemoveMessage.prototype.reset = function() {
            this.mountsId = [];
        };
        ExchangeMountsStableRemoveMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeMountsStableRemoveMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeMountsStableRemoveMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeMountsStableRemoveMessage(output);
        };
        ExchangeMountsStableRemoveMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeMountsStableRemoveMessage(input);
        };
        ExchangeMountsStableRemoveMessage.prototype.serializeAs_ExchangeMountsStableRemoveMessage = function(output) {
            output.writeShort(this.mountsId.length);
            for (var _i1 = 0; _i1 < this.mountsId.length; _i1++) {
                output.writeVarInt(this.mountsId[_i1]);
            }
        };
        ExchangeMountsStableRemoveMessage.prototype.deserializeAs_ExchangeMountsStableRemoveMessage = function(input) {
            var _val1 = 0;
            var _mountsIdLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _mountsIdLen; _i1++) {
                _val1 = input.readVarInt();
                this.mountsId.push(_val1);
            }
        };
        ExchangeMountsStableRemoveMessage.ID = 2552;
        return ExchangeMountsStableRemoveMessage;
    })(NetworkMessage);
    Protocol.ExchangeMountsStableRemoveMessage = ExchangeMountsStableRemoveMessage;
    var ExchangeMountStableErrorMessage = (function(_super) {
        __extends(ExchangeMountStableErrorMessage, _super);

        function ExchangeMountStableErrorMessage() {

            _super.call(this)
        }
        ExchangeMountStableErrorMessage.prototype.getMessageId = function() {
            return ExchangeMountStableErrorMessage.ID;
        };
        ExchangeMountStableErrorMessage.prototype.reset = function() {

        };
        ExchangeMountStableErrorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeMountStableErrorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeMountStableErrorMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeMountStableErrorMessage(output);
        };
        ExchangeMountStableErrorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeMountStableErrorMessage(input);
        };
        ExchangeMountStableErrorMessage.prototype.serializeAs_ExchangeMountStableErrorMessage = function(output) {

        };
        ExchangeMountStableErrorMessage.prototype.deserializeAs_ExchangeMountStableErrorMessage = function(input) {

        };
        ExchangeMountStableErrorMessage.ID = 2208;
        return ExchangeMountStableErrorMessage;
    })(NetworkMessage);
    Protocol.ExchangeMountStableErrorMessage = ExchangeMountStableErrorMessage;
    var ExchangeMountsTakenFromPaddockMessage = (function(_super) {
        __extends(ExchangeMountsTakenFromPaddockMessage, _super);

        function ExchangeMountsTakenFromPaddockMessage() {
            this.name = "";
            this.worldX = 0;
            this.worldY = 0;
            this.ownername = "";
            _super.call(this)
        }
        ExchangeMountsTakenFromPaddockMessage.prototype.getMessageId = function() {
            return ExchangeMountsTakenFromPaddockMessage.ID;
        };
        ExchangeMountsTakenFromPaddockMessage.prototype.reset = function() {
            this.name = "";
            this.worldX = 0;
            this.worldY = 0;
            this.ownername = "";
        };
        ExchangeMountsTakenFromPaddockMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeMountsTakenFromPaddockMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeMountsTakenFromPaddockMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeMountsTakenFromPaddockMessage(output);
        };
        ExchangeMountsTakenFromPaddockMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeMountsTakenFromPaddockMessage(input);
        };
        ExchangeMountsTakenFromPaddockMessage.prototype.serializeAs_ExchangeMountsTakenFromPaddockMessage = function(output) {
            output.writeUTF(this.name);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
            }
            output.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
            }
            output.writeShort(this.worldY);
            output.writeUTF(this.ownername);
        };
        ExchangeMountsTakenFromPaddockMessage.prototype.deserializeAs_ExchangeMountsTakenFromPaddockMessage = function(input) {
            this.name = input.readUTF();
            this.worldX = input.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element of ExchangeMountsTakenFromPaddockMessage.worldX.");
            }
            this.worldY = input.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element of ExchangeMountsTakenFromPaddockMessage.worldY.");
            }
            this.ownername = input.readUTF();
        };
        ExchangeMountsTakenFromPaddockMessage.ID = 2583;
        return ExchangeMountsTakenFromPaddockMessage;
    })(NetworkMessage);
    Protocol.ExchangeMountsTakenFromPaddockMessage = ExchangeMountsTakenFromPaddockMessage;
    var ExchangeMountSterilizeFromPaddockMessage = (function(_super) {
        __extends(ExchangeMountSterilizeFromPaddockMessage, _super);

        function ExchangeMountSterilizeFromPaddockMessage() {
            this.name = "";
            this.worldX = 0;
            this.worldY = 0;
            this.sterilizator = "";
            _super.call(this)
        }
        ExchangeMountSterilizeFromPaddockMessage.prototype.getMessageId = function() {
            return ExchangeMountSterilizeFromPaddockMessage.ID;
        };
        ExchangeMountSterilizeFromPaddockMessage.prototype.reset = function() {
            this.name = "";
            this.worldX = 0;
            this.worldY = 0;
            this.sterilizator = "";
        };
        ExchangeMountSterilizeFromPaddockMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeMountSterilizeFromPaddockMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeMountSterilizeFromPaddockMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeMountSterilizeFromPaddockMessage(output);
        };
        ExchangeMountSterilizeFromPaddockMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeMountSterilizeFromPaddockMessage(input);
        };
        ExchangeMountSterilizeFromPaddockMessage.prototype.serializeAs_ExchangeMountSterilizeFromPaddockMessage = function(output) {
            output.writeUTF(this.name);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
            }
            output.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
            }
            output.writeShort(this.worldY);
            output.writeUTF(this.sterilizator);
        };
        ExchangeMountSterilizeFromPaddockMessage.prototype.deserializeAs_ExchangeMountSterilizeFromPaddockMessage = function(input) {
            this.name = input.readUTF();
            this.worldX = input.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element of ExchangeMountSterilizeFromPaddockMessage.worldX.");
            }
            this.worldY = input.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element of ExchangeMountSterilizeFromPaddockMessage.worldY.");
            }
            this.sterilizator = input.readUTF();
        };
        ExchangeMountSterilizeFromPaddockMessage.ID = 4993;
        return ExchangeMountSterilizeFromPaddockMessage;
    })(NetworkMessage);
    Protocol.ExchangeMountSterilizeFromPaddockMessage = ExchangeMountSterilizeFromPaddockMessage;
    var ExchangeObjectMessage = (function(_super) {
        __extends(ExchangeObjectMessage, _super);

        function ExchangeObjectMessage() {
            this.remote = false;
            _super.call(this)
        }
        ExchangeObjectMessage.prototype.getMessageId = function() {
            return ExchangeObjectMessage.ID;
        };
        ExchangeObjectMessage.prototype.reset = function() {
            this.remote = false;
        };
        ExchangeObjectMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeObjectMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeObjectMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeObjectMessage(output);
        };
        ExchangeObjectMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeObjectMessage(input);
        };
        ExchangeObjectMessage.prototype.serializeAs_ExchangeObjectMessage = function(output) {
            output.writeBoolean(this.remote);
        };
        ExchangeObjectMessage.prototype.deserializeAs_ExchangeObjectMessage = function(input) {
            this.remote = input.readBoolean();
        };
        ExchangeObjectMessage.ID = 3691;
        return ExchangeObjectMessage;
    })(NetworkMessage);
    Protocol.ExchangeObjectMessage = ExchangeObjectMessage;
    var ExchangeObjectAddedMessage = (function(_super) {
        __extends(ExchangeObjectAddedMessage, _super);

        function ExchangeObjectAddedMessage() {
            this.object = new ObjectItem();
            _super.call(this)
        }
        ExchangeObjectAddedMessage.prototype.getMessageId = function() {
            return ExchangeObjectAddedMessage.ID;
        };
        ExchangeObjectAddedMessage.prototype.reset = function() {
            this.object = new ObjectItem();
        };
        ExchangeObjectAddedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeObjectAddedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeObjectAddedMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeObjectAddedMessage(output);
        };
        ExchangeObjectAddedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeObjectAddedMessage(input);
        };
        ExchangeObjectAddedMessage.prototype.serializeAs_ExchangeObjectAddedMessage = function(output) {
            _super.prototype.serializeAs_ExchangeObjectMessage.call(this, output);
            this.object.serializeAs_ObjectItem(output);
        };
        ExchangeObjectAddedMessage.prototype.deserializeAs_ExchangeObjectAddedMessage = function(input) {
            _super.prototype.deserializeAs_ExchangeObjectMessage.call(this, input);
            this.object = new ObjectItem();
            this.object.deserialize(input);
        };
        ExchangeObjectAddedMessage.ID = 8187;
        return ExchangeObjectAddedMessage;
    })(ExchangeObjectMessage);
    Protocol.ExchangeObjectAddedMessage = ExchangeObjectAddedMessage;
    var ExchangeObjectMoveMessage = (function(_super) {
        __extends(ExchangeObjectMoveMessage, _super);

        function ExchangeObjectMoveMessage() {
            this.objectUID = 0;
            this.quantity = 0;
            _super.call(this)
        }
        ExchangeObjectMoveMessage.prototype.getMessageId = function() {
            return ExchangeObjectMoveMessage.ID;
        };
        ExchangeObjectMoveMessage.prototype.reset = function() {
            this.objectUID = 0;
            this.quantity = 0;
        };
        ExchangeObjectMoveMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeObjectMoveMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeObjectMoveMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeObjectMoveMessage(output);
        };
        ExchangeObjectMoveMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeObjectMoveMessage(input);
        };
        ExchangeObjectMoveMessage.prototype.serializeAs_ExchangeObjectMoveMessage = function(output) {
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
            }
            output.writeVarInt(this.objectUID);
            output.writeVarInt(this.quantity);
        };
        ExchangeObjectMoveMessage.prototype.deserializeAs_ExchangeObjectMoveMessage = function(input) {
            this.objectUID = input.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element of ExchangeObjectMoveMessage.objectUID.");
            }
            this.quantity = input.readVarInt();
        };
        ExchangeObjectMoveMessage.ID = 7963;
        return ExchangeObjectMoveMessage;
    })(NetworkMessage);
    Protocol.ExchangeObjectMoveMessage = ExchangeObjectMoveMessage;
    var ExchangeObjectMovePricedMessage = (function(_super) {
        __extends(ExchangeObjectMovePricedMessage, _super);

        function ExchangeObjectMovePricedMessage() {
            this.price = 0;
            _super.call(this)
        }
        ExchangeObjectMovePricedMessage.prototype.getMessageId = function() {
            return ExchangeObjectMovePricedMessage.ID;
        };
        ExchangeObjectMovePricedMessage.prototype.reset = function() {
            this.price = 0;
        };
        ExchangeObjectMovePricedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeObjectMovePricedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeObjectMovePricedMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeObjectMovePricedMessage(output);
        };
        ExchangeObjectMovePricedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeObjectMovePricedMessage(input);
        };
        ExchangeObjectMovePricedMessage.prototype.serializeAs_ExchangeObjectMovePricedMessage = function(output) {
            _super.prototype.serializeAs_ExchangeObjectMoveMessage.call(this, output);
            if (this.price < 0 || this.price > 9007199254740990) {
                throw new Error("Forbidden value (" + this.price + ") on element price.");
            }
            output.writeVarLong(this.price);
        };
        ExchangeObjectMovePricedMessage.prototype.deserializeAs_ExchangeObjectMovePricedMessage = function(input) {
            _super.prototype.deserializeAs_ExchangeObjectMoveMessage.call(this, input);
            this.price = input.readVarUhLong();
            if (this.price < 0 || this.price > 9007199254740990) {
                throw new Error("Forbidden value (" + this.price + ") on element of ExchangeObjectMovePricedMessage.price.");
            }
        };
        ExchangeObjectMovePricedMessage.ID = 3594;
        return ExchangeObjectMovePricedMessage;
    })(ExchangeObjectMoveMessage);
    Protocol.ExchangeObjectMovePricedMessage = ExchangeObjectMovePricedMessage;
    var ExchangeObjectModifyPricedMessage = (function(_super) {
        __extends(ExchangeObjectModifyPricedMessage, _super);

        function ExchangeObjectModifyPricedMessage() {

            _super.call(this)
        }
        ExchangeObjectModifyPricedMessage.prototype.getMessageId = function() {
            return ExchangeObjectModifyPricedMessage.ID;
        };
        ExchangeObjectModifyPricedMessage.prototype.reset = function() {

        };
        ExchangeObjectModifyPricedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeObjectModifyPricedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeObjectModifyPricedMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeObjectModifyPricedMessage(output);
        };
        ExchangeObjectModifyPricedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeObjectModifyPricedMessage(input);
        };
        ExchangeObjectModifyPricedMessage.prototype.serializeAs_ExchangeObjectModifyPricedMessage = function(output) {
            _super.prototype.serializeAs_ExchangeObjectMovePricedMessage.call(this, output);
        };
        ExchangeObjectModifyPricedMessage.prototype.deserializeAs_ExchangeObjectModifyPricedMessage = function(input) {
            _super.prototype.deserializeAs_ExchangeObjectMovePricedMessage.call(this, input);
        };
        ExchangeObjectModifyPricedMessage.ID = 7465;
        return ExchangeObjectModifyPricedMessage;
    })(ExchangeObjectMovePricedMessage);
    Protocol.ExchangeObjectModifyPricedMessage = ExchangeObjectModifyPricedMessage;
    var ExchangeObjectMoveKamaMessage = (function(_super) {
        __extends(ExchangeObjectMoveKamaMessage, _super);

        function ExchangeObjectMoveKamaMessage() {
            this.quantity = 0;
            _super.call(this)
        }
        ExchangeObjectMoveKamaMessage.prototype.getMessageId = function() {
            return ExchangeObjectMoveKamaMessage.ID;
        };
        ExchangeObjectMoveKamaMessage.prototype.reset = function() {
            this.quantity = 0;
        };
        ExchangeObjectMoveKamaMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeObjectMoveKamaMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeObjectMoveKamaMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeObjectMoveKamaMessage(output);
        };
        ExchangeObjectMoveKamaMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeObjectMoveKamaMessage(input);
        };
        ExchangeObjectMoveKamaMessage.prototype.serializeAs_ExchangeObjectMoveKamaMessage = function(output) {
            if (this.quantity < -9007199254740990 || this.quantity > 9007199254740990) {
                throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
            }
            output.writeVarLong(this.quantity);
        };
        ExchangeObjectMoveKamaMessage.prototype.deserializeAs_ExchangeObjectMoveKamaMessage = function(input) {
            this.quantity = input.readVarLong();
            if (this.quantity < -9007199254740990 || this.quantity > 9007199254740990) {
                throw new Error("Forbidden value (" + this.quantity + ") on element of ExchangeObjectMoveKamaMessage.quantity.");
            }
        };
        ExchangeObjectMoveKamaMessage.ID = 1621;
        return ExchangeObjectMoveKamaMessage;
    })(NetworkMessage);
    Protocol.ExchangeObjectMoveKamaMessage = ExchangeObjectMoveKamaMessage;
    var ExchangeObjectsAddedMessage = (function(_super) {
        __extends(ExchangeObjectsAddedMessage, _super);

        function ExchangeObjectsAddedMessage() {
            this.object = [];
            _super.call(this)
        }
        ExchangeObjectsAddedMessage.prototype.getMessageId = function() {
            return ExchangeObjectsAddedMessage.ID;
        };
        ExchangeObjectsAddedMessage.prototype.reset = function() {
            this.object = [];
        };
        ExchangeObjectsAddedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeObjectsAddedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeObjectsAddedMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeObjectsAddedMessage(output);
        };
        ExchangeObjectsAddedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeObjectsAddedMessage(input);
        };
        ExchangeObjectsAddedMessage.prototype.serializeAs_ExchangeObjectsAddedMessage = function(output) {
            _super.prototype.serializeAs_ExchangeObjectMessage.call(this, output);
            output.writeShort(this.object.length);
            for (var _i1 = 0; _i1 < this.object.length; _i1++) {
                (this.object[_i1]).serializeAs_ObjectItem(output);
            }
        };
        ExchangeObjectsAddedMessage.prototype.deserializeAs_ExchangeObjectsAddedMessage = function(input) {
            var _item1 = null;
            _super.prototype.deserializeAs_ExchangeObjectMessage.call(this, input);
            var _objectLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _objectLen; _i1++) {
                _item1 = new ObjectItem();
                _item1.deserialize(input);
                this.object.push(_item1);
            }
        };
        ExchangeObjectsAddedMessage.ID = 1507;
        return ExchangeObjectsAddedMessage;
    })(ExchangeObjectMessage);
    Protocol.ExchangeObjectsAddedMessage = ExchangeObjectsAddedMessage;
    var ExchangeObjectTransfertAllFromInvMessage = (function(_super) {
        __extends(ExchangeObjectTransfertAllFromInvMessage, _super);

        function ExchangeObjectTransfertAllFromInvMessage() {

            _super.call(this)
        }
        ExchangeObjectTransfertAllFromInvMessage.prototype.getMessageId = function() {
            return ExchangeObjectTransfertAllFromInvMessage.ID;
        };
        ExchangeObjectTransfertAllFromInvMessage.prototype.reset = function() {

        };
        ExchangeObjectTransfertAllFromInvMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeObjectTransfertAllFromInvMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeObjectTransfertAllFromInvMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeObjectTransfertAllFromInvMessage(output);
        };
        ExchangeObjectTransfertAllFromInvMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeObjectTransfertAllFromInvMessage(input);
        };
        ExchangeObjectTransfertAllFromInvMessage.prototype.serializeAs_ExchangeObjectTransfertAllFromInvMessage = function(output) {

        };
        ExchangeObjectTransfertAllFromInvMessage.prototype.deserializeAs_ExchangeObjectTransfertAllFromInvMessage = function(input) {

        };
        ExchangeObjectTransfertAllFromInvMessage.ID = 1221;
        return ExchangeObjectTransfertAllFromInvMessage;
    })(NetworkMessage);
    Protocol.ExchangeObjectTransfertAllFromInvMessage = ExchangeObjectTransfertAllFromInvMessage;
    var ExchangeObjectTransfertAllToInvMessage = (function(_super) {
        __extends(ExchangeObjectTransfertAllToInvMessage, _super);

        function ExchangeObjectTransfertAllToInvMessage() {

            _super.call(this)
        }
        ExchangeObjectTransfertAllToInvMessage.prototype.getMessageId = function() {
            return ExchangeObjectTransfertAllToInvMessage.ID;
        };
        ExchangeObjectTransfertAllToInvMessage.prototype.reset = function() {

        };
        ExchangeObjectTransfertAllToInvMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeObjectTransfertAllToInvMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeObjectTransfertAllToInvMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeObjectTransfertAllToInvMessage(output);
        };
        ExchangeObjectTransfertAllToInvMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeObjectTransfertAllToInvMessage(input);
        };
        ExchangeObjectTransfertAllToInvMessage.prototype.serializeAs_ExchangeObjectTransfertAllToInvMessage = function(output) {

        };
        ExchangeObjectTransfertAllToInvMessage.prototype.deserializeAs_ExchangeObjectTransfertAllToInvMessage = function(input) {

        };
        ExchangeObjectTransfertAllToInvMessage.ID = 6225;
        return ExchangeObjectTransfertAllToInvMessage;
    })(NetworkMessage);
    Protocol.ExchangeObjectTransfertAllToInvMessage = ExchangeObjectTransfertAllToInvMessage;
    var ExchangeObjectTransfertExistingFromInvMessage = (function(_super) {
        __extends(ExchangeObjectTransfertExistingFromInvMessage, _super);

        function ExchangeObjectTransfertExistingFromInvMessage() {

            _super.call(this)
        }
        ExchangeObjectTransfertExistingFromInvMessage.prototype.getMessageId = function() {
            return ExchangeObjectTransfertExistingFromInvMessage.ID;
        };
        ExchangeObjectTransfertExistingFromInvMessage.prototype.reset = function() {

        };
        ExchangeObjectTransfertExistingFromInvMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeObjectTransfertExistingFromInvMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeObjectTransfertExistingFromInvMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeObjectTransfertExistingFromInvMessage(output);
        };
        ExchangeObjectTransfertExistingFromInvMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeObjectTransfertExistingFromInvMessage(input);
        };
        ExchangeObjectTransfertExistingFromInvMessage.prototype.serializeAs_ExchangeObjectTransfertExistingFromInvMessage = function(output) {

        };
        ExchangeObjectTransfertExistingFromInvMessage.prototype.deserializeAs_ExchangeObjectTransfertExistingFromInvMessage = function(input) {

        };
        ExchangeObjectTransfertExistingFromInvMessage.ID = 5796;
        return ExchangeObjectTransfertExistingFromInvMessage;
    })(NetworkMessage);
    Protocol.ExchangeObjectTransfertExistingFromInvMessage = ExchangeObjectTransfertExistingFromInvMessage;
    var ExchangeObjectTransfertExistingToInvMessage = (function(_super) {
        __extends(ExchangeObjectTransfertExistingToInvMessage, _super);

        function ExchangeObjectTransfertExistingToInvMessage() {

            _super.call(this)
        }
        ExchangeObjectTransfertExistingToInvMessage.prototype.getMessageId = function() {
            return ExchangeObjectTransfertExistingToInvMessage.ID;
        };
        ExchangeObjectTransfertExistingToInvMessage.prototype.reset = function() {

        };
        ExchangeObjectTransfertExistingToInvMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeObjectTransfertExistingToInvMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeObjectTransfertExistingToInvMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeObjectTransfertExistingToInvMessage(output);
        };
        ExchangeObjectTransfertExistingToInvMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeObjectTransfertExistingToInvMessage(input);
        };
        ExchangeObjectTransfertExistingToInvMessage.prototype.serializeAs_ExchangeObjectTransfertExistingToInvMessage = function(output) {

        };
        ExchangeObjectTransfertExistingToInvMessage.prototype.deserializeAs_ExchangeObjectTransfertExistingToInvMessage = function(input) {

        };
        ExchangeObjectTransfertExistingToInvMessage.ID = 6444;
        return ExchangeObjectTransfertExistingToInvMessage;
    })(NetworkMessage);
    Protocol.ExchangeObjectTransfertExistingToInvMessage = ExchangeObjectTransfertExistingToInvMessage;
    var ExchangeObjectTransfertListFromInvMessage = (function(_super) {
        __extends(ExchangeObjectTransfertListFromInvMessage, _super);

        function ExchangeObjectTransfertListFromInvMessage() {
            this.ids = [];
            _super.call(this)
        }
        ExchangeObjectTransfertListFromInvMessage.prototype.getMessageId = function() {
            return ExchangeObjectTransfertListFromInvMessage.ID;
        };
        ExchangeObjectTransfertListFromInvMessage.prototype.reset = function() {
            this.ids = [];
        };
        ExchangeObjectTransfertListFromInvMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeObjectTransfertListFromInvMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeObjectTransfertListFromInvMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeObjectTransfertListFromInvMessage(output);
        };
        ExchangeObjectTransfertListFromInvMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeObjectTransfertListFromInvMessage(input);
        };
        ExchangeObjectTransfertListFromInvMessage.prototype.serializeAs_ExchangeObjectTransfertListFromInvMessage = function(output) {
            output.writeShort(this.ids.length);
            for (var _i1 = 0; _i1 < this.ids.length; _i1++) {
                if (this.ids[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.ids[_i1] + ") on element 1 (starting at 1) of ids.");
                }
                output.writeVarInt(this.ids[_i1]);
            }
        };
        ExchangeObjectTransfertListFromInvMessage.prototype.deserializeAs_ExchangeObjectTransfertListFromInvMessage = function(input) {
            var _val1 = 0;
            var _idsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _idsLen; _i1++) {
                _val1 = input.readVarUhInt();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of ids.");
                }
                this.ids.push(_val1);
            }
        };
        ExchangeObjectTransfertListFromInvMessage.ID = 9384;
        return ExchangeObjectTransfertListFromInvMessage;
    })(NetworkMessage);
    Protocol.ExchangeObjectTransfertListFromInvMessage = ExchangeObjectTransfertListFromInvMessage;
    var ExchangeObjectTransfertListToInvMessage = (function(_super) {
        __extends(ExchangeObjectTransfertListToInvMessage, _super);

        function ExchangeObjectTransfertListToInvMessage() {
            this.ids = [];
            _super.call(this)
        }
        ExchangeObjectTransfertListToInvMessage.prototype.getMessageId = function() {
            return ExchangeObjectTransfertListToInvMessage.ID;
        };
        ExchangeObjectTransfertListToInvMessage.prototype.reset = function() {
            this.ids = [];
        };
        ExchangeObjectTransfertListToInvMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeObjectTransfertListToInvMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeObjectTransfertListToInvMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeObjectTransfertListToInvMessage(output);
        };
        ExchangeObjectTransfertListToInvMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeObjectTransfertListToInvMessage(input);
        };
        ExchangeObjectTransfertListToInvMessage.prototype.serializeAs_ExchangeObjectTransfertListToInvMessage = function(output) {
            output.writeShort(this.ids.length);
            for (var _i1 = 0; _i1 < this.ids.length; _i1++) {
                if (this.ids[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.ids[_i1] + ") on element 1 (starting at 1) of ids.");
                }
                output.writeVarInt(this.ids[_i1]);
            }
        };
        ExchangeObjectTransfertListToInvMessage.prototype.deserializeAs_ExchangeObjectTransfertListToInvMessage = function(input) {
            var _val1 = 0;
            var _idsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _idsLen; _i1++) {
                _val1 = input.readVarUhInt();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of ids.");
                }
                this.ids.push(_val1);
            }
        };
        ExchangeObjectTransfertListToInvMessage.ID = 8258;
        return ExchangeObjectTransfertListToInvMessage;
    })(NetworkMessage);
    Protocol.ExchangeObjectTransfertListToInvMessage = ExchangeObjectTransfertListToInvMessage;
    var ExchangeObjectTransfertListWithQuantityToInvMessage = (function(_super) {
        __extends(ExchangeObjectTransfertListWithQuantityToInvMessage, _super);

        function ExchangeObjectTransfertListWithQuantityToInvMessage() {
            this.ids = [];
            this.qtys = [];
            _super.call(this)
        }
        ExchangeObjectTransfertListWithQuantityToInvMessage.prototype.getMessageId = function() {
            return ExchangeObjectTransfertListWithQuantityToInvMessage.ID;
        };
        ExchangeObjectTransfertListWithQuantityToInvMessage.prototype.reset = function() {
            this.ids = [];
            this.qtys = [];
        };
        ExchangeObjectTransfertListWithQuantityToInvMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeObjectTransfertListWithQuantityToInvMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeObjectTransfertListWithQuantityToInvMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeObjectTransfertListWithQuantityToInvMessage(output);
        };
        ExchangeObjectTransfertListWithQuantityToInvMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeObjectTransfertListWithQuantityToInvMessage(input);
        };
        ExchangeObjectTransfertListWithQuantityToInvMessage.prototype.serializeAs_ExchangeObjectTransfertListWithQuantityToInvMessage = function(output) {
            output.writeShort(this.ids.length);
            for (var _i1 = 0; _i1 < this.ids.length; _i1++) {
                if (this.ids[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.ids[_i1] + ") on element 1 (starting at 1) of ids.");
                }
                output.writeVarInt(this.ids[_i1]);
            }
            output.writeShort(this.qtys.length);
            for (var _i2 = 0; _i2 < this.qtys.length; _i2++) {
                if (this.qtys[_i2] < 0) {
                    throw new Error("Forbidden value (" + this.qtys[_i2] + ") on element 2 (starting at 1) of qtys.");
                }
                output.writeVarInt(this.qtys[_i2]);
            }
        };
        ExchangeObjectTransfertListWithQuantityToInvMessage.prototype.deserializeAs_ExchangeObjectTransfertListWithQuantityToInvMessage = function(input) {
            var _val1 = 0;
            var _val2 = 0;
            var _idsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _idsLen; _i1++) {
                _val1 = input.readVarUhInt();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of ids.");
                }
                this.ids.push(_val1);
            }
            var _qtysLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _qtysLen; _i2++) {
                _val2 = input.readVarUhInt();
                if (_val2 < 0) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of qtys.");
                }
                this.qtys.push(_val2);
            }
        };
        ExchangeObjectTransfertListWithQuantityToInvMessage.ID = 8847;
        return ExchangeObjectTransfertListWithQuantityToInvMessage;
    })(NetworkMessage);
    Protocol.ExchangeObjectTransfertListWithQuantityToInvMessage = ExchangeObjectTransfertListWithQuantityToInvMessage;
    var ExchangeObjectUseInWorkshopMessage = (function(_super) {
        __extends(ExchangeObjectUseInWorkshopMessage, _super);

        function ExchangeObjectUseInWorkshopMessage() {
            this.objectUID = 0;
            this.quantity = 0;
            _super.call(this)
        }
        ExchangeObjectUseInWorkshopMessage.prototype.getMessageId = function() {
            return ExchangeObjectUseInWorkshopMessage.ID;
        };
        ExchangeObjectUseInWorkshopMessage.prototype.reset = function() {
            this.objectUID = 0;
            this.quantity = 0;
        };
        ExchangeObjectUseInWorkshopMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeObjectUseInWorkshopMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeObjectUseInWorkshopMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeObjectUseInWorkshopMessage(output);
        };
        ExchangeObjectUseInWorkshopMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeObjectUseInWorkshopMessage(input);
        };
        ExchangeObjectUseInWorkshopMessage.prototype.serializeAs_ExchangeObjectUseInWorkshopMessage = function(output) {
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
            }
            output.writeVarInt(this.objectUID);
            output.writeVarInt(this.quantity);
        };
        ExchangeObjectUseInWorkshopMessage.prototype.deserializeAs_ExchangeObjectUseInWorkshopMessage = function(input) {
            this.objectUID = input.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element of ExchangeObjectUseInWorkshopMessage.objectUID.");
            }
            this.quantity = input.readVarInt();
        };
        ExchangeObjectUseInWorkshopMessage.ID = 3123;
        return ExchangeObjectUseInWorkshopMessage;
    })(NetworkMessage);
    Protocol.ExchangeObjectUseInWorkshopMessage = ExchangeObjectUseInWorkshopMessage;
    var ExchangeOfflineSoldItemsMessage = (function(_super) {
        __extends(ExchangeOfflineSoldItemsMessage, _super);

        function ExchangeOfflineSoldItemsMessage() {
            this.bidHouseItems = [];
            this.merchantItems = [];
            _super.call(this)
        }
        ExchangeOfflineSoldItemsMessage.prototype.getMessageId = function() {
            return ExchangeOfflineSoldItemsMessage.ID;
        };
        ExchangeOfflineSoldItemsMessage.prototype.reset = function() {
            this.bidHouseItems = [];
            this.merchantItems = [];
        };
        ExchangeOfflineSoldItemsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeOfflineSoldItemsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeOfflineSoldItemsMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeOfflineSoldItemsMessage(output);
        };
        ExchangeOfflineSoldItemsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeOfflineSoldItemsMessage(input);
        };
        ExchangeOfflineSoldItemsMessage.prototype.serializeAs_ExchangeOfflineSoldItemsMessage = function(output) {
            output.writeShort(this.bidHouseItems.length);
            for (var _i1 = 0; _i1 < this.bidHouseItems.length; _i1++) {
                (this.bidHouseItems[_i1]).serializeAs_ObjectItemQuantityPriceDateEffects(output);
            }
            output.writeShort(this.merchantItems.length);
            for (var _i2 = 0; _i2 < this.merchantItems.length; _i2++) {
                (this.merchantItems[_i2]).serializeAs_ObjectItemQuantityPriceDateEffects(output);
            }
        };
        ExchangeOfflineSoldItemsMessage.prototype.deserializeAs_ExchangeOfflineSoldItemsMessage = function(input) {
            var _item1 = null;
            var _item2 = null;
            var _bidHouseItemsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _bidHouseItemsLen; _i1++) {
                _item1 = new ObjectItemQuantityPriceDateEffects();
                _item1.deserialize(input);
                this.bidHouseItems.push(_item1);
            }
            var _merchantItemsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _merchantItemsLen; _i2++) {
                _item2 = new ObjectItemQuantityPriceDateEffects();
                _item2.deserialize(input);
                this.merchantItems.push(_item2);
            }
        };
        ExchangeOfflineSoldItemsMessage.ID = 9786;
        return ExchangeOfflineSoldItemsMessage;
    })(NetworkMessage);
    Protocol.ExchangeOfflineSoldItemsMessage = ExchangeOfflineSoldItemsMessage;
    var ExchangeOkMultiCraftMessage = (function(_super) {
        __extends(ExchangeOkMultiCraftMessage, _super);

        function ExchangeOkMultiCraftMessage() {
            this.initiatorId = 0;
            this.otherId = 0;
            this.role = 0;
            _super.call(this)
        }
        ExchangeOkMultiCraftMessage.prototype.getMessageId = function() {
            return ExchangeOkMultiCraftMessage.ID;
        };
        ExchangeOkMultiCraftMessage.prototype.reset = function() {
            this.initiatorId = 0;
            this.otherId = 0;
            this.role = 0;
        };
        ExchangeOkMultiCraftMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeOkMultiCraftMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeOkMultiCraftMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeOkMultiCraftMessage(output);
        };
        ExchangeOkMultiCraftMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeOkMultiCraftMessage(input);
        };
        ExchangeOkMultiCraftMessage.prototype.serializeAs_ExchangeOkMultiCraftMessage = function(output) {
            if (this.initiatorId < 0 || this.initiatorId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.initiatorId + ") on element initiatorId.");
            }
            output.writeVarLong(this.initiatorId);
            if (this.otherId < 0 || this.otherId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.otherId + ") on element otherId.");
            }
            output.writeVarLong(this.otherId);
            output.writeByte(this.role);
        };
        ExchangeOkMultiCraftMessage.prototype.deserializeAs_ExchangeOkMultiCraftMessage = function(input) {
            this.initiatorId = input.readVarUhLong();
            if (this.initiatorId < 0 || this.initiatorId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.initiatorId + ") on element of ExchangeOkMultiCraftMessage.initiatorId.");
            }
            this.otherId = input.readVarUhLong();
            if (this.otherId < 0 || this.otherId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.otherId + ") on element of ExchangeOkMultiCraftMessage.otherId.");
            }
            this.role = input.readByte();
        };
        ExchangeOkMultiCraftMessage.ID = 5183;
        return ExchangeOkMultiCraftMessage;
    })(NetworkMessage);
    Protocol.ExchangeOkMultiCraftMessage = ExchangeOkMultiCraftMessage;
    var ExchangeOnHumanVendorRequestMessage = (function(_super) {
        __extends(ExchangeOnHumanVendorRequestMessage, _super);

        function ExchangeOnHumanVendorRequestMessage() {
            this.humanVendorId = 0;
            this.humanVendorCell = 0;
            _super.call(this)
        }
        ExchangeOnHumanVendorRequestMessage.prototype.getMessageId = function() {
            return ExchangeOnHumanVendorRequestMessage.ID;
        };
        ExchangeOnHumanVendorRequestMessage.prototype.reset = function() {
            this.humanVendorId = 0;
            this.humanVendorCell = 0;
        };
        ExchangeOnHumanVendorRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeOnHumanVendorRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeOnHumanVendorRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeOnHumanVendorRequestMessage(output);
        };
        ExchangeOnHumanVendorRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeOnHumanVendorRequestMessage(input);
        };
        ExchangeOnHumanVendorRequestMessage.prototype.serializeAs_ExchangeOnHumanVendorRequestMessage = function(output) {
            if (this.humanVendorId < 0 || this.humanVendorId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.humanVendorId + ") on element humanVendorId.");
            }
            output.writeVarLong(this.humanVendorId);
            if (this.humanVendorCell < 0 || this.humanVendorCell > 559) {
                throw new Error("Forbidden value (" + this.humanVendorCell + ") on element humanVendorCell.");
            }
            output.writeVarShort(this.humanVendorCell);
        };
        ExchangeOnHumanVendorRequestMessage.prototype.deserializeAs_ExchangeOnHumanVendorRequestMessage = function(input) {
            this.humanVendorId = input.readVarUhLong();
            if (this.humanVendorId < 0 || this.humanVendorId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.humanVendorId + ") on element of ExchangeOnHumanVendorRequestMessage.humanVendorId.");
            }
            this.humanVendorCell = input.readVarUhShort();
            if (this.humanVendorCell < 0 || this.humanVendorCell > 559) {
                throw new Error("Forbidden value (" + this.humanVendorCell + ") on element of ExchangeOnHumanVendorRequestMessage.humanVendorCell.");
            }
        };
        ExchangeOnHumanVendorRequestMessage.ID = 5687;
        return ExchangeOnHumanVendorRequestMessage;
    })(NetworkMessage);
    Protocol.ExchangeOnHumanVendorRequestMessage = ExchangeOnHumanVendorRequestMessage;
    var ExchangeRequestMessage = (function(_super) {
        __extends(ExchangeRequestMessage, _super);

        function ExchangeRequestMessage() {
            this.exchangeType = 0;
            _super.call(this)
        }
        ExchangeRequestMessage.prototype.getMessageId = function() {
            return ExchangeRequestMessage.ID;
        };
        ExchangeRequestMessage.prototype.reset = function() {
            this.exchangeType = 0;
        };
        ExchangeRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeRequestMessage(output);
        };
        ExchangeRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeRequestMessage(input);
        };
        ExchangeRequestMessage.prototype.serializeAs_ExchangeRequestMessage = function(output) {
            output.writeByte(this.exchangeType);
        };
        ExchangeRequestMessage.prototype.deserializeAs_ExchangeRequestMessage = function(input) {
            this.exchangeType = input.readByte();
        };
        ExchangeRequestMessage.ID = 2334;
        return ExchangeRequestMessage;
    })(NetworkMessage);
    Protocol.ExchangeRequestMessage = ExchangeRequestMessage;
    var ExchangePlayerMultiCraftRequestMessage = (function(_super) {
        __extends(ExchangePlayerMultiCraftRequestMessage, _super);

        function ExchangePlayerMultiCraftRequestMessage() {
            this.target = 0;
            this.skillId = 0;
            _super.call(this)
        }
        ExchangePlayerMultiCraftRequestMessage.prototype.getMessageId = function() {
            return ExchangePlayerMultiCraftRequestMessage.ID;
        };
        ExchangePlayerMultiCraftRequestMessage.prototype.reset = function() {
            this.target = 0;
            this.skillId = 0;
        };
        ExchangePlayerMultiCraftRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangePlayerMultiCraftRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangePlayerMultiCraftRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangePlayerMultiCraftRequestMessage(output);
        };
        ExchangePlayerMultiCraftRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangePlayerMultiCraftRequestMessage(input);
        };
        ExchangePlayerMultiCraftRequestMessage.prototype.serializeAs_ExchangePlayerMultiCraftRequestMessage = function(output) {
            _super.prototype.serializeAs_ExchangeRequestMessage.call(this, output);
            if (this.target < 0 || this.target > 9007199254740990) {
                throw new Error("Forbidden value (" + this.target + ") on element target.");
            }
            output.writeVarLong(this.target);
            if (this.skillId < 0) {
                throw new Error("Forbidden value (" + this.skillId + ") on element skillId.");
            }
            output.writeVarInt(this.skillId);
        };
        ExchangePlayerMultiCraftRequestMessage.prototype.deserializeAs_ExchangePlayerMultiCraftRequestMessage = function(input) {
            _super.prototype.deserializeAs_ExchangeRequestMessage.call(this, input);
            this.target = input.readVarUhLong();
            if (this.target < 0 || this.target > 9007199254740990) {
                throw new Error("Forbidden value (" + this.target + ") on element of ExchangePlayerMultiCraftRequestMessage.target.");
            }
            this.skillId = input.readVarUhInt();
            if (this.skillId < 0) {
                throw new Error("Forbidden value (" + this.skillId + ") on element of ExchangePlayerMultiCraftRequestMessage.skillId.");
            }
        };
        ExchangePlayerMultiCraftRequestMessage.ID = 8527;
        return ExchangePlayerMultiCraftRequestMessage;
    })(ExchangeRequestMessage);
    Protocol.ExchangePlayerMultiCraftRequestMessage = ExchangePlayerMultiCraftRequestMessage;
    var ExchangePlayerRequestMessage = (function(_super) {
        __extends(ExchangePlayerRequestMessage, _super);

        function ExchangePlayerRequestMessage() {
            this.target = 0;
            _super.call(this)
        }
        ExchangePlayerRequestMessage.prototype.getMessageId = function() {
            return ExchangePlayerRequestMessage.ID;
        };
        ExchangePlayerRequestMessage.prototype.reset = function() {
            this.target = 0;
        };
        ExchangePlayerRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangePlayerRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangePlayerRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangePlayerRequestMessage(output);
        };
        ExchangePlayerRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangePlayerRequestMessage(input);
        };
        ExchangePlayerRequestMessage.prototype.serializeAs_ExchangePlayerRequestMessage = function(output) {
            _super.prototype.serializeAs_ExchangeRequestMessage.call(this, output);
            if (this.target < 0 || this.target > 9007199254740990) {
                throw new Error("Forbidden value (" + this.target + ") on element target.");
            }
            output.writeVarLong(this.target);
        };
        ExchangePlayerRequestMessage.prototype.deserializeAs_ExchangePlayerRequestMessage = function(input) {
            _super.prototype.deserializeAs_ExchangeRequestMessage.call(this, input);
            this.target = input.readVarUhLong();
            if (this.target < 0 || this.target > 9007199254740990) {
                throw new Error("Forbidden value (" + this.target + ") on element of ExchangePlayerRequestMessage.target.");
            }
        };
        ExchangePlayerRequestMessage.ID = 4040;
        return ExchangePlayerRequestMessage;
    })(ExchangeRequestMessage);
    Protocol.ExchangePlayerRequestMessage = ExchangePlayerRequestMessage;
    var ExchangeReadyMessage = (function(_super) {
        __extends(ExchangeReadyMessage, _super);

        function ExchangeReadyMessage() {
            this.ready = false;
            this.step = 0;
            _super.call(this)
        }
        ExchangeReadyMessage.prototype.getMessageId = function() {
            return ExchangeReadyMessage.ID;
        };
        ExchangeReadyMessage.prototype.reset = function() {
            this.ready = false;
            this.step = 0;
        };
        ExchangeReadyMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeReadyMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeReadyMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeReadyMessage(output);
        };
        ExchangeReadyMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeReadyMessage(input);
        };
        ExchangeReadyMessage.prototype.serializeAs_ExchangeReadyMessage = function(output) {
            output.writeBoolean(this.ready);
            if (this.step < 0) {
                throw new Error("Forbidden value (" + this.step + ") on element step.");
            }
            output.writeVarShort(this.step);
        };
        ExchangeReadyMessage.prototype.deserializeAs_ExchangeReadyMessage = function(input) {
            this.ready = input.readBoolean();
            this.step = input.readVarUhShort();
            if (this.step < 0) {
                throw new Error("Forbidden value (" + this.step + ") on element of ExchangeReadyMessage.step.");
            }
        };
        ExchangeReadyMessage.ID = 118;
        return ExchangeReadyMessage;
    })(NetworkMessage);
    Protocol.ExchangeReadyMessage = ExchangeReadyMessage;
    var ExchangeReplayStopMessage = (function(_super) {
        __extends(ExchangeReplayStopMessage, _super);

        function ExchangeReplayStopMessage() {

            _super.call(this)
        }
        ExchangeReplayStopMessage.prototype.getMessageId = function() {
            return ExchangeReplayStopMessage.ID;
        };
        ExchangeReplayStopMessage.prototype.reset = function() {

        };
        ExchangeReplayStopMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeReplayStopMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeReplayStopMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeReplayStopMessage(output);
        };
        ExchangeReplayStopMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeReplayStopMessage(input);
        };
        ExchangeReplayStopMessage.prototype.serializeAs_ExchangeReplayStopMessage = function(output) {

        };
        ExchangeReplayStopMessage.prototype.deserializeAs_ExchangeReplayStopMessage = function(input) {

        };
        ExchangeReplayStopMessage.ID = 4712;
        return ExchangeReplayStopMessage;
    })(NetworkMessage);
    Protocol.ExchangeReplayStopMessage = ExchangeReplayStopMessage;
    var ExchangeReplyTaxVendorMessage = (function(_super) {
        __extends(ExchangeReplyTaxVendorMessage, _super);

        function ExchangeReplyTaxVendorMessage() {
            this.objectValue = 0;
            this.totalTaxValue = 0;
            _super.call(this)
        }
        ExchangeReplyTaxVendorMessage.prototype.getMessageId = function() {
            return ExchangeReplyTaxVendorMessage.ID;
        };
        ExchangeReplyTaxVendorMessage.prototype.reset = function() {
            this.objectValue = 0;
            this.totalTaxValue = 0;
        };
        ExchangeReplyTaxVendorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeReplyTaxVendorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeReplyTaxVendorMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeReplyTaxVendorMessage(output);
        };
        ExchangeReplyTaxVendorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeReplyTaxVendorMessage(input);
        };
        ExchangeReplyTaxVendorMessage.prototype.serializeAs_ExchangeReplyTaxVendorMessage = function(output) {
            if (this.objectValue < 0 || this.objectValue > 9007199254740990) {
                throw new Error("Forbidden value (" + this.objectValue + ") on element objectValue.");
            }
            output.writeVarLong(this.objectValue);
            if (this.totalTaxValue < 0 || this.totalTaxValue > 9007199254740990) {
                throw new Error("Forbidden value (" + this.totalTaxValue + ") on element totalTaxValue.");
            }
            output.writeVarLong(this.totalTaxValue);
        };
        ExchangeReplyTaxVendorMessage.prototype.deserializeAs_ExchangeReplyTaxVendorMessage = function(input) {
            this.objectValue = input.readVarUhLong();
            if (this.objectValue < 0 || this.objectValue > 9007199254740990) {
                throw new Error("Forbidden value (" + this.objectValue + ") on element of ExchangeReplyTaxVendorMessage.objectValue.");
            }
            this.totalTaxValue = input.readVarUhLong();
            if (this.totalTaxValue < 0 || this.totalTaxValue > 9007199254740990) {
                throw new Error("Forbidden value (" + this.totalTaxValue + ") on element of ExchangeReplyTaxVendorMessage.totalTaxValue.");
            }
        };
        ExchangeReplyTaxVendorMessage.ID = 2545;
        return ExchangeReplyTaxVendorMessage;
    })(NetworkMessage);
    Protocol.ExchangeReplyTaxVendorMessage = ExchangeReplyTaxVendorMessage;
    var ExchangeRequestedMessage = (function(_super) {
        __extends(ExchangeRequestedMessage, _super);

        function ExchangeRequestedMessage() {
            this.exchangeType = 0;
            _super.call(this)
        }
        ExchangeRequestedMessage.prototype.getMessageId = function() {
            return ExchangeRequestedMessage.ID;
        };
        ExchangeRequestedMessage.prototype.reset = function() {
            this.exchangeType = 0;
        };
        ExchangeRequestedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeRequestedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeRequestedMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeRequestedMessage(output);
        };
        ExchangeRequestedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeRequestedMessage(input);
        };
        ExchangeRequestedMessage.prototype.serializeAs_ExchangeRequestedMessage = function(output) {
            output.writeByte(this.exchangeType);
        };
        ExchangeRequestedMessage.prototype.deserializeAs_ExchangeRequestedMessage = function(input) {
            this.exchangeType = input.readByte();
        };
        ExchangeRequestedMessage.ID = 2157;
        return ExchangeRequestedMessage;
    })(NetworkMessage);
    Protocol.ExchangeRequestedMessage = ExchangeRequestedMessage;
    var ExchangeRequestedTradeMessage = (function(_super) {
        __extends(ExchangeRequestedTradeMessage, _super);

        function ExchangeRequestedTradeMessage() {
            this.source = 0;
            this.target = 0;
            _super.call(this)
        }
        ExchangeRequestedTradeMessage.prototype.getMessageId = function() {
            return ExchangeRequestedTradeMessage.ID;
        };
        ExchangeRequestedTradeMessage.prototype.reset = function() {
            this.source = 0;
            this.target = 0;
        };
        ExchangeRequestedTradeMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeRequestedTradeMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeRequestedTradeMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeRequestedTradeMessage(output);
        };
        ExchangeRequestedTradeMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeRequestedTradeMessage(input);
        };
        ExchangeRequestedTradeMessage.prototype.serializeAs_ExchangeRequestedTradeMessage = function(output) {
            _super.prototype.serializeAs_ExchangeRequestedMessage.call(this, output);
            if (this.source < 0 || this.source > 9007199254740990) {
                throw new Error("Forbidden value (" + this.source + ") on element source.");
            }
            output.writeVarLong(this.source);
            if (this.target < 0 || this.target > 9007199254740990) {
                throw new Error("Forbidden value (" + this.target + ") on element target.");
            }
            output.writeVarLong(this.target);
        };
        ExchangeRequestedTradeMessage.prototype.deserializeAs_ExchangeRequestedTradeMessage = function(input) {
            _super.prototype.deserializeAs_ExchangeRequestedMessage.call(this, input);
            this.source = input.readVarUhLong();
            if (this.source < 0 || this.source > 9007199254740990) {
                throw new Error("Forbidden value (" + this.source + ") on element of ExchangeRequestedTradeMessage.source.");
            }
            this.target = input.readVarUhLong();
            if (this.target < 0 || this.target > 9007199254740990) {
                throw new Error("Forbidden value (" + this.target + ") on element of ExchangeRequestedTradeMessage.target.");
            }
        };
        ExchangeRequestedTradeMessage.ID = 4929;
        return ExchangeRequestedTradeMessage;
    })(ExchangeRequestedMessage);
    Protocol.ExchangeRequestedTradeMessage = ExchangeRequestedTradeMessage;
    var ExchangeRequestOnMountStockMessage = (function(_super) {
        __extends(ExchangeRequestOnMountStockMessage, _super);

        function ExchangeRequestOnMountStockMessage() {

            _super.call(this)
        }
        ExchangeRequestOnMountStockMessage.prototype.getMessageId = function() {
            return ExchangeRequestOnMountStockMessage.ID;
        };
        ExchangeRequestOnMountStockMessage.prototype.reset = function() {

        };
        ExchangeRequestOnMountStockMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeRequestOnMountStockMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeRequestOnMountStockMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeRequestOnMountStockMessage(output);
        };
        ExchangeRequestOnMountStockMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeRequestOnMountStockMessage(input);
        };
        ExchangeRequestOnMountStockMessage.prototype.serializeAs_ExchangeRequestOnMountStockMessage = function(output) {

        };
        ExchangeRequestOnMountStockMessage.prototype.deserializeAs_ExchangeRequestOnMountStockMessage = function(input) {

        };
        ExchangeRequestOnMountStockMessage.ID = 1967;
        return ExchangeRequestOnMountStockMessage;
    })(NetworkMessage);
    Protocol.ExchangeRequestOnMountStockMessage = ExchangeRequestOnMountStockMessage;
    var ExchangeRequestOnShopStockMessage = (function(_super) {
        __extends(ExchangeRequestOnShopStockMessage, _super);

        function ExchangeRequestOnShopStockMessage() {

            _super.call(this)
        }
        ExchangeRequestOnShopStockMessage.prototype.getMessageId = function() {
            return ExchangeRequestOnShopStockMessage.ID;
        };
        ExchangeRequestOnShopStockMessage.prototype.reset = function() {

        };
        ExchangeRequestOnShopStockMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeRequestOnShopStockMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeRequestOnShopStockMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeRequestOnShopStockMessage(output);
        };
        ExchangeRequestOnShopStockMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeRequestOnShopStockMessage(input);
        };
        ExchangeRequestOnShopStockMessage.prototype.serializeAs_ExchangeRequestOnShopStockMessage = function(output) {

        };
        ExchangeRequestOnShopStockMessage.prototype.deserializeAs_ExchangeRequestOnShopStockMessage = function(input) {

        };
        ExchangeRequestOnShopStockMessage.ID = 1872;
        return ExchangeRequestOnShopStockMessage;
    })(NetworkMessage);
    Protocol.ExchangeRequestOnShopStockMessage = ExchangeRequestOnShopStockMessage;
    var ExchangeRequestOnTaxCollectorMessage = (function(_super) {
        __extends(ExchangeRequestOnTaxCollectorMessage, _super);

        function ExchangeRequestOnTaxCollectorMessage() {

            _super.call(this)
        }
        ExchangeRequestOnTaxCollectorMessage.prototype.getMessageId = function() {
            return ExchangeRequestOnTaxCollectorMessage.ID;
        };
        ExchangeRequestOnTaxCollectorMessage.prototype.reset = function() {

        };
        ExchangeRequestOnTaxCollectorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeRequestOnTaxCollectorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeRequestOnTaxCollectorMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeRequestOnTaxCollectorMessage(output);
        };
        ExchangeRequestOnTaxCollectorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeRequestOnTaxCollectorMessage(input);
        };
        ExchangeRequestOnTaxCollectorMessage.prototype.serializeAs_ExchangeRequestOnTaxCollectorMessage = function(output) {

        };
        ExchangeRequestOnTaxCollectorMessage.prototype.deserializeAs_ExchangeRequestOnTaxCollectorMessage = function(input) {

        };
        ExchangeRequestOnTaxCollectorMessage.ID = 69;
        return ExchangeRequestOnTaxCollectorMessage;
    })(NetworkMessage);
    Protocol.ExchangeRequestOnTaxCollectorMessage = ExchangeRequestOnTaxCollectorMessage;
    var ExchangeSellMessage = (function(_super) {
        __extends(ExchangeSellMessage, _super);

        function ExchangeSellMessage() {
            this.objectToSellId = 0;
            this.quantity = 0;
            _super.call(this)
        }
        ExchangeSellMessage.prototype.getMessageId = function() {
            return ExchangeSellMessage.ID;
        };
        ExchangeSellMessage.prototype.reset = function() {
            this.objectToSellId = 0;
            this.quantity = 0;
        };
        ExchangeSellMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeSellMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeSellMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeSellMessage(output);
        };
        ExchangeSellMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeSellMessage(input);
        };
        ExchangeSellMessage.prototype.serializeAs_ExchangeSellMessage = function(output) {
            if (this.objectToSellId < 0) {
                throw new Error("Forbidden value (" + this.objectToSellId + ") on element objectToSellId.");
            }
            output.writeVarInt(this.objectToSellId);
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
            }
            output.writeVarInt(this.quantity);
        };
        ExchangeSellMessage.prototype.deserializeAs_ExchangeSellMessage = function(input) {
            this.objectToSellId = input.readVarUhInt();
            if (this.objectToSellId < 0) {
                throw new Error("Forbidden value (" + this.objectToSellId + ") on element of ExchangeSellMessage.objectToSellId.");
            }
            this.quantity = input.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element of ExchangeSellMessage.quantity.");
            }
        };
        ExchangeSellMessage.ID = 6306;
        return ExchangeSellMessage;
    })(NetworkMessage);
    Protocol.ExchangeSellMessage = ExchangeSellMessage;
    var ExchangeSellOkMessage = (function(_super) {
        __extends(ExchangeSellOkMessage, _super);

        function ExchangeSellOkMessage() {

            _super.call(this)
        }
        ExchangeSellOkMessage.prototype.getMessageId = function() {
            return ExchangeSellOkMessage.ID;
        };
        ExchangeSellOkMessage.prototype.reset = function() {

        };
        ExchangeSellOkMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeSellOkMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeSellOkMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeSellOkMessage(output);
        };
        ExchangeSellOkMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeSellOkMessage(input);
        };
        ExchangeSellOkMessage.prototype.serializeAs_ExchangeSellOkMessage = function(output) {

        };
        ExchangeSellOkMessage.prototype.deserializeAs_ExchangeSellOkMessage = function(input) {

        };
        ExchangeSellOkMessage.ID = 678;
        return ExchangeSellOkMessage;
    })(NetworkMessage);
    Protocol.ExchangeSellOkMessage = ExchangeSellOkMessage;
    var ExchangeSetCraftRecipeMessage = (function(_super) {
        __extends(ExchangeSetCraftRecipeMessage, _super);

        function ExchangeSetCraftRecipeMessage() {
            this.objectGID = 0;
            _super.call(this)
        }
        ExchangeSetCraftRecipeMessage.prototype.getMessageId = function() {
            return ExchangeSetCraftRecipeMessage.ID;
        };
        ExchangeSetCraftRecipeMessage.prototype.reset = function() {
            this.objectGID = 0;
        };
        ExchangeSetCraftRecipeMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeSetCraftRecipeMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeSetCraftRecipeMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeSetCraftRecipeMessage(output);
        };
        ExchangeSetCraftRecipeMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeSetCraftRecipeMessage(input);
        };
        ExchangeSetCraftRecipeMessage.prototype.serializeAs_ExchangeSetCraftRecipeMessage = function(output) {
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element objectGID.");
            }
            output.writeVarShort(this.objectGID);
        };
        ExchangeSetCraftRecipeMessage.prototype.deserializeAs_ExchangeSetCraftRecipeMessage = function(input) {
            this.objectGID = input.readVarUhShort();
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element of ExchangeSetCraftRecipeMessage.objectGID.");
            }
        };
        ExchangeSetCraftRecipeMessage.ID = 9959;
        return ExchangeSetCraftRecipeMessage;
    })(NetworkMessage);
    Protocol.ExchangeSetCraftRecipeMessage = ExchangeSetCraftRecipeMessage;
    var ExchangeShopStockMovementRemovedMessage = (function(_super) {
        __extends(ExchangeShopStockMovementRemovedMessage, _super);

        function ExchangeShopStockMovementRemovedMessage() {
            this.objectId = 0;
            _super.call(this)
        }
        ExchangeShopStockMovementRemovedMessage.prototype.getMessageId = function() {
            return ExchangeShopStockMovementRemovedMessage.ID;
        };
        ExchangeShopStockMovementRemovedMessage.prototype.reset = function() {
            this.objectId = 0;
        };
        ExchangeShopStockMovementRemovedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeShopStockMovementRemovedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeShopStockMovementRemovedMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeShopStockMovementRemovedMessage(output);
        };
        ExchangeShopStockMovementRemovedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeShopStockMovementRemovedMessage(input);
        };
        ExchangeShopStockMovementRemovedMessage.prototype.serializeAs_ExchangeShopStockMovementRemovedMessage = function(output) {
            if (this.objectId < 0) {
                throw new Error("Forbidden value (" + this.objectId + ") on element objectId.");
            }
            output.writeVarInt(this.objectId);
        };
        ExchangeShopStockMovementRemovedMessage.prototype.deserializeAs_ExchangeShopStockMovementRemovedMessage = function(input) {
            this.objectId = input.readVarUhInt();
            if (this.objectId < 0) {
                throw new Error("Forbidden value (" + this.objectId + ") on element of ExchangeShopStockMovementRemovedMessage.objectId.");
            }
        };
        ExchangeShopStockMovementRemovedMessage.ID = 418;
        return ExchangeShopStockMovementRemovedMessage;
    })(NetworkMessage);
    Protocol.ExchangeShopStockMovementRemovedMessage = ExchangeShopStockMovementRemovedMessage;
    var ExchangeShopStockMovementUpdatedMessage = (function(_super) {
        __extends(ExchangeShopStockMovementUpdatedMessage, _super);

        function ExchangeShopStockMovementUpdatedMessage() {
            this.objectInfo = new ObjectItemToSell();
            _super.call(this)
        }
        ExchangeShopStockMovementUpdatedMessage.prototype.getMessageId = function() {
            return ExchangeShopStockMovementUpdatedMessage.ID;
        };
        ExchangeShopStockMovementUpdatedMessage.prototype.reset = function() {
            this.objectInfo = new ObjectItemToSell();
        };
        ExchangeShopStockMovementUpdatedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeShopStockMovementUpdatedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeShopStockMovementUpdatedMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeShopStockMovementUpdatedMessage(output);
        };
        ExchangeShopStockMovementUpdatedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeShopStockMovementUpdatedMessage(input);
        };
        ExchangeShopStockMovementUpdatedMessage.prototype.serializeAs_ExchangeShopStockMovementUpdatedMessage = function(output) {
            this.objectInfo.serializeAs_ObjectItemToSell(output);
        };
        ExchangeShopStockMovementUpdatedMessage.prototype.deserializeAs_ExchangeShopStockMovementUpdatedMessage = function(input) {
            this.objectInfo = new ObjectItemToSell();
            this.objectInfo.deserialize(input);
        };
        ExchangeShopStockMovementUpdatedMessage.ID = 5713;
        return ExchangeShopStockMovementUpdatedMessage;
    })(NetworkMessage);
    Protocol.ExchangeShopStockMovementUpdatedMessage = ExchangeShopStockMovementUpdatedMessage;
    var ExchangeShopStockMultiMovementRemovedMessage = (function(_super) {
        __extends(ExchangeShopStockMultiMovementRemovedMessage, _super);

        function ExchangeShopStockMultiMovementRemovedMessage() {
            this.objectIdList = [];
            _super.call(this)
        }
        ExchangeShopStockMultiMovementRemovedMessage.prototype.getMessageId = function() {
            return ExchangeShopStockMultiMovementRemovedMessage.ID;
        };
        ExchangeShopStockMultiMovementRemovedMessage.prototype.reset = function() {
            this.objectIdList = [];
        };
        ExchangeShopStockMultiMovementRemovedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeShopStockMultiMovementRemovedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeShopStockMultiMovementRemovedMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeShopStockMultiMovementRemovedMessage(output);
        };
        ExchangeShopStockMultiMovementRemovedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeShopStockMultiMovementRemovedMessage(input);
        };
        ExchangeShopStockMultiMovementRemovedMessage.prototype.serializeAs_ExchangeShopStockMultiMovementRemovedMessage = function(output) {
            output.writeShort(this.objectIdList.length);
            for (var _i1 = 0; _i1 < this.objectIdList.length; _i1++) {
                if (this.objectIdList[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.objectIdList[_i1] + ") on element 1 (starting at 1) of objectIdList.");
                }
                output.writeVarInt(this.objectIdList[_i1]);
            }
        };
        ExchangeShopStockMultiMovementRemovedMessage.prototype.deserializeAs_ExchangeShopStockMultiMovementRemovedMessage = function(input) {
            var _val1 = 0;
            var _objectIdListLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _objectIdListLen; _i1++) {
                _val1 = input.readVarUhInt();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of objectIdList.");
                }
                this.objectIdList.push(_val1);
            }
        };
        ExchangeShopStockMultiMovementRemovedMessage.ID = 1264;
        return ExchangeShopStockMultiMovementRemovedMessage;
    })(NetworkMessage);
    Protocol.ExchangeShopStockMultiMovementRemovedMessage = ExchangeShopStockMultiMovementRemovedMessage;
    var ExchangeShopStockMultiMovementUpdatedMessage = (function(_super) {
        __extends(ExchangeShopStockMultiMovementUpdatedMessage, _super);

        function ExchangeShopStockMultiMovementUpdatedMessage() {
            this.objectInfoList = [];
            _super.call(this)
        }
        ExchangeShopStockMultiMovementUpdatedMessage.prototype.getMessageId = function() {
            return ExchangeShopStockMultiMovementUpdatedMessage.ID;
        };
        ExchangeShopStockMultiMovementUpdatedMessage.prototype.reset = function() {
            this.objectInfoList = [];
        };
        ExchangeShopStockMultiMovementUpdatedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeShopStockMultiMovementUpdatedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeShopStockMultiMovementUpdatedMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeShopStockMultiMovementUpdatedMessage(output);
        };
        ExchangeShopStockMultiMovementUpdatedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeShopStockMultiMovementUpdatedMessage(input);
        };
        ExchangeShopStockMultiMovementUpdatedMessage.prototype.serializeAs_ExchangeShopStockMultiMovementUpdatedMessage = function(output) {
            output.writeShort(this.objectInfoList.length);
            for (var _i1 = 0; _i1 < this.objectInfoList.length; _i1++) {
                (this.objectInfoList[_i1]).serializeAs_ObjectItemToSell(output);
            }
        };
        ExchangeShopStockMultiMovementUpdatedMessage.prototype.deserializeAs_ExchangeShopStockMultiMovementUpdatedMessage = function(input) {
            var _item1 = null;
            var _objectInfoListLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _objectInfoListLen; _i1++) {
                _item1 = new ObjectItemToSell();
                _item1.deserialize(input);
                this.objectInfoList.push(_item1);
            }
        };
        ExchangeShopStockMultiMovementUpdatedMessage.ID = 230;
        return ExchangeShopStockMultiMovementUpdatedMessage;
    })(NetworkMessage);
    Protocol.ExchangeShopStockMultiMovementUpdatedMessage = ExchangeShopStockMultiMovementUpdatedMessage;
    var ExchangeShopStockStartedMessage = (function(_super) {
        __extends(ExchangeShopStockStartedMessage, _super);

        function ExchangeShopStockStartedMessage() {
            this.objectsInfos = [];
            _super.call(this)
        }
        ExchangeShopStockStartedMessage.prototype.getMessageId = function() {
            return ExchangeShopStockStartedMessage.ID;
        };
        ExchangeShopStockStartedMessage.prototype.reset = function() {
            this.objectsInfos = [];
        };
        ExchangeShopStockStartedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeShopStockStartedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeShopStockStartedMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeShopStockStartedMessage(output);
        };
        ExchangeShopStockStartedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeShopStockStartedMessage(input);
        };
        ExchangeShopStockStartedMessage.prototype.serializeAs_ExchangeShopStockStartedMessage = function(output) {
            output.writeShort(this.objectsInfos.length);
            for (var _i1 = 0; _i1 < this.objectsInfos.length; _i1++) {
                (this.objectsInfos[_i1]).serializeAs_ObjectItemToSell(output);
            }
        };
        ExchangeShopStockStartedMessage.prototype.deserializeAs_ExchangeShopStockStartedMessage = function(input) {
            var _item1 = null;
            var _objectsInfosLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _objectsInfosLen; _i1++) {
                _item1 = new ObjectItemToSell();
                _item1.deserialize(input);
                this.objectsInfos.push(_item1);
            }
        };
        ExchangeShopStockStartedMessage.ID = 9089;
        return ExchangeShopStockStartedMessage;
    })(NetworkMessage);
    Protocol.ExchangeShopStockStartedMessage = ExchangeShopStockStartedMessage;
    var ExchangeShowVendorTaxMessage = (function(_super) {
        __extends(ExchangeShowVendorTaxMessage, _super);

        function ExchangeShowVendorTaxMessage() {

            _super.call(this)
        }
        ExchangeShowVendorTaxMessage.prototype.getMessageId = function() {
            return ExchangeShowVendorTaxMessage.ID;
        };
        ExchangeShowVendorTaxMessage.prototype.reset = function() {

        };
        ExchangeShowVendorTaxMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeShowVendorTaxMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeShowVendorTaxMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeShowVendorTaxMessage(output);
        };
        ExchangeShowVendorTaxMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeShowVendorTaxMessage(input);
        };
        ExchangeShowVendorTaxMessage.prototype.serializeAs_ExchangeShowVendorTaxMessage = function(output) {

        };
        ExchangeShowVendorTaxMessage.prototype.deserializeAs_ExchangeShowVendorTaxMessage = function(input) {

        };
        ExchangeShowVendorTaxMessage.ID = 2113;
        return ExchangeShowVendorTaxMessage;
    })(NetworkMessage);
    Protocol.ExchangeShowVendorTaxMessage = ExchangeShowVendorTaxMessage;
    var ExchangeStartAsVendorMessage = (function(_super) {
        __extends(ExchangeStartAsVendorMessage, _super);

        function ExchangeStartAsVendorMessage() {

            _super.call(this)
        }
        ExchangeStartAsVendorMessage.prototype.getMessageId = function() {
            return ExchangeStartAsVendorMessage.ID;
        };
        ExchangeStartAsVendorMessage.prototype.reset = function() {

        };
        ExchangeStartAsVendorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeStartAsVendorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeStartAsVendorMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeStartAsVendorMessage(output);
        };
        ExchangeStartAsVendorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeStartAsVendorMessage(input);
        };
        ExchangeStartAsVendorMessage.prototype.serializeAs_ExchangeStartAsVendorMessage = function(output) {

        };
        ExchangeStartAsVendorMessage.prototype.deserializeAs_ExchangeStartAsVendorMessage = function(input) {

        };
        ExchangeStartAsVendorMessage.ID = 3439;
        return ExchangeStartAsVendorMessage;
    })(NetworkMessage);
    Protocol.ExchangeStartAsVendorMessage = ExchangeStartAsVendorMessage;
    var ExchangeStartedBidBuyerMessage = (function(_super) {
        __extends(ExchangeStartedBidBuyerMessage, _super);

        function ExchangeStartedBidBuyerMessage() {
            this.buyerDescriptor = new SellerBuyerDescriptor();
            _super.call(this)
        }
        ExchangeStartedBidBuyerMessage.prototype.getMessageId = function() {
            return ExchangeStartedBidBuyerMessage.ID;
        };
        ExchangeStartedBidBuyerMessage.prototype.reset = function() {
            this.buyerDescriptor = new SellerBuyerDescriptor();
        };
        ExchangeStartedBidBuyerMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeStartedBidBuyerMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeStartedBidBuyerMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeStartedBidBuyerMessage(output);
        };
        ExchangeStartedBidBuyerMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeStartedBidBuyerMessage(input);
        };
        ExchangeStartedBidBuyerMessage.prototype.serializeAs_ExchangeStartedBidBuyerMessage = function(output) {
            this.buyerDescriptor.serializeAs_SellerBuyerDescriptor(output);
        };
        ExchangeStartedBidBuyerMessage.prototype.deserializeAs_ExchangeStartedBidBuyerMessage = function(input) {
            this.buyerDescriptor = new SellerBuyerDescriptor();
            this.buyerDescriptor.deserialize(input);
        };
        ExchangeStartedBidBuyerMessage.ID = 6940;
        return ExchangeStartedBidBuyerMessage;
    })(NetworkMessage);
    Protocol.ExchangeStartedBidBuyerMessage = ExchangeStartedBidBuyerMessage;
    var ExchangeStartedBidSellerMessage = (function(_super) {
        __extends(ExchangeStartedBidSellerMessage, _super);

        function ExchangeStartedBidSellerMessage() {
            this.sellerDescriptor = new SellerBuyerDescriptor();
            this.objectsInfos = [];
            _super.call(this)
        }
        ExchangeStartedBidSellerMessage.prototype.getMessageId = function() {
            return ExchangeStartedBidSellerMessage.ID;
        };
        ExchangeStartedBidSellerMessage.prototype.reset = function() {
            this.sellerDescriptor = new SellerBuyerDescriptor();
            this.objectsInfos = [];
        };
        ExchangeStartedBidSellerMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeStartedBidSellerMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeStartedBidSellerMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeStartedBidSellerMessage(output);
        };
        ExchangeStartedBidSellerMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeStartedBidSellerMessage(input);
        };
        ExchangeStartedBidSellerMessage.prototype.serializeAs_ExchangeStartedBidSellerMessage = function(output) {
            this.sellerDescriptor.serializeAs_SellerBuyerDescriptor(output);
            output.writeShort(this.objectsInfos.length);
            for (var _i2 = 0; _i2 < this.objectsInfos.length; _i2++) {
                (this.objectsInfos[_i2]).serializeAs_ObjectItemToSellInBid(output);
            }
        };
        ExchangeStartedBidSellerMessage.prototype.deserializeAs_ExchangeStartedBidSellerMessage = function(input) {
            var _item2 = null;
            this.sellerDescriptor = new SellerBuyerDescriptor();
            this.sellerDescriptor.deserialize(input);
            var _objectsInfosLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _objectsInfosLen; _i2++) {
                _item2 = new ObjectItemToSellInBid();
                _item2.deserialize(input);
                this.objectsInfos.push(_item2);
            }
        };
        ExchangeStartedBidSellerMessage.ID = 1385;
        return ExchangeStartedBidSellerMessage;
    })(NetworkMessage);
    Protocol.ExchangeStartedBidSellerMessage = ExchangeStartedBidSellerMessage;
    var ExchangeStartedMessage = (function(_super) {
        __extends(ExchangeStartedMessage, _super);

        function ExchangeStartedMessage() {
            this.exchangeType = 0;
            _super.call(this)
        }
        ExchangeStartedMessage.prototype.getMessageId = function() {
            return ExchangeStartedMessage.ID;
        };
        ExchangeStartedMessage.prototype.reset = function() {
            this.exchangeType = 0;
        };
        ExchangeStartedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeStartedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeStartedMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeStartedMessage(output);
        };
        ExchangeStartedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeStartedMessage(input);
        };
        ExchangeStartedMessage.prototype.serializeAs_ExchangeStartedMessage = function(output) {
            output.writeByte(this.exchangeType);
        };
        ExchangeStartedMessage.prototype.deserializeAs_ExchangeStartedMessage = function(input) {
            this.exchangeType = input.readByte();
        };
        ExchangeStartedMessage.ID = 6165;
        return ExchangeStartedMessage;
    })(NetworkMessage);
    Protocol.ExchangeStartedMessage = ExchangeStartedMessage;
    var ExchangeStartedMountStockMessage = (function(_super) {
        __extends(ExchangeStartedMountStockMessage, _super);

        function ExchangeStartedMountStockMessage() {
            this.objectsInfos = [];
            _super.call(this)
        }
        ExchangeStartedMountStockMessage.prototype.getMessageId = function() {
            return ExchangeStartedMountStockMessage.ID;
        };
        ExchangeStartedMountStockMessage.prototype.reset = function() {
            this.objectsInfos = [];
        };
        ExchangeStartedMountStockMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeStartedMountStockMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeStartedMountStockMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeStartedMountStockMessage(output);
        };
        ExchangeStartedMountStockMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeStartedMountStockMessage(input);
        };
        ExchangeStartedMountStockMessage.prototype.serializeAs_ExchangeStartedMountStockMessage = function(output) {
            output.writeShort(this.objectsInfos.length);
            for (var _i1 = 0; _i1 < this.objectsInfos.length; _i1++) {
                (this.objectsInfos[_i1]).serializeAs_ObjectItem(output);
            }
        };
        ExchangeStartedMountStockMessage.prototype.deserializeAs_ExchangeStartedMountStockMessage = function(input) {
            var _item1 = null;
            var _objectsInfosLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _objectsInfosLen; _i1++) {
                _item1 = new ObjectItem();
                _item1.deserialize(input);
                this.objectsInfos.push(_item1);
            }
        };
        ExchangeStartedMountStockMessage.ID = 8074;
        return ExchangeStartedMountStockMessage;
    })(NetworkMessage);
    Protocol.ExchangeStartedMountStockMessage = ExchangeStartedMountStockMessage;
    var ExchangeStartedTaxCollectorShopMessage = (function(_super) {
        __extends(ExchangeStartedTaxCollectorShopMessage, _super);

        function ExchangeStartedTaxCollectorShopMessage() {
            this.objects = [];
            this.kamas = 0;
            _super.call(this)
        }
        ExchangeStartedTaxCollectorShopMessage.prototype.getMessageId = function() {
            return ExchangeStartedTaxCollectorShopMessage.ID;
        };
        ExchangeStartedTaxCollectorShopMessage.prototype.reset = function() {
            this.objects = [];
            this.kamas = 0;
        };
        ExchangeStartedTaxCollectorShopMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeStartedTaxCollectorShopMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeStartedTaxCollectorShopMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeStartedTaxCollectorShopMessage(output);
        };
        ExchangeStartedTaxCollectorShopMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeStartedTaxCollectorShopMessage(input);
        };
        ExchangeStartedTaxCollectorShopMessage.prototype.serializeAs_ExchangeStartedTaxCollectorShopMessage = function(output) {
            output.writeShort(this.objects.length);
            for (var _i1 = 0; _i1 < this.objects.length; _i1++) {
                (this.objects[_i1]).serializeAs_ObjectItem(output);
            }
            if (this.kamas < 0 || this.kamas > 9007199254740990) {
                throw new Error("Forbidden value (" + this.kamas + ") on element kamas.");
            }
            output.writeVarLong(this.kamas);
        };
        ExchangeStartedTaxCollectorShopMessage.prototype.deserializeAs_ExchangeStartedTaxCollectorShopMessage = function(input) {
            var _item1 = null;
            var _objectsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _objectsLen; _i1++) {
                _item1 = new ObjectItem();
                _item1.deserialize(input);
                this.objects.push(_item1);
            }
            this.kamas = input.readVarUhLong();
            if (this.kamas < 0 || this.kamas > 9007199254740990) {
                throw new Error("Forbidden value (" + this.kamas + ") on element of ExchangeStartedTaxCollectorShopMessage.kamas.");
            }
        };
        ExchangeStartedTaxCollectorShopMessage.ID = 2431;
        return ExchangeStartedTaxCollectorShopMessage;
    })(NetworkMessage);
    Protocol.ExchangeStartedTaxCollectorShopMessage = ExchangeStartedTaxCollectorShopMessage;
    var ExchangeStartedWithPodsMessage = (function(_super) {
        __extends(ExchangeStartedWithPodsMessage, _super);

        function ExchangeStartedWithPodsMessage() {
            this.firstCharacterId = 0;
            this.firstCharacterCurrentWeight = 0;
            this.firstCharacterMaxWeight = 0;
            this.secondCharacterId = 0;
            this.secondCharacterCurrentWeight = 0;
            this.secondCharacterMaxWeight = 0;
            _super.call(this)
        }
        ExchangeStartedWithPodsMessage.prototype.getMessageId = function() {
            return ExchangeStartedWithPodsMessage.ID;
        };
        ExchangeStartedWithPodsMessage.prototype.reset = function() {
            this.firstCharacterId = 0;
            this.firstCharacterCurrentWeight = 0;
            this.firstCharacterMaxWeight = 0;
            this.secondCharacterId = 0;
            this.secondCharacterCurrentWeight = 0;
            this.secondCharacterMaxWeight = 0;
        };
        ExchangeStartedWithPodsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeStartedWithPodsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeStartedWithPodsMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeStartedWithPodsMessage(output);
        };
        ExchangeStartedWithPodsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeStartedWithPodsMessage(input);
        };
        ExchangeStartedWithPodsMessage.prototype.serializeAs_ExchangeStartedWithPodsMessage = function(output) {
            _super.prototype.serializeAs_ExchangeStartedMessage.call(this, output);
            if (this.firstCharacterId < -9007199254740990 || this.firstCharacterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.firstCharacterId + ") on element firstCharacterId.");
            }
            output.writeDouble(this.firstCharacterId);
            if (this.firstCharacterCurrentWeight < 0) {
                throw new Error("Forbidden value (" + this.firstCharacterCurrentWeight + ") on element firstCharacterCurrentWeight.");
            }
            output.writeVarInt(this.firstCharacterCurrentWeight);
            if (this.firstCharacterMaxWeight < 0) {
                throw new Error("Forbidden value (" + this.firstCharacterMaxWeight + ") on element firstCharacterMaxWeight.");
            }
            output.writeVarInt(this.firstCharacterMaxWeight);
            if (this.secondCharacterId < -9007199254740990 || this.secondCharacterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.secondCharacterId + ") on element secondCharacterId.");
            }
            output.writeDouble(this.secondCharacterId);
            if (this.secondCharacterCurrentWeight < 0) {
                throw new Error("Forbidden value (" + this.secondCharacterCurrentWeight + ") on element secondCharacterCurrentWeight.");
            }
            output.writeVarInt(this.secondCharacterCurrentWeight);
            if (this.secondCharacterMaxWeight < 0) {
                throw new Error("Forbidden value (" + this.secondCharacterMaxWeight + ") on element secondCharacterMaxWeight.");
            }
            output.writeVarInt(this.secondCharacterMaxWeight);
        };
        ExchangeStartedWithPodsMessage.prototype.deserializeAs_ExchangeStartedWithPodsMessage = function(input) {
            _super.prototype.deserializeAs_ExchangeStartedMessage.call(this, input);
            this.firstCharacterId = input.readDouble();
            if (this.firstCharacterId < -9007199254740990 || this.firstCharacterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.firstCharacterId + ") on element of ExchangeStartedWithPodsMessage.firstCharacterId.");
            }
            this.firstCharacterCurrentWeight = input.readVarUhInt();
            if (this.firstCharacterCurrentWeight < 0) {
                throw new Error("Forbidden value (" + this.firstCharacterCurrentWeight + ") on element of ExchangeStartedWithPodsMessage.firstCharacterCurrentWeight.");
            }
            this.firstCharacterMaxWeight = input.readVarUhInt();
            if (this.firstCharacterMaxWeight < 0) {
                throw new Error("Forbidden value (" + this.firstCharacterMaxWeight + ") on element of ExchangeStartedWithPodsMessage.firstCharacterMaxWeight.");
            }
            this.secondCharacterId = input.readDouble();
            if (this.secondCharacterId < -9007199254740990 || this.secondCharacterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.secondCharacterId + ") on element of ExchangeStartedWithPodsMessage.secondCharacterId.");
            }
            this.secondCharacterCurrentWeight = input.readVarUhInt();
            if (this.secondCharacterCurrentWeight < 0) {
                throw new Error("Forbidden value (" + this.secondCharacterCurrentWeight + ") on element of ExchangeStartedWithPodsMessage.secondCharacterCurrentWeight.");
            }
            this.secondCharacterMaxWeight = input.readVarUhInt();
            if (this.secondCharacterMaxWeight < 0) {
                throw new Error("Forbidden value (" + this.secondCharacterMaxWeight + ") on element of ExchangeStartedWithPodsMessage.secondCharacterMaxWeight.");
            }
        };
        ExchangeStartedWithPodsMessage.ID = 1554;
        return ExchangeStartedWithPodsMessage;
    })(ExchangeStartedMessage);
    Protocol.ExchangeStartedWithPodsMessage = ExchangeStartedWithPodsMessage;
    var ExchangeStartedWithStorageMessage = (function(_super) {
        __extends(ExchangeStartedWithStorageMessage, _super);

        function ExchangeStartedWithStorageMessage() {
            this.storageMaxSlot = 0;
            _super.call(this)
        }
        ExchangeStartedWithStorageMessage.prototype.getMessageId = function() {
            return ExchangeStartedWithStorageMessage.ID;
        };
        ExchangeStartedWithStorageMessage.prototype.reset = function() {
            this.storageMaxSlot = 0;
        };
        ExchangeStartedWithStorageMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeStartedWithStorageMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeStartedWithStorageMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeStartedWithStorageMessage(output);
        };
        ExchangeStartedWithStorageMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeStartedWithStorageMessage(input);
        };
        ExchangeStartedWithStorageMessage.prototype.serializeAs_ExchangeStartedWithStorageMessage = function(output) {
            _super.prototype.serializeAs_ExchangeStartedMessage.call(this, output);
            if (this.storageMaxSlot < 0) {
                throw new Error("Forbidden value (" + this.storageMaxSlot + ") on element storageMaxSlot.");
            }
            output.writeVarInt(this.storageMaxSlot);
        };
        ExchangeStartedWithStorageMessage.prototype.deserializeAs_ExchangeStartedWithStorageMessage = function(input) {
            _super.prototype.deserializeAs_ExchangeStartedMessage.call(this, input);
            this.storageMaxSlot = input.readVarUhInt();
            if (this.storageMaxSlot < 0) {
                throw new Error("Forbidden value (" + this.storageMaxSlot + ") on element of ExchangeStartedWithStorageMessage.storageMaxSlot.");
            }
        };
        ExchangeStartedWithStorageMessage.ID = 4230;
        return ExchangeStartedWithStorageMessage;
    })(ExchangeStartedMessage);
    Protocol.ExchangeStartedWithStorageMessage = ExchangeStartedWithStorageMessage;
    var ExchangeStartOkCraftMessage = (function(_super) {
        __extends(ExchangeStartOkCraftMessage, _super);

        function ExchangeStartOkCraftMessage() {

            _super.call(this)
        }
        ExchangeStartOkCraftMessage.prototype.getMessageId = function() {
            return ExchangeStartOkCraftMessage.ID;
        };
        ExchangeStartOkCraftMessage.prototype.reset = function() {

        };
        ExchangeStartOkCraftMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeStartOkCraftMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeStartOkCraftMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeStartOkCraftMessage(output);
        };
        ExchangeStartOkCraftMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeStartOkCraftMessage(input);
        };
        ExchangeStartOkCraftMessage.prototype.serializeAs_ExchangeStartOkCraftMessage = function(output) {

        };
        ExchangeStartOkCraftMessage.prototype.deserializeAs_ExchangeStartOkCraftMessage = function(input) {

        };
        ExchangeStartOkCraftMessage.ID = 7527;
        return ExchangeStartOkCraftMessage;
    })(NetworkMessage);
    Protocol.ExchangeStartOkCraftMessage = ExchangeStartOkCraftMessage;
    var ExchangeStartOkCraftWithInformationMessage = (function(_super) {
        __extends(ExchangeStartOkCraftWithInformationMessage, _super);

        function ExchangeStartOkCraftWithInformationMessage() {
            this.skillId = 0;
            _super.call(this)
        }
        ExchangeStartOkCraftWithInformationMessage.prototype.getMessageId = function() {
            return ExchangeStartOkCraftWithInformationMessage.ID;
        };
        ExchangeStartOkCraftWithInformationMessage.prototype.reset = function() {
            this.skillId = 0;
        };
        ExchangeStartOkCraftWithInformationMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeStartOkCraftWithInformationMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeStartOkCraftWithInformationMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeStartOkCraftWithInformationMessage(output);
        };
        ExchangeStartOkCraftWithInformationMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeStartOkCraftWithInformationMessage(input);
        };
        ExchangeStartOkCraftWithInformationMessage.prototype.serializeAs_ExchangeStartOkCraftWithInformationMessage = function(output) {
            _super.prototype.serializeAs_ExchangeStartOkCraftMessage.call(this, output);
            if (this.skillId < 0) {
                throw new Error("Forbidden value (" + this.skillId + ") on element skillId.");
            }
            output.writeVarInt(this.skillId);
        };
        ExchangeStartOkCraftWithInformationMessage.prototype.deserializeAs_ExchangeStartOkCraftWithInformationMessage = function(input) {
            _super.prototype.deserializeAs_ExchangeStartOkCraftMessage.call(this, input);
            this.skillId = input.readVarUhInt();
            if (this.skillId < 0) {
                throw new Error("Forbidden value (" + this.skillId + ") on element of ExchangeStartOkCraftWithInformationMessage.skillId.");
            }
        };
        ExchangeStartOkCraftWithInformationMessage.ID = 7801;
        return ExchangeStartOkCraftWithInformationMessage;
    })(ExchangeStartOkCraftMessage);
    Protocol.ExchangeStartOkCraftWithInformationMessage = ExchangeStartOkCraftWithInformationMessage;
    var ExchangeStartOkEvolutiveObjectRecycleTradeMessage = (function(_super) {
        __extends(ExchangeStartOkEvolutiveObjectRecycleTradeMessage, _super);

        function ExchangeStartOkEvolutiveObjectRecycleTradeMessage() {

            _super.call(this)
        }
        ExchangeStartOkEvolutiveObjectRecycleTradeMessage.prototype.getMessageId = function() {
            return ExchangeStartOkEvolutiveObjectRecycleTradeMessage.ID;
        };
        ExchangeStartOkEvolutiveObjectRecycleTradeMessage.prototype.reset = function() {

        };
        ExchangeStartOkEvolutiveObjectRecycleTradeMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeStartOkEvolutiveObjectRecycleTradeMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeStartOkEvolutiveObjectRecycleTradeMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeStartOkEvolutiveObjectRecycleTradeMessage(output);
        };
        ExchangeStartOkEvolutiveObjectRecycleTradeMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeStartOkEvolutiveObjectRecycleTradeMessage(input);
        };
        ExchangeStartOkEvolutiveObjectRecycleTradeMessage.prototype.serializeAs_ExchangeStartOkEvolutiveObjectRecycleTradeMessage = function(output) {

        };
        ExchangeStartOkEvolutiveObjectRecycleTradeMessage.prototype.deserializeAs_ExchangeStartOkEvolutiveObjectRecycleTradeMessage = function(input) {

        };
        ExchangeStartOkEvolutiveObjectRecycleTradeMessage.ID = 9997;
        return ExchangeStartOkEvolutiveObjectRecycleTradeMessage;
    })(NetworkMessage);
    Protocol.ExchangeStartOkEvolutiveObjectRecycleTradeMessage = ExchangeStartOkEvolutiveObjectRecycleTradeMessage;
    var ExchangeStartOkHumanVendorMessage = (function(_super) {
        __extends(ExchangeStartOkHumanVendorMessage, _super);

        function ExchangeStartOkHumanVendorMessage() {
            this.sellerId = 0;
            this.objectsInfos = [];
            _super.call(this)
        }
        ExchangeStartOkHumanVendorMessage.prototype.getMessageId = function() {
            return ExchangeStartOkHumanVendorMessage.ID;
        };
        ExchangeStartOkHumanVendorMessage.prototype.reset = function() {
            this.sellerId = 0;
            this.objectsInfos = [];
        };
        ExchangeStartOkHumanVendorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeStartOkHumanVendorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeStartOkHumanVendorMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeStartOkHumanVendorMessage(output);
        };
        ExchangeStartOkHumanVendorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeStartOkHumanVendorMessage(input);
        };
        ExchangeStartOkHumanVendorMessage.prototype.serializeAs_ExchangeStartOkHumanVendorMessage = function(output) {
            if (this.sellerId < -9007199254740990 || this.sellerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.sellerId + ") on element sellerId.");
            }
            output.writeDouble(this.sellerId);
            output.writeShort(this.objectsInfos.length);
            for (var _i2 = 0; _i2 < this.objectsInfos.length; _i2++) {
                (this.objectsInfos[_i2]).serializeAs_ObjectItemToSellInHumanVendorShop(output);
            }
        };
        ExchangeStartOkHumanVendorMessage.prototype.deserializeAs_ExchangeStartOkHumanVendorMessage = function(input) {
            var _item2 = null;
            this.sellerId = input.readDouble();
            if (this.sellerId < -9007199254740990 || this.sellerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.sellerId + ") on element of ExchangeStartOkHumanVendorMessage.sellerId.");
            }
            var _objectsInfosLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _objectsInfosLen; _i2++) {
                _item2 = new ObjectItemToSellInHumanVendorShop();
                _item2.deserialize(input);
                this.objectsInfos.push(_item2);
            }
        };
        ExchangeStartOkHumanVendorMessage.ID = 5814;
        return ExchangeStartOkHumanVendorMessage;
    })(NetworkMessage);
    Protocol.ExchangeStartOkHumanVendorMessage = ExchangeStartOkHumanVendorMessage;
    var ExchangeStartOkJobIndexMessage = (function(_super) {
        __extends(ExchangeStartOkJobIndexMessage, _super);

        function ExchangeStartOkJobIndexMessage() {
            this.jobs = [];
            _super.call(this)
        }
        ExchangeStartOkJobIndexMessage.prototype.getMessageId = function() {
            return ExchangeStartOkJobIndexMessage.ID;
        };
        ExchangeStartOkJobIndexMessage.prototype.reset = function() {
            this.jobs = [];
        };
        ExchangeStartOkJobIndexMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeStartOkJobIndexMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeStartOkJobIndexMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeStartOkJobIndexMessage(output);
        };
        ExchangeStartOkJobIndexMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeStartOkJobIndexMessage(input);
        };
        ExchangeStartOkJobIndexMessage.prototype.serializeAs_ExchangeStartOkJobIndexMessage = function(output) {
            output.writeShort(this.jobs.length);
            for (var _i1 = 0; _i1 < this.jobs.length; _i1++) {
                if (this.jobs[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.jobs[_i1] + ") on element 1 (starting at 1) of jobs.");
                }
                output.writeVarInt(this.jobs[_i1]);
            }
        };
        ExchangeStartOkJobIndexMessage.prototype.deserializeAs_ExchangeStartOkJobIndexMessage = function(input) {
            var _val1 = 0;
            var _jobsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _jobsLen; _i1++) {
                _val1 = input.readVarUhInt();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of jobs.");
                }
                this.jobs.push(_val1);
            }
        };
        ExchangeStartOkJobIndexMessage.ID = 9846;
        return ExchangeStartOkJobIndexMessage;
    })(NetworkMessage);
    Protocol.ExchangeStartOkJobIndexMessage = ExchangeStartOkJobIndexMessage;
    var ExchangeStartOkMountWithOutPaddockMessage = (function(_super) {
        __extends(ExchangeStartOkMountWithOutPaddockMessage, _super);

        function ExchangeStartOkMountWithOutPaddockMessage() {
            this.stabledMountsDescription = [];
            _super.call(this)
        }
        ExchangeStartOkMountWithOutPaddockMessage.prototype.getMessageId = function() {
            return ExchangeStartOkMountWithOutPaddockMessage.ID;
        };
        ExchangeStartOkMountWithOutPaddockMessage.prototype.reset = function() {
            this.stabledMountsDescription = [];
        };
        ExchangeStartOkMountWithOutPaddockMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeStartOkMountWithOutPaddockMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeStartOkMountWithOutPaddockMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeStartOkMountWithOutPaddockMessage(output);
        };
        ExchangeStartOkMountWithOutPaddockMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeStartOkMountWithOutPaddockMessage(input);
        };
        ExchangeStartOkMountWithOutPaddockMessage.prototype.serializeAs_ExchangeStartOkMountWithOutPaddockMessage = function(output) {
            output.writeShort(this.stabledMountsDescription.length);
            for (var _i1 = 0; _i1 < this.stabledMountsDescription.length; _i1++) {
                (this.stabledMountsDescription[_i1]).serializeAs_MountClientData(output);
            }
        };
        ExchangeStartOkMountWithOutPaddockMessage.prototype.deserializeAs_ExchangeStartOkMountWithOutPaddockMessage = function(input) {
            var _item1 = null;
            var _stabledMountsDescriptionLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _stabledMountsDescriptionLen; _i1++) {
                _item1 = new MountClientData();
                _item1.deserialize(input);
                this.stabledMountsDescription.push(_item1);
            }
        };
        ExchangeStartOkMountWithOutPaddockMessage.ID = 2914;
        return ExchangeStartOkMountWithOutPaddockMessage;
    })(NetworkMessage);
    Protocol.ExchangeStartOkMountWithOutPaddockMessage = ExchangeStartOkMountWithOutPaddockMessage;
    var ExchangeStartOkMountMessage = (function(_super) {
        __extends(ExchangeStartOkMountMessage, _super);

        function ExchangeStartOkMountMessage() {
            this.paddockedMountsDescription = [];
            _super.call(this)
        }
        ExchangeStartOkMountMessage.prototype.getMessageId = function() {
            return ExchangeStartOkMountMessage.ID;
        };
        ExchangeStartOkMountMessage.prototype.reset = function() {
            this.paddockedMountsDescription = [];
        };
        ExchangeStartOkMountMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeStartOkMountMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeStartOkMountMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeStartOkMountMessage(output);
        };
        ExchangeStartOkMountMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeStartOkMountMessage(input);
        };
        ExchangeStartOkMountMessage.prototype.serializeAs_ExchangeStartOkMountMessage = function(output) {
            _super.prototype.serializeAs_ExchangeStartOkMountWithOutPaddockMessage.call(this, output);
            output.writeShort(this.paddockedMountsDescription.length);
            for (var _i1 = 0; _i1 < this.paddockedMountsDescription.length; _i1++) {
                (this.paddockedMountsDescription[_i1]).serializeAs_MountClientData(output);
            }
        };
        ExchangeStartOkMountMessage.prototype.deserializeAs_ExchangeStartOkMountMessage = function(input) {
            var _item1 = null;
            _super.prototype.deserializeAs_ExchangeStartOkMountWithOutPaddockMessage.call(this, input);
            var _paddockedMountsDescriptionLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _paddockedMountsDescriptionLen; _i1++) {
                _item1 = new MountClientData();
                _item1.deserialize(input);
                this.paddockedMountsDescription.push(_item1);
            }
        };
        ExchangeStartOkMountMessage.ID = 1843;
        return ExchangeStartOkMountMessage;
    })(ExchangeStartOkMountWithOutPaddockMessage);
    Protocol.ExchangeStartOkMountMessage = ExchangeStartOkMountMessage;
    var ExchangeStartOkMulticraftCrafterMessage = (function(_super) {
        __extends(ExchangeStartOkMulticraftCrafterMessage, _super);

        function ExchangeStartOkMulticraftCrafterMessage() {
            this.skillId = 0;
            _super.call(this)
        }
        ExchangeStartOkMulticraftCrafterMessage.prototype.getMessageId = function() {
            return ExchangeStartOkMulticraftCrafterMessage.ID;
        };
        ExchangeStartOkMulticraftCrafterMessage.prototype.reset = function() {
            this.skillId = 0;
        };
        ExchangeStartOkMulticraftCrafterMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeStartOkMulticraftCrafterMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeStartOkMulticraftCrafterMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeStartOkMulticraftCrafterMessage(output);
        };
        ExchangeStartOkMulticraftCrafterMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeStartOkMulticraftCrafterMessage(input);
        };
        ExchangeStartOkMulticraftCrafterMessage.prototype.serializeAs_ExchangeStartOkMulticraftCrafterMessage = function(output) {
            if (this.skillId < 0) {
                throw new Error("Forbidden value (" + this.skillId + ") on element skillId.");
            }
            output.writeVarInt(this.skillId);
        };
        ExchangeStartOkMulticraftCrafterMessage.prototype.deserializeAs_ExchangeStartOkMulticraftCrafterMessage = function(input) {
            this.skillId = input.readVarUhInt();
            if (this.skillId < 0) {
                throw new Error("Forbidden value (" + this.skillId + ") on element of ExchangeStartOkMulticraftCrafterMessage.skillId.");
            }
        };
        ExchangeStartOkMulticraftCrafterMessage.ID = 6701;
        return ExchangeStartOkMulticraftCrafterMessage;
    })(NetworkMessage);
    Protocol.ExchangeStartOkMulticraftCrafterMessage = ExchangeStartOkMulticraftCrafterMessage;
    var ExchangeStartOkMulticraftCustomerMessage = (function(_super) {
        __extends(ExchangeStartOkMulticraftCustomerMessage, _super);

        function ExchangeStartOkMulticraftCustomerMessage() {
            this.skillId = 0;
            this.crafterJobLevel = 0;
            _super.call(this)
        }
        ExchangeStartOkMulticraftCustomerMessage.prototype.getMessageId = function() {
            return ExchangeStartOkMulticraftCustomerMessage.ID;
        };
        ExchangeStartOkMulticraftCustomerMessage.prototype.reset = function() {
            this.skillId = 0;
            this.crafterJobLevel = 0;
        };
        ExchangeStartOkMulticraftCustomerMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeStartOkMulticraftCustomerMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeStartOkMulticraftCustomerMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeStartOkMulticraftCustomerMessage(output);
        };
        ExchangeStartOkMulticraftCustomerMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeStartOkMulticraftCustomerMessage(input);
        };
        ExchangeStartOkMulticraftCustomerMessage.prototype.serializeAs_ExchangeStartOkMulticraftCustomerMessage = function(output) {
            if (this.skillId < 0) {
                throw new Error("Forbidden value (" + this.skillId + ") on element skillId.");
            }
            output.writeVarInt(this.skillId);
            if (this.crafterJobLevel < 0 || this.crafterJobLevel > 255) {
                throw new Error("Forbidden value (" + this.crafterJobLevel + ") on element crafterJobLevel.");
            }
            output.writeByte(this.crafterJobLevel);
        };
        ExchangeStartOkMulticraftCustomerMessage.prototype.deserializeAs_ExchangeStartOkMulticraftCustomerMessage = function(input) {
            this.skillId = input.readVarUhInt();
            if (this.skillId < 0) {
                throw new Error("Forbidden value (" + this.skillId + ") on element of ExchangeStartOkMulticraftCustomerMessage.skillId.");
            }
            this.crafterJobLevel = input.readUnsignedByte();
            if (this.crafterJobLevel < 0 || this.crafterJobLevel > 255) {
                throw new Error("Forbidden value (" + this.crafterJobLevel + ") on element of ExchangeStartOkMulticraftCustomerMessage.crafterJobLevel.");
            }
        };
        ExchangeStartOkMulticraftCustomerMessage.ID = 5660;
        return ExchangeStartOkMulticraftCustomerMessage;
    })(NetworkMessage);
    Protocol.ExchangeStartOkMulticraftCustomerMessage = ExchangeStartOkMulticraftCustomerMessage;
    var ExchangeStartOkNpcShopMessage = (function(_super) {
        __extends(ExchangeStartOkNpcShopMessage, _super);

        function ExchangeStartOkNpcShopMessage() {
            this.npcSellerId = 0;
            this.tokenId = 0;
            this.objectsInfos = [];
            _super.call(this)
        }
        ExchangeStartOkNpcShopMessage.prototype.getMessageId = function() {
            return ExchangeStartOkNpcShopMessage.ID;
        };
        ExchangeStartOkNpcShopMessage.prototype.reset = function() {
            this.npcSellerId = 0;
            this.tokenId = 0;
            this.objectsInfos = [];
        };
        ExchangeStartOkNpcShopMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeStartOkNpcShopMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeStartOkNpcShopMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeStartOkNpcShopMessage(output);
        };
        ExchangeStartOkNpcShopMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeStartOkNpcShopMessage(input);
        };
        ExchangeStartOkNpcShopMessage.prototype.serializeAs_ExchangeStartOkNpcShopMessage = function(output) {
            if (this.npcSellerId < -9007199254740990 || this.npcSellerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.npcSellerId + ") on element npcSellerId.");
            }
            output.writeDouble(this.npcSellerId);
            if (this.tokenId < 0) {
                throw new Error("Forbidden value (" + this.tokenId + ") on element tokenId.");
            }
            output.writeVarShort(this.tokenId);
            output.writeShort(this.objectsInfos.length);
            for (var _i3 = 0; _i3 < this.objectsInfos.length; _i3++) {
                (this.objectsInfos[_i3]).serializeAs_ObjectItemToSellInNpcShop(output);
            }
        };
        ExchangeStartOkNpcShopMessage.prototype.deserializeAs_ExchangeStartOkNpcShopMessage = function(input) {
            var _item3 = null;
            this.npcSellerId = input.readDouble();
            if (this.npcSellerId < -9007199254740990 || this.npcSellerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.npcSellerId + ") on element of ExchangeStartOkNpcShopMessage.npcSellerId.");
            }
            this.tokenId = input.readVarUhShort();
            if (this.tokenId < 0) {
                throw new Error("Forbidden value (" + this.tokenId + ") on element of ExchangeStartOkNpcShopMessage.tokenId.");
            }
            var _objectsInfosLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _objectsInfosLen; _i3++) {
                _item3 = new ObjectItemToSellInNpcShop();
                _item3.deserialize(input);
                this.objectsInfos.push(_item3);
            }
        };
        ExchangeStartOkNpcShopMessage.ID = 6110;
        return ExchangeStartOkNpcShopMessage;
    })(NetworkMessage);
    Protocol.ExchangeStartOkNpcShopMessage = ExchangeStartOkNpcShopMessage;
    var ExchangeStartOkNpcTradeMessage = (function(_super) {
        __extends(ExchangeStartOkNpcTradeMessage, _super);

        function ExchangeStartOkNpcTradeMessage() {
            this.npcId = 0;
            _super.call(this)
        }
        ExchangeStartOkNpcTradeMessage.prototype.getMessageId = function() {
            return ExchangeStartOkNpcTradeMessage.ID;
        };
        ExchangeStartOkNpcTradeMessage.prototype.reset = function() {
            this.npcId = 0;
        };
        ExchangeStartOkNpcTradeMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeStartOkNpcTradeMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeStartOkNpcTradeMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeStartOkNpcTradeMessage(output);
        };
        ExchangeStartOkNpcTradeMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeStartOkNpcTradeMessage(input);
        };
        ExchangeStartOkNpcTradeMessage.prototype.serializeAs_ExchangeStartOkNpcTradeMessage = function(output) {
            if (this.npcId < -9007199254740990 || this.npcId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.npcId + ") on element npcId.");
            }
            output.writeDouble(this.npcId);
        };
        ExchangeStartOkNpcTradeMessage.prototype.deserializeAs_ExchangeStartOkNpcTradeMessage = function(input) {
            this.npcId = input.readDouble();
            if (this.npcId < -9007199254740990 || this.npcId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.npcId + ") on element of ExchangeStartOkNpcTradeMessage.npcId.");
            }
        };
        ExchangeStartOkNpcTradeMessage.ID = 6872;
        return ExchangeStartOkNpcTradeMessage;
    })(NetworkMessage);
    Protocol.ExchangeStartOkNpcTradeMessage = ExchangeStartOkNpcTradeMessage;
    var ExchangeStartOkRecycleTradeMessage = (function(_super) {
        __extends(ExchangeStartOkRecycleTradeMessage, _super);

        function ExchangeStartOkRecycleTradeMessage() {
            this.percentToPrism = 0;
            this.percentToPlayer = 0;
            _super.call(this)
        }
        ExchangeStartOkRecycleTradeMessage.prototype.getMessageId = function() {
            return ExchangeStartOkRecycleTradeMessage.ID;
        };
        ExchangeStartOkRecycleTradeMessage.prototype.reset = function() {
            this.percentToPrism = 0;
            this.percentToPlayer = 0;
        };
        ExchangeStartOkRecycleTradeMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeStartOkRecycleTradeMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeStartOkRecycleTradeMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeStartOkRecycleTradeMessage(output);
        };
        ExchangeStartOkRecycleTradeMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeStartOkRecycleTradeMessage(input);
        };
        ExchangeStartOkRecycleTradeMessage.prototype.serializeAs_ExchangeStartOkRecycleTradeMessage = function(output) {
            if (this.percentToPrism < 0) {
                throw new Error("Forbidden value (" + this.percentToPrism + ") on element percentToPrism.");
            }
            output.writeShort(this.percentToPrism);
            if (this.percentToPlayer < 0) {
                throw new Error("Forbidden value (" + this.percentToPlayer + ") on element percentToPlayer.");
            }
            output.writeShort(this.percentToPlayer);
        };
        ExchangeStartOkRecycleTradeMessage.prototype.deserializeAs_ExchangeStartOkRecycleTradeMessage = function(input) {
            this.percentToPrism = input.readShort();
            if (this.percentToPrism < 0) {
                throw new Error("Forbidden value (" + this.percentToPrism + ") on element of ExchangeStartOkRecycleTradeMessage.percentToPrism.");
            }
            this.percentToPlayer = input.readShort();
            if (this.percentToPlayer < 0) {
                throw new Error("Forbidden value (" + this.percentToPlayer + ") on element of ExchangeStartOkRecycleTradeMessage.percentToPlayer.");
            }
        };
        ExchangeStartOkRecycleTradeMessage.ID = 255;
        return ExchangeStartOkRecycleTradeMessage;
    })(NetworkMessage);
    Protocol.ExchangeStartOkRecycleTradeMessage = ExchangeStartOkRecycleTradeMessage;
    var ExchangeStartOkRunesTradeMessage = (function(_super) {
        __extends(ExchangeStartOkRunesTradeMessage, _super);

        function ExchangeStartOkRunesTradeMessage() {

            _super.call(this)
        }
        ExchangeStartOkRunesTradeMessage.prototype.getMessageId = function() {
            return ExchangeStartOkRunesTradeMessage.ID;
        };
        ExchangeStartOkRunesTradeMessage.prototype.reset = function() {

        };
        ExchangeStartOkRunesTradeMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeStartOkRunesTradeMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeStartOkRunesTradeMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeStartOkRunesTradeMessage(output);
        };
        ExchangeStartOkRunesTradeMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeStartOkRunesTradeMessage(input);
        };
        ExchangeStartOkRunesTradeMessage.prototype.serializeAs_ExchangeStartOkRunesTradeMessage = function(output) {

        };
        ExchangeStartOkRunesTradeMessage.prototype.deserializeAs_ExchangeStartOkRunesTradeMessage = function(input) {

        };
        ExchangeStartOkRunesTradeMessage.ID = 4206;
        return ExchangeStartOkRunesTradeMessage;
    })(NetworkMessage);
    Protocol.ExchangeStartOkRunesTradeMessage = ExchangeStartOkRunesTradeMessage;
    var ExchangeStoppedMessage = (function(_super) {
        __extends(ExchangeStoppedMessage, _super);

        function ExchangeStoppedMessage() {
            this.id = 0;
            _super.call(this)
        }
        ExchangeStoppedMessage.prototype.getMessageId = function() {
            return ExchangeStoppedMessage.ID;
        };
        ExchangeStoppedMessage.prototype.reset = function() {
            this.id = 0;
        };
        ExchangeStoppedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeStoppedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeStoppedMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeStoppedMessage(output);
        };
        ExchangeStoppedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeStoppedMessage(input);
        };
        ExchangeStoppedMessage.prototype.serializeAs_ExchangeStoppedMessage = function(output) {
            if (this.id < 0 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarLong(this.id);
        };
        ExchangeStoppedMessage.prototype.deserializeAs_ExchangeStoppedMessage = function(input) {
            this.id = input.readVarUhLong();
            if (this.id < 0 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element of ExchangeStoppedMessage.id.");
            }
        };
        ExchangeStoppedMessage.ID = 5468;
        return ExchangeStoppedMessage;
    })(NetworkMessage);
    Protocol.ExchangeStoppedMessage = ExchangeStoppedMessage;
    var ExchangeTypesExchangerDescriptionForUserMessage = (function(_super) {
        __extends(ExchangeTypesExchangerDescriptionForUserMessage, _super);

        function ExchangeTypesExchangerDescriptionForUserMessage() {
            this.objectType = 0;
            this.typeDescription = [];
            _super.call(this)
        }
        ExchangeTypesExchangerDescriptionForUserMessage.prototype.getMessageId = function() {
            return ExchangeTypesExchangerDescriptionForUserMessage.ID;
        };
        ExchangeTypesExchangerDescriptionForUserMessage.prototype.reset = function() {
            this.objectType = 0;
            this.typeDescription = [];
        };
        ExchangeTypesExchangerDescriptionForUserMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeTypesExchangerDescriptionForUserMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeTypesExchangerDescriptionForUserMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeTypesExchangerDescriptionForUserMessage(output);
        };
        ExchangeTypesExchangerDescriptionForUserMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeTypesExchangerDescriptionForUserMessage(input);
        };
        ExchangeTypesExchangerDescriptionForUserMessage.prototype.serializeAs_ExchangeTypesExchangerDescriptionForUserMessage = function(output) {
            if (this.objectType < 0) {
                throw new Error("Forbidden value (" + this.objectType + ") on element objectType.");
            }
            output.writeInt(this.objectType);
            output.writeShort(this.typeDescription.length);
            for (var _i2 = 0; _i2 < this.typeDescription.length; _i2++) {
                if (this.typeDescription[_i2] < 0) {
                    throw new Error("Forbidden value (" + this.typeDescription[_i2] + ") on element 2 (starting at 1) of typeDescription.");
                }
                output.writeVarInt(this.typeDescription[_i2]);
            }
        };
        ExchangeTypesExchangerDescriptionForUserMessage.prototype.deserializeAs_ExchangeTypesExchangerDescriptionForUserMessage = function(input) {
            var _val2 = 0;
            this.objectType = input.readInt();
            if (this.objectType < 0) {
                throw new Error("Forbidden value (" + this.objectType + ") on element of ExchangeTypesExchangerDescriptionForUserMessage.objectType.");
            }
            var _typeDescriptionLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _typeDescriptionLen; _i2++) {
                _val2 = input.readVarUhInt();
                if (_val2 < 0) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of typeDescription.");
                }
                this.typeDescription.push(_val2);
            }
        };
        ExchangeTypesExchangerDescriptionForUserMessage.ID = 2868;
        return ExchangeTypesExchangerDescriptionForUserMessage;
    })(NetworkMessage);
    Protocol.ExchangeTypesExchangerDescriptionForUserMessage = ExchangeTypesExchangerDescriptionForUserMessage;
    var ExchangeTypesItemsExchangerDescriptionForUserMessage = (function(_super) {
        __extends(ExchangeTypesItemsExchangerDescriptionForUserMessage, _super);

        function ExchangeTypesItemsExchangerDescriptionForUserMessage() {
            this.objectType = 0;
            this.itemTypeDescriptions = [];
            _super.call(this)
        }
        ExchangeTypesItemsExchangerDescriptionForUserMessage.prototype.getMessageId = function() {
            return ExchangeTypesItemsExchangerDescriptionForUserMessage.ID;
        };
        ExchangeTypesItemsExchangerDescriptionForUserMessage.prototype.reset = function() {
            this.objectType = 0;
            this.itemTypeDescriptions = [];
        };
        ExchangeTypesItemsExchangerDescriptionForUserMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeTypesItemsExchangerDescriptionForUserMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeTypesItemsExchangerDescriptionForUserMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeTypesItemsExchangerDescriptionForUserMessage(output);
        };
        ExchangeTypesItemsExchangerDescriptionForUserMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeTypesItemsExchangerDescriptionForUserMessage(input);
        };
        ExchangeTypesItemsExchangerDescriptionForUserMessage.prototype.serializeAs_ExchangeTypesItemsExchangerDescriptionForUserMessage = function(output) {
            if (this.objectType < 0) {
                throw new Error("Forbidden value (" + this.objectType + ") on element objectType.");
            }
            output.writeInt(this.objectType);
            output.writeShort(this.itemTypeDescriptions.length);
            for (var _i2 = 0; _i2 < this.itemTypeDescriptions.length; _i2++) {
                (this.itemTypeDescriptions[_i2]).serializeAs_BidExchangerObjectInfo(output);
            }
        };
        ExchangeTypesItemsExchangerDescriptionForUserMessage.prototype.deserializeAs_ExchangeTypesItemsExchangerDescriptionForUserMessage = function(input) {
            var _item2 = null;
            this.objectType = input.readInt();
            if (this.objectType < 0) {
                throw new Error("Forbidden value (" + this.objectType + ") on element of ExchangeTypesItemsExchangerDescriptionForUserMessage.objectType.");
            }
            var _itemTypeDescriptionsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _itemTypeDescriptionsLen; _i2++) {
                _item2 = new BidExchangerObjectInfo();
                _item2.deserialize(input);
                this.itemTypeDescriptions.push(_item2);
            }
        };
        ExchangeTypesItemsExchangerDescriptionForUserMessage.ID = 7377;
        return ExchangeTypesItemsExchangerDescriptionForUserMessage;
    })(NetworkMessage);
    Protocol.ExchangeTypesItemsExchangerDescriptionForUserMessage = ExchangeTypesItemsExchangerDescriptionForUserMessage;
    var ExchangeWaitingResultMessage = (function(_super) {
        __extends(ExchangeWaitingResultMessage, _super);

        function ExchangeWaitingResultMessage() {
            this.bwait = false;
            _super.call(this)
        }
        ExchangeWaitingResultMessage.prototype.getMessageId = function() {
            return ExchangeWaitingResultMessage.ID;
        };
        ExchangeWaitingResultMessage.prototype.reset = function() {
            this.bwait = false;
        };
        ExchangeWaitingResultMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeWaitingResultMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeWaitingResultMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeWaitingResultMessage(output);
        };
        ExchangeWaitingResultMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeWaitingResultMessage(input);
        };
        ExchangeWaitingResultMessage.prototype.serializeAs_ExchangeWaitingResultMessage = function(output) {
            output.writeBoolean(this.bwait);
        };
        ExchangeWaitingResultMessage.prototype.deserializeAs_ExchangeWaitingResultMessage = function(input) {
            this.bwait = input.readBoolean();
        };
        ExchangeWaitingResultMessage.ID = 5909;
        return ExchangeWaitingResultMessage;
    })(NetworkMessage);
    Protocol.ExchangeWaitingResultMessage = ExchangeWaitingResultMessage;
    var ExchangeWeightMessage = (function(_super) {
        __extends(ExchangeWeightMessage, _super);

        function ExchangeWeightMessage() {
            this.currentWeight = 0;
            this.maxWeight = 0;
            _super.call(this)
        }
        ExchangeWeightMessage.prototype.getMessageId = function() {
            return ExchangeWeightMessage.ID;
        };
        ExchangeWeightMessage.prototype.reset = function() {
            this.currentWeight = 0;
            this.maxWeight = 0;
        };
        ExchangeWeightMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeWeightMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeWeightMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeWeightMessage(output);
        };
        ExchangeWeightMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeWeightMessage(input);
        };
        ExchangeWeightMessage.prototype.serializeAs_ExchangeWeightMessage = function(output) {
            if (this.currentWeight < 0) {
                throw new Error("Forbidden value (" + this.currentWeight + ") on element currentWeight.");
            }
            output.writeVarInt(this.currentWeight);
            if (this.maxWeight < 0) {
                throw new Error("Forbidden value (" + this.maxWeight + ") on element maxWeight.");
            }
            output.writeVarInt(this.maxWeight);
        };
        ExchangeWeightMessage.prototype.deserializeAs_ExchangeWeightMessage = function(input) {
            this.currentWeight = input.readVarUhInt();
            if (this.currentWeight < 0) {
                throw new Error("Forbidden value (" + this.currentWeight + ") on element of ExchangeWeightMessage.currentWeight.");
            }
            this.maxWeight = input.readVarUhInt();
            if (this.maxWeight < 0) {
                throw new Error("Forbidden value (" + this.maxWeight + ") on element of ExchangeWeightMessage.maxWeight.");
            }
        };
        ExchangeWeightMessage.ID = 989;
        return ExchangeWeightMessage;
    })(NetworkMessage);
    Protocol.ExchangeWeightMessage = ExchangeWeightMessage;
    var FocusedExchangeReadyMessage = (function(_super) {
        __extends(FocusedExchangeReadyMessage, _super);

        function FocusedExchangeReadyMessage() {
            this.focusActionId = 0;
            _super.call(this)
        }
        FocusedExchangeReadyMessage.prototype.getMessageId = function() {
            return FocusedExchangeReadyMessage.ID;
        };
        FocusedExchangeReadyMessage.prototype.reset = function() {
            this.focusActionId = 0;
        };
        FocusedExchangeReadyMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        FocusedExchangeReadyMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        FocusedExchangeReadyMessage.prototype.serialize = function(output) {
            this.serializeAs_FocusedExchangeReadyMessage(output);
        };
        FocusedExchangeReadyMessage.prototype.deserialize = function(input) {
            this.deserializeAs_FocusedExchangeReadyMessage(input);
        };
        FocusedExchangeReadyMessage.prototype.serializeAs_FocusedExchangeReadyMessage = function(output) {
            _super.prototype.serializeAs_ExchangeReadyMessage.call(this, output);
            if (this.focusActionId < 0) {
                throw new Error("Forbidden value (" + this.focusActionId + ") on element focusActionId.");
            }
            output.writeVarInt(this.focusActionId);
        };
        FocusedExchangeReadyMessage.prototype.deserializeAs_FocusedExchangeReadyMessage = function(input) {
            _super.prototype.deserializeAs_ExchangeReadyMessage.call(this, input);
            this.focusActionId = input.readVarUhInt();
            if (this.focusActionId < 0) {
                throw new Error("Forbidden value (" + this.focusActionId + ") on element of FocusedExchangeReadyMessage.focusActionId.");
            }
        };
        FocusedExchangeReadyMessage.ID = 1260;
        return FocusedExchangeReadyMessage;
    })(ExchangeReadyMessage);
    Protocol.FocusedExchangeReadyMessage = FocusedExchangeReadyMessage;
    var ItemNoMoreAvailableMessage = (function(_super) {
        __extends(ItemNoMoreAvailableMessage, _super);

        function ItemNoMoreAvailableMessage() {

            _super.call(this)
        }
        ItemNoMoreAvailableMessage.prototype.getMessageId = function() {
            return ItemNoMoreAvailableMessage.ID;
        };
        ItemNoMoreAvailableMessage.prototype.reset = function() {

        };
        ItemNoMoreAvailableMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ItemNoMoreAvailableMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ItemNoMoreAvailableMessage.prototype.serialize = function(output) {
            this.serializeAs_ItemNoMoreAvailableMessage(output);
        };
        ItemNoMoreAvailableMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ItemNoMoreAvailableMessage(input);
        };
        ItemNoMoreAvailableMessage.prototype.serializeAs_ItemNoMoreAvailableMessage = function(output) {

        };
        ItemNoMoreAvailableMessage.prototype.deserializeAs_ItemNoMoreAvailableMessage = function(input) {

        };
        ItemNoMoreAvailableMessage.ID = 8962;
        return ItemNoMoreAvailableMessage;
    })(NetworkMessage);
    Protocol.ItemNoMoreAvailableMessage = ItemNoMoreAvailableMessage;
    var JobBookSubscribeRequestMessage = (function(_super) {
        __extends(JobBookSubscribeRequestMessage, _super);

        function JobBookSubscribeRequestMessage() {
            this.jobIds = [];
            _super.call(this)
        }
        JobBookSubscribeRequestMessage.prototype.getMessageId = function() {
            return JobBookSubscribeRequestMessage.ID;
        };
        JobBookSubscribeRequestMessage.prototype.reset = function() {
            this.jobIds = [];
        };
        JobBookSubscribeRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        JobBookSubscribeRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        JobBookSubscribeRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_JobBookSubscribeRequestMessage(output);
        };
        JobBookSubscribeRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_JobBookSubscribeRequestMessage(input);
        };
        JobBookSubscribeRequestMessage.prototype.serializeAs_JobBookSubscribeRequestMessage = function(output) {
            output.writeShort(this.jobIds.length);
            for (var _i1 = 0; _i1 < this.jobIds.length; _i1++) {
                if (this.jobIds[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.jobIds[_i1] + ") on element 1 (starting at 1) of jobIds.");
                }
                output.writeByte(this.jobIds[_i1]);
            }
        };
        JobBookSubscribeRequestMessage.prototype.deserializeAs_JobBookSubscribeRequestMessage = function(input) {
            var _val1 = 0;
            var _jobIdsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _jobIdsLen; _i1++) {
                _val1 = input.readByte();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of jobIds.");
                }
                this.jobIds.push(_val1);
            }
        };
        JobBookSubscribeRequestMessage.ID = 4754;
        return JobBookSubscribeRequestMessage;
    })(NetworkMessage);
    Protocol.JobBookSubscribeRequestMessage = JobBookSubscribeRequestMessage;
    var RecycleResultMessage = (function(_super) {
        __extends(RecycleResultMessage, _super);

        function RecycleResultMessage() {
            this.nuggetsForPrism = 0;
            this.nuggetsForPlayer = 0;
            _super.call(this)
        }
        RecycleResultMessage.prototype.getMessageId = function() {
            return RecycleResultMessage.ID;
        };
        RecycleResultMessage.prototype.reset = function() {
            this.nuggetsForPrism = 0;
            this.nuggetsForPlayer = 0;
        };
        RecycleResultMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        RecycleResultMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        RecycleResultMessage.prototype.serialize = function(output) {
            this.serializeAs_RecycleResultMessage(output);
        };
        RecycleResultMessage.prototype.deserialize = function(input) {
            this.deserializeAs_RecycleResultMessage(input);
        };
        RecycleResultMessage.prototype.serializeAs_RecycleResultMessage = function(output) {
            if (this.nuggetsForPrism < 0) {
                throw new Error("Forbidden value (" + this.nuggetsForPrism + ") on element nuggetsForPrism.");
            }
            output.writeVarInt(this.nuggetsForPrism);
            if (this.nuggetsForPlayer < 0) {
                throw new Error("Forbidden value (" + this.nuggetsForPlayer + ") on element nuggetsForPlayer.");
            }
            output.writeVarInt(this.nuggetsForPlayer);
        };
        RecycleResultMessage.prototype.deserializeAs_RecycleResultMessage = function(input) {
            this.nuggetsForPrism = input.readVarUhInt();
            if (this.nuggetsForPrism < 0) {
                throw new Error("Forbidden value (" + this.nuggetsForPrism + ") on element of RecycleResultMessage.nuggetsForPrism.");
            }
            this.nuggetsForPlayer = input.readVarUhInt();
            if (this.nuggetsForPlayer < 0) {
                throw new Error("Forbidden value (" + this.nuggetsForPlayer + ") on element of RecycleResultMessage.nuggetsForPlayer.");
            }
        };
        RecycleResultMessage.ID = 2403;
        return RecycleResultMessage;
    })(NetworkMessage);
    Protocol.RecycleResultMessage = RecycleResultMessage;
    var UpdateMountCharacteristicsMessage = (function(_super) {
        __extends(UpdateMountCharacteristicsMessage, _super);

        function UpdateMountCharacteristicsMessage() {
            this.rideId = 0;
            this.boostToUpdateList = [];
            _super.call(this)
        }
        UpdateMountCharacteristicsMessage.prototype.getMessageId = function() {
            return UpdateMountCharacteristicsMessage.ID;
        };
        UpdateMountCharacteristicsMessage.prototype.reset = function() {
            this.rideId = 0;
            this.boostToUpdateList = [];
        };
        UpdateMountCharacteristicsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        UpdateMountCharacteristicsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        UpdateMountCharacteristicsMessage.prototype.serialize = function(output) {
            this.serializeAs_UpdateMountCharacteristicsMessage(output);
        };
        UpdateMountCharacteristicsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_UpdateMountCharacteristicsMessage(input);
        };
        UpdateMountCharacteristicsMessage.prototype.serializeAs_UpdateMountCharacteristicsMessage = function(output) {
            output.writeVarInt(this.rideId);
            output.writeShort(this.boostToUpdateList.length);
            for (var _i2 = 0; _i2 < this.boostToUpdateList.length; _i2++) {
                output.writeShort((this.boostToUpdateList[_i2]).getTypeId());
                (this.boostToUpdateList[_i2]).serialize(output);
            }
        };
        UpdateMountCharacteristicsMessage.prototype.deserializeAs_UpdateMountCharacteristicsMessage = function(input) {
            var _id2 = 0;
            var _item2 = null;
            this.rideId = input.readVarInt();
            var _boostToUpdateListLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _boostToUpdateListLen; _i2++) {
                _id2 = input.readUnsignedShort();
                _item2 = ProtocolTypeManager.getInstance(UpdateMountCharacteristic, _id2);
                _item2.deserialize(input);
                this.boostToUpdateList.push(_item2);
            }
        };
        UpdateMountCharacteristicsMessage.ID = 7079;
        return UpdateMountCharacteristicsMessage;
    })(NetworkMessage);
    Protocol.UpdateMountCharacteristicsMessage = UpdateMountCharacteristicsMessage;
    var ExchangeKamaModifiedMessage = (function(_super) {
        __extends(ExchangeKamaModifiedMessage, _super);

        function ExchangeKamaModifiedMessage() {
            this.quantity = 0;
            _super.call(this)
        }
        ExchangeKamaModifiedMessage.prototype.getMessageId = function() {
            return ExchangeKamaModifiedMessage.ID;
        };
        ExchangeKamaModifiedMessage.prototype.reset = function() {
            this.quantity = 0;
        };
        ExchangeKamaModifiedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeKamaModifiedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeKamaModifiedMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeKamaModifiedMessage(output);
        };
        ExchangeKamaModifiedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeKamaModifiedMessage(input);
        };
        ExchangeKamaModifiedMessage.prototype.serializeAs_ExchangeKamaModifiedMessage = function(output) {
            _super.prototype.serializeAs_ExchangeObjectMessage.call(this, output);
            if (this.quantity < 0 || this.quantity > 9007199254740990) {
                throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
            }
            output.writeVarLong(this.quantity);
        };
        ExchangeKamaModifiedMessage.prototype.deserializeAs_ExchangeKamaModifiedMessage = function(input) {
            _super.prototype.deserializeAs_ExchangeObjectMessage.call(this, input);
            this.quantity = input.readVarUhLong();
            if (this.quantity < 0 || this.quantity > 9007199254740990) {
                throw new Error("Forbidden value (" + this.quantity + ") on element of ExchangeKamaModifiedMessage.quantity.");
            }
        };
        ExchangeKamaModifiedMessage.ID = 4917;
        return ExchangeKamaModifiedMessage;
    })(ExchangeObjectMessage);
    Protocol.ExchangeKamaModifiedMessage = ExchangeKamaModifiedMessage;
    var ExchangeMultiCraftCrafterCanUseHisRessourcesMessage = (function(_super) {
        __extends(ExchangeMultiCraftCrafterCanUseHisRessourcesMessage, _super);

        function ExchangeMultiCraftCrafterCanUseHisRessourcesMessage() {
            this.allowed = false;
            _super.call(this)
        }
        ExchangeMultiCraftCrafterCanUseHisRessourcesMessage.prototype.getMessageId = function() {
            return ExchangeMultiCraftCrafterCanUseHisRessourcesMessage.ID;
        };
        ExchangeMultiCraftCrafterCanUseHisRessourcesMessage.prototype.reset = function() {
            this.allowed = false;
        };
        ExchangeMultiCraftCrafterCanUseHisRessourcesMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeMultiCraftCrafterCanUseHisRessourcesMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeMultiCraftCrafterCanUseHisRessourcesMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeMultiCraftCrafterCanUseHisRessourcesMessage(output);
        };
        ExchangeMultiCraftCrafterCanUseHisRessourcesMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeMultiCraftCrafterCanUseHisRessourcesMessage(input);
        };
        ExchangeMultiCraftCrafterCanUseHisRessourcesMessage.prototype.serializeAs_ExchangeMultiCraftCrafterCanUseHisRessourcesMessage = function(output) {
            output.writeBoolean(this.allowed);
        };
        ExchangeMultiCraftCrafterCanUseHisRessourcesMessage.prototype.deserializeAs_ExchangeMultiCraftCrafterCanUseHisRessourcesMessage = function(input) {
            this.allowed = input.readBoolean();
        };
        ExchangeMultiCraftCrafterCanUseHisRessourcesMessage.ID = 7247;
        return ExchangeMultiCraftCrafterCanUseHisRessourcesMessage;
    })(NetworkMessage);
    Protocol.ExchangeMultiCraftCrafterCanUseHisRessourcesMessage = ExchangeMultiCraftCrafterCanUseHisRessourcesMessage;
    var ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage = (function(_super) {
        __extends(ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage, _super);

        function ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage() {
            this.allow = false;
            _super.call(this)
        }
        ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage.prototype.getMessageId = function() {
            return ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage.ID;
        };
        ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage.prototype.reset = function() {
            this.allow = false;
        };
        ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage(output);
        };
        ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage(input);
        };
        ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage.prototype.serializeAs_ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage = function(output) {
            output.writeBoolean(this.allow);
        };
        ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage.prototype.deserializeAs_ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage = function(input) {
            this.allow = input.readBoolean();
        };
        ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage.ID = 2252;
        return ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage;
    })(NetworkMessage);
    Protocol.ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage = ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage;
    var ExchangeObjectModifiedInBagMessage = (function(_super) {
        __extends(ExchangeObjectModifiedInBagMessage, _super);

        function ExchangeObjectModifiedInBagMessage() {
            this.object = new ObjectItem();
            _super.call(this)
        }
        ExchangeObjectModifiedInBagMessage.prototype.getMessageId = function() {
            return ExchangeObjectModifiedInBagMessage.ID;
        };
        ExchangeObjectModifiedInBagMessage.prototype.reset = function() {
            this.object = new ObjectItem();
        };
        ExchangeObjectModifiedInBagMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeObjectModifiedInBagMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeObjectModifiedInBagMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeObjectModifiedInBagMessage(output);
        };
        ExchangeObjectModifiedInBagMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeObjectModifiedInBagMessage(input);
        };
        ExchangeObjectModifiedInBagMessage.prototype.serializeAs_ExchangeObjectModifiedInBagMessage = function(output) {
            _super.prototype.serializeAs_ExchangeObjectMessage.call(this, output);
            this.object.serializeAs_ObjectItem(output);
        };
        ExchangeObjectModifiedInBagMessage.prototype.deserializeAs_ExchangeObjectModifiedInBagMessage = function(input) {
            _super.prototype.deserializeAs_ExchangeObjectMessage.call(this, input);
            this.object = new ObjectItem();
            this.object.deserialize(input);
        };
        ExchangeObjectModifiedInBagMessage.ID = 1372;
        return ExchangeObjectModifiedInBagMessage;
    })(ExchangeObjectMessage);
    Protocol.ExchangeObjectModifiedInBagMessage = ExchangeObjectModifiedInBagMessage;
    var ExchangeObjectModifiedMessage = (function(_super) {
        __extends(ExchangeObjectModifiedMessage, _super);

        function ExchangeObjectModifiedMessage() {
            this.object = new ObjectItem();
            _super.call(this)
        }
        ExchangeObjectModifiedMessage.prototype.getMessageId = function() {
            return ExchangeObjectModifiedMessage.ID;
        };
        ExchangeObjectModifiedMessage.prototype.reset = function() {
            this.object = new ObjectItem();
        };
        ExchangeObjectModifiedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeObjectModifiedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeObjectModifiedMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeObjectModifiedMessage(output);
        };
        ExchangeObjectModifiedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeObjectModifiedMessage(input);
        };
        ExchangeObjectModifiedMessage.prototype.serializeAs_ExchangeObjectModifiedMessage = function(output) {
            _super.prototype.serializeAs_ExchangeObjectMessage.call(this, output);
            this.object.serializeAs_ObjectItem(output);
        };
        ExchangeObjectModifiedMessage.prototype.deserializeAs_ExchangeObjectModifiedMessage = function(input) {
            _super.prototype.deserializeAs_ExchangeObjectMessage.call(this, input);
            this.object = new ObjectItem();
            this.object.deserialize(input);
        };
        ExchangeObjectModifiedMessage.ID = 4126;
        return ExchangeObjectModifiedMessage;
    })(ExchangeObjectMessage);
    Protocol.ExchangeObjectModifiedMessage = ExchangeObjectModifiedMessage;
    var ExchangeObjectPutInBagMessage = (function(_super) {
        __extends(ExchangeObjectPutInBagMessage, _super);

        function ExchangeObjectPutInBagMessage() {
            this.object = new ObjectItem();
            _super.call(this)
        }
        ExchangeObjectPutInBagMessage.prototype.getMessageId = function() {
            return ExchangeObjectPutInBagMessage.ID;
        };
        ExchangeObjectPutInBagMessage.prototype.reset = function() {
            this.object = new ObjectItem();
        };
        ExchangeObjectPutInBagMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeObjectPutInBagMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeObjectPutInBagMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeObjectPutInBagMessage(output);
        };
        ExchangeObjectPutInBagMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeObjectPutInBagMessage(input);
        };
        ExchangeObjectPutInBagMessage.prototype.serializeAs_ExchangeObjectPutInBagMessage = function(output) {
            _super.prototype.serializeAs_ExchangeObjectMessage.call(this, output);
            this.object.serializeAs_ObjectItem(output);
        };
        ExchangeObjectPutInBagMessage.prototype.deserializeAs_ExchangeObjectPutInBagMessage = function(input) {
            _super.prototype.deserializeAs_ExchangeObjectMessage.call(this, input);
            this.object = new ObjectItem();
            this.object.deserialize(input);
        };
        ExchangeObjectPutInBagMessage.ID = 8650;
        return ExchangeObjectPutInBagMessage;
    })(ExchangeObjectMessage);
    Protocol.ExchangeObjectPutInBagMessage = ExchangeObjectPutInBagMessage;
    var ExchangeObjectRemovedFromBagMessage = (function(_super) {
        __extends(ExchangeObjectRemovedFromBagMessage, _super);

        function ExchangeObjectRemovedFromBagMessage() {
            this.objectUID = 0;
            _super.call(this)
        }
        ExchangeObjectRemovedFromBagMessage.prototype.getMessageId = function() {
            return ExchangeObjectRemovedFromBagMessage.ID;
        };
        ExchangeObjectRemovedFromBagMessage.prototype.reset = function() {
            this.objectUID = 0;
        };
        ExchangeObjectRemovedFromBagMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeObjectRemovedFromBagMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeObjectRemovedFromBagMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeObjectRemovedFromBagMessage(output);
        };
        ExchangeObjectRemovedFromBagMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeObjectRemovedFromBagMessage(input);
        };
        ExchangeObjectRemovedFromBagMessage.prototype.serializeAs_ExchangeObjectRemovedFromBagMessage = function(output) {
            _super.prototype.serializeAs_ExchangeObjectMessage.call(this, output);
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
            }
            output.writeVarInt(this.objectUID);
        };
        ExchangeObjectRemovedFromBagMessage.prototype.deserializeAs_ExchangeObjectRemovedFromBagMessage = function(input) {
            _super.prototype.deserializeAs_ExchangeObjectMessage.call(this, input);
            this.objectUID = input.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element of ExchangeObjectRemovedFromBagMessage.objectUID.");
            }
        };
        ExchangeObjectRemovedFromBagMessage.ID = 5956;
        return ExchangeObjectRemovedFromBagMessage;
    })(ExchangeObjectMessage);
    Protocol.ExchangeObjectRemovedFromBagMessage = ExchangeObjectRemovedFromBagMessage;
    var ExchangeObjectRemovedMessage = (function(_super) {
        __extends(ExchangeObjectRemovedMessage, _super);

        function ExchangeObjectRemovedMessage() {
            this.objectUID = 0;
            _super.call(this)
        }
        ExchangeObjectRemovedMessage.prototype.getMessageId = function() {
            return ExchangeObjectRemovedMessage.ID;
        };
        ExchangeObjectRemovedMessage.prototype.reset = function() {
            this.objectUID = 0;
        };
        ExchangeObjectRemovedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeObjectRemovedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeObjectRemovedMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeObjectRemovedMessage(output);
        };
        ExchangeObjectRemovedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeObjectRemovedMessage(input);
        };
        ExchangeObjectRemovedMessage.prototype.serializeAs_ExchangeObjectRemovedMessage = function(output) {
            _super.prototype.serializeAs_ExchangeObjectMessage.call(this, output);
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
            }
            output.writeVarInt(this.objectUID);
        };
        ExchangeObjectRemovedMessage.prototype.deserializeAs_ExchangeObjectRemovedMessage = function(input) {
            _super.prototype.deserializeAs_ExchangeObjectMessage.call(this, input);
            this.objectUID = input.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element of ExchangeObjectRemovedMessage.objectUID.");
            }
        };
        ExchangeObjectRemovedMessage.ID = 7088;
        return ExchangeObjectRemovedMessage;
    })(ExchangeObjectMessage);
    Protocol.ExchangeObjectRemovedMessage = ExchangeObjectRemovedMessage;
    var ExchangeObjectsModifiedMessage = (function(_super) {
        __extends(ExchangeObjectsModifiedMessage, _super);

        function ExchangeObjectsModifiedMessage() {
            this.object = [];
            _super.call(this)
        }
        ExchangeObjectsModifiedMessage.prototype.getMessageId = function() {
            return ExchangeObjectsModifiedMessage.ID;
        };
        ExchangeObjectsModifiedMessage.prototype.reset = function() {
            this.object = [];
        };
        ExchangeObjectsModifiedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeObjectsModifiedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeObjectsModifiedMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeObjectsModifiedMessage(output);
        };
        ExchangeObjectsModifiedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeObjectsModifiedMessage(input);
        };
        ExchangeObjectsModifiedMessage.prototype.serializeAs_ExchangeObjectsModifiedMessage = function(output) {
            _super.prototype.serializeAs_ExchangeObjectMessage.call(this, output);
            output.writeShort(this.object.length);
            for (var _i1 = 0; _i1 < this.object.length; _i1++) {
                (this.object[_i1]).serializeAs_ObjectItem(output);
            }
        };
        ExchangeObjectsModifiedMessage.prototype.deserializeAs_ExchangeObjectsModifiedMessage = function(input) {
            var _item1 = null;
            _super.prototype.deserializeAs_ExchangeObjectMessage.call(this, input);
            var _objectLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _objectLen; _i1++) {
                _item1 = new ObjectItem();
                _item1.deserialize(input);
                this.object.push(_item1);
            }
        };
        ExchangeObjectsModifiedMessage.ID = 9650;
        return ExchangeObjectsModifiedMessage;
    })(ExchangeObjectMessage);
    Protocol.ExchangeObjectsModifiedMessage = ExchangeObjectsModifiedMessage;
    var ExchangeObjectsRemovedMessage = (function(_super) {
        __extends(ExchangeObjectsRemovedMessage, _super);

        function ExchangeObjectsRemovedMessage() {
            this.objectUID = [];
            _super.call(this)
        }
        ExchangeObjectsRemovedMessage.prototype.getMessageId = function() {
            return ExchangeObjectsRemovedMessage.ID;
        };
        ExchangeObjectsRemovedMessage.prototype.reset = function() {
            this.objectUID = [];
        };
        ExchangeObjectsRemovedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangeObjectsRemovedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangeObjectsRemovedMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangeObjectsRemovedMessage(output);
        };
        ExchangeObjectsRemovedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangeObjectsRemovedMessage(input);
        };
        ExchangeObjectsRemovedMessage.prototype.serializeAs_ExchangeObjectsRemovedMessage = function(output) {
            _super.prototype.serializeAs_ExchangeObjectMessage.call(this, output);
            output.writeShort(this.objectUID.length);
            for (var _i1 = 0; _i1 < this.objectUID.length; _i1++) {
                if (this.objectUID[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.objectUID[_i1] + ") on element 1 (starting at 1) of objectUID.");
                }
                output.writeVarInt(this.objectUID[_i1]);
            }
        };
        ExchangeObjectsRemovedMessage.prototype.deserializeAs_ExchangeObjectsRemovedMessage = function(input) {
            var _val1 = 0;
            _super.prototype.deserializeAs_ExchangeObjectMessage.call(this, input);
            var _objectUIDLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _objectUIDLen; _i1++) {
                _val1 = input.readVarUhInt();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of objectUID.");
                }
                this.objectUID.push(_val1);
            }
        };
        ExchangeObjectsRemovedMessage.ID = 2876;
        return ExchangeObjectsRemovedMessage;
    })(ExchangeObjectMessage);
    Protocol.ExchangeObjectsRemovedMessage = ExchangeObjectsRemovedMessage;
    var ExchangePodsModifiedMessage = (function(_super) {
        __extends(ExchangePodsModifiedMessage, _super);

        function ExchangePodsModifiedMessage() {
            this.currentWeight = 0;
            this.maxWeight = 0;
            _super.call(this)
        }
        ExchangePodsModifiedMessage.prototype.getMessageId = function() {
            return ExchangePodsModifiedMessage.ID;
        };
        ExchangePodsModifiedMessage.prototype.reset = function() {
            this.currentWeight = 0;
            this.maxWeight = 0;
        };
        ExchangePodsModifiedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ExchangePodsModifiedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ExchangePodsModifiedMessage.prototype.serialize = function(output) {
            this.serializeAs_ExchangePodsModifiedMessage(output);
        };
        ExchangePodsModifiedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ExchangePodsModifiedMessage(input);
        };
        ExchangePodsModifiedMessage.prototype.serializeAs_ExchangePodsModifiedMessage = function(output) {
            _super.prototype.serializeAs_ExchangeObjectMessage.call(this, output);
            if (this.currentWeight < 0) {
                throw new Error("Forbidden value (" + this.currentWeight + ") on element currentWeight.");
            }
            output.writeVarInt(this.currentWeight);
            if (this.maxWeight < 0) {
                throw new Error("Forbidden value (" + this.maxWeight + ") on element maxWeight.");
            }
            output.writeVarInt(this.maxWeight);
        };
        ExchangePodsModifiedMessage.prototype.deserializeAs_ExchangePodsModifiedMessage = function(input) {
            _super.prototype.deserializeAs_ExchangeObjectMessage.call(this, input);
            this.currentWeight = input.readVarUhInt();
            if (this.currentWeight < 0) {
                throw new Error("Forbidden value (" + this.currentWeight + ") on element of ExchangePodsModifiedMessage.currentWeight.");
            }
            this.maxWeight = input.readVarUhInt();
            if (this.maxWeight < 0) {
                throw new Error("Forbidden value (" + this.maxWeight + ") on element of ExchangePodsModifiedMessage.maxWeight.");
            }
        };
        ExchangePodsModifiedMessage.ID = 8494;
        return ExchangePodsModifiedMessage;
    })(ExchangeObjectMessage);
    Protocol.ExchangePodsModifiedMessage = ExchangePodsModifiedMessage;
    var GoldAddedMessage = (function(_super) {
        __extends(GoldAddedMessage, _super);

        function GoldAddedMessage() {
            this.gold = new GoldItem();
            _super.call(this)
        }
        GoldAddedMessage.prototype.getMessageId = function() {
            return GoldAddedMessage.ID;
        };
        GoldAddedMessage.prototype.reset = function() {
            this.gold = new GoldItem();
        };
        GoldAddedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        GoldAddedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        GoldAddedMessage.prototype.serialize = function(output) {
            this.serializeAs_GoldAddedMessage(output);
        };
        GoldAddedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_GoldAddedMessage(input);
        };
        GoldAddedMessage.prototype.serializeAs_GoldAddedMessage = function(output) {
            this.gold.serializeAs_GoldItem(output);
        };
        GoldAddedMessage.prototype.deserializeAs_GoldAddedMessage = function(input) {
            this.gold = new GoldItem();
            this.gold.deserialize(input);
        };
        GoldAddedMessage.ID = 1255;
        return GoldAddedMessage;
    })(NetworkMessage);
    Protocol.GoldAddedMessage = GoldAddedMessage;
    var InventoryContentMessage = (function(_super) {
        __extends(InventoryContentMessage, _super);

        function InventoryContentMessage() {
            this.objects = [];
            this.kamas = 0;
            _super.call(this)
        }
        InventoryContentMessage.prototype.getMessageId = function() {
            return InventoryContentMessage.ID;
        };
        InventoryContentMessage.prototype.reset = function() {
            this.objects = [];
            this.kamas = 0;
        };
        InventoryContentMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        InventoryContentMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        InventoryContentMessage.prototype.serialize = function(output) {
            this.serializeAs_InventoryContentMessage(output);
        };
        InventoryContentMessage.prototype.deserialize = function(input) {
            this.deserializeAs_InventoryContentMessage(input);
        };
        InventoryContentMessage.prototype.serializeAs_InventoryContentMessage = function(output) {
            output.writeShort(this.objects.length);
            for (var _i1 = 0; _i1 < this.objects.length; _i1++) {
                (this.objects[_i1]).serializeAs_ObjectItem(output);
            }
            if (this.kamas < 0 || this.kamas > 9007199254740990) {
                throw new Error("Forbidden value (" + this.kamas + ") on element kamas.");
            }
            output.writeVarLong(this.kamas);
        };
        InventoryContentMessage.prototype.deserializeAs_InventoryContentMessage = function(input) {
            var _item1 = null;
            var _objectsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _objectsLen; _i1++) {
                _item1 = new ObjectItem();
                _item1.deserialize(input);
                this.objects.push(_item1);
            }
            this.kamas = input.readVarUhLong();
            if (this.kamas < 0 || this.kamas > 9007199254740990) {
                throw new Error("Forbidden value (" + this.kamas + ") on element of InventoryContentMessage.kamas.");
            }
        };
        InventoryContentMessage.ID = 7685;
        return InventoryContentMessage;
    })(NetworkMessage);
    Protocol.InventoryContentMessage = InventoryContentMessage;
    var InventoryWeightMessage = (function(_super) {
        __extends(InventoryWeightMessage, _super);

        function InventoryWeightMessage() {
            this.inventoryWeight = 0;
            this.shopWeight = 0;
            this.weightMax = 0;
            _super.call(this)
        }
        InventoryWeightMessage.prototype.getMessageId = function() {
            return InventoryWeightMessage.ID;
        };
        InventoryWeightMessage.prototype.reset = function() {
            this.inventoryWeight = 0;
            this.shopWeight = 0;
            this.weightMax = 0;
        };
        InventoryWeightMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        InventoryWeightMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        InventoryWeightMessage.prototype.serialize = function(output) {
            this.serializeAs_InventoryWeightMessage(output);
        };
        InventoryWeightMessage.prototype.deserialize = function(input) {
            this.deserializeAs_InventoryWeightMessage(input);
        };
        InventoryWeightMessage.prototype.serializeAs_InventoryWeightMessage = function(output) {
            if (this.inventoryWeight < 0) {
                throw new Error("Forbidden value (" + this.inventoryWeight + ") on element inventoryWeight.");
            }
            output.writeVarInt(this.inventoryWeight);
            if (this.shopWeight < 0) {
                throw new Error("Forbidden value (" + this.shopWeight + ") on element shopWeight.");
            }
            output.writeVarInt(this.shopWeight);
            if (this.weightMax < 0) {
                throw new Error("Forbidden value (" + this.weightMax + ") on element weightMax.");
            }
            output.writeVarInt(this.weightMax);
        };
        InventoryWeightMessage.prototype.deserializeAs_InventoryWeightMessage = function(input) {
            this.inventoryWeight = input.readVarUhInt();
            if (this.inventoryWeight < 0) {
                throw new Error("Forbidden value (" + this.inventoryWeight + ") on element of InventoryWeightMessage.inventoryWeight.");
            }
            this.shopWeight = input.readVarUhInt();
            if (this.shopWeight < 0) {
                throw new Error("Forbidden value (" + this.shopWeight + ") on element of InventoryWeightMessage.shopWeight.");
            }
            this.weightMax = input.readVarUhInt();
            if (this.weightMax < 0) {
                throw new Error("Forbidden value (" + this.weightMax + ") on element of InventoryWeightMessage.weightMax.");
            }
        };
        InventoryWeightMessage.ID = 8104;
        return InventoryWeightMessage;
    })(NetworkMessage);
    Protocol.InventoryWeightMessage = InventoryWeightMessage;
    var LivingObjectChangeSkinRequestMessage = (function(_super) {
        __extends(LivingObjectChangeSkinRequestMessage, _super);

        function LivingObjectChangeSkinRequestMessage() {
            this.livingUID = 0;
            this.livingPosition = 0;
            this.skinId = 0;
            _super.call(this)
        }
        LivingObjectChangeSkinRequestMessage.prototype.getMessageId = function() {
            return LivingObjectChangeSkinRequestMessage.ID;
        };
        LivingObjectChangeSkinRequestMessage.prototype.reset = function() {
            this.livingUID = 0;
            this.livingPosition = 0;
            this.skinId = 0;
        };
        LivingObjectChangeSkinRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        LivingObjectChangeSkinRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        LivingObjectChangeSkinRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_LivingObjectChangeSkinRequestMessage(output);
        };
        LivingObjectChangeSkinRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_LivingObjectChangeSkinRequestMessage(input);
        };
        LivingObjectChangeSkinRequestMessage.prototype.serializeAs_LivingObjectChangeSkinRequestMessage = function(output) {
            if (this.livingUID < 0) {
                throw new Error("Forbidden value (" + this.livingUID + ") on element livingUID.");
            }
            output.writeVarInt(this.livingUID);
            if (this.livingPosition < 0 || this.livingPosition > 255) {
                throw new Error("Forbidden value (" + this.livingPosition + ") on element livingPosition.");
            }
            output.writeByte(this.livingPosition);
            if (this.skinId < 0) {
                throw new Error("Forbidden value (" + this.skinId + ") on element skinId.");
            }
            output.writeVarInt(this.skinId);
        };
        LivingObjectChangeSkinRequestMessage.prototype.deserializeAs_LivingObjectChangeSkinRequestMessage = function(input) {
            this.livingUID = input.readVarUhInt();
            if (this.livingUID < 0) {
                throw new Error("Forbidden value (" + this.livingUID + ") on element of LivingObjectChangeSkinRequestMessage.livingUID.");
            }
            this.livingPosition = input.readUnsignedByte();
            if (this.livingPosition < 0 || this.livingPosition > 255) {
                throw new Error("Forbidden value (" + this.livingPosition + ") on element of LivingObjectChangeSkinRequestMessage.livingPosition.");
            }
            this.skinId = input.readVarUhInt();
            if (this.skinId < 0) {
                throw new Error("Forbidden value (" + this.skinId + ") on element of LivingObjectChangeSkinRequestMessage.skinId.");
            }
        };
        LivingObjectChangeSkinRequestMessage.ID = 5753;
        return LivingObjectChangeSkinRequestMessage;
    })(NetworkMessage);
    Protocol.LivingObjectChangeSkinRequestMessage = LivingObjectChangeSkinRequestMessage;
    var LivingObjectDissociateMessage = (function(_super) {
        __extends(LivingObjectDissociateMessage, _super);

        function LivingObjectDissociateMessage() {
            this.livingUID = 0;
            this.livingPosition = 0;
            _super.call(this)
        }
        LivingObjectDissociateMessage.prototype.getMessageId = function() {
            return LivingObjectDissociateMessage.ID;
        };
        LivingObjectDissociateMessage.prototype.reset = function() {
            this.livingUID = 0;
            this.livingPosition = 0;
        };
        LivingObjectDissociateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        LivingObjectDissociateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        LivingObjectDissociateMessage.prototype.serialize = function(output) {
            this.serializeAs_LivingObjectDissociateMessage(output);
        };
        LivingObjectDissociateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_LivingObjectDissociateMessage(input);
        };
        LivingObjectDissociateMessage.prototype.serializeAs_LivingObjectDissociateMessage = function(output) {
            if (this.livingUID < 0) {
                throw new Error("Forbidden value (" + this.livingUID + ") on element livingUID.");
            }
            output.writeVarInt(this.livingUID);
            if (this.livingPosition < 0 || this.livingPosition > 255) {
                throw new Error("Forbidden value (" + this.livingPosition + ") on element livingPosition.");
            }
            output.writeByte(this.livingPosition);
        };
        LivingObjectDissociateMessage.prototype.deserializeAs_LivingObjectDissociateMessage = function(input) {
            this.livingUID = input.readVarUhInt();
            if (this.livingUID < 0) {
                throw new Error("Forbidden value (" + this.livingUID + ") on element of LivingObjectDissociateMessage.livingUID.");
            }
            this.livingPosition = input.readUnsignedByte();
            if (this.livingPosition < 0 || this.livingPosition > 255) {
                throw new Error("Forbidden value (" + this.livingPosition + ") on element of LivingObjectDissociateMessage.livingPosition.");
            }
        };
        LivingObjectDissociateMessage.ID = 9684;
        return LivingObjectDissociateMessage;
    })(NetworkMessage);
    Protocol.LivingObjectDissociateMessage = LivingObjectDissociateMessage;
    var LivingObjectMessageMessage = (function(_super) {
        __extends(LivingObjectMessageMessage, _super);

        function LivingObjectMessageMessage() {
            this.msgId = 0;
            this.timeStamp = 0;
            this.owner = "";
            this.objectGenericId = 0;
            _super.call(this)
        }
        LivingObjectMessageMessage.prototype.getMessageId = function() {
            return LivingObjectMessageMessage.ID;
        };
        LivingObjectMessageMessage.prototype.reset = function() {
            this.msgId = 0;
            this.timeStamp = 0;
            this.owner = "";
            this.objectGenericId = 0;
        };
        LivingObjectMessageMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        LivingObjectMessageMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        LivingObjectMessageMessage.prototype.serialize = function(output) {
            this.serializeAs_LivingObjectMessageMessage(output);
        };
        LivingObjectMessageMessage.prototype.deserialize = function(input) {
            this.deserializeAs_LivingObjectMessageMessage(input);
        };
        LivingObjectMessageMessage.prototype.serializeAs_LivingObjectMessageMessage = function(output) {
            if (this.msgId < 0) {
                throw new Error("Forbidden value (" + this.msgId + ") on element msgId.");
            }
            output.writeVarShort(this.msgId);
            if (this.timeStamp < 0) {
                throw new Error("Forbidden value (" + this.timeStamp + ") on element timeStamp.");
            }
            output.writeInt(this.timeStamp);
            output.writeUTF(this.owner);
            if (this.objectGenericId < 0) {
                throw new Error("Forbidden value (" + this.objectGenericId + ") on element objectGenericId.");
            }
            output.writeVarShort(this.objectGenericId);
        };
        LivingObjectMessageMessage.prototype.deserializeAs_LivingObjectMessageMessage = function(input) {
            this.msgId = input.readVarUhShort();
            if (this.msgId < 0) {
                throw new Error("Forbidden value (" + this.msgId + ") on element of LivingObjectMessageMessage.msgId.");
            }
            this.timeStamp = input.readInt();
            if (this.timeStamp < 0) {
                throw new Error("Forbidden value (" + this.timeStamp + ") on element of LivingObjectMessageMessage.timeStamp.");
            }
            this.owner = input.readUTF();
            this.objectGenericId = input.readVarUhShort();
            if (this.objectGenericId < 0) {
                throw new Error("Forbidden value (" + this.objectGenericId + ") on element of LivingObjectMessageMessage.objectGenericId.");
            }
        };
        LivingObjectMessageMessage.ID = 7628;
        return LivingObjectMessageMessage;
    })(NetworkMessage);
    Protocol.LivingObjectMessageMessage = LivingObjectMessageMessage;
    var LivingObjectMessageRequestMessage = (function(_super) {
        __extends(LivingObjectMessageRequestMessage, _super);

        function LivingObjectMessageRequestMessage() {
            this.msgId = 0;
            this.parameters = [];
            this.livingObject = 0;
            _super.call(this)
        }
        LivingObjectMessageRequestMessage.prototype.getMessageId = function() {
            return LivingObjectMessageRequestMessage.ID;
        };
        LivingObjectMessageRequestMessage.prototype.reset = function() {
            this.msgId = 0;
            this.parameters = [];
            this.livingObject = 0;
        };
        LivingObjectMessageRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        LivingObjectMessageRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        LivingObjectMessageRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_LivingObjectMessageRequestMessage(output);
        };
        LivingObjectMessageRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_LivingObjectMessageRequestMessage(input);
        };
        LivingObjectMessageRequestMessage.prototype.serializeAs_LivingObjectMessageRequestMessage = function(output) {
            if (this.msgId < 0) {
                throw new Error("Forbidden value (" + this.msgId + ") on element msgId.");
            }
            output.writeVarShort(this.msgId);
            output.writeShort(this.parameters.length);
            for (var _i2 = 0; _i2 < this.parameters.length; _i2++) {
                output.writeUTF(this.parameters[_i2]);
            }
            if (this.livingObject < 0) {
                throw new Error("Forbidden value (" + this.livingObject + ") on element livingObject.");
            }
            output.writeVarInt(this.livingObject);
        };
        LivingObjectMessageRequestMessage.prototype.deserializeAs_LivingObjectMessageRequestMessage = function(input) {
            var _val2 = null;
            this.msgId = input.readVarUhShort();
            if (this.msgId < 0) {
                throw new Error("Forbidden value (" + this.msgId + ") on element of LivingObjectMessageRequestMessage.msgId.");
            }
            var _parametersLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _parametersLen; _i2++) {
                _val2 = input.readUTF();
                this.parameters.push(_val2);
            }
            this.livingObject = input.readVarUhInt();
            if (this.livingObject < 0) {
                throw new Error("Forbidden value (" + this.livingObject + ") on element of LivingObjectMessageRequestMessage.livingObject.");
            }
        };
        LivingObjectMessageRequestMessage.ID = 6521;
        return LivingObjectMessageRequestMessage;
    })(NetworkMessage);
    Protocol.LivingObjectMessageRequestMessage = LivingObjectMessageRequestMessage;
    var SymbioticObjectAssociatedMessage = (function(_super) {
        __extends(SymbioticObjectAssociatedMessage, _super);

        function SymbioticObjectAssociatedMessage() {
            this.hostUID = 0;
            _super.call(this)
        }
        SymbioticObjectAssociatedMessage.prototype.getMessageId = function() {
            return SymbioticObjectAssociatedMessage.ID;
        };
        SymbioticObjectAssociatedMessage.prototype.reset = function() {
            this.hostUID = 0;
        };
        SymbioticObjectAssociatedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        SymbioticObjectAssociatedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        SymbioticObjectAssociatedMessage.prototype.serialize = function(output) {
            this.serializeAs_SymbioticObjectAssociatedMessage(output);
        };
        SymbioticObjectAssociatedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_SymbioticObjectAssociatedMessage(input);
        };
        SymbioticObjectAssociatedMessage.prototype.serializeAs_SymbioticObjectAssociatedMessage = function(output) {
            if (this.hostUID < 0) {
                throw new Error("Forbidden value (" + this.hostUID + ") on element hostUID.");
            }
            output.writeVarInt(this.hostUID);
        };
        SymbioticObjectAssociatedMessage.prototype.deserializeAs_SymbioticObjectAssociatedMessage = function(input) {
            this.hostUID = input.readVarUhInt();
            if (this.hostUID < 0) {
                throw new Error("Forbidden value (" + this.hostUID + ") on element of SymbioticObjectAssociatedMessage.hostUID.");
            }
        };
        SymbioticObjectAssociatedMessage.ID = 377;
        return SymbioticObjectAssociatedMessage;
    })(NetworkMessage);
    Protocol.SymbioticObjectAssociatedMessage = SymbioticObjectAssociatedMessage;
    var MimicryObjectAssociatedMessage = (function(_super) {
        __extends(MimicryObjectAssociatedMessage, _super);

        function MimicryObjectAssociatedMessage() {

            _super.call(this)
        }
        MimicryObjectAssociatedMessage.prototype.getMessageId = function() {
            return MimicryObjectAssociatedMessage.ID;
        };
        MimicryObjectAssociatedMessage.prototype.reset = function() {

        };
        MimicryObjectAssociatedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MimicryObjectAssociatedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MimicryObjectAssociatedMessage.prototype.serialize = function(output) {
            this.serializeAs_MimicryObjectAssociatedMessage(output);
        };
        MimicryObjectAssociatedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MimicryObjectAssociatedMessage(input);
        };
        MimicryObjectAssociatedMessage.prototype.serializeAs_MimicryObjectAssociatedMessage = function(output) {
            _super.prototype.serializeAs_SymbioticObjectAssociatedMessage.call(this, output);
        };
        MimicryObjectAssociatedMessage.prototype.deserializeAs_MimicryObjectAssociatedMessage = function(input) {
            _super.prototype.deserializeAs_SymbioticObjectAssociatedMessage.call(this, input);
        };
        MimicryObjectAssociatedMessage.ID = 288;
        return MimicryObjectAssociatedMessage;
    })(SymbioticObjectAssociatedMessage);
    Protocol.MimicryObjectAssociatedMessage = MimicryObjectAssociatedMessage;
    var MimicryObjectEraseRequestMessage = (function(_super) {
        __extends(MimicryObjectEraseRequestMessage, _super);

        function MimicryObjectEraseRequestMessage() {
            this.hostUID = 0;
            this.hostPos = 0;
            _super.call(this)
        }
        MimicryObjectEraseRequestMessage.prototype.getMessageId = function() {
            return MimicryObjectEraseRequestMessage.ID;
        };
        MimicryObjectEraseRequestMessage.prototype.reset = function() {
            this.hostUID = 0;
            this.hostPos = 0;
        };
        MimicryObjectEraseRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MimicryObjectEraseRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MimicryObjectEraseRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_MimicryObjectEraseRequestMessage(output);
        };
        MimicryObjectEraseRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MimicryObjectEraseRequestMessage(input);
        };
        MimicryObjectEraseRequestMessage.prototype.serializeAs_MimicryObjectEraseRequestMessage = function(output) {
            if (this.hostUID < 0) {
                throw new Error("Forbidden value (" + this.hostUID + ") on element hostUID.");
            }
            output.writeVarInt(this.hostUID);
            if (this.hostPos < 0 || this.hostPos > 255) {
                throw new Error("Forbidden value (" + this.hostPos + ") on element hostPos.");
            }
            output.writeByte(this.hostPos);
        };
        MimicryObjectEraseRequestMessage.prototype.deserializeAs_MimicryObjectEraseRequestMessage = function(input) {
            this.hostUID = input.readVarUhInt();
            if (this.hostUID < 0) {
                throw new Error("Forbidden value (" + this.hostUID + ") on element of MimicryObjectEraseRequestMessage.hostUID.");
            }
            this.hostPos = input.readUnsignedByte();
            if (this.hostPos < 0 || this.hostPos > 255) {
                throw new Error("Forbidden value (" + this.hostPos + ") on element of MimicryObjectEraseRequestMessage.hostPos.");
            }
        };
        MimicryObjectEraseRequestMessage.ID = 195;
        return MimicryObjectEraseRequestMessage;
    })(NetworkMessage);
    Protocol.MimicryObjectEraseRequestMessage = MimicryObjectEraseRequestMessage;
    var ObjectErrorMessage = (function(_super) {
        __extends(ObjectErrorMessage, _super);

        function ObjectErrorMessage() {
            this.reason = 0;
            _super.call(this)
        }
        ObjectErrorMessage.prototype.getMessageId = function() {
            return ObjectErrorMessage.ID;
        };
        ObjectErrorMessage.prototype.reset = function() {
            this.reason = 0;
        };
        ObjectErrorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ObjectErrorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ObjectErrorMessage.prototype.serialize = function(output) {
            this.serializeAs_ObjectErrorMessage(output);
        };
        ObjectErrorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectErrorMessage(input);
        };
        ObjectErrorMessage.prototype.serializeAs_ObjectErrorMessage = function(output) {
            output.writeByte(this.reason);
        };
        ObjectErrorMessage.prototype.deserializeAs_ObjectErrorMessage = function(input) {
            this.reason = input.readByte();
        };
        ObjectErrorMessage.ID = 2965;
        return ObjectErrorMessage;
    })(NetworkMessage);
    Protocol.ObjectErrorMessage = ObjectErrorMessage;
    var SymbioticObjectErrorMessage = (function(_super) {
        __extends(SymbioticObjectErrorMessage, _super);

        function SymbioticObjectErrorMessage() {
            this.errorCode = 0;
            _super.call(this)
        }
        SymbioticObjectErrorMessage.prototype.getMessageId = function() {
            return SymbioticObjectErrorMessage.ID;
        };
        SymbioticObjectErrorMessage.prototype.reset = function() {
            this.errorCode = 0;
        };
        SymbioticObjectErrorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        SymbioticObjectErrorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        SymbioticObjectErrorMessage.prototype.serialize = function(output) {
            this.serializeAs_SymbioticObjectErrorMessage(output);
        };
        SymbioticObjectErrorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_SymbioticObjectErrorMessage(input);
        };
        SymbioticObjectErrorMessage.prototype.serializeAs_SymbioticObjectErrorMessage = function(output) {
            _super.prototype.serializeAs_ObjectErrorMessage.call(this, output);
            output.writeByte(this.errorCode);
        };
        SymbioticObjectErrorMessage.prototype.deserializeAs_SymbioticObjectErrorMessage = function(input) {
            _super.prototype.deserializeAs_ObjectErrorMessage.call(this, input);
            this.errorCode = input.readByte();
        };
        SymbioticObjectErrorMessage.ID = 5316;
        return SymbioticObjectErrorMessage;
    })(ObjectErrorMessage);
    Protocol.SymbioticObjectErrorMessage = SymbioticObjectErrorMessage;
    var MimicryObjectErrorMessage = (function(_super) {
        __extends(MimicryObjectErrorMessage, _super);

        function MimicryObjectErrorMessage() {
            this.preview = false;
            _super.call(this)
        }
        MimicryObjectErrorMessage.prototype.getMessageId = function() {
            return MimicryObjectErrorMessage.ID;
        };
        MimicryObjectErrorMessage.prototype.reset = function() {
            this.preview = false;
        };
        MimicryObjectErrorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MimicryObjectErrorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MimicryObjectErrorMessage.prototype.serialize = function(output) {
            this.serializeAs_MimicryObjectErrorMessage(output);
        };
        MimicryObjectErrorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MimicryObjectErrorMessage(input);
        };
        MimicryObjectErrorMessage.prototype.serializeAs_MimicryObjectErrorMessage = function(output) {
            _super.prototype.serializeAs_SymbioticObjectErrorMessage.call(this, output);
            output.writeBoolean(this.preview);
        };
        MimicryObjectErrorMessage.prototype.deserializeAs_MimicryObjectErrorMessage = function(input) {
            _super.prototype.deserializeAs_SymbioticObjectErrorMessage.call(this, input);
            this.preview = input.readBoolean();
        };
        MimicryObjectErrorMessage.ID = 6833;
        return MimicryObjectErrorMessage;
    })(SymbioticObjectErrorMessage);
    Protocol.MimicryObjectErrorMessage = MimicryObjectErrorMessage;
    var SymbioticObjectAssociateRequestMessage = (function(_super) {
        __extends(SymbioticObjectAssociateRequestMessage, _super);

        function SymbioticObjectAssociateRequestMessage() {
            this.symbioteUID = 0;
            this.symbiotePos = 0;
            this.hostUID = 0;
            this.hostPos = 0;
            _super.call(this)
        }
        SymbioticObjectAssociateRequestMessage.prototype.getMessageId = function() {
            return SymbioticObjectAssociateRequestMessage.ID;
        };
        SymbioticObjectAssociateRequestMessage.prototype.reset = function() {
            this.symbioteUID = 0;
            this.symbiotePos = 0;
            this.hostUID = 0;
            this.hostPos = 0;
        };
        SymbioticObjectAssociateRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        SymbioticObjectAssociateRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        SymbioticObjectAssociateRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_SymbioticObjectAssociateRequestMessage(output);
        };
        SymbioticObjectAssociateRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_SymbioticObjectAssociateRequestMessage(input);
        };
        SymbioticObjectAssociateRequestMessage.prototype.serializeAs_SymbioticObjectAssociateRequestMessage = function(output) {
            if (this.symbioteUID < 0) {
                throw new Error("Forbidden value (" + this.symbioteUID + ") on element symbioteUID.");
            }
            output.writeVarInt(this.symbioteUID);
            if (this.symbiotePos < 0 || this.symbiotePos > 255) {
                throw new Error("Forbidden value (" + this.symbiotePos + ") on element symbiotePos.");
            }
            output.writeByte(this.symbiotePos);
            if (this.hostUID < 0) {
                throw new Error("Forbidden value (" + this.hostUID + ") on element hostUID.");
            }
            output.writeVarInt(this.hostUID);
            if (this.hostPos < 0 || this.hostPos > 255) {
                throw new Error("Forbidden value (" + this.hostPos + ") on element hostPos.");
            }
            output.writeByte(this.hostPos);
        };
        SymbioticObjectAssociateRequestMessage.prototype.deserializeAs_SymbioticObjectAssociateRequestMessage = function(input) {
            this.symbioteUID = input.readVarUhInt();
            if (this.symbioteUID < 0) {
                throw new Error("Forbidden value (" + this.symbioteUID + ") on element of SymbioticObjectAssociateRequestMessage.symbioteUID.");
            }
            this.symbiotePos = input.readUnsignedByte();
            if (this.symbiotePos < 0 || this.symbiotePos > 255) {
                throw new Error("Forbidden value (" + this.symbiotePos + ") on element of SymbioticObjectAssociateRequestMessage.symbiotePos.");
            }
            this.hostUID = input.readVarUhInt();
            if (this.hostUID < 0) {
                throw new Error("Forbidden value (" + this.hostUID + ") on element of SymbioticObjectAssociateRequestMessage.hostUID.");
            }
            this.hostPos = input.readUnsignedByte();
            if (this.hostPos < 0 || this.hostPos > 255) {
                throw new Error("Forbidden value (" + this.hostPos + ") on element of SymbioticObjectAssociateRequestMessage.hostPos.");
            }
        };
        SymbioticObjectAssociateRequestMessage.ID = 5881;
        return SymbioticObjectAssociateRequestMessage;
    })(NetworkMessage);
    Protocol.SymbioticObjectAssociateRequestMessage = SymbioticObjectAssociateRequestMessage;
    var MimicryObjectFeedAndAssociateRequestMessage = (function(_super) {
        __extends(MimicryObjectFeedAndAssociateRequestMessage, _super);

        function MimicryObjectFeedAndAssociateRequestMessage() {
            this.foodUID = 0;
            this.foodPos = 0;
            this.preview = false;
            _super.call(this)
        }
        MimicryObjectFeedAndAssociateRequestMessage.prototype.getMessageId = function() {
            return MimicryObjectFeedAndAssociateRequestMessage.ID;
        };
        MimicryObjectFeedAndAssociateRequestMessage.prototype.reset = function() {
            this.foodUID = 0;
            this.foodPos = 0;
            this.preview = false;
        };
        MimicryObjectFeedAndAssociateRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MimicryObjectFeedAndAssociateRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MimicryObjectFeedAndAssociateRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_MimicryObjectFeedAndAssociateRequestMessage(output);
        };
        MimicryObjectFeedAndAssociateRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MimicryObjectFeedAndAssociateRequestMessage(input);
        };
        MimicryObjectFeedAndAssociateRequestMessage.prototype.serializeAs_MimicryObjectFeedAndAssociateRequestMessage = function(output) {
            _super.prototype.serializeAs_SymbioticObjectAssociateRequestMessage.call(this, output);
            if (this.foodUID < 0) {
                throw new Error("Forbidden value (" + this.foodUID + ") on element foodUID.");
            }
            output.writeVarInt(this.foodUID);
            if (this.foodPos < 0 || this.foodPos > 255) {
                throw new Error("Forbidden value (" + this.foodPos + ") on element foodPos.");
            }
            output.writeByte(this.foodPos);
            output.writeBoolean(this.preview);
        };
        MimicryObjectFeedAndAssociateRequestMessage.prototype.deserializeAs_MimicryObjectFeedAndAssociateRequestMessage = function(input) {
            _super.prototype.deserializeAs_SymbioticObjectAssociateRequestMessage.call(this, input);
            this.foodUID = input.readVarUhInt();
            if (this.foodUID < 0) {
                throw new Error("Forbidden value (" + this.foodUID + ") on element of MimicryObjectFeedAndAssociateRequestMessage.foodUID.");
            }
            this.foodPos = input.readUnsignedByte();
            if (this.foodPos < 0 || this.foodPos > 255) {
                throw new Error("Forbidden value (" + this.foodPos + ") on element of MimicryObjectFeedAndAssociateRequestMessage.foodPos.");
            }
            this.preview = input.readBoolean();
        };
        MimicryObjectFeedAndAssociateRequestMessage.ID = 1925;
        return MimicryObjectFeedAndAssociateRequestMessage;
    })(SymbioticObjectAssociateRequestMessage);
    Protocol.MimicryObjectFeedAndAssociateRequestMessage = MimicryObjectFeedAndAssociateRequestMessage;
    var MimicryObjectPreviewMessage = (function(_super) {
        __extends(MimicryObjectPreviewMessage, _super);

        function MimicryObjectPreviewMessage() {
            this.result = new ObjectItem();
            _super.call(this)
        }
        MimicryObjectPreviewMessage.prototype.getMessageId = function() {
            return MimicryObjectPreviewMessage.ID;
        };
        MimicryObjectPreviewMessage.prototype.reset = function() {
            this.result = new ObjectItem();
        };
        MimicryObjectPreviewMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MimicryObjectPreviewMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MimicryObjectPreviewMessage.prototype.serialize = function(output) {
            this.serializeAs_MimicryObjectPreviewMessage(output);
        };
        MimicryObjectPreviewMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MimicryObjectPreviewMessage(input);
        };
        MimicryObjectPreviewMessage.prototype.serializeAs_MimicryObjectPreviewMessage = function(output) {
            this.result.serializeAs_ObjectItem(output);
        };
        MimicryObjectPreviewMessage.prototype.deserializeAs_MimicryObjectPreviewMessage = function(input) {
            this.result = new ObjectItem();
            this.result.deserialize(input);
        };
        MimicryObjectPreviewMessage.ID = 907;
        return MimicryObjectPreviewMessage;
    })(NetworkMessage);
    Protocol.MimicryObjectPreviewMessage = MimicryObjectPreviewMessage;
    var ObjectAddedMessage = (function(_super) {
        __extends(ObjectAddedMessage, _super);

        function ObjectAddedMessage() {
            this.object = new ObjectItem();
            this.origin = 0;
            _super.call(this)
        }
        ObjectAddedMessage.prototype.getMessageId = function() {
            return ObjectAddedMessage.ID;
        };
        ObjectAddedMessage.prototype.reset = function() {
            this.object = new ObjectItem();
            this.origin = 0;
        };
        ObjectAddedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ObjectAddedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ObjectAddedMessage.prototype.serialize = function(output) {
            this.serializeAs_ObjectAddedMessage(output);
        };
        ObjectAddedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectAddedMessage(input);
        };
        ObjectAddedMessage.prototype.serializeAs_ObjectAddedMessage = function(output) {
            this.object.serializeAs_ObjectItem(output);
            output.writeByte(this.origin);
        };
        ObjectAddedMessage.prototype.deserializeAs_ObjectAddedMessage = function(input) {
            this.object = new ObjectItem();
            this.object.deserialize(input);
            this.origin = input.readByte();
            if (this.origin < 0) {
                throw new Error("Forbidden value (" + this.origin + ") on element of ObjectAddedMessage.origin.");
            }
        };
        ObjectAddedMessage.ID = 2523;
        return ObjectAddedMessage;
    })(NetworkMessage);
    Protocol.ObjectAddedMessage = ObjectAddedMessage;
    var ObjectDeletedMessage = (function(_super) {
        __extends(ObjectDeletedMessage, _super);

        function ObjectDeletedMessage() {
            this.objectUID = 0;
            _super.call(this)
        }
        ObjectDeletedMessage.prototype.getMessageId = function() {
            return ObjectDeletedMessage.ID;
        };
        ObjectDeletedMessage.prototype.reset = function() {
            this.objectUID = 0;
        };
        ObjectDeletedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ObjectDeletedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ObjectDeletedMessage.prototype.serialize = function(output) {
            this.serializeAs_ObjectDeletedMessage(output);
        };
        ObjectDeletedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectDeletedMessage(input);
        };
        ObjectDeletedMessage.prototype.serializeAs_ObjectDeletedMessage = function(output) {
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
            }
            output.writeVarInt(this.objectUID);
        };
        ObjectDeletedMessage.prototype.deserializeAs_ObjectDeletedMessage = function(input) {
            this.objectUID = input.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element of ObjectDeletedMessage.objectUID.");
            }
        };
        ObjectDeletedMessage.ID = 8730;
        return ObjectDeletedMessage;
    })(NetworkMessage);
    Protocol.ObjectDeletedMessage = ObjectDeletedMessage;
    var ObjectDeleteMessage = (function(_super) {
        __extends(ObjectDeleteMessage, _super);

        function ObjectDeleteMessage() {
            this.objectUID = 0;
            this.quantity = 0;
            _super.call(this)
        }
        ObjectDeleteMessage.prototype.getMessageId = function() {
            return ObjectDeleteMessage.ID;
        };
        ObjectDeleteMessage.prototype.reset = function() {
            this.objectUID = 0;
            this.quantity = 0;
        };
        ObjectDeleteMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ObjectDeleteMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ObjectDeleteMessage.prototype.serialize = function(output) {
            this.serializeAs_ObjectDeleteMessage(output);
        };
        ObjectDeleteMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectDeleteMessage(input);
        };
        ObjectDeleteMessage.prototype.serializeAs_ObjectDeleteMessage = function(output) {
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
            }
            output.writeVarInt(this.objectUID);
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
            }
            output.writeVarInt(this.quantity);
        };
        ObjectDeleteMessage.prototype.deserializeAs_ObjectDeleteMessage = function(input) {
            this.objectUID = input.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element of ObjectDeleteMessage.objectUID.");
            }
            this.quantity = input.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element of ObjectDeleteMessage.quantity.");
            }
        };
        ObjectDeleteMessage.ID = 8482;
        return ObjectDeleteMessage;
    })(NetworkMessage);
    Protocol.ObjectDeleteMessage = ObjectDeleteMessage;
    var ObjectDropMessage = (function(_super) {
        __extends(ObjectDropMessage, _super);

        function ObjectDropMessage() {
            this.objectUID = 0;
            this.quantity = 0;
            _super.call(this)
        }
        ObjectDropMessage.prototype.getMessageId = function() {
            return ObjectDropMessage.ID;
        };
        ObjectDropMessage.prototype.reset = function() {
            this.objectUID = 0;
            this.quantity = 0;
        };
        ObjectDropMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ObjectDropMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ObjectDropMessage.prototype.serialize = function(output) {
            this.serializeAs_ObjectDropMessage(output);
        };
        ObjectDropMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectDropMessage(input);
        };
        ObjectDropMessage.prototype.serializeAs_ObjectDropMessage = function(output) {
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
            }
            output.writeVarInt(this.objectUID);
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
            }
            output.writeVarInt(this.quantity);
        };
        ObjectDropMessage.prototype.deserializeAs_ObjectDropMessage = function(input) {
            this.objectUID = input.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element of ObjectDropMessage.objectUID.");
            }
            this.quantity = input.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element of ObjectDropMessage.quantity.");
            }
        };
        ObjectDropMessage.ID = 5921;
        return ObjectDropMessage;
    })(NetworkMessage);
    Protocol.ObjectDropMessage = ObjectDropMessage;
    var ObjectJobAddedMessage = (function(_super) {
        __extends(ObjectJobAddedMessage, _super);

        function ObjectJobAddedMessage() {
            this.jobId = 0;
            _super.call(this)
        }
        ObjectJobAddedMessage.prototype.getMessageId = function() {
            return ObjectJobAddedMessage.ID;
        };
        ObjectJobAddedMessage.prototype.reset = function() {
            this.jobId = 0;
        };
        ObjectJobAddedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ObjectJobAddedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ObjectJobAddedMessage.prototype.serialize = function(output) {
            this.serializeAs_ObjectJobAddedMessage(output);
        };
        ObjectJobAddedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectJobAddedMessage(input);
        };
        ObjectJobAddedMessage.prototype.serializeAs_ObjectJobAddedMessage = function(output) {
            if (this.jobId < 0) {
                throw new Error("Forbidden value (" + this.jobId + ") on element jobId.");
            }
            output.writeByte(this.jobId);
        };
        ObjectJobAddedMessage.prototype.deserializeAs_ObjectJobAddedMessage = function(input) {
            this.jobId = input.readByte();
            if (this.jobId < 0) {
                throw new Error("Forbidden value (" + this.jobId + ") on element of ObjectJobAddedMessage.jobId.");
            }
        };
        ObjectJobAddedMessage.ID = 5863;
        return ObjectJobAddedMessage;
    })(NetworkMessage);
    Protocol.ObjectJobAddedMessage = ObjectJobAddedMessage;
    var ObjectModifiedMessage = (function(_super) {
        __extends(ObjectModifiedMessage, _super);

        function ObjectModifiedMessage() {
            this.object = new ObjectItem();
            _super.call(this)
        }
        ObjectModifiedMessage.prototype.getMessageId = function() {
            return ObjectModifiedMessage.ID;
        };
        ObjectModifiedMessage.prototype.reset = function() {
            this.object = new ObjectItem();
        };
        ObjectModifiedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ObjectModifiedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ObjectModifiedMessage.prototype.serialize = function(output) {
            this.serializeAs_ObjectModifiedMessage(output);
        };
        ObjectModifiedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectModifiedMessage(input);
        };
        ObjectModifiedMessage.prototype.serializeAs_ObjectModifiedMessage = function(output) {
            this.object.serializeAs_ObjectItem(output);
        };
        ObjectModifiedMessage.prototype.deserializeAs_ObjectModifiedMessage = function(input) {
            this.object = new ObjectItem();
            this.object.deserialize(input);
        };
        ObjectModifiedMessage.ID = 9694;
        return ObjectModifiedMessage;
    })(NetworkMessage);
    Protocol.ObjectModifiedMessage = ObjectModifiedMessage;
    var ObjectMovementMessage = (function(_super) {
        __extends(ObjectMovementMessage, _super);

        function ObjectMovementMessage() {
            this.objectUID = 0;
            this.position = 63;
            _super.call(this)
        }
        ObjectMovementMessage.prototype.getMessageId = function() {
            return ObjectMovementMessage.ID;
        };
        ObjectMovementMessage.prototype.reset = function() {
            this.objectUID = 0;
            this.position = 63;
        };
        ObjectMovementMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ObjectMovementMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ObjectMovementMessage.prototype.serialize = function(output) {
            this.serializeAs_ObjectMovementMessage(output);
        };
        ObjectMovementMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectMovementMessage(input);
        };
        ObjectMovementMessage.prototype.serializeAs_ObjectMovementMessage = function(output) {
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
            }
            output.writeVarInt(this.objectUID);
            output.writeShort(this.position);
        };
        ObjectMovementMessage.prototype.deserializeAs_ObjectMovementMessage = function(input) {
            this.objectUID = input.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element of ObjectMovementMessage.objectUID.");
            }
            this.position = input.readShort();
            if (this.position < 0) {
                throw new Error("Forbidden value (" + this.position + ") on element of ObjectMovementMessage.position.");
            }
        };
        ObjectMovementMessage.ID = 8953;
        return ObjectMovementMessage;
    })(NetworkMessage);
    Protocol.ObjectMovementMessage = ObjectMovementMessage;
    var ObjectQuantityMessage = (function(_super) {
        __extends(ObjectQuantityMessage, _super);

        function ObjectQuantityMessage() {
            this.objectUID = 0;
            this.quantity = 0;
            this.origin = 0;
            _super.call(this)
        }
        ObjectQuantityMessage.prototype.getMessageId = function() {
            return ObjectQuantityMessage.ID;
        };
        ObjectQuantityMessage.prototype.reset = function() {
            this.objectUID = 0;
            this.quantity = 0;
            this.origin = 0;
        };
        ObjectQuantityMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ObjectQuantityMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ObjectQuantityMessage.prototype.serialize = function(output) {
            this.serializeAs_ObjectQuantityMessage(output);
        };
        ObjectQuantityMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectQuantityMessage(input);
        };
        ObjectQuantityMessage.prototype.serializeAs_ObjectQuantityMessage = function(output) {
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
            }
            output.writeVarInt(this.objectUID);
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
            }
            output.writeVarInt(this.quantity);
            output.writeByte(this.origin);
        };
        ObjectQuantityMessage.prototype.deserializeAs_ObjectQuantityMessage = function(input) {
            this.objectUID = input.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element of ObjectQuantityMessage.objectUID.");
            }
            this.quantity = input.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element of ObjectQuantityMessage.quantity.");
            }
            this.origin = input.readByte();
            if (this.origin < 0) {
                throw new Error("Forbidden value (" + this.origin + ") on element of ObjectQuantityMessage.origin.");
            }
        };
        ObjectQuantityMessage.ID = 9153;
        return ObjectQuantityMessage;
    })(NetworkMessage);
    Protocol.ObjectQuantityMessage = ObjectQuantityMessage;
    var ObjectsAddedMessage = (function(_super) {
        __extends(ObjectsAddedMessage, _super);

        function ObjectsAddedMessage() {
            this.object = [];
            _super.call(this)
        }
        ObjectsAddedMessage.prototype.getMessageId = function() {
            return ObjectsAddedMessage.ID;
        };
        ObjectsAddedMessage.prototype.reset = function() {
            this.object = [];
        };
        ObjectsAddedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ObjectsAddedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ObjectsAddedMessage.prototype.serialize = function(output) {
            this.serializeAs_ObjectsAddedMessage(output);
        };
        ObjectsAddedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectsAddedMessage(input);
        };
        ObjectsAddedMessage.prototype.serializeAs_ObjectsAddedMessage = function(output) {
            output.writeShort(this.object.length);
            for (var _i1 = 0; _i1 < this.object.length; _i1++) {
                (this.object[_i1]).serializeAs_ObjectItem(output);
            }
        };
        ObjectsAddedMessage.prototype.deserializeAs_ObjectsAddedMessage = function(input) {
            var _item1 = null;
            var _objectLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _objectLen; _i1++) {
                _item1 = new ObjectItem();
                _item1.deserialize(input);
                this.object.push(_item1);
            }
        };
        ObjectsAddedMessage.ID = 1391;
        return ObjectsAddedMessage;
    })(NetworkMessage);
    Protocol.ObjectsAddedMessage = ObjectsAddedMessage;
    var ObjectsDeletedMessage = (function(_super) {
        __extends(ObjectsDeletedMessage, _super);

        function ObjectsDeletedMessage() {
            this.objectUID = [];
            _super.call(this)
        }
        ObjectsDeletedMessage.prototype.getMessageId = function() {
            return ObjectsDeletedMessage.ID;
        };
        ObjectsDeletedMessage.prototype.reset = function() {
            this.objectUID = [];
        };
        ObjectsDeletedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ObjectsDeletedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ObjectsDeletedMessage.prototype.serialize = function(output) {
            this.serializeAs_ObjectsDeletedMessage(output);
        };
        ObjectsDeletedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectsDeletedMessage(input);
        };
        ObjectsDeletedMessage.prototype.serializeAs_ObjectsDeletedMessage = function(output) {
            output.writeShort(this.objectUID.length);
            for (var _i1 = 0; _i1 < this.objectUID.length; _i1++) {
                if (this.objectUID[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.objectUID[_i1] + ") on element 1 (starting at 1) of objectUID.");
                }
                output.writeVarInt(this.objectUID[_i1]);
            }
        };
        ObjectsDeletedMessage.prototype.deserializeAs_ObjectsDeletedMessage = function(input) {
            var _val1 = 0;
            var _objectUIDLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _objectUIDLen; _i1++) {
                _val1 = input.readVarUhInt();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of objectUID.");
                }
                this.objectUID.push(_val1);
            }
        };
        ObjectsDeletedMessage.ID = 2210;
        return ObjectsDeletedMessage;
    })(NetworkMessage);
    Protocol.ObjectsDeletedMessage = ObjectsDeletedMessage;
    var ObjectSetPositionMessage = (function(_super) {
        __extends(ObjectSetPositionMessage, _super);

        function ObjectSetPositionMessage() {
            this.objectUID = 0;
            this.position = 63;
            this.quantity = 0;
            _super.call(this)
        }
        ObjectSetPositionMessage.prototype.getMessageId = function() {
            return ObjectSetPositionMessage.ID;
        };
        ObjectSetPositionMessage.prototype.reset = function() {
            this.objectUID = 0;
            this.position = 63;
            this.quantity = 0;
        };
        ObjectSetPositionMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ObjectSetPositionMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ObjectSetPositionMessage.prototype.serialize = function(output) {
            this.serializeAs_ObjectSetPositionMessage(output);
        };
        ObjectSetPositionMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectSetPositionMessage(input);
        };
        ObjectSetPositionMessage.prototype.serializeAs_ObjectSetPositionMessage = function(output) {
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
            }
            output.writeVarInt(this.objectUID);
            output.writeShort(this.position);
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
            }
            output.writeVarInt(this.quantity);
        };
        ObjectSetPositionMessage.prototype.deserializeAs_ObjectSetPositionMessage = function(input) {
            this.objectUID = input.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element of ObjectSetPositionMessage.objectUID.");
            }
            this.position = input.readShort();
            if (this.position < 0) {
                throw new Error("Forbidden value (" + this.position + ") on element of ObjectSetPositionMessage.position.");
            }
            this.quantity = input.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element of ObjectSetPositionMessage.quantity.");
            }
        };
        ObjectSetPositionMessage.ID = 7839;
        return ObjectSetPositionMessage;
    })(NetworkMessage);
    Protocol.ObjectSetPositionMessage = ObjectSetPositionMessage;
    var ObjectsQuantityMessage = (function(_super) {
        __extends(ObjectsQuantityMessage, _super);

        function ObjectsQuantityMessage() {
            this.objectsUIDAndQty = [];
            _super.call(this)
        }
        ObjectsQuantityMessage.prototype.getMessageId = function() {
            return ObjectsQuantityMessage.ID;
        };
        ObjectsQuantityMessage.prototype.reset = function() {
            this.objectsUIDAndQty = [];
        };
        ObjectsQuantityMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ObjectsQuantityMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ObjectsQuantityMessage.prototype.serialize = function(output) {
            this.serializeAs_ObjectsQuantityMessage(output);
        };
        ObjectsQuantityMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectsQuantityMessage(input);
        };
        ObjectsQuantityMessage.prototype.serializeAs_ObjectsQuantityMessage = function(output) {
            output.writeShort(this.objectsUIDAndQty.length);
            for (var _i1 = 0; _i1 < this.objectsUIDAndQty.length; _i1++) {
                (this.objectsUIDAndQty[_i1]).serializeAs_ObjectItemQuantity(output);
            }
        };
        ObjectsQuantityMessage.prototype.deserializeAs_ObjectsQuantityMessage = function(input) {
            var _item1 = null;
            var _objectsUIDAndQtyLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _objectsUIDAndQtyLen; _i1++) {
                _item1 = new ObjectItemQuantity();
                _item1.deserialize(input);
                this.objectsUIDAndQty.push(_item1);
            }
        };
        ObjectsQuantityMessage.ID = 9021;
        return ObjectsQuantityMessage;
    })(NetworkMessage);
    Protocol.ObjectsQuantityMessage = ObjectsQuantityMessage;
    var ObjectUseMessage = (function(_super) {
        __extends(ObjectUseMessage, _super);

        function ObjectUseMessage() {
            this.objectUID = 0;
            _super.call(this)
        }
        ObjectUseMessage.prototype.getMessageId = function() {
            return ObjectUseMessage.ID;
        };
        ObjectUseMessage.prototype.reset = function() {
            this.objectUID = 0;
        };
        ObjectUseMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ObjectUseMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ObjectUseMessage.prototype.serialize = function(output) {
            this.serializeAs_ObjectUseMessage(output);
        };
        ObjectUseMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectUseMessage(input);
        };
        ObjectUseMessage.prototype.serializeAs_ObjectUseMessage = function(output) {
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
            }
            output.writeVarInt(this.objectUID);
        };
        ObjectUseMessage.prototype.deserializeAs_ObjectUseMessage = function(input) {
            this.objectUID = input.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element of ObjectUseMessage.objectUID.");
            }
        };
        ObjectUseMessage.ID = 8030;
        return ObjectUseMessage;
    })(NetworkMessage);
    Protocol.ObjectUseMessage = ObjectUseMessage;
    var ObjectUseMultipleMessage = (function(_super) {
        __extends(ObjectUseMultipleMessage, _super);

        function ObjectUseMultipleMessage() {
            this.quantity = 0;
            _super.call(this)
        }
        ObjectUseMultipleMessage.prototype.getMessageId = function() {
            return ObjectUseMultipleMessage.ID;
        };
        ObjectUseMultipleMessage.prototype.reset = function() {
            this.quantity = 0;
        };
        ObjectUseMultipleMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ObjectUseMultipleMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ObjectUseMultipleMessage.prototype.serialize = function(output) {
            this.serializeAs_ObjectUseMultipleMessage(output);
        };
        ObjectUseMultipleMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectUseMultipleMessage(input);
        };
        ObjectUseMultipleMessage.prototype.serializeAs_ObjectUseMultipleMessage = function(output) {
            _super.prototype.serializeAs_ObjectUseMessage.call(this, output);
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
            }
            output.writeVarInt(this.quantity);
        };
        ObjectUseMultipleMessage.prototype.deserializeAs_ObjectUseMultipleMessage = function(input) {
            _super.prototype.deserializeAs_ObjectUseMessage.call(this, input);
            this.quantity = input.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element of ObjectUseMultipleMessage.quantity.");
            }
        };
        ObjectUseMultipleMessage.ID = 1737;
        return ObjectUseMultipleMessage;
    })(ObjectUseMessage);
    Protocol.ObjectUseMultipleMessage = ObjectUseMultipleMessage;
    var ObjectUseOnCellMessage = (function(_super) {
        __extends(ObjectUseOnCellMessage, _super);

        function ObjectUseOnCellMessage() {
            this.cells = 0;
            _super.call(this)
        }
        ObjectUseOnCellMessage.prototype.getMessageId = function() {
            return ObjectUseOnCellMessage.ID;
        };
        ObjectUseOnCellMessage.prototype.reset = function() {
            this.cells = 0;
        };
        ObjectUseOnCellMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ObjectUseOnCellMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ObjectUseOnCellMessage.prototype.serialize = function(output) {
            this.serializeAs_ObjectUseOnCellMessage(output);
        };
        ObjectUseOnCellMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectUseOnCellMessage(input);
        };
        ObjectUseOnCellMessage.prototype.serializeAs_ObjectUseOnCellMessage = function(output) {
            _super.prototype.serializeAs_ObjectUseMessage.call(this, output);
            if (this.cells < 0 || this.cells > 559) {
                throw new Error("Forbidden value (" + this.cells + ") on element cells.");
            }
            output.writeVarShort(this.cells);
        };
        ObjectUseOnCellMessage.prototype.deserializeAs_ObjectUseOnCellMessage = function(input) {
            _super.prototype.deserializeAs_ObjectUseMessage.call(this, input);
            this.cells = input.readVarUhShort();
            if (this.cells < 0 || this.cells > 559) {
                throw new Error("Forbidden value (" + this.cells + ") on element of ObjectUseOnCellMessage.cells.");
            }
        };
        ObjectUseOnCellMessage.ID = 2641;
        return ObjectUseOnCellMessage;
    })(ObjectUseMessage);
    Protocol.ObjectUseOnCellMessage = ObjectUseOnCellMessage;
    var ObjectUseOnCharacterMessage = (function(_super) {
        __extends(ObjectUseOnCharacterMessage, _super);

        function ObjectUseOnCharacterMessage() {
            this.characterId = 0;
            _super.call(this)
        }
        ObjectUseOnCharacterMessage.prototype.getMessageId = function() {
            return ObjectUseOnCharacterMessage.ID;
        };
        ObjectUseOnCharacterMessage.prototype.reset = function() {
            this.characterId = 0;
        };
        ObjectUseOnCharacterMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ObjectUseOnCharacterMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ObjectUseOnCharacterMessage.prototype.serialize = function(output) {
            this.serializeAs_ObjectUseOnCharacterMessage(output);
        };
        ObjectUseOnCharacterMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectUseOnCharacterMessage(input);
        };
        ObjectUseOnCharacterMessage.prototype.serializeAs_ObjectUseOnCharacterMessage = function(output) {
            _super.prototype.serializeAs_ObjectUseMessage.call(this, output);
            if (this.characterId < 0 || this.characterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.characterId + ") on element characterId.");
            }
            output.writeVarLong(this.characterId);
        };
        ObjectUseOnCharacterMessage.prototype.deserializeAs_ObjectUseOnCharacterMessage = function(input) {
            _super.prototype.deserializeAs_ObjectUseMessage.call(this, input);
            this.characterId = input.readVarUhLong();
            if (this.characterId < 0 || this.characterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.characterId + ") on element of ObjectUseOnCharacterMessage.characterId.");
            }
        };
        ObjectUseOnCharacterMessage.ID = 9511;
        return ObjectUseOnCharacterMessage;
    })(ObjectUseMessage);
    Protocol.ObjectUseOnCharacterMessage = ObjectUseOnCharacterMessage;
    var ObtainedItemMessage = (function(_super) {
        __extends(ObtainedItemMessage, _super);

        function ObtainedItemMessage() {
            this.genericId = 0;
            this.baseQuantity = 0;
            _super.call(this)
        }
        ObtainedItemMessage.prototype.getMessageId = function() {
            return ObtainedItemMessage.ID;
        };
        ObtainedItemMessage.prototype.reset = function() {
            this.genericId = 0;
            this.baseQuantity = 0;
        };
        ObtainedItemMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ObtainedItemMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ObtainedItemMessage.prototype.serialize = function(output) {
            this.serializeAs_ObtainedItemMessage(output);
        };
        ObtainedItemMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ObtainedItemMessage(input);
        };
        ObtainedItemMessage.prototype.serializeAs_ObtainedItemMessage = function(output) {
            if (this.genericId < 0) {
                throw new Error("Forbidden value (" + this.genericId + ") on element genericId.");
            }
            output.writeVarShort(this.genericId);
            if (this.baseQuantity < 0) {
                throw new Error("Forbidden value (" + this.baseQuantity + ") on element baseQuantity.");
            }
            output.writeVarInt(this.baseQuantity);
        };
        ObtainedItemMessage.prototype.deserializeAs_ObtainedItemMessage = function(input) {
            this.genericId = input.readVarUhShort();
            if (this.genericId < 0) {
                throw new Error("Forbidden value (" + this.genericId + ") on element of ObtainedItemMessage.genericId.");
            }
            this.baseQuantity = input.readVarUhInt();
            if (this.baseQuantity < 0) {
                throw new Error("Forbidden value (" + this.baseQuantity + ") on element of ObtainedItemMessage.baseQuantity.");
            }
        };
        ObtainedItemMessage.ID = 198;
        return ObtainedItemMessage;
    })(NetworkMessage);
    Protocol.ObtainedItemMessage = ObtainedItemMessage;
    var ObtainedItemWithBonusMessage = (function(_super) {
        __extends(ObtainedItemWithBonusMessage, _super);

        function ObtainedItemWithBonusMessage() {
            this.bonusQuantity = 0;
            _super.call(this)
        }
        ObtainedItemWithBonusMessage.prototype.getMessageId = function() {
            return ObtainedItemWithBonusMessage.ID;
        };
        ObtainedItemWithBonusMessage.prototype.reset = function() {
            this.bonusQuantity = 0;
        };
        ObtainedItemWithBonusMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ObtainedItemWithBonusMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ObtainedItemWithBonusMessage.prototype.serialize = function(output) {
            this.serializeAs_ObtainedItemWithBonusMessage(output);
        };
        ObtainedItemWithBonusMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ObtainedItemWithBonusMessage(input);
        };
        ObtainedItemWithBonusMessage.prototype.serializeAs_ObtainedItemWithBonusMessage = function(output) {
            _super.prototype.serializeAs_ObtainedItemMessage.call(this, output);
            if (this.bonusQuantity < 0) {
                throw new Error("Forbidden value (" + this.bonusQuantity + ") on element bonusQuantity.");
            }
            output.writeVarInt(this.bonusQuantity);
        };
        ObtainedItemWithBonusMessage.prototype.deserializeAs_ObtainedItemWithBonusMessage = function(input) {
            _super.prototype.deserializeAs_ObtainedItemMessage.call(this, input);
            this.bonusQuantity = input.readVarUhInt();
            if (this.bonusQuantity < 0) {
                throw new Error("Forbidden value (" + this.bonusQuantity + ") on element of ObtainedItemWithBonusMessage.bonusQuantity.");
            }
        };
        ObtainedItemWithBonusMessage.ID = 5610;
        return ObtainedItemWithBonusMessage;
    })(ObtainedItemMessage);
    Protocol.ObtainedItemWithBonusMessage = ObtainedItemWithBonusMessage;
    var SetUpdateMessage = (function(_super) {
        __extends(SetUpdateMessage, _super);

        function SetUpdateMessage() {
            this.setId = 0;
            this.setObjects = [];
            this.setEffects = [];
            _super.call(this)
        }
        SetUpdateMessage.prototype.getMessageId = function() {
            return SetUpdateMessage.ID;
        };
        SetUpdateMessage.prototype.reset = function() {
            this.setId = 0;
            this.setObjects = [];
            this.setEffects = [];
        };
        SetUpdateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        SetUpdateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        SetUpdateMessage.prototype.serialize = function(output) {
            this.serializeAs_SetUpdateMessage(output);
        };
        SetUpdateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_SetUpdateMessage(input);
        };
        SetUpdateMessage.prototype.serializeAs_SetUpdateMessage = function(output) {
            if (this.setId < 0) {
                throw new Error("Forbidden value (" + this.setId + ") on element setId.");
            }
            output.writeVarShort(this.setId);
            output.writeShort(this.setObjects.length);
            for (var _i2 = 0; _i2 < this.setObjects.length; _i2++) {
                if (this.setObjects[_i2] < 0) {
                    throw new Error("Forbidden value (" + this.setObjects[_i2] + ") on element 2 (starting at 1) of setObjects.");
                }
                output.writeVarShort(this.setObjects[_i2]);
            }
            output.writeShort(this.setEffects.length);
            for (var _i3 = 0; _i3 < this.setEffects.length; _i3++) {
                output.writeShort((this.setEffects[_i3]).getTypeId());
                (this.setEffects[_i3]).serialize(output);
            }
        };
        SetUpdateMessage.prototype.deserializeAs_SetUpdateMessage = function(input) {
            var _val2 = 0;
            var _id3 = 0;
            var _item3 = null;
            this.setId = input.readVarUhShort();
            if (this.setId < 0) {
                throw new Error("Forbidden value (" + this.setId + ") on element of SetUpdateMessage.setId.");
            }
            var _setObjectsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _setObjectsLen; _i2++) {
                _val2 = input.readVarUhShort();
                if (_val2 < 0) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of setObjects.");
                }
                this.setObjects.push(_val2);
            }
            var _setEffectsLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _setEffectsLen; _i3++) {
                _id3 = input.readUnsignedShort();
                _item3 = ProtocolTypeManager.getInstance(ObjectEffect, _id3);
                _item3.deserialize(input);
                this.setEffects.push(_item3);
            }
        };
        SetUpdateMessage.ID = 9473;
        return SetUpdateMessage;
    })(NetworkMessage);
    Protocol.SetUpdateMessage = SetUpdateMessage;
    var WatchInventoryContentMessage = (function(_super) {
        __extends(WatchInventoryContentMessage, _super);

        function WatchInventoryContentMessage() {

            _super.call(this)
        }
        WatchInventoryContentMessage.prototype.getMessageId = function() {
            return WatchInventoryContentMessage.ID;
        };
        WatchInventoryContentMessage.prototype.reset = function() {

        };
        WatchInventoryContentMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        WatchInventoryContentMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        WatchInventoryContentMessage.prototype.serialize = function(output) {
            this.serializeAs_WatchInventoryContentMessage(output);
        };
        WatchInventoryContentMessage.prototype.deserialize = function(input) {
            this.deserializeAs_WatchInventoryContentMessage(input);
        };
        WatchInventoryContentMessage.prototype.serializeAs_WatchInventoryContentMessage = function(output) {
            _super.prototype.serializeAs_InventoryContentMessage.call(this, output);
        };
        WatchInventoryContentMessage.prototype.deserializeAs_WatchInventoryContentMessage = function(input) {
            _super.prototype.deserializeAs_InventoryContentMessage.call(this, input);
        };
        WatchInventoryContentMessage.ID = 1656;
        return WatchInventoryContentMessage;
    })(InventoryContentMessage);
    Protocol.WatchInventoryContentMessage = WatchInventoryContentMessage;
    var WrapperObjectAssociatedMessage = (function(_super) {
        __extends(WrapperObjectAssociatedMessage, _super);

        function WrapperObjectAssociatedMessage() {

            _super.call(this)
        }
        WrapperObjectAssociatedMessage.prototype.getMessageId = function() {
            return WrapperObjectAssociatedMessage.ID;
        };
        WrapperObjectAssociatedMessage.prototype.reset = function() {

        };
        WrapperObjectAssociatedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        WrapperObjectAssociatedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        WrapperObjectAssociatedMessage.prototype.serialize = function(output) {
            this.serializeAs_WrapperObjectAssociatedMessage(output);
        };
        WrapperObjectAssociatedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_WrapperObjectAssociatedMessage(input);
        };
        WrapperObjectAssociatedMessage.prototype.serializeAs_WrapperObjectAssociatedMessage = function(output) {
            _super.prototype.serializeAs_SymbioticObjectAssociatedMessage.call(this, output);
        };
        WrapperObjectAssociatedMessage.prototype.deserializeAs_WrapperObjectAssociatedMessage = function(input) {
            _super.prototype.deserializeAs_SymbioticObjectAssociatedMessage.call(this, input);
        };
        WrapperObjectAssociatedMessage.ID = 134;
        return WrapperObjectAssociatedMessage;
    })(SymbioticObjectAssociatedMessage);
    Protocol.WrapperObjectAssociatedMessage = WrapperObjectAssociatedMessage;
    var WrapperObjectDissociateRequestMessage = (function(_super) {
        __extends(WrapperObjectDissociateRequestMessage, _super);

        function WrapperObjectDissociateRequestMessage() {
            this.hostUID = 0;
            this.hostPos = 0;
            _super.call(this)
        }
        WrapperObjectDissociateRequestMessage.prototype.getMessageId = function() {
            return WrapperObjectDissociateRequestMessage.ID;
        };
        WrapperObjectDissociateRequestMessage.prototype.reset = function() {
            this.hostUID = 0;
            this.hostPos = 0;
        };
        WrapperObjectDissociateRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        WrapperObjectDissociateRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        WrapperObjectDissociateRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_WrapperObjectDissociateRequestMessage(output);
        };
        WrapperObjectDissociateRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_WrapperObjectDissociateRequestMessage(input);
        };
        WrapperObjectDissociateRequestMessage.prototype.serializeAs_WrapperObjectDissociateRequestMessage = function(output) {
            if (this.hostUID < 0) {
                throw new Error("Forbidden value (" + this.hostUID + ") on element hostUID.");
            }
            output.writeVarInt(this.hostUID);
            if (this.hostPos < 0 || this.hostPos > 255) {
                throw new Error("Forbidden value (" + this.hostPos + ") on element hostPos.");
            }
            output.writeByte(this.hostPos);
        };
        WrapperObjectDissociateRequestMessage.prototype.deserializeAs_WrapperObjectDissociateRequestMessage = function(input) {
            this.hostUID = input.readVarUhInt();
            if (this.hostUID < 0) {
                throw new Error("Forbidden value (" + this.hostUID + ") on element of WrapperObjectDissociateRequestMessage.hostUID.");
            }
            this.hostPos = input.readUnsignedByte();
            if (this.hostPos < 0 || this.hostPos > 255) {
                throw new Error("Forbidden value (" + this.hostPos + ") on element of WrapperObjectDissociateRequestMessage.hostPos.");
            }
        };
        WrapperObjectDissociateRequestMessage.ID = 8316;
        return WrapperObjectDissociateRequestMessage;
    })(NetworkMessage);
    Protocol.WrapperObjectDissociateRequestMessage = WrapperObjectDissociateRequestMessage;
    var WrapperObjectErrorMessage = (function(_super) {
        __extends(WrapperObjectErrorMessage, _super);

        function WrapperObjectErrorMessage() {

            _super.call(this)
        }
        WrapperObjectErrorMessage.prototype.getMessageId = function() {
            return WrapperObjectErrorMessage.ID;
        };
        WrapperObjectErrorMessage.prototype.reset = function() {

        };
        WrapperObjectErrorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        WrapperObjectErrorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        WrapperObjectErrorMessage.prototype.serialize = function(output) {
            this.serializeAs_WrapperObjectErrorMessage(output);
        };
        WrapperObjectErrorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_WrapperObjectErrorMessage(input);
        };
        WrapperObjectErrorMessage.prototype.serializeAs_WrapperObjectErrorMessage = function(output) {
            _super.prototype.serializeAs_SymbioticObjectErrorMessage.call(this, output);
        };
        WrapperObjectErrorMessage.prototype.deserializeAs_WrapperObjectErrorMessage = function(input) {
            _super.prototype.deserializeAs_SymbioticObjectErrorMessage.call(this, input);
        };
        WrapperObjectErrorMessage.ID = 6972;
        return WrapperObjectErrorMessage;
    })(SymbioticObjectErrorMessage);
    Protocol.WrapperObjectErrorMessage = WrapperObjectErrorMessage;
    var KamasUpdateMessage = (function(_super) {
        __extends(KamasUpdateMessage, _super);

        function KamasUpdateMessage() {
            this.kamasTotal = 0;
            _super.call(this)
        }
        KamasUpdateMessage.prototype.getMessageId = function() {
            return KamasUpdateMessage.ID;
        };
        KamasUpdateMessage.prototype.reset = function() {
            this.kamasTotal = 0;
        };
        KamasUpdateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        KamasUpdateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        KamasUpdateMessage.prototype.serialize = function(output) {
            this.serializeAs_KamasUpdateMessage(output);
        };
        KamasUpdateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_KamasUpdateMessage(input);
        };
        KamasUpdateMessage.prototype.serializeAs_KamasUpdateMessage = function(output) {
            if (this.kamasTotal < 0 || this.kamasTotal > 9007199254740990) {
                throw new Error("Forbidden value (" + this.kamasTotal + ") on element kamasTotal.");
            }
            output.writeVarLong(this.kamasTotal);
        };
        KamasUpdateMessage.prototype.deserializeAs_KamasUpdateMessage = function(input) {
            this.kamasTotal = input.readVarUhLong();
            if (this.kamasTotal < 0 || this.kamasTotal > 9007199254740990) {
                throw new Error("Forbidden value (" + this.kamasTotal + ") on element of KamasUpdateMessage.kamasTotal.");
            }
        };
        KamasUpdateMessage.ID = 7707;
        return KamasUpdateMessage;
    })(NetworkMessage);
    Protocol.KamasUpdateMessage = KamasUpdateMessage;
    var ObjectAveragePricesErrorMessage = (function(_super) {
        __extends(ObjectAveragePricesErrorMessage, _super);

        function ObjectAveragePricesErrorMessage() {

            _super.call(this)
        }
        ObjectAveragePricesErrorMessage.prototype.getMessageId = function() {
            return ObjectAveragePricesErrorMessage.ID;
        };
        ObjectAveragePricesErrorMessage.prototype.reset = function() {

        };
        ObjectAveragePricesErrorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ObjectAveragePricesErrorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ObjectAveragePricesErrorMessage.prototype.serialize = function(output) {
            this.serializeAs_ObjectAveragePricesErrorMessage(output);
        };
        ObjectAveragePricesErrorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectAveragePricesErrorMessage(input);
        };
        ObjectAveragePricesErrorMessage.prototype.serializeAs_ObjectAveragePricesErrorMessage = function(output) {

        };
        ObjectAveragePricesErrorMessage.prototype.deserializeAs_ObjectAveragePricesErrorMessage = function(input) {

        };
        ObjectAveragePricesErrorMessage.ID = 4399;
        return ObjectAveragePricesErrorMessage;
    })(NetworkMessage);
    Protocol.ObjectAveragePricesErrorMessage = ObjectAveragePricesErrorMessage;
    var ObjectAveragePricesGetMessage = (function(_super) {
        __extends(ObjectAveragePricesGetMessage, _super);

        function ObjectAveragePricesGetMessage() {

            _super.call(this)
        }
        ObjectAveragePricesGetMessage.prototype.getMessageId = function() {
            return ObjectAveragePricesGetMessage.ID;
        };
        ObjectAveragePricesGetMessage.prototype.reset = function() {

        };
        ObjectAveragePricesGetMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ObjectAveragePricesGetMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ObjectAveragePricesGetMessage.prototype.serialize = function(output) {
            this.serializeAs_ObjectAveragePricesGetMessage(output);
        };
        ObjectAveragePricesGetMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectAveragePricesGetMessage(input);
        };
        ObjectAveragePricesGetMessage.prototype.serializeAs_ObjectAveragePricesGetMessage = function(output) {

        };
        ObjectAveragePricesGetMessage.prototype.deserializeAs_ObjectAveragePricesGetMessage = function(input) {

        };
        ObjectAveragePricesGetMessage.ID = 809;
        return ObjectAveragePricesGetMessage;
    })(NetworkMessage);
    Protocol.ObjectAveragePricesGetMessage = ObjectAveragePricesGetMessage;
    var ObjectAveragePricesMessage = (function(_super) {
        __extends(ObjectAveragePricesMessage, _super);

        function ObjectAveragePricesMessage() {
            this.ids = [];
            this.avgPrices = [];
            _super.call(this)
        }
        ObjectAveragePricesMessage.prototype.getMessageId = function() {
            return ObjectAveragePricesMessage.ID;
        };
        ObjectAveragePricesMessage.prototype.reset = function() {
            this.ids = [];
            this.avgPrices = [];
        };
        ObjectAveragePricesMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ObjectAveragePricesMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ObjectAveragePricesMessage.prototype.serialize = function(output) {
            this.serializeAs_ObjectAveragePricesMessage(output);
        };
        ObjectAveragePricesMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ObjectAveragePricesMessage(input);
        };
        ObjectAveragePricesMessage.prototype.serializeAs_ObjectAveragePricesMessage = function(output) {
            output.writeShort(this.ids.length);
            for (var _i1 = 0; _i1 < this.ids.length; _i1++) {
                if (this.ids[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.ids[_i1] + ") on element 1 (starting at 1) of ids.");
                }
                output.writeVarShort(this.ids[_i1]);
            }
            output.writeShort(this.avgPrices.length);
            for (var _i2 = 0; _i2 < this.avgPrices.length; _i2++) {
                if (this.avgPrices[_i2] < 0 || this.avgPrices[_i2] > 9007199254740990) {
                    throw new Error("Forbidden value (" + this.avgPrices[_i2] + ") on element 2 (starting at 1) of avgPrices.");
                }
                output.writeVarLong(this.avgPrices[_i2]);
            }
        };
        ObjectAveragePricesMessage.prototype.deserializeAs_ObjectAveragePricesMessage = function(input) {
            var _val1 = 0;
            var _val2 = NaN;
            var _idsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _idsLen; _i1++) {
                _val1 = input.readVarUhShort();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of ids.");
                }
                this.ids.push(_val1);
            }
            var _avgPricesLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _avgPricesLen; _i2++) {
                _val2 = input.readVarUhLong();
                if (_val2 < 0 || _val2 > 9007199254740990) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of avgPrices.");
                }
                this.avgPrices.push(_val2);
            }
        };
        ObjectAveragePricesMessage.ID = 3534;
        return ObjectAveragePricesMessage;
    })(NetworkMessage);
    Protocol.ObjectAveragePricesMessage = ObjectAveragePricesMessage;
    var SpellListMessage = (function(_super) {
        __extends(SpellListMessage, _super);

        function SpellListMessage() {
            this.spellPrevisualization = false;
            this.spells = [];
            _super.call(this)
        }
        SpellListMessage.prototype.getMessageId = function() {
            return SpellListMessage.ID;
        };
        SpellListMessage.prototype.reset = function() {
            this.spellPrevisualization = false;
            this.spells = [];
        };
        SpellListMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        SpellListMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        SpellListMessage.prototype.serialize = function(output) {
            this.serializeAs_SpellListMessage(output);
        };
        SpellListMessage.prototype.deserialize = function(input) {
            this.deserializeAs_SpellListMessage(input);
        };
        SpellListMessage.prototype.serializeAs_SpellListMessage = function(output) {
            output.writeBoolean(this.spellPrevisualization);
            output.writeShort(this.spells.length);
            for (var _i2 = 0; _i2 < this.spells.length; _i2++) {
                (this.spells[_i2]).serializeAs_SpellItem(output);
            }
        };
        SpellListMessage.prototype.deserializeAs_SpellListMessage = function(input) {
            var _item2 = null;
            this.spellPrevisualization = input.readBoolean();
            var _spellsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _spellsLen; _i2++) {
                _item2 = new SpellItem();
                _item2.deserialize(input);
                this.spells.push(_item2);
            }
        };
        SpellListMessage.ID = 3553;
        return SpellListMessage;
    })(NetworkMessage);
    Protocol.SpellListMessage = SpellListMessage;
    var StorageInventoryContentMessage = (function(_super) {
        __extends(StorageInventoryContentMessage, _super);

        function StorageInventoryContentMessage() {

            _super.call(this)
        }
        StorageInventoryContentMessage.prototype.getMessageId = function() {
            return StorageInventoryContentMessage.ID;
        };
        StorageInventoryContentMessage.prototype.reset = function() {

        };
        StorageInventoryContentMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        StorageInventoryContentMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        StorageInventoryContentMessage.prototype.serialize = function(output) {
            this.serializeAs_StorageInventoryContentMessage(output);
        };
        StorageInventoryContentMessage.prototype.deserialize = function(input) {
            this.deserializeAs_StorageInventoryContentMessage(input);
        };
        StorageInventoryContentMessage.prototype.serializeAs_StorageInventoryContentMessage = function(output) {
            _super.prototype.serializeAs_InventoryContentMessage.call(this, output);
        };
        StorageInventoryContentMessage.prototype.deserializeAs_StorageInventoryContentMessage = function(input) {
            _super.prototype.deserializeAs_InventoryContentMessage.call(this, input);
        };
        StorageInventoryContentMessage.ID = 8231;
        return StorageInventoryContentMessage;
    })(InventoryContentMessage);
    Protocol.StorageInventoryContentMessage = StorageInventoryContentMessage;
    var StorageKamasUpdateMessage = (function(_super) {
        __extends(StorageKamasUpdateMessage, _super);

        function StorageKamasUpdateMessage() {
            this.kamasTotal = 0;
            _super.call(this)
        }
        StorageKamasUpdateMessage.prototype.getMessageId = function() {
            return StorageKamasUpdateMessage.ID;
        };
        StorageKamasUpdateMessage.prototype.reset = function() {
            this.kamasTotal = 0;
        };
        StorageKamasUpdateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        StorageKamasUpdateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        StorageKamasUpdateMessage.prototype.serialize = function(output) {
            this.serializeAs_StorageKamasUpdateMessage(output);
        };
        StorageKamasUpdateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_StorageKamasUpdateMessage(input);
        };
        StorageKamasUpdateMessage.prototype.serializeAs_StorageKamasUpdateMessage = function(output) {
            if (this.kamasTotal < 0 || this.kamasTotal > 9007199254740990) {
                throw new Error("Forbidden value (" + this.kamasTotal + ") on element kamasTotal.");
            }
            output.writeVarLong(this.kamasTotal);
        };
        StorageKamasUpdateMessage.prototype.deserializeAs_StorageKamasUpdateMessage = function(input) {
            this.kamasTotal = input.readVarUhLong();
            if (this.kamasTotal < 0 || this.kamasTotal > 9007199254740990) {
                throw new Error("Forbidden value (" + this.kamasTotal + ") on element of StorageKamasUpdateMessage.kamasTotal.");
            }
        };
        StorageKamasUpdateMessage.ID = 9471;
        return StorageKamasUpdateMessage;
    })(NetworkMessage);
    Protocol.StorageKamasUpdateMessage = StorageKamasUpdateMessage;
    var StorageObjectRemoveMessage = (function(_super) {
        __extends(StorageObjectRemoveMessage, _super);

        function StorageObjectRemoveMessage() {
            this.objectUID = 0;
            _super.call(this)
        }
        StorageObjectRemoveMessage.prototype.getMessageId = function() {
            return StorageObjectRemoveMessage.ID;
        };
        StorageObjectRemoveMessage.prototype.reset = function() {
            this.objectUID = 0;
        };
        StorageObjectRemoveMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        StorageObjectRemoveMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        StorageObjectRemoveMessage.prototype.serialize = function(output) {
            this.serializeAs_StorageObjectRemoveMessage(output);
        };
        StorageObjectRemoveMessage.prototype.deserialize = function(input) {
            this.deserializeAs_StorageObjectRemoveMessage(input);
        };
        StorageObjectRemoveMessage.prototype.serializeAs_StorageObjectRemoveMessage = function(output) {
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
            }
            output.writeVarInt(this.objectUID);
        };
        StorageObjectRemoveMessage.prototype.deserializeAs_StorageObjectRemoveMessage = function(input) {
            this.objectUID = input.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element of StorageObjectRemoveMessage.objectUID.");
            }
        };
        StorageObjectRemoveMessage.ID = 7419;
        return StorageObjectRemoveMessage;
    })(NetworkMessage);
    Protocol.StorageObjectRemoveMessage = StorageObjectRemoveMessage;
    var StorageObjectsRemoveMessage = (function(_super) {
        __extends(StorageObjectsRemoveMessage, _super);

        function StorageObjectsRemoveMessage() {
            this.objectUIDList = [];
            _super.call(this)
        }
        StorageObjectsRemoveMessage.prototype.getMessageId = function() {
            return StorageObjectsRemoveMessage.ID;
        };
        StorageObjectsRemoveMessage.prototype.reset = function() {
            this.objectUIDList = [];
        };
        StorageObjectsRemoveMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        StorageObjectsRemoveMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        StorageObjectsRemoveMessage.prototype.serialize = function(output) {
            this.serializeAs_StorageObjectsRemoveMessage(output);
        };
        StorageObjectsRemoveMessage.prototype.deserialize = function(input) {
            this.deserializeAs_StorageObjectsRemoveMessage(input);
        };
        StorageObjectsRemoveMessage.prototype.serializeAs_StorageObjectsRemoveMessage = function(output) {
            output.writeShort(this.objectUIDList.length);
            for (var _i1 = 0; _i1 < this.objectUIDList.length; _i1++) {
                if (this.objectUIDList[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.objectUIDList[_i1] + ") on element 1 (starting at 1) of objectUIDList.");
                }
                output.writeVarInt(this.objectUIDList[_i1]);
            }
        };
        StorageObjectsRemoveMessage.prototype.deserializeAs_StorageObjectsRemoveMessage = function(input) {
            var _val1 = 0;
            var _objectUIDListLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _objectUIDListLen; _i1++) {
                _val1 = input.readVarUhInt();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of objectUIDList.");
                }
                this.objectUIDList.push(_val1);
            }
        };
        StorageObjectsRemoveMessage.ID = 3869;
        return StorageObjectsRemoveMessage;
    })(NetworkMessage);
    Protocol.StorageObjectsRemoveMessage = StorageObjectsRemoveMessage;
    var StorageObjectsUpdateMessage = (function(_super) {
        __extends(StorageObjectsUpdateMessage, _super);

        function StorageObjectsUpdateMessage() {
            this.objectList = [];
            _super.call(this)
        }
        StorageObjectsUpdateMessage.prototype.getMessageId = function() {
            return StorageObjectsUpdateMessage.ID;
        };
        StorageObjectsUpdateMessage.prototype.reset = function() {
            this.objectList = [];
        };
        StorageObjectsUpdateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        StorageObjectsUpdateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        StorageObjectsUpdateMessage.prototype.serialize = function(output) {
            this.serializeAs_StorageObjectsUpdateMessage(output);
        };
        StorageObjectsUpdateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_StorageObjectsUpdateMessage(input);
        };
        StorageObjectsUpdateMessage.prototype.serializeAs_StorageObjectsUpdateMessage = function(output) {
            output.writeShort(this.objectList.length);
            for (var _i1 = 0; _i1 < this.objectList.length; _i1++) {
                (this.objectList[_i1]).serializeAs_ObjectItem(output);
            }
        };
        StorageObjectsUpdateMessage.prototype.deserializeAs_StorageObjectsUpdateMessage = function(input) {
            var _item1 = null;
            var _objectListLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _objectListLen; _i1++) {
                _item1 = new ObjectItem();
                _item1.deserialize(input);
                this.objectList.push(_item1);
            }
        };
        StorageObjectsUpdateMessage.ID = 7292;
        return StorageObjectsUpdateMessage;
    })(NetworkMessage);
    Protocol.StorageObjectsUpdateMessage = StorageObjectsUpdateMessage;
    var StorageObjectUpdateMessage = (function(_super) {
        __extends(StorageObjectUpdateMessage, _super);

        function StorageObjectUpdateMessage() {
            this.object = new ObjectItem();
            _super.call(this)
        }
        StorageObjectUpdateMessage.prototype.getMessageId = function() {
            return StorageObjectUpdateMessage.ID;
        };
        StorageObjectUpdateMessage.prototype.reset = function() {
            this.object = new ObjectItem();
        };
        StorageObjectUpdateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        StorageObjectUpdateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        StorageObjectUpdateMessage.prototype.serialize = function(output) {
            this.serializeAs_StorageObjectUpdateMessage(output);
        };
        StorageObjectUpdateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_StorageObjectUpdateMessage(input);
        };
        StorageObjectUpdateMessage.prototype.serializeAs_StorageObjectUpdateMessage = function(output) {
            this.object.serializeAs_ObjectItem(output);
        };
        StorageObjectUpdateMessage.prototype.deserializeAs_StorageObjectUpdateMessage = function(input) {
            this.object = new ObjectItem();
            this.object.deserialize(input);
        };
        StorageObjectUpdateMessage.ID = 7486;
        return StorageObjectUpdateMessage;
    })(NetworkMessage);
    Protocol.StorageObjectUpdateMessage = StorageObjectUpdateMessage;
    var AccessoryPreviewErrorMessage = (function(_super) {
        __extends(AccessoryPreviewErrorMessage, _super);

        function AccessoryPreviewErrorMessage() {
            this.error = 0;
            _super.call(this)
        }
        AccessoryPreviewErrorMessage.prototype.getMessageId = function() {
            return AccessoryPreviewErrorMessage.ID;
        };
        AccessoryPreviewErrorMessage.prototype.reset = function() {
            this.error = 0;
        };
        AccessoryPreviewErrorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AccessoryPreviewErrorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AccessoryPreviewErrorMessage.prototype.serialize = function(output) {
            this.serializeAs_AccessoryPreviewErrorMessage(output);
        };
        AccessoryPreviewErrorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AccessoryPreviewErrorMessage(input);
        };
        AccessoryPreviewErrorMessage.prototype.serializeAs_AccessoryPreviewErrorMessage = function(output) {
            output.writeByte(this.error);
        };
        AccessoryPreviewErrorMessage.prototype.deserializeAs_AccessoryPreviewErrorMessage = function(input) {
            this.error = input.readByte();
            if (this.error < 0) {
                throw new Error("Forbidden value (" + this.error + ") on element of AccessoryPreviewErrorMessage.error.");
            }
        };
        AccessoryPreviewErrorMessage.ID = 8715;
        return AccessoryPreviewErrorMessage;
    })(NetworkMessage);
    Protocol.AccessoryPreviewErrorMessage = AccessoryPreviewErrorMessage;
    var AccessoryPreviewMessage = (function(_super) {
        __extends(AccessoryPreviewMessage, _super);

        function AccessoryPreviewMessage() {
            this.look = new EntityLook();
            _super.call(this)
        }
        AccessoryPreviewMessage.prototype.getMessageId = function() {
            return AccessoryPreviewMessage.ID;
        };
        AccessoryPreviewMessage.prototype.reset = function() {
            this.look = new EntityLook();
        };
        AccessoryPreviewMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AccessoryPreviewMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AccessoryPreviewMessage.prototype.serialize = function(output) {
            this.serializeAs_AccessoryPreviewMessage(output);
        };
        AccessoryPreviewMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AccessoryPreviewMessage(input);
        };
        AccessoryPreviewMessage.prototype.serializeAs_AccessoryPreviewMessage = function(output) {
            this.look.serializeAs_EntityLook(output);
        };
        AccessoryPreviewMessage.prototype.deserializeAs_AccessoryPreviewMessage = function(input) {
            this.look = new EntityLook();
            this.look.deserialize(input);
        };
        AccessoryPreviewMessage.ID = 1972;
        return AccessoryPreviewMessage;
    })(NetworkMessage);
    Protocol.AccessoryPreviewMessage = AccessoryPreviewMessage;
    var AccessoryPreviewRequestMessage = (function(_super) {
        __extends(AccessoryPreviewRequestMessage, _super);

        function AccessoryPreviewRequestMessage() {
            this.genericId = [];
            _super.call(this)
        }
        AccessoryPreviewRequestMessage.prototype.getMessageId = function() {
            return AccessoryPreviewRequestMessage.ID;
        };
        AccessoryPreviewRequestMessage.prototype.reset = function() {
            this.genericId = [];
        };
        AccessoryPreviewRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AccessoryPreviewRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AccessoryPreviewRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_AccessoryPreviewRequestMessage(output);
        };
        AccessoryPreviewRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AccessoryPreviewRequestMessage(input);
        };
        AccessoryPreviewRequestMessage.prototype.serializeAs_AccessoryPreviewRequestMessage = function(output) {
            output.writeShort(this.genericId.length);
            for (var _i1 = 0; _i1 < this.genericId.length; _i1++) {
                if (this.genericId[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.genericId[_i1] + ") on element 1 (starting at 1) of genericId.");
                }
                output.writeVarShort(this.genericId[_i1]);
            }
        };
        AccessoryPreviewRequestMessage.prototype.deserializeAs_AccessoryPreviewRequestMessage = function(input) {
            var _val1 = 0;
            var _genericIdLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _genericIdLen; _i1++) {
                _val1 = input.readVarUhShort();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of genericId.");
                }
                this.genericId.push(_val1);
            }
        };
        AccessoryPreviewRequestMessage.ID = 4736;
        return AccessoryPreviewRequestMessage;
    })(NetworkMessage);
    Protocol.AccessoryPreviewRequestMessage = AccessoryPreviewRequestMessage;
    var PopupWarningMessage = (function(_super) {
        __extends(PopupWarningMessage, _super);

        function PopupWarningMessage() {
            this.lockDuration = 0;
            this.author = "";
            this.content = "";
            _super.call(this)
        }
        PopupWarningMessage.prototype.getMessageId = function() {
            return PopupWarningMessage.ID;
        };
        PopupWarningMessage.prototype.reset = function() {
            this.lockDuration = 0;
            this.author = "";
            this.content = "";
        };
        PopupWarningMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PopupWarningMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PopupWarningMessage.prototype.serialize = function(output) {
            this.serializeAs_PopupWarningMessage(output);
        };
        PopupWarningMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PopupWarningMessage(input);
        };
        PopupWarningMessage.prototype.serializeAs_PopupWarningMessage = function(output) {
            if (this.lockDuration < 0 || this.lockDuration > 255) {
                throw new Error("Forbidden value (" + this.lockDuration + ") on element lockDuration.");
            }
            output.writeByte(this.lockDuration);
            output.writeUTF(this.author);
            output.writeUTF(this.content);
        };
        PopupWarningMessage.prototype.deserializeAs_PopupWarningMessage = function(input) {
            this.lockDuration = input.readUnsignedByte();
            if (this.lockDuration < 0 || this.lockDuration > 255) {
                throw new Error("Forbidden value (" + this.lockDuration + ") on element of PopupWarningMessage.lockDuration.");
            }
            this.author = input.readUTF();
            this.content = input.readUTF();
        };
        PopupWarningMessage.ID = 4006;
        return PopupWarningMessage;
    })(NetworkMessage);
    Protocol.PopupWarningMessage = PopupWarningMessage;
    var AreaFightModificatorUpdateMessage = (function(_super) {
        __extends(AreaFightModificatorUpdateMessage, _super);

        function AreaFightModificatorUpdateMessage() {
            this.spellPairId = 0;
            _super.call(this)
        }
        AreaFightModificatorUpdateMessage.prototype.getMessageId = function() {
            return AreaFightModificatorUpdateMessage.ID;
        };
        AreaFightModificatorUpdateMessage.prototype.reset = function() {
            this.spellPairId = 0;
        };
        AreaFightModificatorUpdateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AreaFightModificatorUpdateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AreaFightModificatorUpdateMessage.prototype.serialize = function(output) {
            this.serializeAs_AreaFightModificatorUpdateMessage(output);
        };
        AreaFightModificatorUpdateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AreaFightModificatorUpdateMessage(input);
        };
        AreaFightModificatorUpdateMessage.prototype.serializeAs_AreaFightModificatorUpdateMessage = function(output) {
            output.writeInt(this.spellPairId);
        };
        AreaFightModificatorUpdateMessage.prototype.deserializeAs_AreaFightModificatorUpdateMessage = function(input) {
            this.spellPairId = input.readInt();
        };
        AreaFightModificatorUpdateMessage.ID = 4867;
        return AreaFightModificatorUpdateMessage;
    })(NetworkMessage);
    Protocol.AreaFightModificatorUpdateMessage = AreaFightModificatorUpdateMessage;
    var IconPresetSaveRequestMessage = (function(_super) {
        __extends(IconPresetSaveRequestMessage, _super);

        function IconPresetSaveRequestMessage() {
            this.presetId = 0;
            this.symbolId = 0;
            this.updateData = false;
            _super.call(this)
        }
        IconPresetSaveRequestMessage.prototype.getMessageId = function() {
            return IconPresetSaveRequestMessage.ID;
        };
        IconPresetSaveRequestMessage.prototype.reset = function() {
            this.presetId = 0;
            this.symbolId = 0;
            this.updateData = false;
        };
        IconPresetSaveRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        IconPresetSaveRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        IconPresetSaveRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_IconPresetSaveRequestMessage(output);
        };
        IconPresetSaveRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_IconPresetSaveRequestMessage(input);
        };
        IconPresetSaveRequestMessage.prototype.serializeAs_IconPresetSaveRequestMessage = function(output) {
            output.writeShort(this.presetId);
            if (this.symbolId < 0) {
                throw new Error("Forbidden value (" + this.symbolId + ") on element symbolId.");
            }
            output.writeByte(this.symbolId);
            output.writeBoolean(this.updateData);
        };
        IconPresetSaveRequestMessage.prototype.deserializeAs_IconPresetSaveRequestMessage = function(input) {
            this.presetId = input.readShort();
            this.symbolId = input.readByte();
            if (this.symbolId < 0) {
                throw new Error("Forbidden value (" + this.symbolId + ") on element of IconPresetSaveRequestMessage.symbolId.");
            }
            this.updateData = input.readBoolean();
        };
        IconPresetSaveRequestMessage.ID = 5015;
        return IconPresetSaveRequestMessage;
    })(NetworkMessage);
    Protocol.IconPresetSaveRequestMessage = IconPresetSaveRequestMessage;
    var IconNamedPresetSaveRequestMessage = (function(_super) {
        __extends(IconNamedPresetSaveRequestMessage, _super);

        function IconNamedPresetSaveRequestMessage() {
            this.name = "";
            this.type = 0;
            _super.call(this)
        }
        IconNamedPresetSaveRequestMessage.prototype.getMessageId = function() {
            return IconNamedPresetSaveRequestMessage.ID;
        };
        IconNamedPresetSaveRequestMessage.prototype.reset = function() {
            this.name = "";
            this.type = 0;
        };
        IconNamedPresetSaveRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        IconNamedPresetSaveRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        IconNamedPresetSaveRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_IconNamedPresetSaveRequestMessage(output);
        };
        IconNamedPresetSaveRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_IconNamedPresetSaveRequestMessage(input);
        };
        IconNamedPresetSaveRequestMessage.prototype.serializeAs_IconNamedPresetSaveRequestMessage = function(output) {
            _super.prototype.serializeAs_IconPresetSaveRequestMessage.call(this, output);
            output.writeUTF(this.name);
            output.writeByte(this.type);
        };
        IconNamedPresetSaveRequestMessage.prototype.deserializeAs_IconNamedPresetSaveRequestMessage = function(input) {
            _super.prototype.deserializeAs_IconPresetSaveRequestMessage.call(this, input);
            this.name = input.readUTF();
            this.type = input.readByte();
            if (this.type < 0) {
                throw new Error("Forbidden value (" + this.type + ") on element of IconNamedPresetSaveRequestMessage.type.");
            }
        };
        IconNamedPresetSaveRequestMessage.ID = 9163;
        return IconNamedPresetSaveRequestMessage;
    })(IconPresetSaveRequestMessage);
    Protocol.IconNamedPresetSaveRequestMessage = IconNamedPresetSaveRequestMessage;
    var IdolsPresetSaveRequestMessage = (function(_super) {
        __extends(IdolsPresetSaveRequestMessage, _super);

        function IdolsPresetSaveRequestMessage() {

            _super.call(this)
        }
        IdolsPresetSaveRequestMessage.prototype.getMessageId = function() {
            return IdolsPresetSaveRequestMessage.ID;
        };
        IdolsPresetSaveRequestMessage.prototype.reset = function() {

        };
        IdolsPresetSaveRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        IdolsPresetSaveRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        IdolsPresetSaveRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_IdolsPresetSaveRequestMessage(output);
        };
        IdolsPresetSaveRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_IdolsPresetSaveRequestMessage(input);
        };
        IdolsPresetSaveRequestMessage.prototype.serializeAs_IdolsPresetSaveRequestMessage = function(output) {
            _super.prototype.serializeAs_IconPresetSaveRequestMessage.call(this, output);
        };
        IdolsPresetSaveRequestMessage.prototype.deserializeAs_IdolsPresetSaveRequestMessage = function(input) {
            _super.prototype.deserializeAs_IconPresetSaveRequestMessage.call(this, input);
        };
        IdolsPresetSaveRequestMessage.ID = 5636;
        return IdolsPresetSaveRequestMessage;
    })(IconPresetSaveRequestMessage);
    Protocol.IdolsPresetSaveRequestMessage = IdolsPresetSaveRequestMessage;
    var InvalidPresetsMessage = (function(_super) {
        __extends(InvalidPresetsMessage, _super);

        function InvalidPresetsMessage() {
            this.presetIds = [];
            _super.call(this)
        }
        InvalidPresetsMessage.prototype.getMessageId = function() {
            return InvalidPresetsMessage.ID;
        };
        InvalidPresetsMessage.prototype.reset = function() {
            this.presetIds = [];
        };
        InvalidPresetsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        InvalidPresetsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        InvalidPresetsMessage.prototype.serialize = function(output) {
            this.serializeAs_InvalidPresetsMessage(output);
        };
        InvalidPresetsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_InvalidPresetsMessage(input);
        };
        InvalidPresetsMessage.prototype.serializeAs_InvalidPresetsMessage = function(output) {
            output.writeShort(this.presetIds.length);
            for (var _i1 = 0; _i1 < this.presetIds.length; _i1++) {
                if (this.presetIds[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.presetIds[_i1] + ") on element 1 (starting at 1) of presetIds.");
                }
                output.writeShort(this.presetIds[_i1]);
            }
        };
        InvalidPresetsMessage.prototype.deserializeAs_InvalidPresetsMessage = function(input) {
            var _val1 = 0;
            var _presetIdsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _presetIdsLen; _i1++) {
                _val1 = input.readShort();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of presetIds.");
                }
                this.presetIds.push(_val1);
            }
        };
        InvalidPresetsMessage.ID = 4221;
        return InvalidPresetsMessage;
    })(NetworkMessage);
    Protocol.InvalidPresetsMessage = InvalidPresetsMessage;
    var ItemForPresetUpdateMessage = (function(_super) {
        __extends(ItemForPresetUpdateMessage, _super);

        function ItemForPresetUpdateMessage() {
            this.presetId = 0;
            this.presetItem = new ItemForPreset();
            _super.call(this)
        }
        ItemForPresetUpdateMessage.prototype.getMessageId = function() {
            return ItemForPresetUpdateMessage.ID;
        };
        ItemForPresetUpdateMessage.prototype.reset = function() {
            this.presetId = 0;
            this.presetItem = new ItemForPreset();
        };
        ItemForPresetUpdateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ItemForPresetUpdateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ItemForPresetUpdateMessage.prototype.serialize = function(output) {
            this.serializeAs_ItemForPresetUpdateMessage(output);
        };
        ItemForPresetUpdateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ItemForPresetUpdateMessage(input);
        };
        ItemForPresetUpdateMessage.prototype.serializeAs_ItemForPresetUpdateMessage = function(output) {
            output.writeShort(this.presetId);
            this.presetItem.serializeAs_ItemForPreset(output);
        };
        ItemForPresetUpdateMessage.prototype.deserializeAs_ItemForPresetUpdateMessage = function(input) {
            this.presetId = input.readShort();
            this.presetItem = new ItemForPreset();
            this.presetItem.deserialize(input);
        };
        ItemForPresetUpdateMessage.ID = 6150;
        return ItemForPresetUpdateMessage;
    })(NetworkMessage);
    Protocol.ItemForPresetUpdateMessage = ItemForPresetUpdateMessage;
    var PresetDeleteRequestMessage = (function(_super) {
        __extends(PresetDeleteRequestMessage, _super);

        function PresetDeleteRequestMessage() {
            this.presetId = 0;
            _super.call(this)
        }
        PresetDeleteRequestMessage.prototype.getMessageId = function() {
            return PresetDeleteRequestMessage.ID;
        };
        PresetDeleteRequestMessage.prototype.reset = function() {
            this.presetId = 0;
        };
        PresetDeleteRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PresetDeleteRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PresetDeleteRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_PresetDeleteRequestMessage(output);
        };
        PresetDeleteRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PresetDeleteRequestMessage(input);
        };
        PresetDeleteRequestMessage.prototype.serializeAs_PresetDeleteRequestMessage = function(output) {
            output.writeShort(this.presetId);
        };
        PresetDeleteRequestMessage.prototype.deserializeAs_PresetDeleteRequestMessage = function(input) {
            this.presetId = input.readShort();
        };
        PresetDeleteRequestMessage.ID = 8718;
        return PresetDeleteRequestMessage;
    })(NetworkMessage);
    Protocol.PresetDeleteRequestMessage = PresetDeleteRequestMessage;
    var PresetDeleteResultMessage = (function(_super) {
        __extends(PresetDeleteResultMessage, _super);

        function PresetDeleteResultMessage() {
            this.presetId = 0;
            this.code = 2;
            _super.call(this)
        }
        PresetDeleteResultMessage.prototype.getMessageId = function() {
            return PresetDeleteResultMessage.ID;
        };
        PresetDeleteResultMessage.prototype.reset = function() {
            this.presetId = 0;
            this.code = 2;
        };
        PresetDeleteResultMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PresetDeleteResultMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PresetDeleteResultMessage.prototype.serialize = function(output) {
            this.serializeAs_PresetDeleteResultMessage(output);
        };
        PresetDeleteResultMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PresetDeleteResultMessage(input);
        };
        PresetDeleteResultMessage.prototype.serializeAs_PresetDeleteResultMessage = function(output) {
            output.writeShort(this.presetId);
            output.writeByte(this.code);
        };
        PresetDeleteResultMessage.prototype.deserializeAs_PresetDeleteResultMessage = function(input) {
            this.presetId = input.readShort();
            this.code = input.readByte();
            if (this.code < 0) {
                throw new Error("Forbidden value (" + this.code + ") on element of PresetDeleteResultMessage.code.");
            }
        };
        PresetDeleteResultMessage.ID = 2952;
        return PresetDeleteResultMessage;
    })(NetworkMessage);
    Protocol.PresetDeleteResultMessage = PresetDeleteResultMessage;
    var PresetSavedMessage = (function(_super) {
        __extends(PresetSavedMessage, _super);

        function PresetSavedMessage() {
            this.presetId = 0;
            this.preset = new Preset();
            _super.call(this)
        }
        PresetSavedMessage.prototype.getMessageId = function() {
            return PresetSavedMessage.ID;
        };
        PresetSavedMessage.prototype.reset = function() {
            this.presetId = 0;
            this.preset = new Preset();
        };
        PresetSavedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PresetSavedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PresetSavedMessage.prototype.serialize = function(output) {
            this.serializeAs_PresetSavedMessage(output);
        };
        PresetSavedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PresetSavedMessage(input);
        };
        PresetSavedMessage.prototype.serializeAs_PresetSavedMessage = function(output) {
            output.writeShort(this.presetId);
            output.writeShort(this.preset.getTypeId());
            this.preset.serialize(output);
        };
        PresetSavedMessage.prototype.deserializeAs_PresetSavedMessage = function(input) {
            this.presetId = input.readShort();
            var _id2 = input.readUnsignedShort();
            this.preset = ProtocolTypeManager.getInstance(Preset, _id2);
            this.preset.deserialize(input);
        };
        PresetSavedMessage.ID = 2420;
        return PresetSavedMessage;
    })(NetworkMessage);
    Protocol.PresetSavedMessage = PresetSavedMessage;
    var PresetSaveErrorMessage = (function(_super) {
        __extends(PresetSaveErrorMessage, _super);

        function PresetSaveErrorMessage() {
            this.presetId = 0;
            this.code = 2;
            _super.call(this)
        }
        PresetSaveErrorMessage.prototype.getMessageId = function() {
            return PresetSaveErrorMessage.ID;
        };
        PresetSaveErrorMessage.prototype.reset = function() {
            this.presetId = 0;
            this.code = 2;
        };
        PresetSaveErrorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PresetSaveErrorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PresetSaveErrorMessage.prototype.serialize = function(output) {
            this.serializeAs_PresetSaveErrorMessage(output);
        };
        PresetSaveErrorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PresetSaveErrorMessage(input);
        };
        PresetSaveErrorMessage.prototype.serializeAs_PresetSaveErrorMessage = function(output) {
            output.writeShort(this.presetId);
            output.writeByte(this.code);
        };
        PresetSaveErrorMessage.prototype.deserializeAs_PresetSaveErrorMessage = function(input) {
            this.presetId = input.readShort();
            this.code = input.readByte();
            if (this.code < 0) {
                throw new Error("Forbidden value (" + this.code + ") on element of PresetSaveErrorMessage.code.");
            }
        };
        PresetSaveErrorMessage.ID = 810;
        return PresetSaveErrorMessage;
    })(NetworkMessage);
    Protocol.PresetSaveErrorMessage = PresetSaveErrorMessage;
    var PresetsMessage = (function(_super) {
        __extends(PresetsMessage, _super);

        function PresetsMessage() {
            this.presets = [];
            _super.call(this)
        }
        PresetsMessage.prototype.getMessageId = function() {
            return PresetsMessage.ID;
        };
        PresetsMessage.prototype.reset = function() {
            this.presets = [];
        };
        PresetsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PresetsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PresetsMessage.prototype.serialize = function(output) {
            this.serializeAs_PresetsMessage(output);
        };
        PresetsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PresetsMessage(input);
        };
        PresetsMessage.prototype.serializeAs_PresetsMessage = function(output) {
            output.writeShort(this.presets.length);
            for (var _i1 = 0; _i1 < this.presets.length; _i1++) {
                output.writeShort((this.presets[_i1]).getTypeId());
                (this.presets[_i1]).serialize(output);
            }
        };
        PresetsMessage.prototype.deserializeAs_PresetsMessage = function(input) {
            var _id1 = 0;
            var _item1 = null;
            var _presetsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _presetsLen; _i1++) {
                _id1 = input.readUnsignedShort();
                _item1 = ProtocolTypeManager.getInstance(Preset, _id1);
                _item1.deserialize(input);
                this.presets.push(_item1);
            }
        };
        PresetsMessage.ID = 3014;
        return PresetsMessage;
    })(NetworkMessage);
    Protocol.PresetsMessage = PresetsMessage;
    var PresetUseRequestMessage = (function(_super) {
        __extends(PresetUseRequestMessage, _super);

        function PresetUseRequestMessage() {
            this.presetId = 0;
            _super.call(this)
        }
        PresetUseRequestMessage.prototype.getMessageId = function() {
            return PresetUseRequestMessage.ID;
        };
        PresetUseRequestMessage.prototype.reset = function() {
            this.presetId = 0;
        };
        PresetUseRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PresetUseRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PresetUseRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_PresetUseRequestMessage(output);
        };
        PresetUseRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PresetUseRequestMessage(input);
        };
        PresetUseRequestMessage.prototype.serializeAs_PresetUseRequestMessage = function(output) {
            output.writeShort(this.presetId);
        };
        PresetUseRequestMessage.prototype.deserializeAs_PresetUseRequestMessage = function(input) {
            this.presetId = input.readShort();
        };
        PresetUseRequestMessage.ID = 6757;
        return PresetUseRequestMessage;
    })(NetworkMessage);
    Protocol.PresetUseRequestMessage = PresetUseRequestMessage;
    var PresetUseResultMessage = (function(_super) {
        __extends(PresetUseResultMessage, _super);

        function PresetUseResultMessage() {
            this.presetId = 0;
            this.code = 3;
            _super.call(this)
        }
        PresetUseResultMessage.prototype.getMessageId = function() {
            return PresetUseResultMessage.ID;
        };
        PresetUseResultMessage.prototype.reset = function() {
            this.presetId = 0;
            this.code = 3;
        };
        PresetUseResultMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PresetUseResultMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PresetUseResultMessage.prototype.serialize = function(output) {
            this.serializeAs_PresetUseResultMessage(output);
        };
        PresetUseResultMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PresetUseResultMessage(input);
        };
        PresetUseResultMessage.prototype.serializeAs_PresetUseResultMessage = function(output) {
            output.writeShort(this.presetId);
            output.writeByte(this.code);
        };
        PresetUseResultMessage.prototype.deserializeAs_PresetUseResultMessage = function(input) {
            this.presetId = input.readShort();
            this.code = input.readByte();
            if (this.code < 0) {
                throw new Error("Forbidden value (" + this.code + ") on element of PresetUseResultMessage.code.");
            }
        };
        PresetUseResultMessage.ID = 2621;
        return PresetUseResultMessage;
    })(NetworkMessage);
    Protocol.PresetUseResultMessage = PresetUseResultMessage;
    var PresetUseResultWithMissingIdsMessage = (function(_super) {
        __extends(PresetUseResultWithMissingIdsMessage, _super);

        function PresetUseResultWithMissingIdsMessage() {
            this.missingIds = [];
            _super.call(this)
        }
        PresetUseResultWithMissingIdsMessage.prototype.getMessageId = function() {
            return PresetUseResultWithMissingIdsMessage.ID;
        };
        PresetUseResultWithMissingIdsMessage.prototype.reset = function() {
            this.missingIds = [];
        };
        PresetUseResultWithMissingIdsMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PresetUseResultWithMissingIdsMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PresetUseResultWithMissingIdsMessage.prototype.serialize = function(output) {
            this.serializeAs_PresetUseResultWithMissingIdsMessage(output);
        };
        PresetUseResultWithMissingIdsMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PresetUseResultWithMissingIdsMessage(input);
        };
        PresetUseResultWithMissingIdsMessage.prototype.serializeAs_PresetUseResultWithMissingIdsMessage = function(output) {
            _super.prototype.serializeAs_PresetUseResultMessage.call(this, output);
            output.writeShort(this.missingIds.length);
            for (var _i1 = 0; _i1 < this.missingIds.length; _i1++) {
                if (this.missingIds[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.missingIds[_i1] + ") on element 1 (starting at 1) of missingIds.");
                }
                output.writeVarShort(this.missingIds[_i1]);
            }
        };
        PresetUseResultWithMissingIdsMessage.prototype.deserializeAs_PresetUseResultWithMissingIdsMessage = function(input) {
            var _val1 = 0;
            _super.prototype.deserializeAs_PresetUseResultMessage.call(this, input);
            var _missingIdsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _missingIdsLen; _i1++) {
                _val1 = input.readVarUhShort();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of missingIds.");
                }
                this.missingIds.push(_val1);
            }
        };
        PresetUseResultWithMissingIdsMessage.ID = 2959;
        return PresetUseResultWithMissingIdsMessage;
    })(PresetUseResultMessage);
    Protocol.PresetUseResultWithMissingIdsMessage = PresetUseResultWithMissingIdsMessage;
    var PrismAttackRequestMessage = (function(_super) {
        __extends(PrismAttackRequestMessage, _super);

        function PrismAttackRequestMessage() {

            _super.call(this)
        }
        PrismAttackRequestMessage.prototype.getMessageId = function() {
            return PrismAttackRequestMessage.ID;
        };
        PrismAttackRequestMessage.prototype.reset = function() {

        };
        PrismAttackRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PrismAttackRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PrismAttackRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_PrismAttackRequestMessage(output);
        };
        PrismAttackRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PrismAttackRequestMessage(input);
        };
        PrismAttackRequestMessage.prototype.serializeAs_PrismAttackRequestMessage = function(output) {

        };
        PrismAttackRequestMessage.prototype.deserializeAs_PrismAttackRequestMessage = function(input) {

        };
        PrismAttackRequestMessage.ID = 972;
        return PrismAttackRequestMessage;
    })(NetworkMessage);
    Protocol.PrismAttackRequestMessage = PrismAttackRequestMessage;
    var PrismFightAddedMessage = (function(_super) {
        __extends(PrismFightAddedMessage, _super);

        function PrismFightAddedMessage() {
            this.fight = new PrismFightersInformation();
            _super.call(this)
        }
        PrismFightAddedMessage.prototype.getMessageId = function() {
            return PrismFightAddedMessage.ID;
        };
        PrismFightAddedMessage.prototype.reset = function() {
            this.fight = new PrismFightersInformation();
        };
        PrismFightAddedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PrismFightAddedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PrismFightAddedMessage.prototype.serialize = function(output) {
            this.serializeAs_PrismFightAddedMessage(output);
        };
        PrismFightAddedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PrismFightAddedMessage(input);
        };
        PrismFightAddedMessage.prototype.serializeAs_PrismFightAddedMessage = function(output) {
            this.fight.serializeAs_PrismFightersInformation(output);
        };
        PrismFightAddedMessage.prototype.deserializeAs_PrismFightAddedMessage = function(input) {
            this.fight = new PrismFightersInformation();
            this.fight.deserialize(input);
        };
        PrismFightAddedMessage.ID = 5640;
        return PrismFightAddedMessage;
    })(NetworkMessage);
    Protocol.PrismFightAddedMessage = PrismFightAddedMessage;
    var PrismFightAttackerAddMessage = (function(_super) {
        __extends(PrismFightAttackerAddMessage, _super);

        function PrismFightAttackerAddMessage() {
            this.subAreaId = 0;
            this.fightId = 0;
            this.attacker = new CharacterMinimalPlusLookInformations();
            _super.call(this)
        }
        PrismFightAttackerAddMessage.prototype.getMessageId = function() {
            return PrismFightAttackerAddMessage.ID;
        };
        PrismFightAttackerAddMessage.prototype.reset = function() {
            this.subAreaId = 0;
            this.fightId = 0;
            this.attacker = new CharacterMinimalPlusLookInformations();
        };
        PrismFightAttackerAddMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PrismFightAttackerAddMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PrismFightAttackerAddMessage.prototype.serialize = function(output) {
            this.serializeAs_PrismFightAttackerAddMessage(output);
        };
        PrismFightAttackerAddMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PrismFightAttackerAddMessage(input);
        };
        PrismFightAttackerAddMessage.prototype.serializeAs_PrismFightAttackerAddMessage = function(output) {
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeVarShort(this.fightId);
            output.writeShort(this.attacker.getTypeId());
            this.attacker.serialize(output);
        };
        PrismFightAttackerAddMessage.prototype.deserializeAs_PrismFightAttackerAddMessage = function(input) {
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of PrismFightAttackerAddMessage.subAreaId.");
            }
            this.fightId = input.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of PrismFightAttackerAddMessage.fightId.");
            }
            var _id3 = input.readUnsignedShort();
            this.attacker = ProtocolTypeManager.getInstance(CharacterMinimalPlusLookInformations, _id3);
            this.attacker.deserialize(input);
        };
        PrismFightAttackerAddMessage.ID = 1719;
        return PrismFightAttackerAddMessage;
    })(NetworkMessage);
    Protocol.PrismFightAttackerAddMessage = PrismFightAttackerAddMessage;
    var PrismFightAttackerRemoveMessage = (function(_super) {
        __extends(PrismFightAttackerRemoveMessage, _super);

        function PrismFightAttackerRemoveMessage() {
            this.subAreaId = 0;
            this.fightId = 0;
            this.fighterToRemoveId = 0;
            _super.call(this)
        }
        PrismFightAttackerRemoveMessage.prototype.getMessageId = function() {
            return PrismFightAttackerRemoveMessage.ID;
        };
        PrismFightAttackerRemoveMessage.prototype.reset = function() {
            this.subAreaId = 0;
            this.fightId = 0;
            this.fighterToRemoveId = 0;
        };
        PrismFightAttackerRemoveMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PrismFightAttackerRemoveMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PrismFightAttackerRemoveMessage.prototype.serialize = function(output) {
            this.serializeAs_PrismFightAttackerRemoveMessage(output);
        };
        PrismFightAttackerRemoveMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PrismFightAttackerRemoveMessage(input);
        };
        PrismFightAttackerRemoveMessage.prototype.serializeAs_PrismFightAttackerRemoveMessage = function(output) {
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeVarShort(this.fightId);
            if (this.fighterToRemoveId < 0 || this.fighterToRemoveId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.fighterToRemoveId + ") on element fighterToRemoveId.");
            }
            output.writeVarLong(this.fighterToRemoveId);
        };
        PrismFightAttackerRemoveMessage.prototype.deserializeAs_PrismFightAttackerRemoveMessage = function(input) {
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of PrismFightAttackerRemoveMessage.subAreaId.");
            }
            this.fightId = input.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of PrismFightAttackerRemoveMessage.fightId.");
            }
            this.fighterToRemoveId = input.readVarUhLong();
            if (this.fighterToRemoveId < 0 || this.fighterToRemoveId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.fighterToRemoveId + ") on element of PrismFightAttackerRemoveMessage.fighterToRemoveId.");
            }
        };
        PrismFightAttackerRemoveMessage.ID = 1307;
        return PrismFightAttackerRemoveMessage;
    })(NetworkMessage);
    Protocol.PrismFightAttackerRemoveMessage = PrismFightAttackerRemoveMessage;
    var PrismFightDefenderAddMessage = (function(_super) {
        __extends(PrismFightDefenderAddMessage, _super);

        function PrismFightDefenderAddMessage() {
            this.subAreaId = 0;
            this.fightId = 0;
            this.defender = new CharacterMinimalPlusLookInformations();
            _super.call(this)
        }
        PrismFightDefenderAddMessage.prototype.getMessageId = function() {
            return PrismFightDefenderAddMessage.ID;
        };
        PrismFightDefenderAddMessage.prototype.reset = function() {
            this.subAreaId = 0;
            this.fightId = 0;
            this.defender = new CharacterMinimalPlusLookInformations();
        };
        PrismFightDefenderAddMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PrismFightDefenderAddMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PrismFightDefenderAddMessage.prototype.serialize = function(output) {
            this.serializeAs_PrismFightDefenderAddMessage(output);
        };
        PrismFightDefenderAddMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PrismFightDefenderAddMessage(input);
        };
        PrismFightDefenderAddMessage.prototype.serializeAs_PrismFightDefenderAddMessage = function(output) {
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeVarShort(this.fightId);
            output.writeShort(this.defender.getTypeId());
            this.defender.serialize(output);
        };
        PrismFightDefenderAddMessage.prototype.deserializeAs_PrismFightDefenderAddMessage = function(input) {
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of PrismFightDefenderAddMessage.subAreaId.");
            }
            this.fightId = input.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of PrismFightDefenderAddMessage.fightId.");
            }
            var _id3 = input.readUnsignedShort();
            this.defender = ProtocolTypeManager.getInstance(CharacterMinimalPlusLookInformations, _id3);
            this.defender.deserialize(input);
        };
        PrismFightDefenderAddMessage.ID = 873;
        return PrismFightDefenderAddMessage;
    })(NetworkMessage);
    Protocol.PrismFightDefenderAddMessage = PrismFightDefenderAddMessage;
    var PrismFightDefenderLeaveMessage = (function(_super) {
        __extends(PrismFightDefenderLeaveMessage, _super);

        function PrismFightDefenderLeaveMessage() {
            this.subAreaId = 0;
            this.fightId = 0;
            this.fighterToRemoveId = 0;
            _super.call(this)
        }
        PrismFightDefenderLeaveMessage.prototype.getMessageId = function() {
            return PrismFightDefenderLeaveMessage.ID;
        };
        PrismFightDefenderLeaveMessage.prototype.reset = function() {
            this.subAreaId = 0;
            this.fightId = 0;
            this.fighterToRemoveId = 0;
        };
        PrismFightDefenderLeaveMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PrismFightDefenderLeaveMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PrismFightDefenderLeaveMessage.prototype.serialize = function(output) {
            this.serializeAs_PrismFightDefenderLeaveMessage(output);
        };
        PrismFightDefenderLeaveMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PrismFightDefenderLeaveMessage(input);
        };
        PrismFightDefenderLeaveMessage.prototype.serializeAs_PrismFightDefenderLeaveMessage = function(output) {
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeVarShort(this.fightId);
            if (this.fighterToRemoveId < 0 || this.fighterToRemoveId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.fighterToRemoveId + ") on element fighterToRemoveId.");
            }
            output.writeVarLong(this.fighterToRemoveId);
        };
        PrismFightDefenderLeaveMessage.prototype.deserializeAs_PrismFightDefenderLeaveMessage = function(input) {
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of PrismFightDefenderLeaveMessage.subAreaId.");
            }
            this.fightId = input.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of PrismFightDefenderLeaveMessage.fightId.");
            }
            this.fighterToRemoveId = input.readVarUhLong();
            if (this.fighterToRemoveId < 0 || this.fighterToRemoveId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.fighterToRemoveId + ") on element of PrismFightDefenderLeaveMessage.fighterToRemoveId.");
            }
        };
        PrismFightDefenderLeaveMessage.ID = 3077;
        return PrismFightDefenderLeaveMessage;
    })(NetworkMessage);
    Protocol.PrismFightDefenderLeaveMessage = PrismFightDefenderLeaveMessage;
    var PrismFightJoinLeaveRequestMessage = (function(_super) {
        __extends(PrismFightJoinLeaveRequestMessage, _super);

        function PrismFightJoinLeaveRequestMessage() {
            this.subAreaId = 0;
            this.join = false;
            _super.call(this)
        }
        PrismFightJoinLeaveRequestMessage.prototype.getMessageId = function() {
            return PrismFightJoinLeaveRequestMessage.ID;
        };
        PrismFightJoinLeaveRequestMessage.prototype.reset = function() {
            this.subAreaId = 0;
            this.join = false;
        };
        PrismFightJoinLeaveRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PrismFightJoinLeaveRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PrismFightJoinLeaveRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_PrismFightJoinLeaveRequestMessage(output);
        };
        PrismFightJoinLeaveRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PrismFightJoinLeaveRequestMessage(input);
        };
        PrismFightJoinLeaveRequestMessage.prototype.serializeAs_PrismFightJoinLeaveRequestMessage = function(output) {
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
            output.writeBoolean(this.join);
        };
        PrismFightJoinLeaveRequestMessage.prototype.deserializeAs_PrismFightJoinLeaveRequestMessage = function(input) {
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of PrismFightJoinLeaveRequestMessage.subAreaId.");
            }
            this.join = input.readBoolean();
        };
        PrismFightJoinLeaveRequestMessage.ID = 6578;
        return PrismFightJoinLeaveRequestMessage;
    })(NetworkMessage);
    Protocol.PrismFightJoinLeaveRequestMessage = PrismFightJoinLeaveRequestMessage;
    var PrismFightRemovedMessage = (function(_super) {
        __extends(PrismFightRemovedMessage, _super);

        function PrismFightRemovedMessage() {
            this.subAreaId = 0;
            _super.call(this)
        }
        PrismFightRemovedMessage.prototype.getMessageId = function() {
            return PrismFightRemovedMessage.ID;
        };
        PrismFightRemovedMessage.prototype.reset = function() {
            this.subAreaId = 0;
        };
        PrismFightRemovedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PrismFightRemovedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PrismFightRemovedMessage.prototype.serialize = function(output) {
            this.serializeAs_PrismFightRemovedMessage(output);
        };
        PrismFightRemovedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PrismFightRemovedMessage(input);
        };
        PrismFightRemovedMessage.prototype.serializeAs_PrismFightRemovedMessage = function(output) {
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
        };
        PrismFightRemovedMessage.prototype.deserializeAs_PrismFightRemovedMessage = function(input) {
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of PrismFightRemovedMessage.subAreaId.");
            }
        };
        PrismFightRemovedMessage.ID = 6447;
        return PrismFightRemovedMessage;
    })(NetworkMessage);
    Protocol.PrismFightRemovedMessage = PrismFightRemovedMessage;
    var PrismFightStateUpdateMessage = (function(_super) {
        __extends(PrismFightStateUpdateMessage, _super);

        function PrismFightStateUpdateMessage() {
            this.state = 0;
            _super.call(this)
        }
        PrismFightStateUpdateMessage.prototype.getMessageId = function() {
            return PrismFightStateUpdateMessage.ID;
        };
        PrismFightStateUpdateMessage.prototype.reset = function() {
            this.state = 0;
        };
        PrismFightStateUpdateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PrismFightStateUpdateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PrismFightStateUpdateMessage.prototype.serialize = function(output) {
            this.serializeAs_PrismFightStateUpdateMessage(output);
        };
        PrismFightStateUpdateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PrismFightStateUpdateMessage(input);
        };
        PrismFightStateUpdateMessage.prototype.serializeAs_PrismFightStateUpdateMessage = function(output) {
            if (this.state < 0) {
                throw new Error("Forbidden value (" + this.state + ") on element state.");
            }
            output.writeByte(this.state);
        };
        PrismFightStateUpdateMessage.prototype.deserializeAs_PrismFightStateUpdateMessage = function(input) {
            this.state = input.readByte();
            if (this.state < 0) {
                throw new Error("Forbidden value (" + this.state + ") on element of PrismFightStateUpdateMessage.state.");
            }
        };
        PrismFightStateUpdateMessage.ID = 2395;
        return PrismFightStateUpdateMessage;
    })(NetworkMessage);
    Protocol.PrismFightStateUpdateMessage = PrismFightStateUpdateMessage;
    var PrismFightSwapRequestMessage = (function(_super) {
        __extends(PrismFightSwapRequestMessage, _super);

        function PrismFightSwapRequestMessage() {
            this.subAreaId = 0;
            this.targetId = 0;
            _super.call(this)
        }
        PrismFightSwapRequestMessage.prototype.getMessageId = function() {
            return PrismFightSwapRequestMessage.ID;
        };
        PrismFightSwapRequestMessage.prototype.reset = function() {
            this.subAreaId = 0;
            this.targetId = 0;
        };
        PrismFightSwapRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PrismFightSwapRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PrismFightSwapRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_PrismFightSwapRequestMessage(output);
        };
        PrismFightSwapRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PrismFightSwapRequestMessage(input);
        };
        PrismFightSwapRequestMessage.prototype.serializeAs_PrismFightSwapRequestMessage = function(output) {
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
            if (this.targetId < 0 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeVarLong(this.targetId);
        };
        PrismFightSwapRequestMessage.prototype.deserializeAs_PrismFightSwapRequestMessage = function(input) {
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of PrismFightSwapRequestMessage.subAreaId.");
            }
            this.targetId = input.readVarUhLong();
            if (this.targetId < 0 || this.targetId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of PrismFightSwapRequestMessage.targetId.");
            }
        };
        PrismFightSwapRequestMessage.ID = 7833;
        return PrismFightSwapRequestMessage;
    })(NetworkMessage);
    Protocol.PrismFightSwapRequestMessage = PrismFightSwapRequestMessage;
    var PrismInfoCloseMessage = (function(_super) {
        __extends(PrismInfoCloseMessage, _super);

        function PrismInfoCloseMessage() {

            _super.call(this)
        }
        PrismInfoCloseMessage.prototype.getMessageId = function() {
            return PrismInfoCloseMessage.ID;
        };
        PrismInfoCloseMessage.prototype.reset = function() {

        };
        PrismInfoCloseMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PrismInfoCloseMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PrismInfoCloseMessage.prototype.serialize = function(output) {
            this.serializeAs_PrismInfoCloseMessage(output);
        };
        PrismInfoCloseMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PrismInfoCloseMessage(input);
        };
        PrismInfoCloseMessage.prototype.serializeAs_PrismInfoCloseMessage = function(output) {

        };
        PrismInfoCloseMessage.prototype.deserializeAs_PrismInfoCloseMessage = function(input) {

        };
        PrismInfoCloseMessage.ID = 6760;
        return PrismInfoCloseMessage;
    })(NetworkMessage);
    Protocol.PrismInfoCloseMessage = PrismInfoCloseMessage;
    var PrismInfoInValidMessage = (function(_super) {
        __extends(PrismInfoInValidMessage, _super);

        function PrismInfoInValidMessage() {
            this.reason = 0;
            _super.call(this)
        }
        PrismInfoInValidMessage.prototype.getMessageId = function() {
            return PrismInfoInValidMessage.ID;
        };
        PrismInfoInValidMessage.prototype.reset = function() {
            this.reason = 0;
        };
        PrismInfoInValidMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PrismInfoInValidMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PrismInfoInValidMessage.prototype.serialize = function(output) {
            this.serializeAs_PrismInfoInValidMessage(output);
        };
        PrismInfoInValidMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PrismInfoInValidMessage(input);
        };
        PrismInfoInValidMessage.prototype.serializeAs_PrismInfoInValidMessage = function(output) {
            output.writeByte(this.reason);
        };
        PrismInfoInValidMessage.prototype.deserializeAs_PrismInfoInValidMessage = function(input) {
            this.reason = input.readByte();
            if (this.reason < 0) {
                throw new Error("Forbidden value (" + this.reason + ") on element of PrismInfoInValidMessage.reason.");
            }
        };
        PrismInfoInValidMessage.ID = 2678;
        return PrismInfoInValidMessage;
    })(NetworkMessage);
    Protocol.PrismInfoInValidMessage = PrismInfoInValidMessage;
    var PrismInfoJoinLeaveRequestMessage = (function(_super) {
        __extends(PrismInfoJoinLeaveRequestMessage, _super);

        function PrismInfoJoinLeaveRequestMessage() {
            this.join = false;
            _super.call(this)
        }
        PrismInfoJoinLeaveRequestMessage.prototype.getMessageId = function() {
            return PrismInfoJoinLeaveRequestMessage.ID;
        };
        PrismInfoJoinLeaveRequestMessage.prototype.reset = function() {
            this.join = false;
        };
        PrismInfoJoinLeaveRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PrismInfoJoinLeaveRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PrismInfoJoinLeaveRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_PrismInfoJoinLeaveRequestMessage(output);
        };
        PrismInfoJoinLeaveRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PrismInfoJoinLeaveRequestMessage(input);
        };
        PrismInfoJoinLeaveRequestMessage.prototype.serializeAs_PrismInfoJoinLeaveRequestMessage = function(output) {
            output.writeBoolean(this.join);
        };
        PrismInfoJoinLeaveRequestMessage.prototype.deserializeAs_PrismInfoJoinLeaveRequestMessage = function(input) {
            this.join = input.readBoolean();
        };
        PrismInfoJoinLeaveRequestMessage.ID = 9455;
        return PrismInfoJoinLeaveRequestMessage;
    })(NetworkMessage);
    Protocol.PrismInfoJoinLeaveRequestMessage = PrismInfoJoinLeaveRequestMessage;
    var PrismModuleExchangeRequestMessage = (function(_super) {
        __extends(PrismModuleExchangeRequestMessage, _super);

        function PrismModuleExchangeRequestMessage() {

            _super.call(this)
        }
        PrismModuleExchangeRequestMessage.prototype.getMessageId = function() {
            return PrismModuleExchangeRequestMessage.ID;
        };
        PrismModuleExchangeRequestMessage.prototype.reset = function() {

        };
        PrismModuleExchangeRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PrismModuleExchangeRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PrismModuleExchangeRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_PrismModuleExchangeRequestMessage(output);
        };
        PrismModuleExchangeRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PrismModuleExchangeRequestMessage(input);
        };
        PrismModuleExchangeRequestMessage.prototype.serializeAs_PrismModuleExchangeRequestMessage = function(output) {

        };
        PrismModuleExchangeRequestMessage.prototype.deserializeAs_PrismModuleExchangeRequestMessage = function(input) {

        };
        PrismModuleExchangeRequestMessage.ID = 4413;
        return PrismModuleExchangeRequestMessage;
    })(NetworkMessage);
    Protocol.PrismModuleExchangeRequestMessage = PrismModuleExchangeRequestMessage;
    var PrismSetSabotagedRefusedMessage = (function(_super) {
        __extends(PrismSetSabotagedRefusedMessage, _super);

        function PrismSetSabotagedRefusedMessage() {
            this.subAreaId = 0;
            this.reason = 0;
            _super.call(this)
        }
        PrismSetSabotagedRefusedMessage.prototype.getMessageId = function() {
            return PrismSetSabotagedRefusedMessage.ID;
        };
        PrismSetSabotagedRefusedMessage.prototype.reset = function() {
            this.subAreaId = 0;
            this.reason = 0;
        };
        PrismSetSabotagedRefusedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PrismSetSabotagedRefusedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PrismSetSabotagedRefusedMessage.prototype.serialize = function(output) {
            this.serializeAs_PrismSetSabotagedRefusedMessage(output);
        };
        PrismSetSabotagedRefusedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PrismSetSabotagedRefusedMessage(input);
        };
        PrismSetSabotagedRefusedMessage.prototype.serializeAs_PrismSetSabotagedRefusedMessage = function(output) {
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
            output.writeByte(this.reason);
        };
        PrismSetSabotagedRefusedMessage.prototype.deserializeAs_PrismSetSabotagedRefusedMessage = function(input) {
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of PrismSetSabotagedRefusedMessage.subAreaId.");
            }
            this.reason = input.readByte();
        };
        PrismSetSabotagedRefusedMessage.ID = 2267;
        return PrismSetSabotagedRefusedMessage;
    })(NetworkMessage);
    Protocol.PrismSetSabotagedRefusedMessage = PrismSetSabotagedRefusedMessage;
    var PrismSetSabotagedRequestMessage = (function(_super) {
        __extends(PrismSetSabotagedRequestMessage, _super);

        function PrismSetSabotagedRequestMessage() {
            this.subAreaId = 0;
            _super.call(this)
        }
        PrismSetSabotagedRequestMessage.prototype.getMessageId = function() {
            return PrismSetSabotagedRequestMessage.ID;
        };
        PrismSetSabotagedRequestMessage.prototype.reset = function() {
            this.subAreaId = 0;
        };
        PrismSetSabotagedRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PrismSetSabotagedRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PrismSetSabotagedRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_PrismSetSabotagedRequestMessage(output);
        };
        PrismSetSabotagedRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PrismSetSabotagedRequestMessage(input);
        };
        PrismSetSabotagedRequestMessage.prototype.serializeAs_PrismSetSabotagedRequestMessage = function(output) {
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
        };
        PrismSetSabotagedRequestMessage.prototype.deserializeAs_PrismSetSabotagedRequestMessage = function(input) {
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of PrismSetSabotagedRequestMessage.subAreaId.");
            }
        };
        PrismSetSabotagedRequestMessage.ID = 1806;
        return PrismSetSabotagedRequestMessage;
    })(NetworkMessage);
    Protocol.PrismSetSabotagedRequestMessage = PrismSetSabotagedRequestMessage;
    var PrismSettingsErrorMessage = (function(_super) {
        __extends(PrismSettingsErrorMessage, _super);

        function PrismSettingsErrorMessage() {

            _super.call(this)
        }
        PrismSettingsErrorMessage.prototype.getMessageId = function() {
            return PrismSettingsErrorMessage.ID;
        };
        PrismSettingsErrorMessage.prototype.reset = function() {

        };
        PrismSettingsErrorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PrismSettingsErrorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PrismSettingsErrorMessage.prototype.serialize = function(output) {
            this.serializeAs_PrismSettingsErrorMessage(output);
        };
        PrismSettingsErrorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PrismSettingsErrorMessage(input);
        };
        PrismSettingsErrorMessage.prototype.serializeAs_PrismSettingsErrorMessage = function(output) {

        };
        PrismSettingsErrorMessage.prototype.deserializeAs_PrismSettingsErrorMessage = function(input) {

        };
        PrismSettingsErrorMessage.ID = 6258;
        return PrismSettingsErrorMessage;
    })(NetworkMessage);
    Protocol.PrismSettingsErrorMessage = PrismSettingsErrorMessage;
    var PrismSettingsRequestMessage = (function(_super) {
        __extends(PrismSettingsRequestMessage, _super);

        function PrismSettingsRequestMessage() {
            this.subAreaId = 0;
            this.startDefenseTime = 0;
            _super.call(this)
        }
        PrismSettingsRequestMessage.prototype.getMessageId = function() {
            return PrismSettingsRequestMessage.ID;
        };
        PrismSettingsRequestMessage.prototype.reset = function() {
            this.subAreaId = 0;
            this.startDefenseTime = 0;
        };
        PrismSettingsRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PrismSettingsRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PrismSettingsRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_PrismSettingsRequestMessage(output);
        };
        PrismSettingsRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PrismSettingsRequestMessage(input);
        };
        PrismSettingsRequestMessage.prototype.serializeAs_PrismSettingsRequestMessage = function(output) {
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
            if (this.startDefenseTime < 0) {
                throw new Error("Forbidden value (" + this.startDefenseTime + ") on element startDefenseTime.");
            }
            output.writeByte(this.startDefenseTime);
        };
        PrismSettingsRequestMessage.prototype.deserializeAs_PrismSettingsRequestMessage = function(input) {
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of PrismSettingsRequestMessage.subAreaId.");
            }
            this.startDefenseTime = input.readByte();
            if (this.startDefenseTime < 0) {
                throw new Error("Forbidden value (" + this.startDefenseTime + ") on element of PrismSettingsRequestMessage.startDefenseTime.");
            }
        };
        PrismSettingsRequestMessage.ID = 5624;
        return PrismSettingsRequestMessage;
    })(NetworkMessage);
    Protocol.PrismSettingsRequestMessage = PrismSettingsRequestMessage;
    var PrismsInfoValidMessage = (function(_super) {
        __extends(PrismsInfoValidMessage, _super);

        function PrismsInfoValidMessage() {
            this.fights = [];
            _super.call(this)
        }
        PrismsInfoValidMessage.prototype.getMessageId = function() {
            return PrismsInfoValidMessage.ID;
        };
        PrismsInfoValidMessage.prototype.reset = function() {
            this.fights = [];
        };
        PrismsInfoValidMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PrismsInfoValidMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PrismsInfoValidMessage.prototype.serialize = function(output) {
            this.serializeAs_PrismsInfoValidMessage(output);
        };
        PrismsInfoValidMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PrismsInfoValidMessage(input);
        };
        PrismsInfoValidMessage.prototype.serializeAs_PrismsInfoValidMessage = function(output) {
            output.writeShort(this.fights.length);
            for (var _i1 = 0; _i1 < this.fights.length; _i1++) {
                (this.fights[_i1]).serializeAs_PrismFightersInformation(output);
            }
        };
        PrismsInfoValidMessage.prototype.deserializeAs_PrismsInfoValidMessage = function(input) {
            var _item1 = null;
            var _fightsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _fightsLen; _i1++) {
                _item1 = new PrismFightersInformation();
                _item1.deserialize(input);
                this.fights.push(_item1);
            }
        };
        PrismsInfoValidMessage.ID = 4624;
        return PrismsInfoValidMessage;
    })(NetworkMessage);
    Protocol.PrismsInfoValidMessage = PrismsInfoValidMessage;
    var PrismsListMessage = (function(_super) {
        __extends(PrismsListMessage, _super);

        function PrismsListMessage() {
            this.prisms = [];
            _super.call(this)
        }
        PrismsListMessage.prototype.getMessageId = function() {
            return PrismsListMessage.ID;
        };
        PrismsListMessage.prototype.reset = function() {
            this.prisms = [];
        };
        PrismsListMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PrismsListMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PrismsListMessage.prototype.serialize = function(output) {
            this.serializeAs_PrismsListMessage(output);
        };
        PrismsListMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PrismsListMessage(input);
        };
        PrismsListMessage.prototype.serializeAs_PrismsListMessage = function(output) {
            output.writeShort(this.prisms.length);
            for (var _i1 = 0; _i1 < this.prisms.length; _i1++) {
                output.writeShort((this.prisms[_i1]).getTypeId());
                (this.prisms[_i1]).serialize(output);
            }
        };
        PrismsListMessage.prototype.deserializeAs_PrismsListMessage = function(input) {
            var _id1 = 0;
            var _item1 = null;
            var _prismsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _prismsLen; _i1++) {
                _id1 = input.readUnsignedShort();
                _item1 = ProtocolTypeManager.getInstance(PrismSubareaEmptyInfo, _id1);
                _item1.deserialize(input);
                this.prisms.push(_item1);
            }
        };
        PrismsListMessage.ID = 4815;
        return PrismsListMessage;
    })(NetworkMessage);
    Protocol.PrismsListMessage = PrismsListMessage;
    var PrismsListRegisterMessage = (function(_super) {
        __extends(PrismsListRegisterMessage, _super);

        function PrismsListRegisterMessage() {
            this.listen = 0;
            _super.call(this)
        }
        PrismsListRegisterMessage.prototype.getMessageId = function() {
            return PrismsListRegisterMessage.ID;
        };
        PrismsListRegisterMessage.prototype.reset = function() {
            this.listen = 0;
        };
        PrismsListRegisterMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PrismsListRegisterMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PrismsListRegisterMessage.prototype.serialize = function(output) {
            this.serializeAs_PrismsListRegisterMessage(output);
        };
        PrismsListRegisterMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PrismsListRegisterMessage(input);
        };
        PrismsListRegisterMessage.prototype.serializeAs_PrismsListRegisterMessage = function(output) {
            output.writeByte(this.listen);
        };
        PrismsListRegisterMessage.prototype.deserializeAs_PrismsListRegisterMessage = function(input) {
            this.listen = input.readByte();
            if (this.listen < 0) {
                throw new Error("Forbidden value (" + this.listen + ") on element of PrismsListRegisterMessage.listen.");
            }
        };
        PrismsListRegisterMessage.ID = 5140;
        return PrismsListRegisterMessage;
    })(NetworkMessage);
    Protocol.PrismsListRegisterMessage = PrismsListRegisterMessage;
    var PrismsListUpdateMessage = (function(_super) {
        __extends(PrismsListUpdateMessage, _super);

        function PrismsListUpdateMessage() {

            _super.call(this)
        }
        PrismsListUpdateMessage.prototype.getMessageId = function() {
            return PrismsListUpdateMessage.ID;
        };
        PrismsListUpdateMessage.prototype.reset = function() {

        };
        PrismsListUpdateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PrismsListUpdateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PrismsListUpdateMessage.prototype.serialize = function(output) {
            this.serializeAs_PrismsListUpdateMessage(output);
        };
        PrismsListUpdateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PrismsListUpdateMessage(input);
        };
        PrismsListUpdateMessage.prototype.serializeAs_PrismsListUpdateMessage = function(output) {
            _super.prototype.serializeAs_PrismsListMessage.call(this, output);
        };
        PrismsListUpdateMessage.prototype.deserializeAs_PrismsListUpdateMessage = function(input) {
            _super.prototype.deserializeAs_PrismsListMessage.call(this, input);
        };
        PrismsListUpdateMessage.ID = 9870;
        return PrismsListUpdateMessage;
    })(PrismsListMessage);
    Protocol.PrismsListUpdateMessage = PrismsListUpdateMessage;
    var PrismUseRequestMessage = (function(_super) {
        __extends(PrismUseRequestMessage, _super);

        function PrismUseRequestMessage() {
            this.moduleToUse = 0;
            _super.call(this)
        }
        PrismUseRequestMessage.prototype.getMessageId = function() {
            return PrismUseRequestMessage.ID;
        };
        PrismUseRequestMessage.prototype.reset = function() {
            this.moduleToUse = 0;
        };
        PrismUseRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        PrismUseRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        PrismUseRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_PrismUseRequestMessage(output);
        };
        PrismUseRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_PrismUseRequestMessage(input);
        };
        PrismUseRequestMessage.prototype.serializeAs_PrismUseRequestMessage = function(output) {
            output.writeByte(this.moduleToUse);
        };
        PrismUseRequestMessage.prototype.deserializeAs_PrismUseRequestMessage = function(input) {
            this.moduleToUse = input.readByte();
            if (this.moduleToUse < 0) {
                throw new Error("Forbidden value (" + this.moduleToUse + ") on element of PrismUseRequestMessage.moduleToUse.");
            }
        };
        PrismUseRequestMessage.ID = 9551;
        return PrismUseRequestMessage;
    })(NetworkMessage);
    Protocol.PrismUseRequestMessage = PrismUseRequestMessage;
    var AlignmentRankUpdateMessage = (function(_super) {
        __extends(AlignmentRankUpdateMessage, _super);

        function AlignmentRankUpdateMessage() {
            this.alignmentRank = 0;
            this.verbose = false;
            _super.call(this)
        }
        AlignmentRankUpdateMessage.prototype.getMessageId = function() {
            return AlignmentRankUpdateMessage.ID;
        };
        AlignmentRankUpdateMessage.prototype.reset = function() {
            this.alignmentRank = 0;
            this.verbose = false;
        };
        AlignmentRankUpdateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AlignmentRankUpdateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AlignmentRankUpdateMessage.prototype.serialize = function(output) {
            this.serializeAs_AlignmentRankUpdateMessage(output);
        };
        AlignmentRankUpdateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AlignmentRankUpdateMessage(input);
        };
        AlignmentRankUpdateMessage.prototype.serializeAs_AlignmentRankUpdateMessage = function(output) {
            if (this.alignmentRank < 0) {
                throw new Error("Forbidden value (" + this.alignmentRank + ") on element alignmentRank.");
            }
            output.writeByte(this.alignmentRank);
            output.writeBoolean(this.verbose);
        };
        AlignmentRankUpdateMessage.prototype.deserializeAs_AlignmentRankUpdateMessage = function(input) {
            this.alignmentRank = input.readByte();
            if (this.alignmentRank < 0) {
                throw new Error("Forbidden value (" + this.alignmentRank + ") on element of AlignmentRankUpdateMessage.alignmentRank.");
            }
            this.verbose = input.readBoolean();
        };
        AlignmentRankUpdateMessage.ID = 2029;
        return AlignmentRankUpdateMessage;
    })(NetworkMessage);
    Protocol.AlignmentRankUpdateMessage = AlignmentRankUpdateMessage;
    var SetEnableAVARequestMessage = (function(_super) {
        __extends(SetEnableAVARequestMessage, _super);

        function SetEnableAVARequestMessage() {
            this.enable = false;
            _super.call(this)
        }
        SetEnableAVARequestMessage.prototype.getMessageId = function() {
            return SetEnableAVARequestMessage.ID;
        };
        SetEnableAVARequestMessage.prototype.reset = function() {
            this.enable = false;
        };
        SetEnableAVARequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        SetEnableAVARequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        SetEnableAVARequestMessage.prototype.serialize = function(output) {
            this.serializeAs_SetEnableAVARequestMessage(output);
        };
        SetEnableAVARequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_SetEnableAVARequestMessage(input);
        };
        SetEnableAVARequestMessage.prototype.serializeAs_SetEnableAVARequestMessage = function(output) {
            output.writeBoolean(this.enable);
        };
        SetEnableAVARequestMessage.prototype.deserializeAs_SetEnableAVARequestMessage = function(input) {
            this.enable = input.readBoolean();
        };
        SetEnableAVARequestMessage.ID = 7829;
        return SetEnableAVARequestMessage;
    })(NetworkMessage);
    Protocol.SetEnableAVARequestMessage = SetEnableAVARequestMessage;
    var SetEnablePVPRequestMessage = (function(_super) {
        __extends(SetEnablePVPRequestMessage, _super);

        function SetEnablePVPRequestMessage() {
            this.enable = false;
            _super.call(this)
        }
        SetEnablePVPRequestMessage.prototype.getMessageId = function() {
            return SetEnablePVPRequestMessage.ID;
        };
        SetEnablePVPRequestMessage.prototype.reset = function() {
            this.enable = false;
        };
        SetEnablePVPRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        SetEnablePVPRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        SetEnablePVPRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_SetEnablePVPRequestMessage(output);
        };
        SetEnablePVPRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_SetEnablePVPRequestMessage(input);
        };
        SetEnablePVPRequestMessage.prototype.serializeAs_SetEnablePVPRequestMessage = function(output) {
            output.writeBoolean(this.enable);
        };
        SetEnablePVPRequestMessage.prototype.deserializeAs_SetEnablePVPRequestMessage = function(input) {
            this.enable = input.readBoolean();
        };
        SetEnablePVPRequestMessage.ID = 8131;
        return SetEnablePVPRequestMessage;
    })(NetworkMessage);
    Protocol.SetEnablePVPRequestMessage = SetEnablePVPRequestMessage;
    var UpdateMapPlayersAgressableStatusMessage = (function(_super) {
        __extends(UpdateMapPlayersAgressableStatusMessage, _super);

        function UpdateMapPlayersAgressableStatusMessage() {
            this.playerIds = [];
            this.enable = [];
            _super.call(this)
        }
        UpdateMapPlayersAgressableStatusMessage.prototype.getMessageId = function() {
            return UpdateMapPlayersAgressableStatusMessage.ID;
        };
        UpdateMapPlayersAgressableStatusMessage.prototype.reset = function() {
            this.playerIds = [];
            this.enable = [];
        };
        UpdateMapPlayersAgressableStatusMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        UpdateMapPlayersAgressableStatusMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        UpdateMapPlayersAgressableStatusMessage.prototype.serialize = function(output) {
            this.serializeAs_UpdateMapPlayersAgressableStatusMessage(output);
        };
        UpdateMapPlayersAgressableStatusMessage.prototype.deserialize = function(input) {
            this.deserializeAs_UpdateMapPlayersAgressableStatusMessage(input);
        };
        UpdateMapPlayersAgressableStatusMessage.prototype.serializeAs_UpdateMapPlayersAgressableStatusMessage = function(output) {
            output.writeShort(this.playerIds.length);
            for (var _i1 = 0; _i1 < this.playerIds.length; _i1++) {
                if (this.playerIds[_i1] < 0 || this.playerIds[_i1] > 9007199254740990) {
                    throw new Error("Forbidden value (" + this.playerIds[_i1] + ") on element 1 (starting at 1) of playerIds.");
                }
                output.writeVarLong(this.playerIds[_i1]);
            }
            output.writeShort(this.enable.length);
            for (var _i2 = 0; _i2 < this.enable.length; _i2++) {
                output.writeByte(this.enable[_i2]);
            }
        };
        UpdateMapPlayersAgressableStatusMessage.prototype.deserializeAs_UpdateMapPlayersAgressableStatusMessage = function(input) {
            var _val1 = NaN;
            var _val2 = 0;
            var _playerIdsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _playerIdsLen; _i1++) {
                _val1 = input.readVarUhLong();
                if (_val1 < 0 || _val1 > 9007199254740990) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of playerIds.");
                }
                this.playerIds.push(_val1);
            }
            var _enableLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _enableLen; _i2++) {
                _val2 = input.readByte();
                if (_val2 < 0) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of enable.");
                }
                this.enable.push(_val2);
            }
        };
        UpdateMapPlayersAgressableStatusMessage.ID = 2008;
        return UpdateMapPlayersAgressableStatusMessage;
    })(NetworkMessage);
    Protocol.UpdateMapPlayersAgressableStatusMessage = UpdateMapPlayersAgressableStatusMessage;
    var UpdateSelfAgressableStatusMessage = (function(_super) {
        __extends(UpdateSelfAgressableStatusMessage, _super);

        function UpdateSelfAgressableStatusMessage() {
            this.status = 0;
            this.probationTime = 0;
            _super.call(this)
        }
        UpdateSelfAgressableStatusMessage.prototype.getMessageId = function() {
            return UpdateSelfAgressableStatusMessage.ID;
        };
        UpdateSelfAgressableStatusMessage.prototype.reset = function() {
            this.status = 0;
            this.probationTime = 0;
        };
        UpdateSelfAgressableStatusMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        UpdateSelfAgressableStatusMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        UpdateSelfAgressableStatusMessage.prototype.serialize = function(output) {
            this.serializeAs_UpdateSelfAgressableStatusMessage(output);
        };
        UpdateSelfAgressableStatusMessage.prototype.deserialize = function(input) {
            this.deserializeAs_UpdateSelfAgressableStatusMessage(input);
        };
        UpdateSelfAgressableStatusMessage.prototype.serializeAs_UpdateSelfAgressableStatusMessage = function(output) {
            output.writeByte(this.status);
            if (this.probationTime < 0) {
                throw new Error("Forbidden value (" + this.probationTime + ") on element probationTime.");
            }
            output.writeInt(this.probationTime);
        };
        UpdateSelfAgressableStatusMessage.prototype.deserializeAs_UpdateSelfAgressableStatusMessage = function(input) {
            this.status = input.readByte();
            if (this.status < 0) {
                throw new Error("Forbidden value (" + this.status + ") on element of UpdateSelfAgressableStatusMessage.status.");
            }
            this.probationTime = input.readInt();
            if (this.probationTime < 0) {
                throw new Error("Forbidden value (" + this.probationTime + ") on element of UpdateSelfAgressableStatusMessage.probationTime.");
            }
        };
        UpdateSelfAgressableStatusMessage.ID = 7042;
        return UpdateSelfAgressableStatusMessage;
    })(NetworkMessage);
    Protocol.UpdateSelfAgressableStatusMessage = UpdateSelfAgressableStatusMessage;
    var CinematicMessage = (function(_super) {
        __extends(CinematicMessage, _super);

        function CinematicMessage() {
            this.cinematicId = 0;
            _super.call(this)
        }
        CinematicMessage.prototype.getMessageId = function() {
            return CinematicMessage.ID;
        };
        CinematicMessage.prototype.reset = function() {
            this.cinematicId = 0;
        };
        CinematicMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        CinematicMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        CinematicMessage.prototype.serialize = function(output) {
            this.serializeAs_CinematicMessage(output);
        };
        CinematicMessage.prototype.deserialize = function(input) {
            this.deserializeAs_CinematicMessage(input);
        };
        CinematicMessage.prototype.serializeAs_CinematicMessage = function(output) {
            if (this.cinematicId < 0) {
                throw new Error("Forbidden value (" + this.cinematicId + ") on element cinematicId.");
            }
            output.writeVarShort(this.cinematicId);
        };
        CinematicMessage.prototype.deserializeAs_CinematicMessage = function(input) {
            this.cinematicId = input.readVarUhShort();
            if (this.cinematicId < 0) {
                throw new Error("Forbidden value (" + this.cinematicId + ") on element of CinematicMessage.cinematicId.");
            }
        };
        CinematicMessage.ID = 9796;
        return CinematicMessage;
    })(NetworkMessage);
    Protocol.CinematicMessage = CinematicMessage;
    var URLOpenMessage = (function(_super) {
        __extends(URLOpenMessage, _super);

        function URLOpenMessage() {
            this.urlId = 0;
            _super.call(this)
        }
        URLOpenMessage.prototype.getMessageId = function() {
            return URLOpenMessage.ID;
        };
        URLOpenMessage.prototype.reset = function() {
            this.urlId = 0;
        };
        URLOpenMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        URLOpenMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        URLOpenMessage.prototype.serialize = function(output) {
            this.serializeAs_URLOpenMessage(output);
        };
        URLOpenMessage.prototype.deserialize = function(input) {
            this.deserializeAs_URLOpenMessage(input);
        };
        URLOpenMessage.prototype.serializeAs_URLOpenMessage = function(output) {
            if (this.urlId < 0) {
                throw new Error("Forbidden value (" + this.urlId + ") on element urlId.");
            }
            output.writeByte(this.urlId);
        };
        URLOpenMessage.prototype.deserializeAs_URLOpenMessage = function(input) {
            this.urlId = input.readByte();
            if (this.urlId < 0) {
                throw new Error("Forbidden value (" + this.urlId + ") on element of URLOpenMessage.urlId.");
            }
        };
        URLOpenMessage.ID = 6945;
        return URLOpenMessage;
    })(NetworkMessage);
    Protocol.URLOpenMessage = URLOpenMessage;
    var ShortcutBarAddErrorMessage = (function(_super) {
        __extends(ShortcutBarAddErrorMessage, _super);

        function ShortcutBarAddErrorMessage() {
            this.error = 0;
            _super.call(this)
        }
        ShortcutBarAddErrorMessage.prototype.getMessageId = function() {
            return ShortcutBarAddErrorMessage.ID;
        };
        ShortcutBarAddErrorMessage.prototype.reset = function() {
            this.error = 0;
        };
        ShortcutBarAddErrorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ShortcutBarAddErrorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ShortcutBarAddErrorMessage.prototype.serialize = function(output) {
            this.serializeAs_ShortcutBarAddErrorMessage(output);
        };
        ShortcutBarAddErrorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ShortcutBarAddErrorMessage(input);
        };
        ShortcutBarAddErrorMessage.prototype.serializeAs_ShortcutBarAddErrorMessage = function(output) {
            output.writeByte(this.error);
        };
        ShortcutBarAddErrorMessage.prototype.deserializeAs_ShortcutBarAddErrorMessage = function(input) {
            this.error = input.readByte();
            if (this.error < 0) {
                throw new Error("Forbidden value (" + this.error + ") on element of ShortcutBarAddErrorMessage.error.");
            }
        };
        ShortcutBarAddErrorMessage.ID = 6840;
        return ShortcutBarAddErrorMessage;
    })(NetworkMessage);
    Protocol.ShortcutBarAddErrorMessage = ShortcutBarAddErrorMessage;
    var ShortcutBarAddRequestMessage = (function(_super) {
        __extends(ShortcutBarAddRequestMessage, _super);

        function ShortcutBarAddRequestMessage() {
            this.barType = 0;
            this.shortcut = new Shortcut();
            _super.call(this)
        }
        ShortcutBarAddRequestMessage.prototype.getMessageId = function() {
            return ShortcutBarAddRequestMessage.ID;
        };
        ShortcutBarAddRequestMessage.prototype.reset = function() {
            this.barType = 0;
            this.shortcut = new Shortcut();
        };
        ShortcutBarAddRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ShortcutBarAddRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ShortcutBarAddRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_ShortcutBarAddRequestMessage(output);
        };
        ShortcutBarAddRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ShortcutBarAddRequestMessage(input);
        };
        ShortcutBarAddRequestMessage.prototype.serializeAs_ShortcutBarAddRequestMessage = function(output) {
            output.writeByte(this.barType);
            output.writeShort(this.shortcut.getTypeId());
            this.shortcut.serialize(output);
        };
        ShortcutBarAddRequestMessage.prototype.deserializeAs_ShortcutBarAddRequestMessage = function(input) {
            this.barType = input.readByte();
            if (this.barType < 0) {
                throw new Error("Forbidden value (" + this.barType + ") on element of ShortcutBarAddRequestMessage.barType.");
            }
            var _id2 = input.readUnsignedShort();
            this.shortcut = ProtocolTypeManager.getInstance(Shortcut, _id2);
            this.shortcut.deserialize(input);
        };
        ShortcutBarAddRequestMessage.ID = 7311;
        return ShortcutBarAddRequestMessage;
    })(NetworkMessage);
    Protocol.ShortcutBarAddRequestMessage = ShortcutBarAddRequestMessage;
    var ShortcutBarContentMessage = (function(_super) {
        __extends(ShortcutBarContentMessage, _super);

        function ShortcutBarContentMessage() {
            this.barType = 0;
            this.shortcuts = [];
            _super.call(this)
        }
        ShortcutBarContentMessage.prototype.getMessageId = function() {
            return ShortcutBarContentMessage.ID;
        };
        ShortcutBarContentMessage.prototype.reset = function() {
            this.barType = 0;
            this.shortcuts = [];
        };
        ShortcutBarContentMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ShortcutBarContentMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ShortcutBarContentMessage.prototype.serialize = function(output) {
            this.serializeAs_ShortcutBarContentMessage(output);
        };
        ShortcutBarContentMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ShortcutBarContentMessage(input);
        };
        ShortcutBarContentMessage.prototype.serializeAs_ShortcutBarContentMessage = function(output) {
            output.writeByte(this.barType);
            output.writeShort(this.shortcuts.length);
            for (var _i2 = 0; _i2 < this.shortcuts.length; _i2++) {
                output.writeShort((this.shortcuts[_i2]).getTypeId());
                (this.shortcuts[_i2]).serialize(output);
            }
        };
        ShortcutBarContentMessage.prototype.deserializeAs_ShortcutBarContentMessage = function(input) {
            var _id2 = 0;
            var _item2 = null;
            this.barType = input.readByte();
            if (this.barType < 0) {
                throw new Error("Forbidden value (" + this.barType + ") on element of ShortcutBarContentMessage.barType.");
            }
            var _shortcutsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _shortcutsLen; _i2++) {
                _id2 = input.readUnsignedShort();
                _item2 = ProtocolTypeManager.getInstance(Shortcut, _id2);
                _item2.deserialize(input);
                this.shortcuts.push(_item2);
            }
        };
        ShortcutBarContentMessage.ID = 276;
        return ShortcutBarContentMessage;
    })(NetworkMessage);
    Protocol.ShortcutBarContentMessage = ShortcutBarContentMessage;
    var ShortcutBarRefreshMessage = (function(_super) {
        __extends(ShortcutBarRefreshMessage, _super);

        function ShortcutBarRefreshMessage() {
            this.barType = 0;
            this.shortcut = new Shortcut();
            _super.call(this)
        }
        ShortcutBarRefreshMessage.prototype.getMessageId = function() {
            return ShortcutBarRefreshMessage.ID;
        };
        ShortcutBarRefreshMessage.prototype.reset = function() {
            this.barType = 0;
            this.shortcut = new Shortcut();
        };
        ShortcutBarRefreshMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ShortcutBarRefreshMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ShortcutBarRefreshMessage.prototype.serialize = function(output) {
            this.serializeAs_ShortcutBarRefreshMessage(output);
        };
        ShortcutBarRefreshMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ShortcutBarRefreshMessage(input);
        };
        ShortcutBarRefreshMessage.prototype.serializeAs_ShortcutBarRefreshMessage = function(output) {
            output.writeByte(this.barType);
            output.writeShort(this.shortcut.getTypeId());
            this.shortcut.serialize(output);
        };
        ShortcutBarRefreshMessage.prototype.deserializeAs_ShortcutBarRefreshMessage = function(input) {
            this.barType = input.readByte();
            if (this.barType < 0) {
                throw new Error("Forbidden value (" + this.barType + ") on element of ShortcutBarRefreshMessage.barType.");
            }
            var _id2 = input.readUnsignedShort();
            this.shortcut = ProtocolTypeManager.getInstance(Shortcut, _id2);
            this.shortcut.deserialize(input);
        };
        ShortcutBarRefreshMessage.ID = 9659;
        return ShortcutBarRefreshMessage;
    })(NetworkMessage);
    Protocol.ShortcutBarRefreshMessage = ShortcutBarRefreshMessage;
    var ShortcutBarRemovedMessage = (function(_super) {
        __extends(ShortcutBarRemovedMessage, _super);

        function ShortcutBarRemovedMessage() {
            this.barType = 0;
            this.slot = 0;
            _super.call(this)
        }
        ShortcutBarRemovedMessage.prototype.getMessageId = function() {
            return ShortcutBarRemovedMessage.ID;
        };
        ShortcutBarRemovedMessage.prototype.reset = function() {
            this.barType = 0;
            this.slot = 0;
        };
        ShortcutBarRemovedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ShortcutBarRemovedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ShortcutBarRemovedMessage.prototype.serialize = function(output) {
            this.serializeAs_ShortcutBarRemovedMessage(output);
        };
        ShortcutBarRemovedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ShortcutBarRemovedMessage(input);
        };
        ShortcutBarRemovedMessage.prototype.serializeAs_ShortcutBarRemovedMessage = function(output) {
            output.writeByte(this.barType);
            if (this.slot < 0 || this.slot > 99) {
                throw new Error("Forbidden value (" + this.slot + ") on element slot.");
            }
            output.writeByte(this.slot);
        };
        ShortcutBarRemovedMessage.prototype.deserializeAs_ShortcutBarRemovedMessage = function(input) {
            this.barType = input.readByte();
            if (this.barType < 0) {
                throw new Error("Forbidden value (" + this.barType + ") on element of ShortcutBarRemovedMessage.barType.");
            }
            this.slot = input.readByte();
            if (this.slot < 0 || this.slot > 99) {
                throw new Error("Forbidden value (" + this.slot + ") on element of ShortcutBarRemovedMessage.slot.");
            }
        };
        ShortcutBarRemovedMessage.ID = 9619;
        return ShortcutBarRemovedMessage;
    })(NetworkMessage);
    Protocol.ShortcutBarRemovedMessage = ShortcutBarRemovedMessage;
    var ShortcutBarRemoveErrorMessage = (function(_super) {
        __extends(ShortcutBarRemoveErrorMessage, _super);

        function ShortcutBarRemoveErrorMessage() {
            this.error = 0;
            _super.call(this)
        }
        ShortcutBarRemoveErrorMessage.prototype.getMessageId = function() {
            return ShortcutBarRemoveErrorMessage.ID;
        };
        ShortcutBarRemoveErrorMessage.prototype.reset = function() {
            this.error = 0;
        };
        ShortcutBarRemoveErrorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ShortcutBarRemoveErrorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ShortcutBarRemoveErrorMessage.prototype.serialize = function(output) {
            this.serializeAs_ShortcutBarRemoveErrorMessage(output);
        };
        ShortcutBarRemoveErrorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ShortcutBarRemoveErrorMessage(input);
        };
        ShortcutBarRemoveErrorMessage.prototype.serializeAs_ShortcutBarRemoveErrorMessage = function(output) {
            output.writeByte(this.error);
        };
        ShortcutBarRemoveErrorMessage.prototype.deserializeAs_ShortcutBarRemoveErrorMessage = function(input) {
            this.error = input.readByte();
            if (this.error < 0) {
                throw new Error("Forbidden value (" + this.error + ") on element of ShortcutBarRemoveErrorMessage.error.");
            }
        };
        ShortcutBarRemoveErrorMessage.ID = 2776;
        return ShortcutBarRemoveErrorMessage;
    })(NetworkMessage);
    Protocol.ShortcutBarRemoveErrorMessage = ShortcutBarRemoveErrorMessage;
    var ShortcutBarRemoveRequestMessage = (function(_super) {
        __extends(ShortcutBarRemoveRequestMessage, _super);

        function ShortcutBarRemoveRequestMessage() {
            this.barType = 0;
            this.slot = 0;
            _super.call(this)
        }
        ShortcutBarRemoveRequestMessage.prototype.getMessageId = function() {
            return ShortcutBarRemoveRequestMessage.ID;
        };
        ShortcutBarRemoveRequestMessage.prototype.reset = function() {
            this.barType = 0;
            this.slot = 0;
        };
        ShortcutBarRemoveRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ShortcutBarRemoveRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ShortcutBarRemoveRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_ShortcutBarRemoveRequestMessage(output);
        };
        ShortcutBarRemoveRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ShortcutBarRemoveRequestMessage(input);
        };
        ShortcutBarRemoveRequestMessage.prototype.serializeAs_ShortcutBarRemoveRequestMessage = function(output) {
            output.writeByte(this.barType);
            if (this.slot < 0 || this.slot > 99) {
                throw new Error("Forbidden value (" + this.slot + ") on element slot.");
            }
            output.writeByte(this.slot);
        };
        ShortcutBarRemoveRequestMessage.prototype.deserializeAs_ShortcutBarRemoveRequestMessage = function(input) {
            this.barType = input.readByte();
            if (this.barType < 0) {
                throw new Error("Forbidden value (" + this.barType + ") on element of ShortcutBarRemoveRequestMessage.barType.");
            }
            this.slot = input.readByte();
            if (this.slot < 0 || this.slot > 99) {
                throw new Error("Forbidden value (" + this.slot + ") on element of ShortcutBarRemoveRequestMessage.slot.");
            }
        };
        ShortcutBarRemoveRequestMessage.ID = 7396;
        return ShortcutBarRemoveRequestMessage;
    })(NetworkMessage);
    Protocol.ShortcutBarRemoveRequestMessage = ShortcutBarRemoveRequestMessage;
    var ShortcutBarReplacedMessage = (function(_super) {
        __extends(ShortcutBarReplacedMessage, _super);

        function ShortcutBarReplacedMessage() {
            this.barType = 0;
            this.shortcut = new Shortcut();
            _super.call(this)
        }
        ShortcutBarReplacedMessage.prototype.getMessageId = function() {
            return ShortcutBarReplacedMessage.ID;
        };
        ShortcutBarReplacedMessage.prototype.reset = function() {
            this.barType = 0;
            this.shortcut = new Shortcut();
        };
        ShortcutBarReplacedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ShortcutBarReplacedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ShortcutBarReplacedMessage.prototype.serialize = function(output) {
            this.serializeAs_ShortcutBarReplacedMessage(output);
        };
        ShortcutBarReplacedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ShortcutBarReplacedMessage(input);
        };
        ShortcutBarReplacedMessage.prototype.serializeAs_ShortcutBarReplacedMessage = function(output) {
            output.writeByte(this.barType);
            output.writeShort(this.shortcut.getTypeId());
            this.shortcut.serialize(output);
        };
        ShortcutBarReplacedMessage.prototype.deserializeAs_ShortcutBarReplacedMessage = function(input) {
            this.barType = input.readByte();
            if (this.barType < 0) {
                throw new Error("Forbidden value (" + this.barType + ") on element of ShortcutBarReplacedMessage.barType.");
            }
            var _id2 = input.readUnsignedShort();
            this.shortcut = ProtocolTypeManager.getInstance(Shortcut, _id2);
            this.shortcut.deserialize(input);
        };
        ShortcutBarReplacedMessage.ID = 5098;
        return ShortcutBarReplacedMessage;
    })(NetworkMessage);
    Protocol.ShortcutBarReplacedMessage = ShortcutBarReplacedMessage;
    var ShortcutBarSwapErrorMessage = (function(_super) {
        __extends(ShortcutBarSwapErrorMessage, _super);

        function ShortcutBarSwapErrorMessage() {
            this.error = 0;
            _super.call(this)
        }
        ShortcutBarSwapErrorMessage.prototype.getMessageId = function() {
            return ShortcutBarSwapErrorMessage.ID;
        };
        ShortcutBarSwapErrorMessage.prototype.reset = function() {
            this.error = 0;
        };
        ShortcutBarSwapErrorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ShortcutBarSwapErrorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ShortcutBarSwapErrorMessage.prototype.serialize = function(output) {
            this.serializeAs_ShortcutBarSwapErrorMessage(output);
        };
        ShortcutBarSwapErrorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ShortcutBarSwapErrorMessage(input);
        };
        ShortcutBarSwapErrorMessage.prototype.serializeAs_ShortcutBarSwapErrorMessage = function(output) {
            output.writeByte(this.error);
        };
        ShortcutBarSwapErrorMessage.prototype.deserializeAs_ShortcutBarSwapErrorMessage = function(input) {
            this.error = input.readByte();
            if (this.error < 0) {
                throw new Error("Forbidden value (" + this.error + ") on element of ShortcutBarSwapErrorMessage.error.");
            }
        };
        ShortcutBarSwapErrorMessage.ID = 4478;
        return ShortcutBarSwapErrorMessage;
    })(NetworkMessage);
    Protocol.ShortcutBarSwapErrorMessage = ShortcutBarSwapErrorMessage;
    var ShortcutBarSwapRequestMessage = (function(_super) {
        __extends(ShortcutBarSwapRequestMessage, _super);

        function ShortcutBarSwapRequestMessage() {
            this.barType = 0;
            this.firstSlot = 0;
            this.secondSlot = 0;
            _super.call(this)
        }
        ShortcutBarSwapRequestMessage.prototype.getMessageId = function() {
            return ShortcutBarSwapRequestMessage.ID;
        };
        ShortcutBarSwapRequestMessage.prototype.reset = function() {
            this.barType = 0;
            this.firstSlot = 0;
            this.secondSlot = 0;
        };
        ShortcutBarSwapRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ShortcutBarSwapRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ShortcutBarSwapRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_ShortcutBarSwapRequestMessage(output);
        };
        ShortcutBarSwapRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ShortcutBarSwapRequestMessage(input);
        };
        ShortcutBarSwapRequestMessage.prototype.serializeAs_ShortcutBarSwapRequestMessage = function(output) {
            output.writeByte(this.barType);
            if (this.firstSlot < 0 || this.firstSlot > 99) {
                throw new Error("Forbidden value (" + this.firstSlot + ") on element firstSlot.");
            }
            output.writeByte(this.firstSlot);
            if (this.secondSlot < 0 || this.secondSlot > 99) {
                throw new Error("Forbidden value (" + this.secondSlot + ") on element secondSlot.");
            }
            output.writeByte(this.secondSlot);
        };
        ShortcutBarSwapRequestMessage.prototype.deserializeAs_ShortcutBarSwapRequestMessage = function(input) {
            this.barType = input.readByte();
            if (this.barType < 0) {
                throw new Error("Forbidden value (" + this.barType + ") on element of ShortcutBarSwapRequestMessage.barType.");
            }
            this.firstSlot = input.readByte();
            if (this.firstSlot < 0 || this.firstSlot > 99) {
                throw new Error("Forbidden value (" + this.firstSlot + ") on element of ShortcutBarSwapRequestMessage.firstSlot.");
            }
            this.secondSlot = input.readByte();
            if (this.secondSlot < 0 || this.secondSlot > 99) {
                throw new Error("Forbidden value (" + this.secondSlot + ") on element of ShortcutBarSwapRequestMessage.secondSlot.");
            }
        };
        ShortcutBarSwapRequestMessage.ID = 4225;
        return ShortcutBarSwapRequestMessage;
    })(NetworkMessage);
    Protocol.ShortcutBarSwapRequestMessage = ShortcutBarSwapRequestMessage;
    var ContactLookErrorMessage = (function(_super) {
        __extends(ContactLookErrorMessage, _super);

        function ContactLookErrorMessage() {
            this.requestId = 0;
            _super.call(this)
        }
        ContactLookErrorMessage.prototype.getMessageId = function() {
            return ContactLookErrorMessage.ID;
        };
        ContactLookErrorMessage.prototype.reset = function() {
            this.requestId = 0;
        };
        ContactLookErrorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ContactLookErrorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ContactLookErrorMessage.prototype.serialize = function(output) {
            this.serializeAs_ContactLookErrorMessage(output);
        };
        ContactLookErrorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ContactLookErrorMessage(input);
        };
        ContactLookErrorMessage.prototype.serializeAs_ContactLookErrorMessage = function(output) {
            if (this.requestId < 0) {
                throw new Error("Forbidden value (" + this.requestId + ") on element requestId.");
            }
            output.writeVarInt(this.requestId);
        };
        ContactLookErrorMessage.prototype.deserializeAs_ContactLookErrorMessage = function(input) {
            this.requestId = input.readVarUhInt();
            if (this.requestId < 0) {
                throw new Error("Forbidden value (" + this.requestId + ") on element of ContactLookErrorMessage.requestId.");
            }
        };
        ContactLookErrorMessage.ID = 7031;
        return ContactLookErrorMessage;
    })(NetworkMessage);
    Protocol.ContactLookErrorMessage = ContactLookErrorMessage;
    var ContactLookMessage = (function(_super) {
        __extends(ContactLookMessage, _super);

        function ContactLookMessage() {
            this.requestId = 0;
            this.playerName = "";
            this.playerId = 0;
            this.look = new EntityLook();
            _super.call(this)
        }
        ContactLookMessage.prototype.getMessageId = function() {
            return ContactLookMessage.ID;
        };
        ContactLookMessage.prototype.reset = function() {
            this.requestId = 0;
            this.playerName = "";
            this.playerId = 0;
            this.look = new EntityLook();
        };
        ContactLookMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ContactLookMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ContactLookMessage.prototype.serialize = function(output) {
            this.serializeAs_ContactLookMessage(output);
        };
        ContactLookMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ContactLookMessage(input);
        };
        ContactLookMessage.prototype.serializeAs_ContactLookMessage = function(output) {
            if (this.requestId < 0) {
                throw new Error("Forbidden value (" + this.requestId + ") on element requestId.");
            }
            output.writeVarInt(this.requestId);
            output.writeUTF(this.playerName);
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
            this.look.serializeAs_EntityLook(output);
        };
        ContactLookMessage.prototype.deserializeAs_ContactLookMessage = function(input) {
            this.requestId = input.readVarUhInt();
            if (this.requestId < 0) {
                throw new Error("Forbidden value (" + this.requestId + ") on element of ContactLookMessage.requestId.");
            }
            this.playerName = input.readUTF();
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of ContactLookMessage.playerId.");
            }
            this.look = new EntityLook();
            this.look.deserialize(input);
        };
        ContactLookMessage.ID = 4440;
        return ContactLookMessage;
    })(NetworkMessage);
    Protocol.ContactLookMessage = ContactLookMessage;
    var ContactLookRequestMessage = (function(_super) {
        __extends(ContactLookRequestMessage, _super);

        function ContactLookRequestMessage() {
            this.requestId = 0;
            this.contactType = 0;
            _super.call(this)
        }
        ContactLookRequestMessage.prototype.getMessageId = function() {
            return ContactLookRequestMessage.ID;
        };
        ContactLookRequestMessage.prototype.reset = function() {
            this.requestId = 0;
            this.contactType = 0;
        };
        ContactLookRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ContactLookRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ContactLookRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_ContactLookRequestMessage(output);
        };
        ContactLookRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ContactLookRequestMessage(input);
        };
        ContactLookRequestMessage.prototype.serializeAs_ContactLookRequestMessage = function(output) {
            if (this.requestId < 0 || this.requestId > 255) {
                throw new Error("Forbidden value (" + this.requestId + ") on element requestId.");
            }
            output.writeByte(this.requestId);
            output.writeByte(this.contactType);
        };
        ContactLookRequestMessage.prototype.deserializeAs_ContactLookRequestMessage = function(input) {
            this.requestId = input.readUnsignedByte();
            if (this.requestId < 0 || this.requestId > 255) {
                throw new Error("Forbidden value (" + this.requestId + ") on element of ContactLookRequestMessage.requestId.");
            }
            this.contactType = input.readByte();
            if (this.contactType < 0) {
                throw new Error("Forbidden value (" + this.contactType + ") on element of ContactLookRequestMessage.contactType.");
            }
        };
        ContactLookRequestMessage.ID = 6653;
        return ContactLookRequestMessage;
    })(NetworkMessage);
    Protocol.ContactLookRequestMessage = ContactLookRequestMessage;
    var ContactLookRequestByIdMessage = (function(_super) {
        __extends(ContactLookRequestByIdMessage, _super);

        function ContactLookRequestByIdMessage() {
            this.playerId = 0;
            _super.call(this)
        }
        ContactLookRequestByIdMessage.prototype.getMessageId = function() {
            return ContactLookRequestByIdMessage.ID;
        };
        ContactLookRequestByIdMessage.prototype.reset = function() {
            this.playerId = 0;
        };
        ContactLookRequestByIdMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ContactLookRequestByIdMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ContactLookRequestByIdMessage.prototype.serialize = function(output) {
            this.serializeAs_ContactLookRequestByIdMessage(output);
        };
        ContactLookRequestByIdMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ContactLookRequestByIdMessage(input);
        };
        ContactLookRequestByIdMessage.prototype.serializeAs_ContactLookRequestByIdMessage = function(output) {
            _super.prototype.serializeAs_ContactLookRequestMessage.call(this, output);
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
        };
        ContactLookRequestByIdMessage.prototype.deserializeAs_ContactLookRequestByIdMessage = function(input) {
            _super.prototype.deserializeAs_ContactLookRequestMessage.call(this, input);
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of ContactLookRequestByIdMessage.playerId.");
            }
        };
        ContactLookRequestByIdMessage.ID = 3633;
        return ContactLookRequestByIdMessage;
    })(ContactLookRequestMessage);
    Protocol.ContactLookRequestByIdMessage = ContactLookRequestByIdMessage;
    var ContactLookRequestByNameMessage = (function(_super) {
        __extends(ContactLookRequestByNameMessage, _super);

        function ContactLookRequestByNameMessage() {
            this.playerName = "";
            _super.call(this)
        }
        ContactLookRequestByNameMessage.prototype.getMessageId = function() {
            return ContactLookRequestByNameMessage.ID;
        };
        ContactLookRequestByNameMessage.prototype.reset = function() {
            this.playerName = "";
        };
        ContactLookRequestByNameMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ContactLookRequestByNameMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ContactLookRequestByNameMessage.prototype.serialize = function(output) {
            this.serializeAs_ContactLookRequestByNameMessage(output);
        };
        ContactLookRequestByNameMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ContactLookRequestByNameMessage(input);
        };
        ContactLookRequestByNameMessage.prototype.serializeAs_ContactLookRequestByNameMessage = function(output) {
            _super.prototype.serializeAs_ContactLookRequestMessage.call(this, output);
            output.writeUTF(this.playerName);
        };
        ContactLookRequestByNameMessage.prototype.deserializeAs_ContactLookRequestByNameMessage = function(input) {
            _super.prototype.deserializeAs_ContactLookRequestMessage.call(this, input);
            this.playerName = input.readUTF();
        };
        ContactLookRequestByNameMessage.ID = 4430;
        return ContactLookRequestByNameMessage;
    })(ContactLookRequestMessage);
    Protocol.ContactLookRequestByNameMessage = ContactLookRequestByNameMessage;
    var StartupActionAddMessage = (function(_super) {
        __extends(StartupActionAddMessage, _super);

        function StartupActionAddMessage() {
            this.newAction = new StartupActionAddObject();
            _super.call(this)
        }
        StartupActionAddMessage.prototype.getMessageId = function() {
            return StartupActionAddMessage.ID;
        };
        StartupActionAddMessage.prototype.reset = function() {
            this.newAction = new StartupActionAddObject();
        };
        StartupActionAddMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        StartupActionAddMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        StartupActionAddMessage.prototype.serialize = function(output) {
            this.serializeAs_StartupActionAddMessage(output);
        };
        StartupActionAddMessage.prototype.deserialize = function(input) {
            this.deserializeAs_StartupActionAddMessage(input);
        };
        StartupActionAddMessage.prototype.serializeAs_StartupActionAddMessage = function(output) {
            this.newAction.serializeAs_StartupActionAddObject(output);
        };
        StartupActionAddMessage.prototype.deserializeAs_StartupActionAddMessage = function(input) {
            this.newAction = new StartupActionAddObject();
            this.newAction.deserialize(input);
        };
        StartupActionAddMessage.ID = 1188;
        return StartupActionAddMessage;
    })(NetworkMessage);
    Protocol.StartupActionAddMessage = StartupActionAddMessage;
    var StartupActionFinishedMessage = (function(_super) {
        __extends(StartupActionFinishedMessage, _super);

        function StartupActionFinishedMessage() {
            this.success = false;
            this.actionId = 0;
            this.automaticAction = false;
            _super.call(this)
        }
        StartupActionFinishedMessage.prototype.getMessageId = function() {
            return StartupActionFinishedMessage.ID;
        };
        StartupActionFinishedMessage.prototype.reset = function() {
            this.success = false;
            this.actionId = 0;
            this.automaticAction = false;
        };
        StartupActionFinishedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        StartupActionFinishedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        StartupActionFinishedMessage.prototype.serialize = function(output) {
            this.serializeAs_StartupActionFinishedMessage(output);
        };
        StartupActionFinishedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_StartupActionFinishedMessage(input);
        };
        StartupActionFinishedMessage.prototype.serializeAs_StartupActionFinishedMessage = function(output) {
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.success);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.automaticAction);
            output.writeByte(_box0);
            if (this.actionId < 0) {
                throw new Error("Forbidden value (" + this.actionId + ") on element actionId.");
            }
            output.writeInt(this.actionId);
        };
        StartupActionFinishedMessage.prototype.deserializeAs_StartupActionFinishedMessage = function(input) {
            this.deserializeByteBoxes(input);
            this.actionId = input.readInt();
            if (this.actionId < 0) {
                throw new Error("Forbidden value (" + this.actionId + ") on element of StartupActionFinishedMessage.actionId.");
            }
        };
        StartupActionFinishedMessage.ID = 7923;
        return StartupActionFinishedMessage;
    })(NetworkMessage);
    Protocol.StartupActionFinishedMessage = StartupActionFinishedMessage;
    var StartupActionsAllAttributionMessage = (function(_super) {
        __extends(StartupActionsAllAttributionMessage, _super);

        function StartupActionsAllAttributionMessage() {
            this.characterId = 0;
            _super.call(this)
        }
        StartupActionsAllAttributionMessage.prototype.getMessageId = function() {
            return StartupActionsAllAttributionMessage.ID;
        };
        StartupActionsAllAttributionMessage.prototype.reset = function() {
            this.characterId = 0;
        };
        StartupActionsAllAttributionMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        StartupActionsAllAttributionMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        StartupActionsAllAttributionMessage.prototype.serialize = function(output) {
            this.serializeAs_StartupActionsAllAttributionMessage(output);
        };
        StartupActionsAllAttributionMessage.prototype.deserialize = function(input) {
            this.deserializeAs_StartupActionsAllAttributionMessage(input);
        };
        StartupActionsAllAttributionMessage.prototype.serializeAs_StartupActionsAllAttributionMessage = function(output) {
            if (this.characterId < 0 || this.characterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.characterId + ") on element characterId.");
            }
            output.writeVarLong(this.characterId);
        };
        StartupActionsAllAttributionMessage.prototype.deserializeAs_StartupActionsAllAttributionMessage = function(input) {
            this.characterId = input.readVarUhLong();
            if (this.characterId < 0 || this.characterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.characterId + ") on element of StartupActionsAllAttributionMessage.characterId.");
            }
        };
        StartupActionsAllAttributionMessage.ID = 6836;
        return StartupActionsAllAttributionMessage;
    })(NetworkMessage);
    Protocol.StartupActionsAllAttributionMessage = StartupActionsAllAttributionMessage;
    var StartupActionsExecuteMessage = (function(_super) {
        __extends(StartupActionsExecuteMessage, _super);

        function StartupActionsExecuteMessage() {

            _super.call(this)
        }
        StartupActionsExecuteMessage.prototype.getMessageId = function() {
            return StartupActionsExecuteMessage.ID;
        };
        StartupActionsExecuteMessage.prototype.reset = function() {

        };
        StartupActionsExecuteMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        StartupActionsExecuteMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        StartupActionsExecuteMessage.prototype.serialize = function(output) {
            this.serializeAs_StartupActionsExecuteMessage(output);
        };
        StartupActionsExecuteMessage.prototype.deserialize = function(input) {
            this.deserializeAs_StartupActionsExecuteMessage(input);
        };
        StartupActionsExecuteMessage.prototype.serializeAs_StartupActionsExecuteMessage = function(output) {

        };
        StartupActionsExecuteMessage.prototype.deserializeAs_StartupActionsExecuteMessage = function(input) {

        };
        StartupActionsExecuteMessage.ID = 5775;
        return StartupActionsExecuteMessage;
    })(NetworkMessage);
    Protocol.StartupActionsExecuteMessage = StartupActionsExecuteMessage;
    var StartupActionsListMessage = (function(_super) {
        __extends(StartupActionsListMessage, _super);

        function StartupActionsListMessage() {
            this.actions = [];
            _super.call(this)
        }
        StartupActionsListMessage.prototype.getMessageId = function() {
            return StartupActionsListMessage.ID;
        };
        StartupActionsListMessage.prototype.reset = function() {
            this.actions = [];
        };
        StartupActionsListMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        StartupActionsListMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        StartupActionsListMessage.prototype.serialize = function(output) {
            this.serializeAs_StartupActionsListMessage(output);
        };
        StartupActionsListMessage.prototype.deserialize = function(input) {
            this.deserializeAs_StartupActionsListMessage(input);
        };
        StartupActionsListMessage.prototype.serializeAs_StartupActionsListMessage = function(output) {
            output.writeShort(this.actions.length);
            for (var _i1 = 0; _i1 < this.actions.length; _i1++) {
                (this.actions[_i1]).serializeAs_StartupActionAddObject(output);
            }
        };
        StartupActionsListMessage.prototype.deserializeAs_StartupActionsListMessage = function(input) {
            var _item1 = null;
            var _actionsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _actionsLen; _i1++) {
                _item1 = new StartupActionAddObject();
                _item1.deserialize(input);
                this.actions.push(_item1);
            }
        };
        StartupActionsListMessage.ID = 9417;
        return StartupActionsListMessage;
    })(NetworkMessage);
    Protocol.StartupActionsListMessage = StartupActionsListMessage;
    var StartupActionsObjetAttributionMessage = (function(_super) {
        __extends(StartupActionsObjetAttributionMessage, _super);

        function StartupActionsObjetAttributionMessage() {
            this.actionId = 0;
            this.characterId = 0;
            _super.call(this)
        }
        StartupActionsObjetAttributionMessage.prototype.getMessageId = function() {
            return StartupActionsObjetAttributionMessage.ID;
        };
        StartupActionsObjetAttributionMessage.prototype.reset = function() {
            this.actionId = 0;
            this.characterId = 0;
        };
        StartupActionsObjetAttributionMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        StartupActionsObjetAttributionMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        StartupActionsObjetAttributionMessage.prototype.serialize = function(output) {
            this.serializeAs_StartupActionsObjetAttributionMessage(output);
        };
        StartupActionsObjetAttributionMessage.prototype.deserialize = function(input) {
            this.deserializeAs_StartupActionsObjetAttributionMessage(input);
        };
        StartupActionsObjetAttributionMessage.prototype.serializeAs_StartupActionsObjetAttributionMessage = function(output) {
            if (this.actionId < 0) {
                throw new Error("Forbidden value (" + this.actionId + ") on element actionId.");
            }
            output.writeInt(this.actionId);
            if (this.characterId < 0 || this.characterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.characterId + ") on element characterId.");
            }
            output.writeVarLong(this.characterId);
        };
        StartupActionsObjetAttributionMessage.prototype.deserializeAs_StartupActionsObjetAttributionMessage = function(input) {
            this.actionId = input.readInt();
            if (this.actionId < 0) {
                throw new Error("Forbidden value (" + this.actionId + ") on element of StartupActionsObjetAttributionMessage.actionId.");
            }
            this.characterId = input.readVarUhLong();
            if (this.characterId < 0 || this.characterId > 9007199254740990) {
                throw new Error("Forbidden value (" + this.characterId + ") on element of StartupActionsObjetAttributionMessage.characterId.");
            }
        };
        StartupActionsObjetAttributionMessage.ID = 9830;
        return StartupActionsObjetAttributionMessage;
    })(NetworkMessage);
    Protocol.StartupActionsObjetAttributionMessage = StartupActionsObjetAttributionMessage;
    var SubscriptionLimitationMessage = (function(_super) {
        __extends(SubscriptionLimitationMessage, _super);

        function SubscriptionLimitationMessage() {
            this.reason = 0;
            _super.call(this)
        }
        SubscriptionLimitationMessage.prototype.getMessageId = function() {
            return SubscriptionLimitationMessage.ID;
        };
        SubscriptionLimitationMessage.prototype.reset = function() {
            this.reason = 0;
        };
        SubscriptionLimitationMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        SubscriptionLimitationMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        SubscriptionLimitationMessage.prototype.serialize = function(output) {
            this.serializeAs_SubscriptionLimitationMessage(output);
        };
        SubscriptionLimitationMessage.prototype.deserialize = function(input) {
            this.deserializeAs_SubscriptionLimitationMessage(input);
        };
        SubscriptionLimitationMessage.prototype.serializeAs_SubscriptionLimitationMessage = function(output) {
            output.writeByte(this.reason);
        };
        SubscriptionLimitationMessage.prototype.deserializeAs_SubscriptionLimitationMessage = function(input) {
            this.reason = input.readByte();
            if (this.reason < 0) {
                throw new Error("Forbidden value (" + this.reason + ") on element of SubscriptionLimitationMessage.reason.");
            }
        };
        SubscriptionLimitationMessage.ID = 3344;
        return SubscriptionLimitationMessage;
    })(NetworkMessage);
    Protocol.SubscriptionLimitationMessage = SubscriptionLimitationMessage;
    var SubscriptionZoneMessage = (function(_super) {
        __extends(SubscriptionZoneMessage, _super);

        function SubscriptionZoneMessage() {
            this.active = false;
            _super.call(this)
        }
        SubscriptionZoneMessage.prototype.getMessageId = function() {
            return SubscriptionZoneMessage.ID;
        };
        SubscriptionZoneMessage.prototype.reset = function() {
            this.active = false;
        };
        SubscriptionZoneMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        SubscriptionZoneMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        SubscriptionZoneMessage.prototype.serialize = function(output) {
            this.serializeAs_SubscriptionZoneMessage(output);
        };
        SubscriptionZoneMessage.prototype.deserialize = function(input) {
            this.deserializeAs_SubscriptionZoneMessage(input);
        };
        SubscriptionZoneMessage.prototype.serializeAs_SubscriptionZoneMessage = function(output) {
            output.writeBoolean(this.active);
        };
        SubscriptionZoneMessage.prototype.deserializeAs_SubscriptionZoneMessage = function(input) {
            this.active = input.readBoolean();
        };
        SubscriptionZoneMessage.ID = 5540;
        return SubscriptionZoneMessage;
    })(NetworkMessage);
    Protocol.SubscriptionZoneMessage = SubscriptionZoneMessage;
    var OrnamentGainedMessage = (function(_super) {
        __extends(OrnamentGainedMessage, _super);

        function OrnamentGainedMessage() {
            this.ornamentId = 0;
            _super.call(this)
        }
        OrnamentGainedMessage.prototype.getMessageId = function() {
            return OrnamentGainedMessage.ID;
        };
        OrnamentGainedMessage.prototype.reset = function() {
            this.ornamentId = 0;
        };
        OrnamentGainedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        OrnamentGainedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        OrnamentGainedMessage.prototype.serialize = function(output) {
            this.serializeAs_OrnamentGainedMessage(output);
        };
        OrnamentGainedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_OrnamentGainedMessage(input);
        };
        OrnamentGainedMessage.prototype.serializeAs_OrnamentGainedMessage = function(output) {
            if (this.ornamentId < 0) {
                throw new Error("Forbidden value (" + this.ornamentId + ") on element ornamentId.");
            }
            output.writeShort(this.ornamentId);
        };
        OrnamentGainedMessage.prototype.deserializeAs_OrnamentGainedMessage = function(input) {
            this.ornamentId = input.readShort();
            if (this.ornamentId < 0) {
                throw new Error("Forbidden value (" + this.ornamentId + ") on element of OrnamentGainedMessage.ornamentId.");
            }
        };
        OrnamentGainedMessage.ID = 7295;
        return OrnamentGainedMessage;
    })(NetworkMessage);
    Protocol.OrnamentGainedMessage = OrnamentGainedMessage;
    var OrnamentLostMessage = (function(_super) {
        __extends(OrnamentLostMessage, _super);

        function OrnamentLostMessage() {
            this.ornamentId = 0;
            _super.call(this)
        }
        OrnamentLostMessage.prototype.getMessageId = function() {
            return OrnamentLostMessage.ID;
        };
        OrnamentLostMessage.prototype.reset = function() {
            this.ornamentId = 0;
        };
        OrnamentLostMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        OrnamentLostMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        OrnamentLostMessage.prototype.serialize = function(output) {
            this.serializeAs_OrnamentLostMessage(output);
        };
        OrnamentLostMessage.prototype.deserialize = function(input) {
            this.deserializeAs_OrnamentLostMessage(input);
        };
        OrnamentLostMessage.prototype.serializeAs_OrnamentLostMessage = function(output) {
            if (this.ornamentId < 0) {
                throw new Error("Forbidden value (" + this.ornamentId + ") on element ornamentId.");
            }
            output.writeShort(this.ornamentId);
        };
        OrnamentLostMessage.prototype.deserializeAs_OrnamentLostMessage = function(input) {
            this.ornamentId = input.readShort();
            if (this.ornamentId < 0) {
                throw new Error("Forbidden value (" + this.ornamentId + ") on element of OrnamentLostMessage.ornamentId.");
            }
        };
        OrnamentLostMessage.ID = 8465;
        return OrnamentLostMessage;
    })(NetworkMessage);
    Protocol.OrnamentLostMessage = OrnamentLostMessage;
    var OrnamentSelectedMessage = (function(_super) {
        __extends(OrnamentSelectedMessage, _super);

        function OrnamentSelectedMessage() {
            this.ornamentId = 0;
            _super.call(this)
        }
        OrnamentSelectedMessage.prototype.getMessageId = function() {
            return OrnamentSelectedMessage.ID;
        };
        OrnamentSelectedMessage.prototype.reset = function() {
            this.ornamentId = 0;
        };
        OrnamentSelectedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        OrnamentSelectedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        OrnamentSelectedMessage.prototype.serialize = function(output) {
            this.serializeAs_OrnamentSelectedMessage(output);
        };
        OrnamentSelectedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_OrnamentSelectedMessage(input);
        };
        OrnamentSelectedMessage.prototype.serializeAs_OrnamentSelectedMessage = function(output) {
            if (this.ornamentId < 0) {
                throw new Error("Forbidden value (" + this.ornamentId + ") on element ornamentId.");
            }
            output.writeVarShort(this.ornamentId);
        };
        OrnamentSelectedMessage.prototype.deserializeAs_OrnamentSelectedMessage = function(input) {
            this.ornamentId = input.readVarUhShort();
            if (this.ornamentId < 0) {
                throw new Error("Forbidden value (" + this.ornamentId + ") on element of OrnamentSelectedMessage.ornamentId.");
            }
        };
        OrnamentSelectedMessage.ID = 8881;
        return OrnamentSelectedMessage;
    })(NetworkMessage);
    Protocol.OrnamentSelectedMessage = OrnamentSelectedMessage;
    var OrnamentSelectErrorMessage = (function(_super) {
        __extends(OrnamentSelectErrorMessage, _super);

        function OrnamentSelectErrorMessage() {
            this.reason = 0;
            _super.call(this)
        }
        OrnamentSelectErrorMessage.prototype.getMessageId = function() {
            return OrnamentSelectErrorMessage.ID;
        };
        OrnamentSelectErrorMessage.prototype.reset = function() {
            this.reason = 0;
        };
        OrnamentSelectErrorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        OrnamentSelectErrorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        OrnamentSelectErrorMessage.prototype.serialize = function(output) {
            this.serializeAs_OrnamentSelectErrorMessage(output);
        };
        OrnamentSelectErrorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_OrnamentSelectErrorMessage(input);
        };
        OrnamentSelectErrorMessage.prototype.serializeAs_OrnamentSelectErrorMessage = function(output) {
            output.writeByte(this.reason);
        };
        OrnamentSelectErrorMessage.prototype.deserializeAs_OrnamentSelectErrorMessage = function(input) {
            this.reason = input.readByte();
            if (this.reason < 0) {
                throw new Error("Forbidden value (" + this.reason + ") on element of OrnamentSelectErrorMessage.reason.");
            }
        };
        OrnamentSelectErrorMessage.ID = 6085;
        return OrnamentSelectErrorMessage;
    })(NetworkMessage);
    Protocol.OrnamentSelectErrorMessage = OrnamentSelectErrorMessage;
    var OrnamentSelectRequestMessage = (function(_super) {
        __extends(OrnamentSelectRequestMessage, _super);

        function OrnamentSelectRequestMessage() {
            this.ornamentId = 0;
            _super.call(this)
        }
        OrnamentSelectRequestMessage.prototype.getMessageId = function() {
            return OrnamentSelectRequestMessage.ID;
        };
        OrnamentSelectRequestMessage.prototype.reset = function() {
            this.ornamentId = 0;
        };
        OrnamentSelectRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        OrnamentSelectRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        OrnamentSelectRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_OrnamentSelectRequestMessage(output);
        };
        OrnamentSelectRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_OrnamentSelectRequestMessage(input);
        };
        OrnamentSelectRequestMessage.prototype.serializeAs_OrnamentSelectRequestMessage = function(output) {
            if (this.ornamentId < 0) {
                throw new Error("Forbidden value (" + this.ornamentId + ") on element ornamentId.");
            }
            output.writeVarShort(this.ornamentId);
        };
        OrnamentSelectRequestMessage.prototype.deserializeAs_OrnamentSelectRequestMessage = function(input) {
            this.ornamentId = input.readVarUhShort();
            if (this.ornamentId < 0) {
                throw new Error("Forbidden value (" + this.ornamentId + ") on element of OrnamentSelectRequestMessage.ornamentId.");
            }
        };
        OrnamentSelectRequestMessage.ID = 3929;
        return OrnamentSelectRequestMessage;
    })(NetworkMessage);
    Protocol.OrnamentSelectRequestMessage = OrnamentSelectRequestMessage;
    var TitleGainedMessage = (function(_super) {
        __extends(TitleGainedMessage, _super);

        function TitleGainedMessage() {
            this.titleId = 0;
            _super.call(this)
        }
        TitleGainedMessage.prototype.getMessageId = function() {
            return TitleGainedMessage.ID;
        };
        TitleGainedMessage.prototype.reset = function() {
            this.titleId = 0;
        };
        TitleGainedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TitleGainedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TitleGainedMessage.prototype.serialize = function(output) {
            this.serializeAs_TitleGainedMessage(output);
        };
        TitleGainedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TitleGainedMessage(input);
        };
        TitleGainedMessage.prototype.serializeAs_TitleGainedMessage = function(output) {
            if (this.titleId < 0) {
                throw new Error("Forbidden value (" + this.titleId + ") on element titleId.");
            }
            output.writeVarShort(this.titleId);
        };
        TitleGainedMessage.prototype.deserializeAs_TitleGainedMessage = function(input) {
            this.titleId = input.readVarUhShort();
            if (this.titleId < 0) {
                throw new Error("Forbidden value (" + this.titleId + ") on element of TitleGainedMessage.titleId.");
            }
        };
        TitleGainedMessage.ID = 6677;
        return TitleGainedMessage;
    })(NetworkMessage);
    Protocol.TitleGainedMessage = TitleGainedMessage;
    var TitleLostMessage = (function(_super) {
        __extends(TitleLostMessage, _super);

        function TitleLostMessage() {
            this.titleId = 0;
            _super.call(this)
        }
        TitleLostMessage.prototype.getMessageId = function() {
            return TitleLostMessage.ID;
        };
        TitleLostMessage.prototype.reset = function() {
            this.titleId = 0;
        };
        TitleLostMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TitleLostMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TitleLostMessage.prototype.serialize = function(output) {
            this.serializeAs_TitleLostMessage(output);
        };
        TitleLostMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TitleLostMessage(input);
        };
        TitleLostMessage.prototype.serializeAs_TitleLostMessage = function(output) {
            if (this.titleId < 0) {
                throw new Error("Forbidden value (" + this.titleId + ") on element titleId.");
            }
            output.writeVarShort(this.titleId);
        };
        TitleLostMessage.prototype.deserializeAs_TitleLostMessage = function(input) {
            this.titleId = input.readVarUhShort();
            if (this.titleId < 0) {
                throw new Error("Forbidden value (" + this.titleId + ") on element of TitleLostMessage.titleId.");
            }
        };
        TitleLostMessage.ID = 7521;
        return TitleLostMessage;
    })(NetworkMessage);
    Protocol.TitleLostMessage = TitleLostMessage;
    var TitlesAndOrnamentsListMessage = (function(_super) {
        __extends(TitlesAndOrnamentsListMessage, _super);

        function TitlesAndOrnamentsListMessage() {
            this.titles = [];
            this.ornaments = [];
            this.activeTitle = 0;
            this.activeOrnament = 0;
            _super.call(this)
        }
        TitlesAndOrnamentsListMessage.prototype.getMessageId = function() {
            return TitlesAndOrnamentsListMessage.ID;
        };
        TitlesAndOrnamentsListMessage.prototype.reset = function() {
            this.titles = [];
            this.ornaments = [];
            this.activeTitle = 0;
            this.activeOrnament = 0;
        };
        TitlesAndOrnamentsListMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TitlesAndOrnamentsListMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TitlesAndOrnamentsListMessage.prototype.serialize = function(output) {
            this.serializeAs_TitlesAndOrnamentsListMessage(output);
        };
        TitlesAndOrnamentsListMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TitlesAndOrnamentsListMessage(input);
        };
        TitlesAndOrnamentsListMessage.prototype.serializeAs_TitlesAndOrnamentsListMessage = function(output) {
            output.writeShort(this.titles.length);
            for (var _i1 = 0; _i1 < this.titles.length; _i1++) {
                if (this.titles[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.titles[_i1] + ") on element 1 (starting at 1) of titles.");
                }
                output.writeVarShort(this.titles[_i1]);
            }
            output.writeShort(this.ornaments.length);
            for (var _i2 = 0; _i2 < this.ornaments.length; _i2++) {
                if (this.ornaments[_i2] < 0) {
                    throw new Error("Forbidden value (" + this.ornaments[_i2] + ") on element 2 (starting at 1) of ornaments.");
                }
                output.writeVarShort(this.ornaments[_i2]);
            }
            if (this.activeTitle < 0) {
                throw new Error("Forbidden value (" + this.activeTitle + ") on element activeTitle.");
            }
            output.writeVarShort(this.activeTitle);
            if (this.activeOrnament < 0) {
                throw new Error("Forbidden value (" + this.activeOrnament + ") on element activeOrnament.");
            }
            output.writeVarShort(this.activeOrnament);
        };
        TitlesAndOrnamentsListMessage.prototype.deserializeAs_TitlesAndOrnamentsListMessage = function(input) {
            var _val1 = 0;
            var _val2 = 0;
            var _titlesLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _titlesLen; _i1++) {
                _val1 = input.readVarUhShort();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of titles.");
                }
                this.titles.push(_val1);
            }
            var _ornamentsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _ornamentsLen; _i2++) {
                _val2 = input.readVarUhShort();
                if (_val2 < 0) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of ornaments.");
                }
                this.ornaments.push(_val2);
            }
            this.activeTitle = input.readVarUhShort();
            if (this.activeTitle < 0) {
                throw new Error("Forbidden value (" + this.activeTitle + ") on element of TitlesAndOrnamentsListMessage.activeTitle.");
            }
            this.activeOrnament = input.readVarUhShort();
            if (this.activeOrnament < 0) {
                throw new Error("Forbidden value (" + this.activeOrnament + ") on element of TitlesAndOrnamentsListMessage.activeOrnament.");
            }
        };
        TitlesAndOrnamentsListMessage.ID = 1979;
        return TitlesAndOrnamentsListMessage;
    })(NetworkMessage);
    Protocol.TitlesAndOrnamentsListMessage = TitlesAndOrnamentsListMessage;
    var TitlesAndOrnamentsListRequestMessage = (function(_super) {
        __extends(TitlesAndOrnamentsListRequestMessage, _super);

        function TitlesAndOrnamentsListRequestMessage() {

            _super.call(this)
        }
        TitlesAndOrnamentsListRequestMessage.prototype.getMessageId = function() {
            return TitlesAndOrnamentsListRequestMessage.ID;
        };
        TitlesAndOrnamentsListRequestMessage.prototype.reset = function() {

        };
        TitlesAndOrnamentsListRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TitlesAndOrnamentsListRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TitlesAndOrnamentsListRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_TitlesAndOrnamentsListRequestMessage(output);
        };
        TitlesAndOrnamentsListRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TitlesAndOrnamentsListRequestMessage(input);
        };
        TitlesAndOrnamentsListRequestMessage.prototype.serializeAs_TitlesAndOrnamentsListRequestMessage = function(output) {

        };
        TitlesAndOrnamentsListRequestMessage.prototype.deserializeAs_TitlesAndOrnamentsListRequestMessage = function(input) {

        };
        TitlesAndOrnamentsListRequestMessage.ID = 5637;
        return TitlesAndOrnamentsListRequestMessage;
    })(NetworkMessage);
    Protocol.TitlesAndOrnamentsListRequestMessage = TitlesAndOrnamentsListRequestMessage;
    var TitleSelectedMessage = (function(_super) {
        __extends(TitleSelectedMessage, _super);

        function TitleSelectedMessage() {
            this.titleId = 0;
            _super.call(this)
        }
        TitleSelectedMessage.prototype.getMessageId = function() {
            return TitleSelectedMessage.ID;
        };
        TitleSelectedMessage.prototype.reset = function() {
            this.titleId = 0;
        };
        TitleSelectedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TitleSelectedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TitleSelectedMessage.prototype.serialize = function(output) {
            this.serializeAs_TitleSelectedMessage(output);
        };
        TitleSelectedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TitleSelectedMessage(input);
        };
        TitleSelectedMessage.prototype.serializeAs_TitleSelectedMessage = function(output) {
            if (this.titleId < 0) {
                throw new Error("Forbidden value (" + this.titleId + ") on element titleId.");
            }
            output.writeVarShort(this.titleId);
        };
        TitleSelectedMessage.prototype.deserializeAs_TitleSelectedMessage = function(input) {
            this.titleId = input.readVarUhShort();
            if (this.titleId < 0) {
                throw new Error("Forbidden value (" + this.titleId + ") on element of TitleSelectedMessage.titleId.");
            }
        };
        TitleSelectedMessage.ID = 9932;
        return TitleSelectedMessage;
    })(NetworkMessage);
    Protocol.TitleSelectedMessage = TitleSelectedMessage;
    var TitleSelectErrorMessage = (function(_super) {
        __extends(TitleSelectErrorMessage, _super);

        function TitleSelectErrorMessage() {
            this.reason = 0;
            _super.call(this)
        }
        TitleSelectErrorMessage.prototype.getMessageId = function() {
            return TitleSelectErrorMessage.ID;
        };
        TitleSelectErrorMessage.prototype.reset = function() {
            this.reason = 0;
        };
        TitleSelectErrorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TitleSelectErrorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TitleSelectErrorMessage.prototype.serialize = function(output) {
            this.serializeAs_TitleSelectErrorMessage(output);
        };
        TitleSelectErrorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TitleSelectErrorMessage(input);
        };
        TitleSelectErrorMessage.prototype.serializeAs_TitleSelectErrorMessage = function(output) {
            output.writeByte(this.reason);
        };
        TitleSelectErrorMessage.prototype.deserializeAs_TitleSelectErrorMessage = function(input) {
            this.reason = input.readByte();
            if (this.reason < 0) {
                throw new Error("Forbidden value (" + this.reason + ") on element of TitleSelectErrorMessage.reason.");
            }
        };
        TitleSelectErrorMessage.ID = 7106;
        return TitleSelectErrorMessage;
    })(NetworkMessage);
    Protocol.TitleSelectErrorMessage = TitleSelectErrorMessage;
    var TitleSelectRequestMessage = (function(_super) {
        __extends(TitleSelectRequestMessage, _super);

        function TitleSelectRequestMessage() {
            this.titleId = 0;
            _super.call(this)
        }
        TitleSelectRequestMessage.prototype.getMessageId = function() {
            return TitleSelectRequestMessage.ID;
        };
        TitleSelectRequestMessage.prototype.reset = function() {
            this.titleId = 0;
        };
        TitleSelectRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TitleSelectRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TitleSelectRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_TitleSelectRequestMessage(output);
        };
        TitleSelectRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TitleSelectRequestMessage(input);
        };
        TitleSelectRequestMessage.prototype.serializeAs_TitleSelectRequestMessage = function(output) {
            if (this.titleId < 0) {
                throw new Error("Forbidden value (" + this.titleId + ") on element titleId.");
            }
            output.writeVarShort(this.titleId);
        };
        TitleSelectRequestMessage.prototype.deserializeAs_TitleSelectRequestMessage = function(input) {
            this.titleId = input.readVarUhShort();
            if (this.titleId < 0) {
                throw new Error("Forbidden value (" + this.titleId + ") on element of TitleSelectRequestMessage.titleId.");
            }
        };
        TitleSelectRequestMessage.ID = 8478;
        return TitleSelectRequestMessage;
    })(NetworkMessage);
    Protocol.TitleSelectRequestMessage = TitleSelectRequestMessage;
    var ClientUIOpenedMessage = (function(_super) {
        __extends(ClientUIOpenedMessage, _super);

        function ClientUIOpenedMessage() {
            this.type = 0;
            _super.call(this)
        }
        ClientUIOpenedMessage.prototype.getMessageId = function() {
            return ClientUIOpenedMessage.ID;
        };
        ClientUIOpenedMessage.prototype.reset = function() {
            this.type = 0;
        };
        ClientUIOpenedMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ClientUIOpenedMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ClientUIOpenedMessage.prototype.serialize = function(output) {
            this.serializeAs_ClientUIOpenedMessage(output);
        };
        ClientUIOpenedMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ClientUIOpenedMessage(input);
        };
        ClientUIOpenedMessage.prototype.serializeAs_ClientUIOpenedMessage = function(output) {
            output.writeByte(this.type);
        };
        ClientUIOpenedMessage.prototype.deserializeAs_ClientUIOpenedMessage = function(input) {
            this.type = input.readByte();
            if (this.type < 0) {
                throw new Error("Forbidden value (" + this.type + ") on element of ClientUIOpenedMessage.type.");
            }
        };
        ClientUIOpenedMessage.ID = 4819;
        return ClientUIOpenedMessage;
    })(NetworkMessage);
    Protocol.ClientUIOpenedMessage = ClientUIOpenedMessage;
    var ClientUIOpenedByObjectMessage = (function(_super) {
        __extends(ClientUIOpenedByObjectMessage, _super);

        function ClientUIOpenedByObjectMessage() {
            this.uid = 0;
            _super.call(this)
        }
        ClientUIOpenedByObjectMessage.prototype.getMessageId = function() {
            return ClientUIOpenedByObjectMessage.ID;
        };
        ClientUIOpenedByObjectMessage.prototype.reset = function() {
            this.uid = 0;
        };
        ClientUIOpenedByObjectMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ClientUIOpenedByObjectMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ClientUIOpenedByObjectMessage.prototype.serialize = function(output) {
            this.serializeAs_ClientUIOpenedByObjectMessage(output);
        };
        ClientUIOpenedByObjectMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ClientUIOpenedByObjectMessage(input);
        };
        ClientUIOpenedByObjectMessage.prototype.serializeAs_ClientUIOpenedByObjectMessage = function(output) {
            _super.prototype.serializeAs_ClientUIOpenedMessage.call(this, output);
            if (this.uid < 0) {
                throw new Error("Forbidden value (" + this.uid + ") on element uid.");
            }
            output.writeVarInt(this.uid);
        };
        ClientUIOpenedByObjectMessage.prototype.deserializeAs_ClientUIOpenedByObjectMessage = function(input) {
            _super.prototype.deserializeAs_ClientUIOpenedMessage.call(this, input);
            this.uid = input.readVarUhInt();
            if (this.uid < 0) {
                throw new Error("Forbidden value (" + this.uid + ") on element of ClientUIOpenedByObjectMessage.uid.");
            }
        };
        ClientUIOpenedByObjectMessage.ID = 4274;
        return ClientUIOpenedByObjectMessage;
    })(ClientUIOpenedMessage);
    Protocol.ClientUIOpenedByObjectMessage = ClientUIOpenedByObjectMessage;
    var ProtocolRequired = (function(_super) {
        __extends(ProtocolRequired, _super);

        function ProtocolRequired() {
            this.version = "";
            _super.call(this)
        }
        ProtocolRequired.prototype.getMessageId = function() {
            return ProtocolRequired.ID;
        };
        ProtocolRequired.prototype.reset = function() {
            this.version = "";
        };
        ProtocolRequired.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ProtocolRequired.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ProtocolRequired.prototype.serialize = function(output) {
            this.serializeAs_ProtocolRequired(output);
        };
        ProtocolRequired.prototype.deserialize = function(input) {
            this.deserializeAs_ProtocolRequired(input);
        };
        ProtocolRequired.prototype.serializeAs_ProtocolRequired = function(output) {
            output.writeUTF(this.version);
        };
        ProtocolRequired.prototype.deserializeAs_ProtocolRequired = function(input) {
            this.version = input.readUTF();
        };
        ProtocolRequired.ID = 4849;
        return ProtocolRequired;
    })(NetworkMessage);
    Protocol.ProtocolRequired = ProtocolRequired;
    var LoginQueueStatusMessage = (function(_super) {
        __extends(LoginQueueStatusMessage, _super);

        function LoginQueueStatusMessage() {
            this.position = 0;
            this.total = 0;
            _super.call(this)
        }
        LoginQueueStatusMessage.prototype.getMessageId = function() {
            return LoginQueueStatusMessage.ID;
        };
        LoginQueueStatusMessage.prototype.reset = function() {
            this.position = 0;
            this.total = 0;
        };
        LoginQueueStatusMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        LoginQueueStatusMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        LoginQueueStatusMessage.prototype.serialize = function(output) {
            this.serializeAs_LoginQueueStatusMessage(output);
        };
        LoginQueueStatusMessage.prototype.deserialize = function(input) {
            this.deserializeAs_LoginQueueStatusMessage(input);
        };
        LoginQueueStatusMessage.prototype.serializeAs_LoginQueueStatusMessage = function(output) {
            if (this.position < 0 || this.position > 65535) {
                throw new Error("Forbidden value (" + this.position + ") on element position.");
            }
            output.writeShort(this.position);
            if (this.total < 0 || this.total > 65535) {
                throw new Error("Forbidden value (" + this.total + ") on element total.");
            }
            output.writeShort(this.total);
        };
        LoginQueueStatusMessage.prototype.deserializeAs_LoginQueueStatusMessage = function(input) {
            this.position = input.readUnsignedShort();
            if (this.position < 0 || this.position > 65535) {
                throw new Error("Forbidden value (" + this.position + ") on element of LoginQueueStatusMessage.position.");
            }
            this.total = input.readUnsignedShort();
            if (this.total < 0 || this.total > 65535) {
                throw new Error("Forbidden value (" + this.total + ") on element of LoginQueueStatusMessage.total.");
            }
        };
        LoginQueueStatusMessage.ID = 507;
        return LoginQueueStatusMessage;
    })(NetworkMessage);
    Protocol.LoginQueueStatusMessage = LoginQueueStatusMessage;
    var QueueStatusMessage = (function(_super) {
        __extends(QueueStatusMessage, _super);

        function QueueStatusMessage() {
            this.position = 0;
            this.total = 0;
            _super.call(this)
        }
        QueueStatusMessage.prototype.getMessageId = function() {
            return QueueStatusMessage.ID;
        };
        QueueStatusMessage.prototype.reset = function() {
            this.position = 0;
            this.total = 0;
        };
        QueueStatusMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        QueueStatusMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        QueueStatusMessage.prototype.serialize = function(output) {
            this.serializeAs_QueueStatusMessage(output);
        };
        QueueStatusMessage.prototype.deserialize = function(input) {
            this.deserializeAs_QueueStatusMessage(input);
        };
        QueueStatusMessage.prototype.serializeAs_QueueStatusMessage = function(output) {
            if (this.position < 0 || this.position > 65535) {
                throw new Error("Forbidden value (" + this.position + ") on element position.");
            }
            output.writeShort(this.position);
            if (this.total < 0 || this.total > 65535) {
                throw new Error("Forbidden value (" + this.total + ") on element total.");
            }
            output.writeShort(this.total);
        };
        QueueStatusMessage.prototype.deserializeAs_QueueStatusMessage = function(input) {
            this.position = input.readUnsignedShort();
            if (this.position < 0 || this.position > 65535) {
                throw new Error("Forbidden value (" + this.position + ") on element of QueueStatusMessage.position.");
            }
            this.total = input.readUnsignedShort();
            if (this.total < 0 || this.total > 65535) {
                throw new Error("Forbidden value (" + this.total + ") on element of QueueStatusMessage.total.");
            }
        };
        QueueStatusMessage.ID = 5179;
        return QueueStatusMessage;
    })(NetworkMessage);
    Protocol.QueueStatusMessage = QueueStatusMessage;
    var TrustStatusMessage = (function(_super) {
        __extends(TrustStatusMessage, _super);

        function TrustStatusMessage() {
            this.trusted = false;
            this.certified = false;
            _super.call(this)
        }
        TrustStatusMessage.prototype.getMessageId = function() {
            return TrustStatusMessage.ID;
        };
        TrustStatusMessage.prototype.reset = function() {
            this.trusted = false;
            this.certified = false;
        };
        TrustStatusMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        TrustStatusMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        TrustStatusMessage.prototype.serialize = function(output) {
            this.serializeAs_TrustStatusMessage(output);
        };
        TrustStatusMessage.prototype.deserialize = function(input) {
            this.deserializeAs_TrustStatusMessage(input);
        };
        TrustStatusMessage.prototype.serializeAs_TrustStatusMessage = function(output) {
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.trusted);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.certified);
            output.writeByte(_box0);
        };
        TrustStatusMessage.prototype.deserializeAs_TrustStatusMessage = function(input) {
            this.deserializeByteBoxes(input);
        };
        TrustStatusMessage.ID = 6289;
        return TrustStatusMessage;
    })(NetworkMessage);
    Protocol.TrustStatusMessage = TrustStatusMessage;
    var CheckFileMessage = (function(_super) {
        __extends(CheckFileMessage, _super);

        function CheckFileMessage() {
            this.filenameHash = "";
            this.type = 0;
            this.value = "";
            _super.call(this)
        }
        CheckFileMessage.prototype.getMessageId = function() {
            return CheckFileMessage.ID;
        };
        CheckFileMessage.prototype.reset = function() {
            this.filenameHash = "";
            this.type = 0;
            this.value = "";
        };
        CheckFileMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        CheckFileMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        CheckFileMessage.prototype.serialize = function(output) {
            this.serializeAs_CheckFileMessage(output);
        };
        CheckFileMessage.prototype.deserialize = function(input) {
            this.deserializeAs_CheckFileMessage(input);
        };
        CheckFileMessage.prototype.serializeAs_CheckFileMessage = function(output) {
            output.writeUTF(this.filenameHash);
            output.writeByte(this.type);
            output.writeUTF(this.value);
        };
        CheckFileMessage.prototype.deserializeAs_CheckFileMessage = function(input) {
            this.filenameHash = input.readUTF();
            this.type = input.readByte();
            if (this.type < 0) {
                throw new Error("Forbidden value (" + this.type + ") on element of CheckFileMessage.type.");
            }
            this.value = input.readUTF();
        };
        CheckFileMessage.ID = 2262;
        return CheckFileMessage;
    })(NetworkMessage);
    Protocol.CheckFileMessage = CheckFileMessage;
    var CheckFileRequestMessage = (function(_super) {
        __extends(CheckFileRequestMessage, _super);

        function CheckFileRequestMessage() {
            this.filename = "";
            this.type = 0;
            _super.call(this)
        }
        CheckFileRequestMessage.prototype.getMessageId = function() {
            return CheckFileRequestMessage.ID;
        };
        CheckFileRequestMessage.prototype.reset = function() {
            this.filename = "";
            this.type = 0;
        };
        CheckFileRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        CheckFileRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        CheckFileRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_CheckFileRequestMessage(output);
        };
        CheckFileRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_CheckFileRequestMessage(input);
        };
        CheckFileRequestMessage.prototype.serializeAs_CheckFileRequestMessage = function(output) {
            output.writeUTF(this.filename);
            output.writeByte(this.type);
        };
        CheckFileRequestMessage.prototype.deserializeAs_CheckFileRequestMessage = function(input) {
            this.filename = input.readUTF();
            this.type = input.readByte();
            if (this.type < 0) {
                throw new Error("Forbidden value (" + this.type + ") on element of CheckFileRequestMessage.type.");
            }
        };
        CheckFileRequestMessage.ID = 3787;
        return CheckFileRequestMessage;
    })(NetworkMessage);
    Protocol.CheckFileRequestMessage = CheckFileRequestMessage;
    var CheckIntegrityMessage = (function(_super) {
        __extends(CheckIntegrityMessage, _super);

        function CheckIntegrityMessage() {
            this.data = [];
            _super.call(this)
        }
        CheckIntegrityMessage.prototype.getMessageId = function() {
            return CheckIntegrityMessage.ID;
        };
        CheckIntegrityMessage.prototype.reset = function() {
            this.data = [];
        };
        CheckIntegrityMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        CheckIntegrityMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        CheckIntegrityMessage.prototype.serialize = function(output) {
            this.serializeAs_CheckIntegrityMessage(output);
        };
        CheckIntegrityMessage.prototype.deserialize = function(input) {
            this.deserializeAs_CheckIntegrityMessage(input);
        };
        CheckIntegrityMessage.prototype.serializeAs_CheckIntegrityMessage = function(output) {
            output.writeVarInt(this.data.length);
            for (var _i1 = 0; _i1 < this.data.length; _i1++) {
                output.writeByte(this.data[_i1]);
            }
        };
        CheckIntegrityMessage.prototype.deserializeAs_CheckIntegrityMessage = function(input) {
            var _val1 = 0;
            var _dataLen = input.readVarInt();
            for (var _i1 = 0; _i1 < _dataLen; _i1++) {
                _val1 = input.readByte();
                this.data.push(_val1);
            }
        };
        CheckIntegrityMessage.ID = 8389;
        return CheckIntegrityMessage;
    })(NetworkMessage);
    Protocol.CheckIntegrityMessage = CheckIntegrityMessage;
    var ClientKeyMessage = (function(_super) {
        __extends(ClientKeyMessage, _super);

        function ClientKeyMessage() {
            this.key = "";
            _super.call(this)
        }
        ClientKeyMessage.prototype.getMessageId = function() {
            return ClientKeyMessage.ID;
        };
        ClientKeyMessage.prototype.reset = function() {
            this.key = "";
        };
        ClientKeyMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ClientKeyMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ClientKeyMessage.prototype.serialize = function(output) {
            this.serializeAs_ClientKeyMessage(output);
        };
        ClientKeyMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ClientKeyMessage(input);
        };
        ClientKeyMessage.prototype.serializeAs_ClientKeyMessage = function(output) {
            output.writeUTF(this.key);
        };
        ClientKeyMessage.prototype.deserializeAs_ClientKeyMessage = function(input) {
            this.key = input.readUTF();
        };
        ClientKeyMessage.ID = 992;
        return ClientKeyMessage;
    })(NetworkMessage);
    Protocol.ClientKeyMessage = ClientKeyMessage;
    var RawDataMessage = (function(_super) {
        __extends(RawDataMessage, _super);

        function RawDataMessage() {
            this.content = new Buffer(32);
            _super.call(this)
        }
        RawDataMessage.prototype.getMessageId = function() {
            return RawDataMessage.ID;
        };
        RawDataMessage.prototype.reset = function() {
            this.content = new Buffer(32);
        };
        RawDataMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        RawDataMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        RawDataMessage.prototype.serialize = function(output) {
            this.serializeAs_RawDataMessage(output);
        };
        RawDataMessage.prototype.deserialize = function(input) {
            this.deserializeAs_RawDataMessage(input);
        };
        RawDataMessage.prototype.serializeAs_RawDataMessage = function(output) {
            output.writeVarInt(this.content.length);
            for (var _i1 = 0; _i1 < this.content.length; _i1++) {
                output.writeByte(this.content[_i1]);
            }
        };
        RawDataMessage.prototype.deserializeAs_RawDataMessage = function(input) {
            var _contentLen = input.readVarInt();
            input.readBytes(this.content, 0, _contentLen);
        };
        RawDataMessage.ID = 6253;
        return RawDataMessage;
    })(NetworkMessage);
    Protocol.RawDataMessage = RawDataMessage;
    var SystemMessageDisplayMessage = (function(_super) {
        __extends(SystemMessageDisplayMessage, _super);

        function SystemMessageDisplayMessage() {
            this.hangUp = false;
            this.msgId = 0;
            this.parameters = [];
            _super.call(this)
        }
        SystemMessageDisplayMessage.prototype.getMessageId = function() {
            return SystemMessageDisplayMessage.ID;
        };
        SystemMessageDisplayMessage.prototype.reset = function() {
            this.hangUp = false;
            this.msgId = 0;
            this.parameters = [];
        };
        SystemMessageDisplayMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        SystemMessageDisplayMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        SystemMessageDisplayMessage.prototype.serialize = function(output) {
            this.serializeAs_SystemMessageDisplayMessage(output);
        };
        SystemMessageDisplayMessage.prototype.deserialize = function(input) {
            this.deserializeAs_SystemMessageDisplayMessage(input);
        };
        SystemMessageDisplayMessage.prototype.serializeAs_SystemMessageDisplayMessage = function(output) {
            output.writeBoolean(this.hangUp);
            if (this.msgId < 0) {
                throw new Error("Forbidden value (" + this.msgId + ") on element msgId.");
            }
            output.writeVarShort(this.msgId);
            output.writeShort(this.parameters.length);
            for (var _i3 = 0; _i3 < this.parameters.length; _i3++) {
                output.writeUTF(this.parameters[_i3]);
            }
        };
        SystemMessageDisplayMessage.prototype.deserializeAs_SystemMessageDisplayMessage = function(input) {
            var _val3 = null;
            this.hangUp = input.readBoolean();
            this.msgId = input.readVarUhShort();
            if (this.msgId < 0) {
                throw new Error("Forbidden value (" + this.msgId + ") on element of SystemMessageDisplayMessage.msgId.");
            }
            var _parametersLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _parametersLen; _i3++) {
                _val3 = input.readUTF();
                this.parameters.push(_val3);
            }
        };
        SystemMessageDisplayMessage.ID = 3816;
        return SystemMessageDisplayMessage;
    })(NetworkMessage);
    Protocol.SystemMessageDisplayMessage = SystemMessageDisplayMessage;
    var AccountInformationsUpdateMessage = (function(_super) {
        __extends(AccountInformationsUpdateMessage, _super);

        function AccountInformationsUpdateMessage() {
            this.subscriptionEndDate = 0;
            _super.call(this)
        }
        AccountInformationsUpdateMessage.prototype.getMessageId = function() {
            return AccountInformationsUpdateMessage.ID;
        };
        AccountInformationsUpdateMessage.prototype.reset = function() {
            this.subscriptionEndDate = 0;
        };
        AccountInformationsUpdateMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        AccountInformationsUpdateMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        AccountInformationsUpdateMessage.prototype.serialize = function(output) {
            this.serializeAs_AccountInformationsUpdateMessage(output);
        };
        AccountInformationsUpdateMessage.prototype.deserialize = function(input) {
            this.deserializeAs_AccountInformationsUpdateMessage(input);
        };
        AccountInformationsUpdateMessage.prototype.serializeAs_AccountInformationsUpdateMessage = function(output) {
            if (this.subscriptionEndDate < 0 || this.subscriptionEndDate > 9007199254740990) {
                throw new Error("Forbidden value (" + this.subscriptionEndDate + ") on element subscriptionEndDate.");
            }
            output.writeDouble(this.subscriptionEndDate);
        };
        AccountInformationsUpdateMessage.prototype.deserializeAs_AccountInformationsUpdateMessage = function(input) {
            this.subscriptionEndDate = input.readDouble();
            if (this.subscriptionEndDate < 0 || this.subscriptionEndDate > 9007199254740990) {
                throw new Error("Forbidden value (" + this.subscriptionEndDate + ") on element of AccountInformationsUpdateMessage.subscriptionEndDate.");
            }
        };
        AccountInformationsUpdateMessage.ID = 3493;
        return AccountInformationsUpdateMessage;
    })(NetworkMessage);
    Protocol.AccountInformationsUpdateMessage = AccountInformationsUpdateMessage;
    var MailStatusMessage = (function(_super) {
        __extends(MailStatusMessage, _super);

        function MailStatusMessage() {
            this.unread = 0;
            this.total = 0;
            _super.call(this)
        }
        MailStatusMessage.prototype.getMessageId = function() {
            return MailStatusMessage.ID;
        };
        MailStatusMessage.prototype.reset = function() {
            this.unread = 0;
            this.total = 0;
        };
        MailStatusMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        MailStatusMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        MailStatusMessage.prototype.serialize = function(output) {
            this.serializeAs_MailStatusMessage(output);
        };
        MailStatusMessage.prototype.deserialize = function(input) {
            this.deserializeAs_MailStatusMessage(input);
        };
        MailStatusMessage.prototype.serializeAs_MailStatusMessage = function(output) {
            if (this.unread < 0) {
                throw new Error("Forbidden value (" + this.unread + ") on element unread.");
            }
            output.writeVarShort(this.unread);
            if (this.total < 0) {
                throw new Error("Forbidden value (" + this.total + ") on element total.");
            }
            output.writeVarShort(this.total);
        };
        MailStatusMessage.prototype.deserializeAs_MailStatusMessage = function(input) {
            this.unread = input.readVarUhShort();
            if (this.unread < 0) {
                throw new Error("Forbidden value (" + this.unread + ") on element of MailStatusMessage.unread.");
            }
            this.total = input.readVarUhShort();
            if (this.total < 0) {
                throw new Error("Forbidden value (" + this.total + ") on element of MailStatusMessage.total.");
            }
        };
        MailStatusMessage.ID = 9985;
        return MailStatusMessage;
    })(NetworkMessage);
    Protocol.MailStatusMessage = MailStatusMessage;
    var NewMailMessage = (function(_super) {
        __extends(NewMailMessage, _super);

        function NewMailMessage() {
            this.sendersAccountId = [];
            _super.call(this)
        }
        NewMailMessage.prototype.getMessageId = function() {
            return NewMailMessage.ID;
        };
        NewMailMessage.prototype.reset = function() {
            this.sendersAccountId = [];
        };
        NewMailMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        NewMailMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        NewMailMessage.prototype.serialize = function(output) {
            this.serializeAs_NewMailMessage(output);
        };
        NewMailMessage.prototype.deserialize = function(input) {
            this.deserializeAs_NewMailMessage(input);
        };
        NewMailMessage.prototype.serializeAs_NewMailMessage = function(output) {
            _super.prototype.serializeAs_MailStatusMessage.call(this, output);
            output.writeShort(this.sendersAccountId.length);
            for (var _i1 = 0; _i1 < this.sendersAccountId.length; _i1++) {
                if (this.sendersAccountId[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.sendersAccountId[_i1] + ") on element 1 (starting at 1) of sendersAccountId.");
                }
                output.writeInt(this.sendersAccountId[_i1]);
            }
        };
        NewMailMessage.prototype.deserializeAs_NewMailMessage = function(input) {
            var _val1 = 0;
            _super.prototype.deserializeAs_MailStatusMessage.call(this, input);
            var _sendersAccountIdLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _sendersAccountIdLen; _i1++) {
                _val1 = input.readInt();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of sendersAccountId.");
                }
                this.sendersAccountId.push(_val1);
            }
        };
        NewMailMessage.ID = 2732;
        return NewMailMessage;
    })(MailStatusMessage);
    Protocol.NewMailMessage = NewMailMessage;
    var HaapiApiKeyMessage = (function(_super) {
        __extends(HaapiApiKeyMessage, _super);

        function HaapiApiKeyMessage() {
            this.token = "";
            _super.call(this)
        }
        HaapiApiKeyMessage.prototype.getMessageId = function() {
            return HaapiApiKeyMessage.ID;
        };
        HaapiApiKeyMessage.prototype.reset = function() {
            this.token = "";
        };
        HaapiApiKeyMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        HaapiApiKeyMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        HaapiApiKeyMessage.prototype.serialize = function(output) {
            this.serializeAs_HaapiApiKeyMessage(output);
        };
        HaapiApiKeyMessage.prototype.deserialize = function(input) {
            this.deserializeAs_HaapiApiKeyMessage(input);
        };
        HaapiApiKeyMessage.prototype.serializeAs_HaapiApiKeyMessage = function(output) {
            output.writeUTF(this.token);
        };
        HaapiApiKeyMessage.prototype.deserializeAs_HaapiApiKeyMessage = function(input) {
            this.token = input.readUTF();
        };
        HaapiApiKeyMessage.ID = 6974;
        return HaapiApiKeyMessage;
    })(NetworkMessage);
    Protocol.HaapiApiKeyMessage = HaapiApiKeyMessage;
    var HaapiApiKeyRequestMessage = (function(_super) {
        __extends(HaapiApiKeyRequestMessage, _super);

        function HaapiApiKeyRequestMessage() {

            _super.call(this)
        }
        HaapiApiKeyRequestMessage.prototype.getMessageId = function() {
            return HaapiApiKeyRequestMessage.ID;
        };
        HaapiApiKeyRequestMessage.prototype.reset = function() {

        };
        HaapiApiKeyRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        HaapiApiKeyRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        HaapiApiKeyRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_HaapiApiKeyRequestMessage(output);
        };
        HaapiApiKeyRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_HaapiApiKeyRequestMessage(input);
        };
        HaapiApiKeyRequestMessage.prototype.serializeAs_HaapiApiKeyRequestMessage = function(output) {

        };
        HaapiApiKeyRequestMessage.prototype.deserializeAs_HaapiApiKeyRequestMessage = function(input) {

        };
        HaapiApiKeyRequestMessage.ID = 1761;
        return HaapiApiKeyRequestMessage;
    })(NetworkMessage);
    Protocol.HaapiApiKeyRequestMessage = HaapiApiKeyRequestMessage;
    var HaapiAuthErrorMessage = (function(_super) {
        __extends(HaapiAuthErrorMessage, _super);

        function HaapiAuthErrorMessage() {
            this.type = 0;
            _super.call(this)
        }
        HaapiAuthErrorMessage.prototype.getMessageId = function() {
            return HaapiAuthErrorMessage.ID;
        };
        HaapiAuthErrorMessage.prototype.reset = function() {
            this.type = 0;
        };
        HaapiAuthErrorMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        HaapiAuthErrorMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        HaapiAuthErrorMessage.prototype.serialize = function(output) {
            this.serializeAs_HaapiAuthErrorMessage(output);
        };
        HaapiAuthErrorMessage.prototype.deserialize = function(input) {
            this.deserializeAs_HaapiAuthErrorMessage(input);
        };
        HaapiAuthErrorMessage.prototype.serializeAs_HaapiAuthErrorMessage = function(output) {
            output.writeByte(this.type);
        };
        HaapiAuthErrorMessage.prototype.deserializeAs_HaapiAuthErrorMessage = function(input) {
            this.type = input.readByte();
            if (this.type < 0) {
                throw new Error("Forbidden value (" + this.type + ") on element of HaapiAuthErrorMessage.type.");
            }
        };
        HaapiAuthErrorMessage.ID = 4210;
        return HaapiAuthErrorMessage;
    })(NetworkMessage);
    Protocol.HaapiAuthErrorMessage = HaapiAuthErrorMessage;
    var HaapiBufferListMessage = (function(_super) {
        __extends(HaapiBufferListMessage, _super);

        function HaapiBufferListMessage() {
            this.buffers = [];
            _super.call(this)
        }
        HaapiBufferListMessage.prototype.getMessageId = function() {
            return HaapiBufferListMessage.ID;
        };
        HaapiBufferListMessage.prototype.reset = function() {
            this.buffers = [];
        };
        HaapiBufferListMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        HaapiBufferListMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        HaapiBufferListMessage.prototype.serialize = function(output) {
            this.serializeAs_HaapiBufferListMessage(output);
        };
        HaapiBufferListMessage.prototype.deserialize = function(input) {
            this.deserializeAs_HaapiBufferListMessage(input);
        };
        HaapiBufferListMessage.prototype.serializeAs_HaapiBufferListMessage = function(output) {
            output.writeShort(this.buffers.length);
            for (var _i1 = 0; _i1 < this.buffers.length; _i1++) {
                (this.buffers[_i1]).serializeAs_BufferInformation(output);
            }
        };
        HaapiBufferListMessage.prototype.deserializeAs_HaapiBufferListMessage = function(input) {
            var _item1 = null;
            var _buffersLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _buffersLen; _i1++) {
                _item1 = new BufferInformation();
                _item1.deserialize(input);
                this.buffers.push(_item1);
            }
        };
        HaapiBufferListMessage.ID = 875;
        return HaapiBufferListMessage;
    })(NetworkMessage);
    Protocol.HaapiBufferListMessage = HaapiBufferListMessage;
    var HaapiBufferListRequestMessage = (function(_super) {
        __extends(HaapiBufferListRequestMessage, _super);

        function HaapiBufferListRequestMessage() {

            _super.call(this)
        }
        HaapiBufferListRequestMessage.prototype.getMessageId = function() {
            return HaapiBufferListRequestMessage.ID;
        };
        HaapiBufferListRequestMessage.prototype.reset = function() {

        };
        HaapiBufferListRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        HaapiBufferListRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        HaapiBufferListRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_HaapiBufferListRequestMessage(output);
        };
        HaapiBufferListRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_HaapiBufferListRequestMessage(input);
        };
        HaapiBufferListRequestMessage.prototype.serializeAs_HaapiBufferListRequestMessage = function(output) {

        };
        HaapiBufferListRequestMessage.prototype.deserializeAs_HaapiBufferListRequestMessage = function(input) {

        };
        HaapiBufferListRequestMessage.ID = 8126;
        return HaapiBufferListRequestMessage;
    })(NetworkMessage);
    Protocol.HaapiBufferListRequestMessage = HaapiBufferListRequestMessage;
    var HaapiValidationMessage = (function(_super) {
        __extends(HaapiValidationMessage, _super);

        function HaapiValidationMessage() {
            this.action = 0;
            this.code = 0;
            _super.call(this)
        }
        HaapiValidationMessage.prototype.getMessageId = function() {
            return HaapiValidationMessage.ID;
        };
        HaapiValidationMessage.prototype.reset = function() {
            this.action = 0;
            this.code = 0;
        };
        HaapiValidationMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        HaapiValidationMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        HaapiValidationMessage.prototype.serialize = function(output) {
            this.serializeAs_HaapiValidationMessage(output);
        };
        HaapiValidationMessage.prototype.deserialize = function(input) {
            this.deserializeAs_HaapiValidationMessage(input);
        };
        HaapiValidationMessage.prototype.serializeAs_HaapiValidationMessage = function(output) {
            output.writeByte(this.action);
            output.writeByte(this.code);
        };
        HaapiValidationMessage.prototype.deserializeAs_HaapiValidationMessage = function(input) {
            this.action = input.readByte();
            if (this.action < 0) {
                throw new Error("Forbidden value (" + this.action + ") on element of HaapiValidationMessage.action.");
            }
            this.code = input.readByte();
            if (this.code < 0) {
                throw new Error("Forbidden value (" + this.code + ") on element of HaapiValidationMessage.code.");
            }
        };
        HaapiValidationMessage.ID = 8381;
        return HaapiValidationMessage;
    })(NetworkMessage);
    Protocol.HaapiValidationMessage = HaapiValidationMessage;
    var HaapiBuyValidationMessage = (function(_super) {
        __extends(HaapiBuyValidationMessage, _super);

        function HaapiBuyValidationMessage() {
            this.amount = 0;
            this.email = "";
            _super.call(this)
        }
        HaapiBuyValidationMessage.prototype.getMessageId = function() {
            return HaapiBuyValidationMessage.ID;
        };
        HaapiBuyValidationMessage.prototype.reset = function() {
            this.amount = 0;
            this.email = "";
        };
        HaapiBuyValidationMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        HaapiBuyValidationMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        HaapiBuyValidationMessage.prototype.serialize = function(output) {
            this.serializeAs_HaapiBuyValidationMessage(output);
        };
        HaapiBuyValidationMessage.prototype.deserialize = function(input) {
            this.deserializeAs_HaapiBuyValidationMessage(input);
        };
        HaapiBuyValidationMessage.prototype.serializeAs_HaapiBuyValidationMessage = function(output) {
            _super.prototype.serializeAs_HaapiValidationMessage.call(this, output);
            if (this.amount < 0 || this.amount > 9007199254740990) {
                throw new Error("Forbidden value (" + this.amount + ") on element amount.");
            }
            output.writeVarLong(this.amount);
            output.writeUTF(this.email);
        };
        HaapiBuyValidationMessage.prototype.deserializeAs_HaapiBuyValidationMessage = function(input) {
            _super.prototype.deserializeAs_HaapiValidationMessage.call(this, input);
            this.amount = input.readVarUhLong();
            if (this.amount < 0 || this.amount > 9007199254740990) {
                throw new Error("Forbidden value (" + this.amount + ") on element of HaapiBuyValidationMessage.amount.");
            }
            this.email = input.readUTF();
        };
        HaapiBuyValidationMessage.ID = 8752;
        return HaapiBuyValidationMessage;
    })(HaapiValidationMessage);
    Protocol.HaapiBuyValidationMessage = HaapiBuyValidationMessage;
    var HaapiCancelBidRequestMessage = (function(_super) {
        __extends(HaapiCancelBidRequestMessage, _super);

        function HaapiCancelBidRequestMessage() {
            this.id = 0;
            this.type = 0;
            _super.call(this)
        }
        HaapiCancelBidRequestMessage.prototype.getMessageId = function() {
            return HaapiCancelBidRequestMessage.ID;
        };
        HaapiCancelBidRequestMessage.prototype.reset = function() {
            this.id = 0;
            this.type = 0;
        };
        HaapiCancelBidRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        HaapiCancelBidRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        HaapiCancelBidRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_HaapiCancelBidRequestMessage(output);
        };
        HaapiCancelBidRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_HaapiCancelBidRequestMessage(input);
        };
        HaapiCancelBidRequestMessage.prototype.serializeAs_HaapiCancelBidRequestMessage = function(output) {
            if (this.id < 0 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarLong(this.id);
            output.writeByte(this.type);
        };
        HaapiCancelBidRequestMessage.prototype.deserializeAs_HaapiCancelBidRequestMessage = function(input) {
            this.id = input.readVarUhLong();
            if (this.id < 0 || this.id > 9007199254740990) {
                throw new Error("Forbidden value (" + this.id + ") on element of HaapiCancelBidRequestMessage.id.");
            }
            this.type = input.readByte();
            if (this.type < 0) {
                throw new Error("Forbidden value (" + this.type + ") on element of HaapiCancelBidRequestMessage.type.");
            }
        };
        HaapiCancelBidRequestMessage.ID = 512;
        return HaapiCancelBidRequestMessage;
    })(NetworkMessage);
    Protocol.HaapiCancelBidRequestMessage = HaapiCancelBidRequestMessage;
    var HaapiConfirmationMessage = (function(_super) {
        __extends(HaapiConfirmationMessage, _super);

        function HaapiConfirmationMessage() {
            this.kamas = 0;
            this.amount = 0;
            this.rate = 0;
            this.action = 0;
            this.transaction = "";
            _super.call(this)
        }
        HaapiConfirmationMessage.prototype.getMessageId = function() {
            return HaapiConfirmationMessage.ID;
        };
        HaapiConfirmationMessage.prototype.reset = function() {
            this.kamas = 0;
            this.amount = 0;
            this.rate = 0;
            this.action = 0;
            this.transaction = "";
        };
        HaapiConfirmationMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        HaapiConfirmationMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        HaapiConfirmationMessage.prototype.serialize = function(output) {
            this.serializeAs_HaapiConfirmationMessage(output);
        };
        HaapiConfirmationMessage.prototype.deserialize = function(input) {
            this.deserializeAs_HaapiConfirmationMessage(input);
        };
        HaapiConfirmationMessage.prototype.serializeAs_HaapiConfirmationMessage = function(output) {
            if (this.kamas < 0 || this.kamas > 9007199254740990) {
                throw new Error("Forbidden value (" + this.kamas + ") on element kamas.");
            }
            output.writeVarLong(this.kamas);
            if (this.amount < 0 || this.amount > 9007199254740990) {
                throw new Error("Forbidden value (" + this.amount + ") on element amount.");
            }
            output.writeVarLong(this.amount);
            if (this.rate < 0) {
                throw new Error("Forbidden value (" + this.rate + ") on element rate.");
            }
            output.writeVarShort(this.rate);
            output.writeByte(this.action);
            output.writeUTF(this.transaction);
        };
        HaapiConfirmationMessage.prototype.deserializeAs_HaapiConfirmationMessage = function(input) {
            this.kamas = input.readVarUhLong();
            if (this.kamas < 0 || this.kamas > 9007199254740990) {
                throw new Error("Forbidden value (" + this.kamas + ") on element of HaapiConfirmationMessage.kamas.");
            }
            this.amount = input.readVarUhLong();
            if (this.amount < 0 || this.amount > 9007199254740990) {
                throw new Error("Forbidden value (" + this.amount + ") on element of HaapiConfirmationMessage.amount.");
            }
            this.rate = input.readVarUhShort();
            if (this.rate < 0) {
                throw new Error("Forbidden value (" + this.rate + ") on element of HaapiConfirmationMessage.rate.");
            }
            this.action = input.readByte();
            if (this.action < 0) {
                throw new Error("Forbidden value (" + this.action + ") on element of HaapiConfirmationMessage.action.");
            }
            this.transaction = input.readUTF();
        };
        HaapiConfirmationMessage.ID = 2667;
        return HaapiConfirmationMessage;
    })(NetworkMessage);
    Protocol.HaapiConfirmationMessage = HaapiConfirmationMessage;
    var HaapiConfirmationRequestMessage = (function(_super) {
        __extends(HaapiConfirmationRequestMessage, _super);

        function HaapiConfirmationRequestMessage() {
            this.kamas = 0;
            this.ogrines = 0;
            this.rate = 0;
            this.action = 0;
            _super.call(this)
        }
        HaapiConfirmationRequestMessage.prototype.getMessageId = function() {
            return HaapiConfirmationRequestMessage.ID;
        };
        HaapiConfirmationRequestMessage.prototype.reset = function() {
            this.kamas = 0;
            this.ogrines = 0;
            this.rate = 0;
            this.action = 0;
        };
        HaapiConfirmationRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        HaapiConfirmationRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        HaapiConfirmationRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_HaapiConfirmationRequestMessage(output);
        };
        HaapiConfirmationRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_HaapiConfirmationRequestMessage(input);
        };
        HaapiConfirmationRequestMessage.prototype.serializeAs_HaapiConfirmationRequestMessage = function(output) {
            if (this.kamas < 0 || this.kamas > 9007199254740990) {
                throw new Error("Forbidden value (" + this.kamas + ") on element kamas.");
            }
            output.writeVarLong(this.kamas);
            if (this.ogrines < 0 || this.ogrines > 9007199254740990) {
                throw new Error("Forbidden value (" + this.ogrines + ") on element ogrines.");
            }
            output.writeVarLong(this.ogrines);
            if (this.rate < 0) {
                throw new Error("Forbidden value (" + this.rate + ") on element rate.");
            }
            output.writeVarShort(this.rate);
            output.writeByte(this.action);
        };
        HaapiConfirmationRequestMessage.prototype.deserializeAs_HaapiConfirmationRequestMessage = function(input) {
            this.kamas = input.readVarUhLong();
            if (this.kamas < 0 || this.kamas > 9007199254740990) {
                throw new Error("Forbidden value (" + this.kamas + ") on element of HaapiConfirmationRequestMessage.kamas.");
            }
            this.ogrines = input.readVarUhLong();
            if (this.ogrines < 0 || this.ogrines > 9007199254740990) {
                throw new Error("Forbidden value (" + this.ogrines + ") on element of HaapiConfirmationRequestMessage.ogrines.");
            }
            this.rate = input.readVarUhShort();
            if (this.rate < 0) {
                throw new Error("Forbidden value (" + this.rate + ") on element of HaapiConfirmationRequestMessage.rate.");
            }
            this.action = input.readByte();
            if (this.action < 0) {
                throw new Error("Forbidden value (" + this.action + ") on element of HaapiConfirmationRequestMessage.action.");
            }
        };
        HaapiConfirmationRequestMessage.ID = 7918;
        return HaapiConfirmationRequestMessage;
    })(NetworkMessage);
    Protocol.HaapiConfirmationRequestMessage = HaapiConfirmationRequestMessage;
    var HaapiConsumeBufferRequestMessage = (function(_super) {
        __extends(HaapiConsumeBufferRequestMessage, _super);

        function HaapiConsumeBufferRequestMessage() {

            _super.call(this)
        }
        HaapiConsumeBufferRequestMessage.prototype.getMessageId = function() {
            return HaapiConsumeBufferRequestMessage.ID;
        };
        HaapiConsumeBufferRequestMessage.prototype.reset = function() {

        };
        HaapiConsumeBufferRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        HaapiConsumeBufferRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        HaapiConsumeBufferRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_HaapiConsumeBufferRequestMessage(output);
        };
        HaapiConsumeBufferRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_HaapiConsumeBufferRequestMessage(input);
        };
        HaapiConsumeBufferRequestMessage.prototype.serializeAs_HaapiConsumeBufferRequestMessage = function(output) {

        };
        HaapiConsumeBufferRequestMessage.prototype.deserializeAs_HaapiConsumeBufferRequestMessage = function(input) {

        };
        HaapiConsumeBufferRequestMessage.ID = 7398;
        return HaapiConsumeBufferRequestMessage;
    })(NetworkMessage);
    Protocol.HaapiConsumeBufferRequestMessage = HaapiConsumeBufferRequestMessage;
    var HaapiSessionMessage = (function(_super) {
        __extends(HaapiSessionMessage, _super);

        function HaapiSessionMessage() {
            this.key = "";
            this.type = 0;
            _super.call(this)
        }
        HaapiSessionMessage.prototype.getMessageId = function() {
            return HaapiSessionMessage.ID;
        };
        HaapiSessionMessage.prototype.reset = function() {
            this.key = "";
            this.type = 0;
        };
        HaapiSessionMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        HaapiSessionMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        HaapiSessionMessage.prototype.serialize = function(output) {
            this.serializeAs_HaapiSessionMessage(output);
        };
        HaapiSessionMessage.prototype.deserialize = function(input) {
            this.deserializeAs_HaapiSessionMessage(input);
        };
        HaapiSessionMessage.prototype.serializeAs_HaapiSessionMessage = function(output) {
            output.writeUTF(this.key);
            output.writeByte(this.type);
        };
        HaapiSessionMessage.prototype.deserializeAs_HaapiSessionMessage = function(input) {
            this.key = input.readUTF();
            this.type = input.readByte();
            if (this.type < 0) {
                throw new Error("Forbidden value (" + this.type + ") on element of HaapiSessionMessage.type.");
            }
        };
        HaapiSessionMessage.ID = 3180;
        return HaapiSessionMessage;
    })(NetworkMessage);
    Protocol.HaapiSessionMessage = HaapiSessionMessage;
    var HaapiShopApiKeyMessage = (function(_super) {
        __extends(HaapiShopApiKeyMessage, _super);

        function HaapiShopApiKeyMessage() {
            this.token = "";
            _super.call(this)
        }
        HaapiShopApiKeyMessage.prototype.getMessageId = function() {
            return HaapiShopApiKeyMessage.ID;
        };
        HaapiShopApiKeyMessage.prototype.reset = function() {
            this.token = "";
        };
        HaapiShopApiKeyMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        HaapiShopApiKeyMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        HaapiShopApiKeyMessage.prototype.serialize = function(output) {
            this.serializeAs_HaapiShopApiKeyMessage(output);
        };
        HaapiShopApiKeyMessage.prototype.deserialize = function(input) {
            this.deserializeAs_HaapiShopApiKeyMessage(input);
        };
        HaapiShopApiKeyMessage.prototype.serializeAs_HaapiShopApiKeyMessage = function(output) {
            output.writeUTF(this.token);
        };
        HaapiShopApiKeyMessage.prototype.deserializeAs_HaapiShopApiKeyMessage = function(input) {
            this.token = input.readUTF();
        };
        HaapiShopApiKeyMessage.ID = 2762;
        return HaapiShopApiKeyMessage;
    })(NetworkMessage);
    Protocol.HaapiShopApiKeyMessage = HaapiShopApiKeyMessage;
    var HaapiShopApiKeyRequestMessage = (function(_super) {
        __extends(HaapiShopApiKeyRequestMessage, _super);

        function HaapiShopApiKeyRequestMessage() {

            _super.call(this)
        }
        HaapiShopApiKeyRequestMessage.prototype.getMessageId = function() {
            return HaapiShopApiKeyRequestMessage.ID;
        };
        HaapiShopApiKeyRequestMessage.prototype.reset = function() {

        };
        HaapiShopApiKeyRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        HaapiShopApiKeyRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        HaapiShopApiKeyRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_HaapiShopApiKeyRequestMessage(output);
        };
        HaapiShopApiKeyRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_HaapiShopApiKeyRequestMessage(input);
        };
        HaapiShopApiKeyRequestMessage.prototype.serializeAs_HaapiShopApiKeyRequestMessage = function(output) {

        };
        HaapiShopApiKeyRequestMessage.prototype.deserializeAs_HaapiShopApiKeyRequestMessage = function(input) {

        };
        HaapiShopApiKeyRequestMessage.ID = 6567;
        return HaapiShopApiKeyRequestMessage;
    })(NetworkMessage);
    Protocol.HaapiShopApiKeyRequestMessage = HaapiShopApiKeyRequestMessage;
    var HaapiTokenMessage = (function(_super) {
        __extends(HaapiTokenMessage, _super);

        function HaapiTokenMessage() {
            this.token = "";
            _super.call(this)
        }
        HaapiTokenMessage.prototype.getMessageId = function() {
            return HaapiTokenMessage.ID;
        };
        HaapiTokenMessage.prototype.reset = function() {
            this.token = "";
        };
        HaapiTokenMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        HaapiTokenMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        HaapiTokenMessage.prototype.serialize = function(output) {
            this.serializeAs_HaapiTokenMessage(output);
        };
        HaapiTokenMessage.prototype.deserialize = function(input) {
            this.deserializeAs_HaapiTokenMessage(input);
        };
        HaapiTokenMessage.prototype.serializeAs_HaapiTokenMessage = function(output) {
            output.writeUTF(this.token);
        };
        HaapiTokenMessage.prototype.deserializeAs_HaapiTokenMessage = function(input) {
            this.token = input.readUTF();
        };
        HaapiTokenMessage.ID = 3058;
        return HaapiTokenMessage;
    })(NetworkMessage);
    Protocol.HaapiTokenMessage = HaapiTokenMessage;
    var HaapiTokenRequestMessage = (function(_super) {
        __extends(HaapiTokenRequestMessage, _super);

        function HaapiTokenRequestMessage() {

            _super.call(this)
        }
        HaapiTokenRequestMessage.prototype.getMessageId = function() {
            return HaapiTokenRequestMessage.ID;
        };
        HaapiTokenRequestMessage.prototype.reset = function() {

        };
        HaapiTokenRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        HaapiTokenRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        HaapiTokenRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_HaapiTokenRequestMessage(output);
        };
        HaapiTokenRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_HaapiTokenRequestMessage(input);
        };
        HaapiTokenRequestMessage.prototype.serializeAs_HaapiTokenRequestMessage = function(output) {

        };
        HaapiTokenRequestMessage.prototype.deserializeAs_HaapiTokenRequestMessage = function(input) {

        };
        HaapiTokenRequestMessage.ID = 3174;
        return HaapiTokenRequestMessage;
    })(NetworkMessage);
    Protocol.HaapiTokenRequestMessage = HaapiTokenRequestMessage;
    var HaapiValidationRequestMessage = (function(_super) {
        __extends(HaapiValidationRequestMessage, _super);

        function HaapiValidationRequestMessage() {
            this.transaction = "";
            _super.call(this)
        }
        HaapiValidationRequestMessage.prototype.getMessageId = function() {
            return HaapiValidationRequestMessage.ID;
        };
        HaapiValidationRequestMessage.prototype.reset = function() {
            this.transaction = "";
        };
        HaapiValidationRequestMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        HaapiValidationRequestMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        HaapiValidationRequestMessage.prototype.serialize = function(output) {
            this.serializeAs_HaapiValidationRequestMessage(output);
        };
        HaapiValidationRequestMessage.prototype.deserialize = function(input) {
            this.deserializeAs_HaapiValidationRequestMessage(input);
        };
        HaapiValidationRequestMessage.prototype.serializeAs_HaapiValidationRequestMessage = function(output) {
            output.writeUTF(this.transaction);
        };
        HaapiValidationRequestMessage.prototype.deserializeAs_HaapiValidationRequestMessage = function(input) {
            this.transaction = input.readUTF();
        };
        HaapiValidationRequestMessage.ID = 3277;
        return HaapiValidationRequestMessage;
    })(NetworkMessage);
    Protocol.HaapiValidationRequestMessage = HaapiValidationRequestMessage;
    var ClientYouAreDrunkMessage = (function(_super) {
        __extends(ClientYouAreDrunkMessage, _super);

        function ClientYouAreDrunkMessage() {

            _super.call(this)
        }
        ClientYouAreDrunkMessage.prototype.getMessageId = function() {
            return ClientYouAreDrunkMessage.ID;
        };
        ClientYouAreDrunkMessage.prototype.reset = function() {

        };
        ClientYouAreDrunkMessage.prototype.unpack = function(param1, param2) {
            this.deserialize(param1);
        }
        ClientYouAreDrunkMessage.prototype.pack = function(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        };
        ClientYouAreDrunkMessage.prototype.serialize = function(output) {
            this.serializeAs_ClientYouAreDrunkMessage(output);
        };
        ClientYouAreDrunkMessage.prototype.deserialize = function(input) {
            this.deserializeAs_ClientYouAreDrunkMessage(input);
        };
        ClientYouAreDrunkMessage.prototype.serializeAs_ClientYouAreDrunkMessage = function(output) {
            _super.prototype.serializeAs_DebugInClientMessage.call(this, output);
        };
        ClientYouAreDrunkMessage.prototype.deserializeAs_ClientYouAreDrunkMessage = function(input) {
            _super.prototype.deserializeAs_DebugInClientMessage.call(this, input);
        };
        ClientYouAreDrunkMessage.ID = 1921;
        return ClientYouAreDrunkMessage;
    })(DebugInClientMessage);
    Protocol.ClientYouAreDrunkMessage = ClientYouAreDrunkMessage;
})(Protocol || (Protocol = {}));
module.exports = Protocol